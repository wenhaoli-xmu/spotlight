{"pred": "   private final transient JKademliaRoutingTable routingTable;\n    private final transient JKademliaStorageEntry storageEntry;\n\n    private final transient Timer timer;\n\n    private final transient int maxConcurrencyMessagesTransiting;\n\n    private final transient", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       // Load the effects from the assets\n        AssetManager assetManager = activity.getAssets();\n        InputStream is = assetManager.open(\"effects.json\");\n        JSONObject json = new JSONObject(new InputStreamReader(is));\n        JSONArray effects = json.get", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "   class Cipher1(Cipher):  # noqa: D101\n        key_schedule = KeySchedule1\n        encryption = MyFunction\n        rounds = 1\n\n        def __new__(cls, *args, **options):\n            return super().__", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   public EffectManager(Activity activity) {\n        mActivity = activity;\n        mParameterListView = (ViewGroup) mActivity.getLayoutInflater().inflate(R.layout.effect_parameter_list, null);\n        mParameterListAdapter = new EffectParameterListAdapter(activity, R.layout", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "       commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(AddTagCommand.class, AddTagEvent::from", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "   public TaskRunnerContainer(TaskProperties taskProperties, TaskMetaInfoManager taskMetaInfoManager) {\n        this.taskFactory = new TaskFactory(taskProperties);\n        this.taskAPI = new TaskAPI(taskProperties, taskMetaInfoManager);\n        this.globalRateLimiter = new", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tList<Problem> problems = new ArrayList<>();\n\t\t\tCounter counter = new Counter();\n\t\t\tStream<Path> files = walk(args.vault());\n\t\t\tfiles.filter(isRegularFile()).map(File::getName).forEach(name -> {", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           // notify the observer\n            // notify the observer\n            // notify the observer\n            // notify the observer\n            // notify the observer\n            // notify the observer\n            // notify the observer\n            // notify the observer\n            // notify the observer\n            // notify the observer\n            // notify the", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new SignRequest(SERVER_CHALLENGE_SIGN, USER_PUBLIC_KEY_SIGN_HEX,", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "   def placeOriginate(self, route):\n        #print 'placeOriginate', route\n        if self.uaO == None:\n            self.uaO = UA(self.global_config, event_cb = self.recvEventO, conn_cbs = (self", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "\nclass FlagList(Signature):\nNext line of code:\n\n\nclass ByteFlag(Signature):\nNext line of code:\n\n\nclass Boolean(Signature):\nNext line of code:\n\n\nclass CreationTime(Signature):\nNext line of code:\n\n", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": " def convert_ast_constraint(self, ast_node):\n    if ast_node.kind == Expr.CONSTANT:\n      return Const.fromValue(ast_node.data)\n    elif ast_node.kind == Expr.REF:\n      return Ref.from", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               Uri uri = Uri.parse(url);\n                intent.setData(uri);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static boolean useInternPlayer(TDActivity activity) {\n        return activity.getApplicationContext().getPackageManager", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       PostLocationDataBody data = new PostLocationDataBody(AppSettings.getLogin(), latitude, longitude,\n                AppSettings.getFindPeopleMessage(), AppSettings.getUserEmail(), AppSettings.getUserName(),\n                AppSettings.getUserAvatarUrl());\n        OkHttp", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "   def test_invalid_args(self):\n        ''' Invalid arguments. '''\n        with self.assertRaises(TypeError):\n            InterLayerPipeline(InputLayer, ConvLayer, FCLayer, PoolingLayer)\n        with self.assertRaises(TypeError", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   def __new__(cls):\n        init_called = True\n        return super().__new__(cls)\n\n    class User(BaseModel):\n        id = Column(String, primary_key=True)\n        name = Column(String)\n        email = Column(String)\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "   for result in self[1].select(context):\n        if not isinstance(result, (tuple, XPathNode)) and not hasattr(result, 'tag'):\n            yield result\n\n\n@method(infix('+', bp=16))\ndef evaluate_add", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new Marble", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "   private Movie movie;\n    private List<Trailer> trailers;\n    private List<Movie> similarMovies;\n    private MovieDetails movieDetails;\n    private Unbinder unbinder;\n\n    @BindView(R.id.movie_title) TextView movieTitle", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               writeResponse(SUCCESS, correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(FAILURE, correlationId);\n            } catch (MBeanException e) {\n                writeResponse(FAILURE, correlationId);\n            } catch (Ref", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       await wild_report.add_reaction(MyEmojis.THUMBS_UP)\n        await wild_report.add_reaction(MyEmojis.THUMBS_DOWN)\n\n        await wild_report.add_reaction(MyEmojis.", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   if c['vocab_text']:\n        vocab_text = vocab.get_text_vocabulary()\n    else:\n        vocab_text = None\n\n    # Initialize model\n    model = NLISimple(vocab=v", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n  assert doppler.amplitude_mps == 50.\n  assert doppler.period_s == 3.\n\n\ndef test_params_encoder_gps():\n  parser", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n               ", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "   def test_release(self):\n        assert not self.redis.exists(self.redlock.key)\n        self.redlock.acquire()\n        assert self.redlock.locked()\n        self.redlock.release()\n        assert not self.redlock.", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "   def get_subsound(self, offset, offset_type, name):\n        \"\"\"Get a sub-sound from the sound.\n\n        :param int offset: Offset value.\n        :param TIMEUNIT offset_type: Offset unit type.\n        :param str name", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "   def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.calg = 0x01  # ZIP\n\n    def compress(self, data):\n        if self.calg == 0x0", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "   #cell intensity and size measurements\n    findCellIntensityParameter = getParameter(detectSpotsParameter, \"findCellIntensityParameter\", findCellIntensityParameter);\n    findCellSizeParameter = getParameter(detectSpotsParameter, \"findCellSizeParameter\", findCell", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "       Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 200f);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume /", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           while (transactionIterator.hasNext()) {\r\n                printer.print(transactionIterator.next());\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n        }\r\n    }\r\n    private boolean checkDirectoryValid(File directory) throws IOException {\r\n", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "   public void postProcess(T anyContext) {\n        // For each instance of data generation generate a new id.\n        id = String.format(\"kill_%s_%s_%s_%s\", dataSource, interval.getStartTime(), interval.getEndTime(), new DateTime", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "   def decrypt(self, message: FinTSMessage):\n        raise NotImplemented()\n\n    def sign_prepare(self, message: FinTSMessage):\n        raise NotImplemented()\n\n    def sign_commit(self, message: FinTSMessage):\n        raise", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           if (env.regs[i].isCombExp()) {\n                                env.numCombExpCheck++;\n                            }\n                        }\n                    }\n                } // USE_SUBEXP_CALL\n            } // USE_CEC\n       ", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "   url(r'^new-package$', NewPackageView.as_view(), name=\"new-package\"),\n    url(r'^update-package$', UpdatePackageView.as_view(), name=\"update-package\"),\n    url(r'^new-language$', New", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tpublic ResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData) {\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = tags;\n\t\t", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self._storage_type = storage_type\n        return self\n\n    def get_db_name(self):\n        return self._db_name\n\n    def get_storage_type(self):\n        return self._storage_type\n\n#\n# DB OPEN\n#", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public GivenArgumentWhenSteps<$SystemUnderTest, $Argument> andArgument(Checke...\n\n    public GivenArgumentWhenSteps<$SystemUnderTest, $Argument> andArgument(Checke...\n\n    public GivenArgumentWhenSteps<$SystemUnderTest, $Argument>", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "     try {\n        process.waitFor();\n      } catch (InterruptedException e) {\n        throw new IosDeviceException(RealDeviceImpl.this, e);\n      }\n\n      if (process.exitCode() != 0) {\n        throw new IosDeviceException", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (textColor == Color.BLACK) {\n\t\t\ttextColor = Color.WHITE;\n\t\t} else {\n\t\t\ttextColor = Color.BLACK;\n\t\t}\n\t}\n\t\n\tpublic void setThemer() {\n\t\t", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = Message.parseFromXml(xml);\n\t\tif (message != null) {\n\t\t\tString fromUserName = message.FromUserName;\n\t\t\tString toUserName = message.ToUserName;\n\t\t\tString messageType = message.MsgType;\n\t", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   # 如果该 apk 文件存在，则直接返回\n    if os.path.exists(file_path):\n        return\n\n    # 如果该 apk 文件不存在，则创建一个新的 apk 文件", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   async def cmd_raidcity(self, ctx, *city):\n        \"\"\"\n        **!raid-city [city]** - sets the city for the raid party.\n\n        \"\"\"\n\n        await self.get_raid_party_for_channel(ctx)\n\n\n", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertTrue(date_string_to_date(\"25/11/2015\") == datetime.date(2015, 11, 25))\n        self.assertTrue(date_string_to_date(\"11/12/", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       persistence_actor = PersistenceActor(config_file)\n        persistence_actor.start()\n        gevent.sleep(1)\n\n        if honeypot_first:\n            # Honeypot message first\n            honeypot_session = Hone", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           Picture picture = mPictures.get(position);\n                            String shareUrl = ConstantString.DATA_IMAGE_URL + picture.getPics()[0];\n                            ShareUtil.shareImage(mActivity, shareUrl, picture.getComment_author(), picture.getComment", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\toutdata = np.column_stack((positive_data,negative_data))\n\t\t\t\t\toutdata = np.column_stack((outdata,-np.log10(1-positive_data)))\n\t\t\t\t\toutdata = np", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               ContentProviderSaver.class,\n                ContentProviderReader.class,\n                HomeFragment.class,\n                InstallDependenciesDialog.class,\n                InstallSurveyDependencies.class,\n                InstallSurveyDependenciesFragment.class,\n                MainActivityOhmletsTest.class,\n", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "       self.update_hlen()\n\n        return self\n\n    def update_hlen(self):\n        self.header.length = len(self.packet)\n\n    def parse(self, packet):\n        super(SignatureV4, self).parse(packet)\n", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   else:\n        raise self.wrong_context(\"'.' shortcut only works in schema context\")\n\n\n###\n# Unary operators\n@method('!')\ndef not_expression(self, context=None):\n    if self:\n        return not self.evaluate(", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": " def __init__(self, next_provider, sink_properties, global_properties):\n    super(HeapBalancerSink, self).__init__(next_provider, sink_properties, global_properties)\n    self.heap = Heap()\n    self.heap_", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send(b'11:hello world@', protocol=protocol)\n        protocol.send_string.assert_called_once_with('11:hello world@')\n\n    def test_send_message_with_bad_length(self):\n        \"\"\"\n", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       // statement\n        StatementExecution se = (StatementExecution) qe;\n        assertTrue(se.isSuccess());\n        assertTrue(se.isBatch());\n        assertTrue(\"is prepared\", se.getPrepareds().size() == 1);\n        assertTrue(\"", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testPreparedCount() {\n        ProxyTestDataSource ds = new Pro", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "   def _createLinkADRRequest(self, device):\n        \"\"\"Creates a Link ADR request message.\n        \n        Args:\n            device (Device): The device for which the request is being sent.\n        \n        Returns:\n            A Link ADR request message.\n", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "   def update_log_file(self, logger: logging.Logger) -> None:\n        \"\"\"\n        Update the log file output\n\n        Parameters\n        ----------\n        logger: logging.Logger\n            Logger\n        \"\"\"\n        if logger.handlers:\n            self.", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "def IEEE802154_unpack(data):\n    # data is a bytes object\n    # return a tuple of (type, data)\n    # type is a string from Type_dict\n    # data is the unpacked data\n    #\n    # check if", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       DatabaseManager.INSTANCE.getChatDAO().getChat(getActivity(), chat.getId(), new GetTask<Chat>() {\n            @Override\n            public void onSuccess(Chat chat) {\n                ChatSettingsInfo.this.chat = chat;\n               ", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass HITANS8(H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "           # Compute the intensity sum done on the previous frame\n            self.computeIntensitySum()\n\n\n        # Save the picks\n        for pick in self.picks:\n\n            # Get rolling shutter corrected frame number\n            frame_no = self.getRolling", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       // Get the list of public rooms from the server\n        LoginRestClient loginRestClient = new LoginRestClient(getApplicationContext());\n        loginRestClient.getPublicRooms(new ApiCallback<List<PublicRoom>>() {\n            @Override\n            public void onSuccess(List", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "   async def cog_check(self, ctx):\n        pass\n\n    async def cog_load(self):\n        pass\n\n    async def cog_unload(self):\n        pass\n\n    async def cog_start(self):\n        pass\n\n   ", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(raw_bp_graphs[ID_SMALLEST],\n                                        target_sequences,\n                                        phylogeny,\n                                        synteny_sizes[ID_SMALLEST])", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockLockerCommand(this), this);\n        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "               }\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n        }\n    }\n\n    private boolean shouldInit() {\n        //TODO: 在这里实现 MiPush 的初始化����", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<String>>(\n                SET_STRING));\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESP", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public PersonalVulnsWindow() {\n        initComponents();\n        setTitle(\"Personal Vulnerabilities\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        // set up the tree\n        TreeModel model = new DefaultTreeModel();\n", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   private void createBreakdownChartPanelMulti(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, true", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.isAckRequested()) {\n            ackManager.onAck(client, packet);\n        }\n\n        if (packet.getType() == PacketType.EVENT) {\n            handleEvent(packet, client, transport);\n       ", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "     lMS.addTrack(createVideoTrack(appRtcClient.videoConstraints(), \"video\"));\n      }\n      videoSource = new VideoSource(lMS.nativeStream);\n      videoSource.dispose();\n      videoSourceStopped = false;\n    }\n\n    {", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_BACKOFF_MS, -1L);\n            contentValues.put(JobStorage.COLUMN_BACKOFF_POLICY, \"\");\n\n            return contentValues;\n        }\n\n        protected ContentValues createJob", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // Set up the activity\n        setTitle(R.string.settings_title);\n        // Set up the preferences\n        addPreferencesFromResource(R.xml.preferences", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   # now the system is ready to be used\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "   def determine_executable(self, desktop_file):\n        raise NotImplementedError('determine_executable not implemented')\n\n    def find_desktop_file(self):\n        raise NotImplementedError('find_desktop_file not implemented')\n\n    def", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   Iterable<Board> its = SMTHHelper.getInstance().wService.getAllBoards().flatMap(new Function<ResponseBody, Observable<Board>>() {\n      @Override public Observable<Board> apply(@NonNull ResponseBody responseBody) throws Exception {\n        try {\n         ", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       // Load users from database\n        DatabaseManager.INSTANCE.getUserDAO().getAll().enqueue(new Callback<List<User>>() {\n            @Override\n            public void onResponse(Call<List<User>> call, Response<List<User>> response) {\n", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tif (testDataFactories != null && testDataFactories.size() > 0) {\n\t    // generate test-data\n\t    for (ITestDataFactory factory : testDataFactories) {\n\t\tif (factory != null) {\n\t\t    // generate test", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       fdm_data = FlightDataMessage()\n        fdm_data.time = 1000000000\n        fdm_data.gps.latitude = 0\n        fdm_data.gps.longitude = 0\n        f", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           showResponse = true;\n            textareaMessage.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_HTML);\n            textareaMessage.setEditable(true);\n            textareaMessage.setLineWrap(true);\n            textareaMessage.set", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACTIVE\", None, ready),", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   def save(self, filething=None, v1=1, v2_version=4, v23_sep='/', padding=None):\n        \"\"\"save(filething=None, v1=1, v2_version=4, v23_sep='/", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\n\n      return null;\n    }\n\n    visitProxOp(new VisitOrd3(n), query);\n\n    return null;\n  }\n\n  public void visit", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new GaussBlurTransformation(20),\n                    new GaussianBlurTransformation(20),\n                    new HistogramTransformation(),\n                    new LevelsTransformation(),\n                   ", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "       if self._header[1] == 1:\n            # Parse the error\n            exception_class = b''\n            exception_message = b''\n\n        else:\n            raise PyOrientBadMethodCallException(\n                \"Invalid message format\", [])\n\n        raise Py", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n    if not api.get_data(**args):\n        print(\"No data returned.\")\n        return None\n\n    fmt = StdoutFormatter(\"10s\", \"6s\", \"6s\", \"", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\t// create a new gallery album\n\t\t\t\tGalleryAlbum album = new GalleryAlbum();\n\t\t\t\talbum.setId( proxy.getId() );\n\t\t\t\talbum.setTitle( proxy.getTitle() );\n\t\t\t\talbum", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   assert dump_key(user) == user_key\n\n\ndef test_extract_key(engine):\n    user = User(id=\"foo\")\n    key = {\"id\": {\"S\": \"foo\"}}\n    assert extract_key(user) == key\n\n\ndef test", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new Percentage(10), // 10% complete\n        new Fraction(10), // 10% done\n        new Spinner(\"-\"), // spinner\n        new Status(\"\"), // status\n        new TaskName(\"Task 1\"), // task name\n       ", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static <T> T tag(Class<T> clazz, String name, Object value) {\n\t\treturn clazz.cast(PageAttributeFactory.tag(name, value));\n\t}\n\n\n\tpublic static <T> T tag(Class<T> clazz,", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "   def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    def create_event(self, name, description, severity, impact, tags):\n        params = {\"", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /////////////////////////////////////////////////////////////////////////////\n    // CallableBatchExecutionAssertions\n    /////////////////////////////////////////////////////////////////////////////", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           WallpaperApplyTask.create(this).execute(mWallpaper.getURL());\n        } else if (id == R.id.menu_cancel) {\n            WallpaperPropertiesLoaderTask.create(this).execute(mWallpaper.getURL());\n        }\n", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private static final int MAX_DEPTH = 50; // arbitrary limit on depth of recursion\n\n  private static final int MAX_TOKEN_LENGTH = 100; // arbitrary limit on length of token strings\n\n  private static final int MAX_BOOST_DEP", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif not os.path.isfile(args.genotype):\n\t\t\traise ValueError('Genotype file does not exist: {}'.format(args.genotype))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       # filenameToDatetime(self.vid_path)\n\n        # print(filenameToDatetime(self.vid_path))\n\n        # self.beginning_datetime = datetime.fromtimestamp(filenameToDatetime(self.vid_path))\n\n        # print(self", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   # 3. background\n    BKG = np.random.randn(POS.shape[0], 3) * 0.1 + 0.5\n    BKG = np.maximum(BKG, -0.5)\n\n    # 4", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tPacketBase packet = new PacketConfigSync();\n\t\tpacket.pack(IByteIO.INSTANCE);\n\t\tplayer.sendPacket(packet);\n\t}\n\n\tpublic static void sync(EntityPlayer player)\n\t{\n\t\tPacketBase", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       comments = Comment.objects.filter(post=post)\n        comments = chain(comments, Comment.objects.filter(parent=post))\n        comments = sorted(comments, key=lambda x: x.created, reverse=True)\n        comments = list(comments)\n        return render", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tISelectionProvider provider = getSite().getSelectionProvider();\n\t\t\t\t\t\tif (provider != null && provider.isSelectionValid()) {\n\t\t\t\t\t\t\tprovider.addSelectionChangedListener(new ISelectionChangedListener() {\n\t\t\t", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = 0x01\n\n    def parse(self, packet):\n        super(RevocationKey, self).parse(packet)\n        self.", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "       if is_processing_instruction_node(item):\n            yield item\n\ndef is_processing_instruction_node(obj: Any) -> bool:\n    return hasattr(obj, 'tag') and callable(obj.tag) and obj.tag.__name__ == '", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "def getAS2PuffleString(client, puffles):\n    puffles_as2_str = list()\n    for puffle in puffles:\n        # ...\n\nTimeline/Handlers/Puffle.py\ndef handlePuffleWalk(client,", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   fig = runner.run_peri(P, H, I, size=8, cmap_abs='bone', cmap_diff='RdBu', incsize=18.0, orientation=None, vrange_img=1.0, vrange_diff=0.", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "   def compile_information_arguments(self) -> List[CompileInformationArguments]:\n        \"\"\"\n        Generates arguments for the compile_information function\n\n        See Also\n        --------\n        :func:`~montreal_forced_aligner.alignment.multiprocessing.", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   # Compute the distortion coefficients\n    platepar.distortion_coeff = computeDistortionCoeff(platepar.RA_d, platepar.dec_d, platepar.JD, \\\n        platepar.lat, platepar.lon, platepar", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);\n        contentValues.put(JobStorage.COLUMN_EXACT, validInterval);\n        contentValues.put(JobStorage.COLUMN_ID, 1);\n", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       // Get the list of users from the DAO\n        List<User> users = UserDAO.INSTANCE.getAll();\n\n        // Initialize the adapter\n        mDelAdapter = new UserAdapter(getActivity(), users);\n\n        // Set the adapter for the list view\n       ", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       fields = ['indicator', 'target', 'area']\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n    class Meta:\n        model = AreaType\n        fields = ['code', 'name']\n\n\nclass AreaFilter(django_filters.FilterSet):\n", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           GoogleAnalyticsSender.getInstance(getContext()).send(\"load_data\");\n        }\n    }\n\n    private AdapterView.OnItemClickListener itemClickListener(ProduceData produceData) {\n        return new AdapterView.OnItemClickListener() {\n            @Override\n            public", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "           @Override\n            protected void onSuccess(final Channel channel) {\n                context.setChannel(channel);\n                context.setConnectionState(ConnectedConnectionState.class);\n                notifyConnectionListener(context.getConnectionListener());\n            }\n        });\n\n        return deferred.", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "           new RegisterFragment().onPostRegisterExecute(success, email, password, message));\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final int k; // number of nearest neighbors to consider for emission probabilities\n    private final int t; // time step for HMM\n    private final AtomicInteger[][] transitionProbs; // transition probabilities for HMM\n    private final AtomicInteger[][]emissionProbs", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private List<String> dataList = new ArrayList<>();\n    private List<Integer> checkedPositions = new ArrayList<>();\n\n    public DropMenuAdapter(Context context) {\n        this.mContext = context;\n    }\n\n    public void setDataList(List<String> data", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      '--message-type', 'one']\n  args = parser.", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "   def _render_stroke(self):\n        stroke = self.style.stroke\n        stroke_width = self.style.stroke_width\n\n        is_miter = self.style.stroke_linejoin == 'miter'\n\n        miter_limit = self.style.", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\ttry {\n\t\t\t\t\ta = IconPackManager.getApp(data);\n\t\t\t\t\tif (a != null) {\n\t\t\t\t\t\tapps.add(a);\n\t\t\t\t\t\tneedSave = true;\n\t\t", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (isOpsNeed2Add) {\n                    // do something\n                    Log.d(TAG, \"add ops action\");\n                }\n\n                if (isAppSetNeed2Add) {\n                    // do something\n                    Log.d(TAG", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.duration = np.linalg.norm(self.end_vect - self.beg_vect)\n\n        # Compute solar longitude of the beginning\n        self.lasun = np.arctan2(self.end_vect[0], self.end_", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tString name = fhead.ID().getText();\n\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(name);\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "   // Visit the children of a node\n    void visitChildren(Node node);\n\n    // Visit the siblings of a node\n    void visitSiblings(Node node);\n\n    // Visit the parent of a node\n    void visitParent(Node node);\n\n   ", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "   @Override\n    public void init(ProcessingEnvironment processingEnvironment) {\n        super.init(processingEnvironment);\n        this.typeUtils = processingEnvironment.getTypeUtils();\n        this.elementUtils = processingEnvironment.getElementUtils();\n        this.messager = processingEnvironment.getMess", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class).toProvider(new Provider<GerritCheckoutProvider>() {\n            @Override\n            public GerritCheckoutProvider get() {\n                return new GerritCheckoutProvider();\n            }\n        });\n\n        bind(G", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (zxid.contentEquals(getZxidFromName(snapshots.get(i).getName())))) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "   def _create_pane(self, pane_type, account=None):\n        # Create a new pane of the given type\n        # If `account` is provided, create a pane for that account\n        # Otherwise, create a pane for the current account\n        #", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\t// Show empty list message\n\t\t\t\t\t\temptyText.setText(R.string.main_empty_list);\n\t\t\t\t\t\tloadingProgress.setVisibility(View.VISIBLE);\n\t\t\t\t\t\tsearchList.setVisibility", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   # 2. coverslip\n    coverslip = np.random.randn(POS.shape[0], 3, 3) * 0.1 + 0.5\n    coverslip = np.maximum(coverslip, 0)\n    coverslip = np", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "   result, index = apply_fast_and(left.values, right.values,\n                                    left.index, right.index)\n    return Column(result, index)\n\n\ndef apply_or(left: Column, right):\n    if type(right) == Column:", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    Icon icon = IconRequestBuilder.buildIcon(request.getPackageName(), stringBuilder.toString());\n                    if (icon != null) {\n                        mCallback.get().onIconRequest(icon", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "```\nfrom decimal import Decimal\nfrom typing import Any, Union, SupportsFloat\nfrom .atomic_types import AtomicTypeMeta\nfrom .untyped import UntypedAtomic\nfrom .numeric import Float10, Integer\nfrom .datetime import AbstractDateTime, Duration\n\n", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'type')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        view = inflater.inflate(R.layout.main_fragment, container, false);\n\n        // Set up the action bar\n        actionBar = getActionBar();\n       ", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tFile inputFile = new File(basePathDDI2FO + \"/input.xml\");\n\t\tFile outputFile = new File(basePathDDI2FO + \"/output.fo\");\n\t\t\n\t\tddi2fo.setPreprocessors(preprocessors);\n", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Send the email\n                        new SendEmailTask(activity).execute(emailTmp);\n                    }\n                });\n\n        // \"Cancel\" button to dismiss the dialog\n        alert.setNegativeButton(R.string.cancel,\n                new DialogInterface.OnClickListener", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^$', PackagesView.as_view(), name=\"packages\"),\n]\n\nproducts_urls = [\n    url(r'^$', ProductsView.as_view(), name=\"products\"),\n]\n\nreleases_urls = [\n    url(", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.bandIndexes[0] == NormalRateConfig.", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict[\"tierList\"][0][\"entries\"]\n\n\ndef test_save_textgrid(tg):\n    # Save the textgrid to a file\n    with open(\"test_save_textgrid.txt\", \"w\") as f:\n        run", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "   def __del__(self):\n        self.cleanup()\n\n    def cleanup(self):\n        self.working_directory = None\n        self.data_directory = None\n        self.output_directory = None\n        self.corpus_output_directory = None\n       ", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "   def _check_dataset(self, dataset):\n        # check sequence names\n        for seq_name in dataset.seq_names:\n            assert seq_name in dataset.seq_metas[version]\n\n        # check frame range\n        for seq_name in dataset.seq_", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   void add(FixTag tag, Object value);\n\n    void add(FixTag tag, Boolean value);\n\n    void add(FixTag tag, Char value);\n\n    void add(FixTag tag, Double value);\n\n    void add(FixTag tag", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "   def _create_thresholder(self):\n        return Thresholder(self._thresholds, self._join_size)\n\n    def _create_extractor(self, thresholds):\n        return WaveformExtractor(extract_before=self._extract_before", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\t}\n\t}\n\n\tprivate List<MatchExplanation> getTermQueryNodeExplanations(AlvisIRTermQueryNode termQueryNode) {\n\t\tList<MatchExplanation> explanations = new ArrayList<>();\n\t\tfor (MatchExplanation exp : term", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tpublic ParameterizedGenerationService(PipelineGenerator pipelineGenerator, ValorizatorParameters valorizatorParameters) {\n\t\tthis.pipelineGenerator = pipelineGenerator;\n\t\tthis.valorizatorParameters = valorizatorParameters;\n\t}\n\n\tpublic void generate(EN", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (SEND_NOTIFICATION ^ RESPONSE_MA", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       FileSaver fileSaver = new FileSaver(content, lang, \"twitter\", url, tweet.getId());\n                        logDb.logWithUrlNonStatic(tweet.getUser().getScreenName() + \"#\" + tweet.getId(), url, lang", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "   def _render_descriptor_helper(self, descriptor, indent):\n        lines = []\n\n        if isinstance(descriptor, SequenceDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor, descriptor.name))\n            for member in", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "   parser.set_defaults(main=main)\n    return parser\n\n\ndef main():\n    parser = get_arg_parser()\n    args = parser.parse_args()\n\n    if args.import_setting:\n        import_setting(args)\n    else:", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "   def process_message(self, message):\n        # If the message is not in the subscribe keywords of the current language,\n        #  return None\n        language = self.get_language(self.language, message.language, message.keyword)\n        if language is None:\n", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   // Convert GCPProject objects to GCPResource objects.\n    PCollection<GCPResource> liveResources =\n        pipeline.apply(\"Convert live projects to GCPResources\",\n            ParDo.named(\"Convert live projects to GCPResources\")\n                .of(new ExtractState(", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.rule = DetectSoft404()\n        self.engine = Engine()\n        self.entry = Entry.create(\"http://example.com/test\", response_content=\"response\")\n        self.kb = SimilarPathGenerator(self.engine, self.rule)\n", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "   conditions.append(Condition(AndCondition(\n        Condition(ComparisonCondition(column, \"=\", value)),\n        Condition(ComparisonCondition(column, \"!=\", value))\n    )))\n    return conditions\n\n\ndef test_and():\n    c = MockColumn", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       for i in xrange(10):\n            square = get_square_idx(i)\n            assert 0 <= square < 10 ** 2\n\n\nclass TestMultiply(object):\n    \"\"\"\n    Question 6.3\n    \"\"\"\n\n    def", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final Testprio selectedTestprio;\n\n    private final Button selectMethodButton;\n\n    private final Text methodText;\n\n    private final Button selectMethodButton;\n\n    private final GroupMethodSelectionCtrl methodCtrl;\n\n    private final Vector<IMethod> methods;", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "class ClientMessageSink(object):\n  def __init__(self, sink_stack, sink_role):\n    self.sink_stack = sink_stack\n    self.sink_role = sink_role\n    self.next_sink = None\n    self.varz", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tpublic void setDebugImages(boolean value) {\n\t\tthis.debugImages = value;\n\t}\n\n\tpublic void parse(File file) {\n\t\tLapdfDocument document = null;\n\t\ttry {\n\t\t\tdocument = new LapdfDocument(file);", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "   var exitCode = cmdLine.execute();\n    if (exitCode != 0) {\n      log.error(null, __ -> \"javadoc failed with exit code \" + exitCode);\n      return exitCode;\n    }\n    return 0;\n  }\n  ", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "   def consultar_numero_sessao(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_numero_sessao`.\n\n        :return: Uma resposta SAT espec", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPEAKER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPH", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   try:\n      result = self.commands[name](gopts, argv)\n    except DownloadError as e:\n      print(e, file=sys.stderr)\n      result = 1\n    except InvalidProjectGroupsError as e:\n      print(e, file=", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Provides @Singleton\n    Gson provideGson() {\n        return new Gson();\n    }\n\n    @Provides @Singleton\n    TypeToken provideTypeToken() {\n        return new TypeToken<List<Board>>() { };\n    }\n", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(4));\n    }\n\n    @Test\n    public void testBatchPreparedCount() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution());  //", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "   return new SvnJavaChangeLogCommand();\n}\n\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand();\n    }\n\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheck", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       // create verifiers\n        verifiers.put(\"Local Files Exist\", new LocalFilesExistVerifierImpl());\n        verifiers.put(\"Remote Files Exist\", new RemoteFilesExistVerifierImpl());\n        verifiers.put(\"Valid Schema Name\", new ValidSchemaName", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n            Toast.makeText(getActivity(), R.string.error_login, Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    private boolean yasmeDeviceCheck() {\n        SharedPreferences sharedPref = getSharedPreferences();\n       ", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "   void logout() throws DrupalLogoutException;\n\n    List<DrupalNode> getNodeView(String viewName, String viewArguments) throws DrupalFetchException;\n\n    List<DrupalNode> getNodeView(String viewName, int offset, int limit)", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       self.chumopen = False\n        self.chum = self.parent().profile()\n        self.textInput.clear()\n        self.textArea.clear()\n        self.addQuirkGroup()\n        self.changeCheckState()\n        self.setCurrentItem(", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explan", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "       }\n\n        return informationCriterion.getChunk();\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade.ProtTestFacade#getFrequencies(es.", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2, ty1, ty2)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a simply typed first projection\n    into a Fst.\n    \n    Arguments:\n    - `expr", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(EventBus eventBus);\n\n    void inject(KioskModeHandler kioskModeHandler);\n\n    void inject(Player player);\n\n    void inject(ConfigurationContentProvider configurationContentProvider);\n\n    void inject(AudioManager audioManager);\n\n    void inject", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   public ChartCategoryFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.chart_category_fragment, container", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = PyramidSwaggerResponse(\n        Mock(response=Mock(content_type='text/plain')))\n    with pytest.raises(ResponseValidationError):\n        handle_request(\n            Request.from_dict({'method': 'GET', 'url': '/", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t@Override\n\tpublic void enterAddOrDeleteEdgeCommand(AddOrDeleteEdgeCommandContext ctx) {\n\t\t// handle AddOrDeleteEdgeCommand\n\t}\n\n\t@Override\n\tpublic void enterAnnotateCommand(AnnotateCommandContext ctx) {\n\t\t// handle", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "           except TextGridParseError as e:\n                self.return_dict[\"decode_error_files\"].append(e)\n\n            except Exception as e:\n                self.return_dict[\"decode_error_files\"].append(e)\n\n            self.finished_processing.set", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "   for sensor in sensors:\n        api.add_resource(\n            SensorResource,\n            \"/aircraft/sensors/%s\" % sensor.name,\n            resource_class_args=(sensor,))\n\n        api.add_resource(\n            SensorDataResource", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueKts())\n\n        fdmexec.GetIC().SetLatitudeDegIC(0)\n        fdmexec.GetIC().SetLongitudeDegIC", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   # pylint: enable=line-too-long\n    # pylint: enable=E501\n    # pylint: disable=E501\n    # pylint: disable=line-too-long\n    # pylint: disable=", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t@RequestMapping(value = \"/manage\", method = RequestMethod.GET)\n\tpublic String manage(Model model) {\n\t\tList<Categories> categories = categoryServices.getAllCategories();\n\t\tmodel.addAttribute(\"categories\", categories);\n\t\tList<B", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           logError(title, t);\n                        } else {\n                            logError(title, t);\n                        }\n                    }\n                }\n            });\n        } finally {\n            setControlsEnabled(true);\n            operationInProgress = false;\n        }\n", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "   def run_e2e_flow_for_language(self, language, person_name, join_keyword):\n        # Set up the language and person name\n        self.language = language\n        self.person_name = person_name\n        # Set up the join keyword\n       ", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_place);\n\n    // Set up the UI\n    setHasOptionsMenu(true);\n\n    // Set up the location manager\n    location", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   if adb:\n        print \"\\n[INFO] Connecting to ADB\"\n        connect(adb)\n        time.sleep(1)\n        print \"\\n[INFO] Installing APK\"\n        install_result = install_and_run(adb, APK", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "   LAI = LAI(LAC=0x0000)\n    MSCm2 = MSCm3(LAC=0x0000)\n    MSCm3 = MSCm2(LAC=0x0000)\n    LA", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t# Create adjacency set\n\t\tif not opts.vertextriangularmesh:\n\t\t\tCreateAdjSet(data, affine_mask_lh, affine_mask_rh, nonzero, FWHM, demean_flag)\n\t\telse", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "   }\n    acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    result.append(CLOSE_BRACKET);\n  }\n\n  public void visit(final InExp exp) throws QueryException {\n    String baseVariableName = getVariableName", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "     cacheService.storeCacheList(new CacheList(listName));\n      updateStatus(\"New cache list created: \" + listName);\n    }\n  }\n\n  private boolean hasValue(Optional<String> option) {\n    return option.isPresent();\n  }\n", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   def __init__(self, CallName='', ReprName='', Pt=None, Len=None):\n        Layer.__init__(self, CallName, ReprName, Pt, Len)\n\n    def __len__(self):\n        return len(self.Pt", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       TimeEntryOvertimeAggregation.createAggregationInfo(timeEntriesTable, workTimeConfigBean.getOvertimeThreshold())));\n\n        dateFrom.setValue(timeSource.currentTimestamp());\n        dateTo.setValue(timeSource.currentTimestamp());", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "   def parse(self, packet):\n        super(PubKeyV4, self).parse(packet)\n        self.created = datetime.fromtimestamp(packet[0])\n        del packet[0]\n\n        self.pkalg = packet[0]\n        del packet[", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "   def get_expansion_info(self):  # -> ExpansionInfo\n        return ExpansionInfo(self._board_num, self._expansion_num)\n\n    def get_channel_type(self, channel_num):  # -> ChannelType\n        channel_type =", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "       for i in range(count):\n            key = read_u16le(f)\n            value = read_u16le(f)\n            self.objects[key] = value\n\n        s.close()\n\n    def read_data(self):\n        data", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "           create_inactive_user(email, full_name)\n            messages.success(request, _('Account created. Please check your email for instructions on how to activate your account.'))\n            return redirect(reverse('connect_accounts_activate', args=(email,)))\n\n", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       await Utilities.message(ctx.channel, f\"{draft.draft_content}\")\n\n        return await Utilities.message(ctx.message.channel, f\"{draft.draft_content}\")\n\n\n    @command(aliases=[\"load-form\"],", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if item is not None:\n                yield item\n\n    else:\n        raise self.unsupported_context()\n\n\n@method(nullary('..'))\ndef select_ancestor_shortcut(self, context=None):\n    if context is None:\n        raise", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   DummySherpaServer server = new DummySherpaServer(10);\n    try {\n      Solutions solutions = helpExecuteQuery(server, 10);\n      Iterator<Map<String,RDFNode>> iter = solutions.iterator();\n      Assert.assert", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new ExpanderTextExpander(new File(getFileAttribute(basedir, elt, AlvisIRConstants.XML_SEARCH_EXPANDER_INDEX_DIR)));\n\t\t}\n\t\tresult.setIndex(index);\n\t\t", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "               MiPushClient.init(this, new MiPushClient.OnInitListener() {\n                    @Override\n                    public void onInit(MiPushClient client, int status) {\n                        Log.e(MYTAG, \"使用MiPush推送\");\n", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;\n        this.bootstrapNode", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "   if status:\n        output.append(status)\n\n    return '\\n'.join(output)\n\n\ndef get_completion_matches(text, cursor_position):\n    with vcli.completer_lock:\n        return vcli.completer.get_complet", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "   app.run(debug=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.task_list_by_jql_activity);\n\t\tctx = this;\n\t\tlistView = (ListView) findViewById(R", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "   def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False)\n        self.assertRaises(WindowsAPIError, CloseHandle, handle)\n\n    def test_create_event_name_", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "   }\n\n    @Override\n    public Info info() {\n        return this.info;\n    }\n\n    @Override\n    public Releases releases() {\n        return this.releases;\n    }\n\n    @Override\n    public Stemcells stemcells()", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   List<ParsedPath> result = new ArrayList<>();\n                    for (Element element : roundEnv.getRootElements()) {\n                        if (element.getKind() == ElementKind.ANNOTATION) {\n                            Annotation annotation = (Annotation) element;\n                           ", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   protected ExecutorService executorService;\n\n    protected ReentrantLock lock = new ReentrantLock();\n\n    protected Condition condition = lock.getCondition();\n\n    public Crawler(CrawlerConfig crawlerConfig) {\n        this.crawlerConfig =", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           Action addKeyAction = new AddKeyAction(mongoDocumentOperations);\n            Action addValueAction = new AddValueAction(mongoDocumentOperations);\n            Action deleteKeyAction = new DeleteKeyAction(mongoDocumentOperations);\n\n            actionPopupGroup.add(add", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiButton saveButton;\n    private GuiButton cancelButton;\n\n    public GuiSettingsChannel(File dataFolder, Channel channel) {\n        super(dataFolder, \"channel\", \"Channel Settings\", \"tabbychat_channel\");\n        this.channel = channel;\n", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_SHOT_CODE:\n                return new BtnScreenShot();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreen", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       Composite composite = toolkit.createComposite(form.getForm());composite.setLayout(new GridLayout(2, false));composite.setBackground(SWT.COLOR_WHITE);composite.setForeground(SWT.COLOR_BLACK);\n", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       self.assertEqual(\"my_type\", Type.get_sample())\n\n    def test_type_get_comparable_values(self):\n        self.assertEqual([\"my_type\"], Type.get_comparable_values())\n\n    def test_type_", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "       new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetEndTimeCommand.class, EndEvent::fromCommand, this::queueEvent));\n        commandProcessor.", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datas", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'perms': 'write',\n        'frob': frob,\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPFetchException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPFetchException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t} catch(FCPException e) {\n", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       # Get the current operator\n        op = bytecode[k][2]\n        # Check if it's a conditional operator\n        if op in CONDITIONAL_OPERATORS:\n          # Get the condition from the stack\n          condition = condition_bytecode.pop()\n", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   //Get the active credit card\n    public void getActiveCreditCard() {\n        //Get the active credit card from the adapter\n        activeCreditCardId = getArguments().getInt(ARG_ACTIVE_CREDIT_CARD_ID);\n        activeCreditCard", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "   admin.site.register(Language, LanguageAdmin)\n    admin.site.register(LanguageSet, LanguageSetAdmin)\n    admin.site.register(Platform, PlatformAdmin)\n    admin.site.register(Product, ProductAdmin)\n    admin.site.register(Release, Release", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t}\n\t}\n\n\tpublic static class Place {\n\t\tpublic long _id;\n\t\tpublic String name;\n\t\tpublic Date time;\n\n\t\tpublic Place(long _id, String name, Date time) {\n\t\t\tthis._id = _id", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   def parse(self, ping_message: Sequence[str]) -> PingStats:\n        return self.__parser.parse(ping_message)\n\n    def parse_stats(self, ping_message: Sequence[str]) -> PingStats:\n        return self.__parser.", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           //load latest message from server\n            GetNewMessagesForChatTask task = new GetNewMessagesForChatTask(chatId);\n            task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n        }\n\n        //load latest message from server", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic Cubeshaft() {\n\t\tthis.level = new Level();\n\t\tthis.player = new Player();\n\t\tthis.levelRenderer = new LevelRenderer(level);\n\t\tthis.particleEngine = new ParticleEngine();\n\t\tthis.renderer = new", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_userinfo(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       // query count\n        assertThat(ds, queryTypes(Types.SELECT));\n        assertThat(ds, queryTypes(Types.INSERT));\n        assertThat(ds, queryTypes(Types.UPDATE));\n        assertThat(ds, queryTypes(Types.DELETE));\n\n       ", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     // Check if the file has been uploaded successfully\n      if (serverMessage.getUploadedFileNames().size() > 0) {\n        successful = true;\n        // Upload finished, show the file list\n        showFileList();\n      } else {\n        log(\"Error upload", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points = merge_assembly_points(assembly_points=original_assembly_points,\n                                                    aps_in_merged=assembly_points_by_sources,\n                                                    min_cw=args.c_merging_cw", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "   api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        PressureSensorResource,\n", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "                       fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (!level.isInstalled()) {\n\t\t\t\t\t\tshowProgress(getString(R.string.downloading));\n\n\t\t\t\t\t\tlevelsManager.downloadAsync(level, new Runnable() {\n\t\t\t\t\t\t\t@", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    private final Map<String, String> dayNames = createDayNames();\n    private final Map<String, String> monthNames = createMonthNames();\n\n    private final List<Day> days = new ArrayList<>();\n\n", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root);\n    }\n\n    @Override\n    public Info info() {\n        return this.info;\n    }\n\n    @Override\n    public Releases releases() {\n        return this.releases;\n   ", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   (signerId, keyId) -> Lists.newArrayList(new RSAPrivateKeyLocator(privateKey));\n\n    locators = new VerifierProviders(Arrays.asList(hmacLocator, rsaLocator));\n\n    locatorsFromRuby", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n\n    public MultiItemTypeAdapter(Context context, List<T> datas) {\n        this.mContext = context;\n", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                   assertFalse(client.containerExists(containerName));\n                } catch (FilesException e) {\n                    // Ignore\n                }\n            }\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "           });\n        }\n    }\n\n    @Override\n    public void onPlayerStateChanged(int state) {\n        switch (state) {\n            case PlayerState.PLAYING:\n                if (BuildConfig.DEBUG) {\n                    Log.d(TAG, \"Player", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "   @ViewById(R.id.drawer_layout)\n    DrawerLayout drawerLayout;\n\n    @ViewById(R.id.nav_view)\n    View navView;\n\n    @ViewById(R.id.nav_menu)\n    Menu navMenu;\n\n", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       if (home.getType() == Home.Type.LANDSCAPE) {\n                            ImageConfig imageConfig = new ImageConfig(mContext, home.getUrl());\n                            ImageLoader.getInstance().displayImage(imageConfig, image);\n                        } else {\n", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = Default.ENCODING\n\n    convert_configs = load_convert_config(\n        logger, app_configs, subcommand=\"url\", format_name=format_name\n    )\n\n    max_workers = ctx.obj.get(Context.MAX", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "   def items(self):\n        \"\"\" Returns a generator of :class:`~plexapi.media.Playable` objects. \"\"\"\n        return (item for item in self.findItems(self.key))\n\n    def remove(self, item):\n        \"\"\" Remove an item from the play", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(TypeError, _environment_to_string, 42)\n\n    def test_empty_environment(self):\n        self.assertEqual(\n            _environment_to_string(None),\n            u\"\")\n\n    def test_environment", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   try:\n      result = cmd.run()\n    except DownloadError as e:\n      print(e, file=sys.stderr)\n      result = 1\n    except InvalidProjectGroupsError as e:\n      print(e, file=sys.stderr)\n      result", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // 通知监听器\n                for (RunnerTaskListener listener : runnerListenerList) {\n                    listener.onTaskSuccess(taskData);\n                }\n            } catch (Throwable e) {\n                taskData.setState(TaskData.STATE_", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       await r.reject(None, None)\n        self.assertIsNone(r.status)\n\n    @async_test()\n    async def test_reject_404(self):\n        r = RejectStatusCode()\n        await r.reject(4", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //初始化用户数据\n        SharedPreferences sp = getSharedPreferences(\"user\", Context.MODE_PRIVATE);\n        Editor editor = sp.edit();\n        editor.putString(\"stuXH\", stuXH);\n        editor.putString(\"stu", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "   def parse_incoming_device(self, text):\n        if typepy.is_null_string(text):\n            return None\n\n        match = re.search(\n            r\"Egress Redirect to device ifb[\\d]+\", self._to_unicode(text", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "       except AttributeError:\n            pass\n        state[\"inventory\"] = inv\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            loc = obj.location     # type: ignore\n", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": " public Query visit(Ord4Search n, Query query) {\n    List<Occur> occurs = null;\n\n    if (n.f0.tokenImage.length() == 2) {\n      occurs = rfOpToOccur.get(n.f0.token", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t}\n\n\tpublic void setSurveyName(String surveyName) {\n\t\tthis.surveyName = surveyName;\n\t}\n\n\tpublic void setCleaningFolder(boolean cleaningFolder) {\n", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       try {\n\n            // Load configuration\n            Properties properties = new Properties();\n            if (propertiesFile != null) {\n                properties.load(new FileInputStream(propertiesFile));\n            }\n\n            // Get data dir\n            DataDir dataDir = new DataDir(dataDir !=", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "   def get_from_queue(self):\n        # Wait til there's something in the queue\n        self.q_work.acquire()\n        if len(self.queue) == 0:\n            self.q_work.wait()\n        else:\n            self.", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       cursorById.close();\n\n        // Test the basic content provider query with a where clause\n        where = new MovieSelection();\n        where.title(\"The Shawshank Redemption\");\n        cursorById = mContext.getContentResolver().query(MovieColumns.CONTENT_URI,", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "   def EvtGenerationContrat(self, _):\n        ContratAccueilModifications(self.inscrit, self.current_cotisation[0]).Generate()\n\n    def EvtGenerationAvenant(self, _):\n        AvenantContratAccueilMod", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       element = ElementTree.Element('schema')\n        children = node_children(element)\n        self.assertEqual(len(children), 3)\n        self.assertIn(children[0], ('element', 'schema'))\n        self.assertIn(children[1], ('element", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\t// Get the map view and set the map type\n\t\tmapView = (MapView) findViewById(R.id.map_view);\n\t\tmapView.setMapType(MapView.MAP_TYPE_HYBRID);\n\n\t\t// Get the location manager\n", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert config.OUTPUT_RATE_HZ == LowRateConfig.OUTPUT_RATE_HZ\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def consultar_numero_sessao(self, numero_sessao):\n        \"\"\"Sobrepõe :meth:`~satcfe.", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   # T and P\n    cond_dict = {}\n    points = calculate_dict[\"points\"][0:len(subl_dof)]\n    for i in range(len(subl_dof)):\n        site_fractions = []\n        for j in range(sub", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   # ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   def get_corpus_info(self) -> Dict[str, Any]:\n        \"\"\"\n        Return a dictionary of corpus information\n\n        Returns\n        -------\n        dict[str, Any]\n            Dictionary of corpus information\n        \"\"\"\n        return {\n            \"", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   private CameraSourcePreview mPreview;\n    private GraphicOverlay<OcrGraphic> mGraphicOverlay;\n    private OcrDetectorProcessor mOcrDetectorProcessor;\n    private ExpenseManagerDAO mDao;\n    private Spinner mCurrency", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tUtil util = Util.getInstance();\n\t\tSystem.out.println(util.io.readFile(\"file.txt\"));\n\t\tSystem", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       List<ServerConfiguration> serverConfigurations = new ArrayList<>();\n        File mongoConfigFile = new File(project.getBasePath(), \"mongo.conf\");\n        if (mongoConfigFile.exists()) {\n            try (InputStream inputStream = new FileInputStream(mongoConfigFile", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tFluent header = container.section(\"header\");\n\t\theader.classs(\"header\").h1(Att.nameValid());\n\t\theader.inputNext();\n\n\t\t// Footer with Li line of code:\n\n\t\tFluent footer = container.section", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               Intent result = new Intent();\n                result.putExtra(MediaStore.EXTRA_OUTPUT, Uri.parse(getExternalCacheDir() + \"/\" + output.toString()));\n                setResult(RESULT_OK, result);\n                finish();\n            }\n        });\n\n", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "   @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.song_list_fragment, container, false);\n\n        mRecyclerView = (RecyclerView) view.findViewById(R.", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   search = Search(\n        engine=engine,\n        model=model,\n        index=index,\n        key=key,\n        filter=None,\n        projection=\"all\",\n        consistent=True,\n        forward=False\n    )\n    search.prepare()\n    results", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        // do nothing\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,int id,String gcActivityName) {\n        // do nothing\n    }\n", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "       # Setup the API endpoints\n        self.api.add_resource(RestSystem, '/system')\n        self.api.add_resource(RestDevice, '/device/<int:deveui>')\n        self.api.add_resource(RestDevices, '/dev", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "   def set_directory(self, directory):\n        self._directory = directory\n        self.tree_view.set_directory(directory)\n        self.sync_project_config_path()\n\n    def sync_project_config_path(self):\n        orig_path = self", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "   if __name__ == \"__main__\":\n        main()\n    else:\n        parser.parse_args()\n\n    return 0\n\n    def _get_unit_help_msg():\n        return \" milliseconds, microseconds, nanoseconds, picosecond", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final Map<Channel, Rectangle> channels = Maps.newEnumMap();\n\n    public ChatTray(Gui gui) {\n        super(gui, 0, 0, 256, 204);\n        this.setLayout(new BorderLayout", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "       void onDateClick(Date date);\n    }\n\n    public VCalendar() {\n        initWidget(outer);\n        outer.setStyleName(PRIMARY_STYLE);\n\n        monthNames = getMonthNames();\n        dayNames = getDayNames();\n\n       ", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_client_id(self, client_id):\n        self._client_id = client_id\n        return self\n\n    def set_user(self, user):\n        self._user = user", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onUpgrade(client);\n            break;\n        }\n\n        case DISCONNECT: {\n            client.getBaseClient().send(new Packet(PacketType.NO", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ActionBarPullToRefresh pullToRefresh;\n", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\n\t\treturn new GenerationService(preprocessors, postprocessors);\n\t}\n\n\tprivate Preprocessor[] setPreProcessors(List<PreProcessor> preProcessors", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<GCPProject> projects = pipeline.apply(\n        \"Read GCP projects from the CRM API\",\n        Read.from(new LiveProjectSource(org)));\n\n    // Convert GCP projects to GCPResource objects.\n    PCollection<GCPResource> g", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "   return MyModel()\n\n\ndef test_model_creation(model):\n    # ...\n\n\ndef test_model_mutation(model):\n    # ...\n\n\ndef test_model_repr(model):\n    # ...\n\n\ndef test_model_", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "   def get_def_embeddings(self, words):\n        \"\"\"Get the definition embeddings for the given words.\"\"\"\n        # NOTE(tombosc): this is a simplified version of the original\n        # implementation, which used a separate RNN for the definitions.\n       ", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n        _lockObject.lock();\n        try\n        {\n            // Set up RX chat listeners.\n            for (int i = 0; i < RX_SOCK", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_video_pick);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(tool", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "           return self.render_to_response(self.get_template(), form)\n        else:\n            return self.render_to_response(self.get_template(), form)\n\nclass CrearUser(UserBase, CreateView):\n    template_name = 'relevamiento", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "   public static Fog convert(Fog fog) {\n        Fog convertedFog = new Fog();\n        convertedFog.setColor(fog.getColor());\n        convertedFog.setStart(fog.getStart());\n        convertedFog.setEnd(fog.get", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\t\t// Handle the LOCK\n\t\t\tint nbLocked = 0;\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tboolean isLocked = false;\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plus(ActorDetailsModule actorDetailsModule);\n}\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\treturn true;\n\t\t} catch (final SocketViewException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t}\n\n\tpublic void runBenchmark() {\n\t\ttry {\n\t\t\tbenchmark.runBenchmark", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   def get_ci_pipelines(self, *args, **kwargs):\n        \"\"\"\n        fetch ci pipeline(s) from db\n        :return: queryset\n        \"\"\"\n        ci_pipelines = None\n        required_params = fields if fields and isinstance(fields, (", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Building the wrapper from the service discovery file.\");\n\t\t\tEndpoint endpoints[] = serviceDiscoveryInfo.getEndpoints();\n\t\t\tfor (int i = 0; i < endpoints.", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       planillas_modelo = PlanillaModelo.objects.all()\n        initial = {}\n        if len(planillas_modelo) == 1:\n            planilla_modelo = planillas_modelo[0]\n            initial = {\"planilla_modelo\": plan", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self._cstr = Const(data=root.data)\n    else:\n      self._cstr = Const(data=root.data)\n      self.tree = self.ast.root\n\n  def __repr__(self):\n    return 'Constraint(ast=%s,", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " public Tropo() {\n\n    super();\n    setName(\"tropo\");\n  }\n\n  public Tropo(Key... keys) {\n\n    super(keys);\n    setName(\"tropo\");\n  }\n\n  public SayAction say(String text", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\tthrow new PlayerOfflineException(\"Player is offline\");\n\t\t\tthrow new PlayerPresentException(\"Player is already in a round\");\n\t\t\tthrow new RoundFullException(\"Round is full\");\n\t}\n\n\t@Override\n\tpublic void addMetadata(String", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\n    assert_array_equal", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('xs:number?', 'xs:string', 'xs:string?', 'xs:string')))\ndef evaluate_format_number_function(self,", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item.data.name == \"New sketch\":\n\t\t\t\tdefault_flags |= Qt.ItemIsEditable\n\t\t\telse:\n\t\t\t\tdefault_flags &= ~Qt.ItemIsEditable\n\t\texcept Exception as e:\n\t", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       response = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        response = Hydrator(version2, versions, []).hydrate_object(object_dto, object2)\n\n        self.", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         //read the preamble\n          PrimitiveReader reader = new PrimitiveReader(catBytes, 0, count);\n          reader.position = 0;\n          readPreamble(reader);\n          \n          //read the data\n          reader.position = count;\n          read", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(DFO, DopplerPoly(DopplerBase.UNITS_DOPPLER, (1, )))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "       containsString(\"_source\"));\n    }\n\n    @Test\n    public void storeWithId() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRecordsResponse(Resources.asByteSource(Resources.getResource(\"responses/dab-records", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "   def parse(self, packet):\n        super(PubKeyV4, self).parse(packet)\n        self.created = packet[0]\n        del packet[0]\n\n        self.pkalg = packet[0]\n        del packet[0]\n\n        self", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tGeoJSONWriter geoJSONWriter = new GeoJSONWriter();\n\n\t\t// Set the GeoJSON writer as the default writer\n\t\tJPEParserManager.getInstance().", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = Schema.search(\n                            context.get(Schema.InvokeKeys.ENTITY, ExtUUID.class),\n                            context.get(Schema.InvokeKeys.ENTITY_KEYS, ExtMap.class),\n                            context.get(Schema.InvokeKeys", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/$', users_list, name='users_list'),\n    url(r'^new_user/$', new_user, name='new_user'),\n    url(r'^edit_user/$', edit_user, name='edit_user'),\n", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           updateEmptyViews();\n                        }\n                    }\n                });\n                dialogFragment.show(getActivity().getSupportFragmentManager(), \"playSessionSettings\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        Intent intent = new", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_mentality_health);\n        init();\n    }\n\n    private void init() {\n        dymdicCycler = (Rec", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       # updateBuffImg();\n        return obj\n\n    def updateBuffImg(self):\n        # update block image map\n        # note: must do this after initialize block image map\n        for img in self.getBlock().getInitBlockImages():\n            self.buffImg =", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "       f = XorDiff(d1, d2)\n        beta = Constant(0, DP_WIDTH)\n        result = self._find_preimage(f, beta)\n        assert result is not None\n\n\nclass TestDerivativeBvSub(unittest.Test", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic static Node getTransform(Node node, NodeTransformer transformer) {\n\t\t\tif(node == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(node instanceof ConstantNode) {\n\t\t\t\treturn transformer.transform", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\t// Add the listeners\n\t\tgetServer().getPluginManager().registerEvents(playerListener, this);\n\t\tgetServer().getPluginManager().registerEvents(blockListener, this);\n\t}\n\n\tpublic void sendMessage(String message) {\n\t\tgetServer().", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       Challenge challenge = new Challenge(challengeData);\n        connection.send(challenge);\n    }\n\n    private void parseSuccess(Element doc) {\n        connection.send(new Success(doc));\n    }\n\n    private void parseFailure(Element doc) {\n        connection", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\ndef test_search_ch_skch(self):\n    # Search for characteristic with given skch\n    # and check that the found characteristic has the expected weight\n    # (using the given skch as a hint)\n    #\n    # The search is done using the `ChSearch", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private AdapterWithHeader mAdapter;\n\n    private List<Song> mSongList;\n\n    private int mCurrentPosition = -1;\n\n    private boolean mIsPlaying = false;\n\n    private boolean mIsPaused = false;\n\n    private long", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           // Create a new effect listener and set it to the selected effect\n            effect.addListener(this);\n            mSelectedEffect = effect;\n            // Update the parameter control panel\n            updateParameterControlPanel();\n        }\n        return true;\n    }\n\n    public void updateParameter", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "   Bit('ESM', ReprName='ESM Information', Pt=4, BitLen=4, Repr='hum'),\n    Bit('Cause', ReprName='Cause', Pt=6, BitLen=4, Repr='hum'),\n    Bit('Type',", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           // Update the song's ID3 tags\n            updateSongTags();\n        }\n    };\n\n    private void updateSongTags() {\n        // Update the song's ID3 tags\n        Song song = mSongListAdapter.getItem(mSongListView.", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "   def _load_corpus_from_directory(self) -> None:\n        \"\"\"\n        Load a corpus from a directory without using multiprocessing\n        \"\"\"\n        begin_time = time.time()\n        sanitize_function = None\n        if hasattr(self", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\treturn addRemittUser(user);\n\n\tpublic boolean addRemittUser(UserDTO user) {\n\t\tUserManagement um = new UserManagement();\n\t\treturn um.addUser(user);\n\t}\n\n\t@GET\n\t@Path(\"eligibility", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiPlan> apiPlan(@Query(Constants.KEY) String apiKey);\n\n}\n\\end{code}\n\nNote: This is just an API documentation for Shodan API, it's not the actual implementation.\n\nAlso, the API documentation is using the Kotlin", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   @Override public void visit(LogMessage message) {\n      if (message.getLevel().isGreaterThan(Level.INFO)) {\n        return;\n      }\n      String line = message.getLine();\n      if (line.contains(\"VM OPTIONS\")) {\n", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   erb = erb(freq, bandwidth)\n    assert almost_eq(erb, gammatone_erb_constants(freq, bandwidth))\n\n\nclass TestGammatone(object):\n\n  def test_gammatone_example(self):", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "   return Sequence(seq)\n\ndef read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset):\n    \"\"\"Read and return a single item from a sequence (i.e. a Dataset)\"\"\"\n    # R", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   for (ICommentProcessor commentProcessor : this.commentProcessors) {\n      try {\n        commentProcessor.commit(document, proxyBuilder.build());\n      } catch (Throwable e) {\n        logger.error(\"Error while running comment processor\", e);\n      }\n    }", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected void loadDataFromNetwork() throws Exception {\n        if (searchCriteriaList.isEmpty()) {\n            return;\n        }\n        super.loadDataFromNetwork();\n    }\n\n    protected OAuthRequest getRequest() {\n        return new OAuthRequest(Verb.", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   @flags.register(NotationDataFlags)\n    def flags_notation(self, val):\n        self._flags |= NotationDataFlags(val)\n\n    def __init__(self):\n        super(NotationData, self).__init__()\n        self.flags", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "   def addMessage(self, lexmsg, isnew):\n        if isnew:\n            self.history.add(lexmsg)\n        self.textArea.addMessage(lexmsg)\n\n    def getHistory(self):\n        return self.history\n\n    def getLast", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "   def check_arg(arg, type_, env):\n        arg = check(arg, env)\n        with env.errors.location(arg.location):\n            unify(arg.__type__, type_)\n        return arg\n\n    def check(arg, env):\n        if", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   # Initialize the model\n    model_coefficients = np.zeros((N,))\n    for i in range(N):\n        model_coefficients[i] = 1\n\n    # Initialize the feature matrix\n    feature_matrix = np.zeros((M,", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "   private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        // pause the player\n        controller.getContentPlayer().pause();\n\n        // show the v", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\n            ProximitySensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 8 || type ==", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<SuggestionsResponse> getSuggestions(@QueryMap Map<String, String> serviceIds,\n                                              @Query(\"term\") String term,\n                                              @Query(\"limit\") @IntRange(from = 1, to = 50) Integer limit);\n", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       stream = Stream(model=model, engine=self)\n        stream.heartbeat()\n        return stream\n\n    def unload(self):\n        \"\"\"Unload all objects from the engine.\n\n        :raises bloop.exceptions.ObjectNotLoaded: if any objects", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "       self.log.info(\"confusion matrix\")\n        self.log.info(confusion_matrix)\n\n        # noinspection PyTypeChecker\n        self.log.info(\"accuracy on all partitions: %2.2f%% (UAR %2.2f", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\t@Autowired\n\tprivate ChallengeServices challengeServices;\n\t@Autowired\n\tprivate SubmissionServices submissionServices;\n\t@Autowired\n\tprivate CategoryServices categoryServices;\n\t@Autowired\n\tprivate CountryServices countryServices;\n\t@Autowired\n\tprivate BannedIp", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def __getattr__(self, name):\n        return self.client[name]\n\n    def __setattr__(self, name, value):\n        self.client[name] = value\n\n    def __delattr__(self, name):\n        del self.client[name]", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "   def decoder(self) -> StandardRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the expected output sequences as input, and is initialized with zero initial states.\n\n        Returns\n        -------\n        StandardRNN\n           ", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "   for platform in Platform.objects.all():\n        all_platform_slugs.append(platform.platform_slug)\n\n    LanguageSet.objects.create(lang_set_name='Translation Platform')\n\n    for engine in TRANSPLATFORM_ENGINES", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorSegmentNode", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static Head head(Attribute... attributes) {\n\t\treturn new Head(attributes);\n\t}\n\n\tpublic static Hr hr(Attribute... attributes", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final AbstractMeter[][] meters = benchRes.getMeters();\n        final int[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     parent_loop = None\n      for edge in visitor.edges:\n        if edge.kind == ControlFlow.E_LOOP:\n          parent_loop = edge.data\n          break\n      return parent_loop\n\n    def get_loop_body(node):\n      loop", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tthis.T = this.traindata.getNumberOf", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "   def is_xml_codepoint(self, cp: int) -> bool:\n        return cp in (0x9, 0xA, 0xD) or \\\n            0x20 <= cp <= 0xD7FF or \\\n            0xE00", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "               }\n            });\n        }\n\n        @Override\n        public void onMuteEvent(final Event event, RoomState roomState) {\n            RoomActivity.this.runOnUiThread(new Runnable() {\n\n                @Override\n                public void run() {\n                ", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tpublic Pipeline getPipeline(InFormat inFormat, OutFormat outFormat) {\n\t\tPipeline pipeline = new Pipeline();\n\t\t\n\t\t// Identity Generator\n\t\tpipeline.add(identityGenerator);\n\t\t\n\t\t// DDI2XFORMS", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationEtatsPresenceMensuel(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "           H += dot(crossmat(c - p), m * crosstens(J_rot)) + dot(I, crosstens(H_rot))\n        return H\n\n    def compute_angular_momentum_jacobian_hessian(self,", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n        }\n\n        name.setText(queuedProjectResult.getProject().getName());\n        author.setText(queuedProjectResult.getProject().get", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "   }\n\n    private void initializeFiles() {\n        currencyManager.load();\n        configManager.load();\n    }\n\n    private void initializeCurrencies() {\n        currencyManager.load();\n    }\n\n    public static EconomyService getEconomyService() {", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "   def _fit(self, *, nwalkers=100, nburn=100, nthin=100, **prior_specs):\n        \"\"\"\n        Perform a MCMC fit using the emcee library.\n\n        Parameters\n        -", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Ref(data=arg)\n    elif op == LOAD_GLOBAL:\n      return Ref(data=arg)\n    else:\n      return Undef(data=None)\n  else:\n    return Undef(data=None)\n\n  return Undef(", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tpublic ClientMaster(ResourceLoader res) {\n\t\tsuper(res);\n\t\tthis.res = res;\n\t}\n\n\tpublic void dispose() {\n\t\tif (!disposed) {\n\t\t\tdisposed = true;\n\t\t\tfor (ClientEntity e", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tv =", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> findAll() {\n\t\tList<Long> authorIds = new ArrayList<>();\n\t\tAtomicLong aLong = new AtomicLong();\n\t\tjdbcTemplate.query(\"SELECT AUTHOR.ID, AUTHOR.NAME, BOOK.", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic void executeServer(E exp, ForestReader in, ForestWriter out) {\n\t\t//TODO Auto-generated method stub\n\t}\n\n\tpublic SQLTranslation execute(E exp, ForestReader in) {\n\t\t//TODO Auto-generated method stub\n\t\treturn", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       auto_app_test(adb, app_info)\n        # download_logs(adb, download_dir)\n        # 结束动态分析\n        stop_device(adb)\n        # 结束分析\n", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "   Genotype parseGenotype(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return risks.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into risks\n     */\n", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, prepared());\n        assertThat(pe, batchPrepared());\n        assertThat(pe, prepared", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\tdef on_kp_selection_changed_in_table(self, selection):\n\t\tif len(selection) == 1:\n\t\t\tkey_point = selection[0]\n\t\t\tself._viewWidget.set_key_point_view(key_point)", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new APIIncorrectException(cause);\n                    }\n                }\n                return cause;\n            }\n        };\n        _config = config;\n        mAdapter = new RestAdapter.Builder", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\n\t\tregisterRenderer(Token.class, new DefaultTokenRenderer());\n\t\tregisterRenderer(IfToken.class, new DefaultIfTokenRenderer());\n\t\tregisterRenderer(Token.class, new DefaultTokenRenderer());\n", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSort getFacetSort(Element elt) {\n\t\tFacetSort sort;\n\t", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<pipeline_id>[\\w\\-\\+]+)/(?P<job_id>[0-9a-f-]+)/detail$', JobDetailView.as_view(), name=\"job-detail\"),\n]\n\napp_language_urls =", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       mContext.startActivity(intent);\n                        mDialog.dismiss();\n                    } catch (Exception e) {\r\n                        LogUtil.e(e);\r\n                    }\r\n                }\r\n            } else if (id == R.id.name) {\r\n                if", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   account = account_for_vimeo_id(access_token.token, person=request.user.person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            random_name = ''.join(", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               # Compute the vignetting and extinction loss\n                vign_loss = 0\n                extinction_loss = 0\n\n                # Compute the vignetting and extinction loss for the mean location\n                vign_loss_mean = 0\n                ext", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   # Initialize empty list to store posterior values\n    post_list = []\n    \n    # Initialize empty list to store prior values\n    prior_list = []\n    \n    # Initialize empty list to store likelihood values\n    likelihood_list = []\n    \n    # Initialize empty list", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollDices();\n            Board.this.doubleDices();\n          }\n      }\n    });\n    addActor(rollBtn);\n\n    doubleBtn = new TextButton(\"Double\", ts);\n    doubleBtn.addListener(new ClickListener() {", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "       self.assertEqual(etree_iter_paths(root, '//*'), [\n            ('a', '//*'),\n            ('b1', '//*'),\n            ('c1', '//*'),\n            ('c2', '//*'),\n            ('b2", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "   async def test_detect_soft_404(self):\n        entry = Entry.create(\"http://example.om/test\", response=StaticResponse(404, {}))\n        await self.runner.run(entry)\n        self.assertTrue(self.rule", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n           ", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "   List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return an ancestry.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into an ancestry\n    ", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           // Send the request to the MSSP\n            this.client.sendRequest(req);\n\n            // 5. Get the signed ASiC file\n            File signedFile = new File(\"signed.\" + RESULT_FILE);\n            signedFile.getParentFile().mkdir", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\t\tif type(obj) is Proformer:\n\t\t\t\treturn get_icon(\"proformer\")\n\t\t\telif type(obj) is Transformer:\n\t\t\t\treturn get_icon(\"transformer\")\n\t\t\telif type(obj) is Annotation:", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 12 || type == 0) {\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\n        }\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tpublic Team(String teamId) {\n\t\tthis.teamSummary = new TeamSummary(teamId);\n\t\tthis.roster = new ArrayList<>();\n\t}\n\n\tpublic TeamSummary getTeamSummary() {\n\t\treturn teamSummary;\n\t}\n\n\tpublic void", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       AppliveryDataManager.INSTANCE.saveAppData(AppData.newBuilder()\n                .setEmail(email)\n                .setScreenCapture(screenCapture)\n                .setType(userFeedback.getType())\n                .build());\n\n        FeedbackUseCase", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           try:\n                response = self.session.get_item(\n                    TableName=table_name, Key=key, ConsistentRead=consistent\n                )\n                unpack_from_dynamodb(response=response, expected=obj.Meta.columns, engine=self", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "           draw_art(fingerprint, size=10)\n            print(f'{fingerprint} - {description} - {created_at}')\n        print('')\n\n    async def upload_key(self, user=None):\n        backend = await self.open", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\n\nI have tried to follow the instructions in the documentation, but I am", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "   def cancelar_ultima_venda(\n            self,\n            chave_cfe,\n            dados_cancelamento,\n            *args,\n            **kwargs):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.Funcoes", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), 'file:///path/to/file.xml')\n        document = ElementTree.parse(io.StringIO(xml_test))\n        self.assertEqual(node_document_uri(", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new Comparator<CalendarItem>() {\n\n                        @Override\n                        public int compare(CalendarItem o1, CalendarItem o2) {\n                            return compareStartDates(o1, o2);\n                        }\n\n                       ", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   def _trainer_initialization(self) -> None:\n        \"\"\"\n        Initialize the trainer\n\n        Raises:\n            :class:`~montreal_forced_aligner.exceptions.TrainingError`\n        \"\"\"\n        raise NotImplementedError\n", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient) {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.sessionController = sessionController;\n", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n        this.releases = new SpringReleases(restTemplate, root);\n        this.stem", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "   public void broadcastState()\n    {\n        synchronized (_lockObject)\n        {\n            if (_state.getConnectionState() == FittingConnectionState.CONNECTED)\n            {\n                //noinspection ProhibitedExceptionCaught\n                try\n                {\n                ", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand( getClientManager(), getFileSet() );\n    }\n\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand( getClientManager(), getFileSet() );\n    }\n\n    protected Sv", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        super.drawComponent(mouseX, mouseY);\n        drawModalCorners(getHoverState(isHovered()));\n    }\n\n    private TexturedModal getHoverState", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       DATA[looptest][looppc][0], EPSILON);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new blackCall(), DATA[looptest][lo", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           // Load modules\n            for (Class<Module> clazz : moduleClasses) {\n                try {\n                    Module module = (Module) clazz.newInstance();\n                    module.plugin = AthenaGM.get();\n                    module.load();\n                } catch (Inst", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "   public static DownloadQueue newDownloadQueue() {\n        return new DownloadQueue(3);\n    }\n\n    public static DownloadQueue newDownloadQueue(int threadPoolSize) {\n        return new DownloadQueue(threadPoolSize);\n    }\n\n    public static void startDownload(DownloadRequest", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " @Override\n  public void init(Config config) {\n    // ...\n  }\n\n  @Override\n  public void configure(Config config) {\n    // ...\n  }\n\n  @Override\n  public void watch(WatcherRegistry registry) {\n    // ...\n", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "   private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        Validate.notNull(element, \"querySetConfig tag cannot be null\");\n        Set<String> querySets = Sets.newHashSet();\n        NodeList nodeList = element.getChildNodes();", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "   def __del__(self):\n        self.robot.ik.add(self.robot.left_foot.name)\n        self.robot.ik.add(self.robot.right_foot.name)\n        self.robot.ik.set_task(", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "   def test_ops(self):\n        for op in simple_op:\n            self.assertIsInstance(op, Operation)\n\n\n    def test_popcount(self):\n        for size in range(MIN_SIZE, MAX_SIZE + 1):\n            popcount =", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\taOutput.writeInt16(SegmentMarker.IHDR.CODE);\n\t\t\taOutput.writeInt16(aJPEG.mScanBlockCount);\n\t\t\taOutput.writeInt16(aJPEG.mMCUBlock", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           if (type == HibiscusExportType.SAMMEL) {\n                // Sendet die Sammellastschrift an Hibiscus\n                sendSammellastschriftToHibiscus();\n            } else if (type == HibiscusExportType.AL", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "   from montreal_forced_aligner.alignment.pretrained import PretrainedAligner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       entityPlayer.addChatComponentMessage(new ChatComponentText(String.format(\"Gave Lore [%s, %s] to %s\", category, ident, entityPlayer.getDisplayName())));\n    }\n\n    private EntityPlayer getPlayer(ICommandSender sender,", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   public List<AccountSummary> getAccountSummaries(Long userId) {\n        List<AccountSummary> summaries = getAccountSummaries(userId);\n        return summaries;\n    }\n\n    private List<AccountSummary> getAccountSummaries(Long userId)", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger log = Logger.getLogger(Util.class);\n\n\tprivate Util() {}\n\n\tpublic static CollectionsUtil collUtil() {\n\t\treturn CollectionsUtil.instance;\n\t}\n\n\tpublic static ClasspathUtil classpathUtil() {\n\t\t", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    ZoomIn(ZoomIn.class),\n    ZoomInDown(ZoomIn", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if check:\n        assert problem.is_feasible()\n\n    if search_mode == ChSearchMode.Optimal:\n        search_problem = SearchCh(ch, der_mode=", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "   def test_hosts_container(self):\n        hc = HostsContainer(hosts=('h1', 'h2', 'h3', 'h4'))\n        self.assertEqual(hc.hosts, set(['h1', 'h2', 'h3', 'h", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           return command.startswith(\"--src-network\") or command.startswith(\"--src-port\")\n\n        return self.tc_command_output.get_command_history(tc_command_filter)\n\n    def get_shaping_rule(self):\n        if self", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses = new ArrayList<>();\n\n        Cursor cursor =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   public MonthCalendar(Context context) {\n        this(context, null);\n    }\n\n    public MonthCalendar(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public MonthCalendar(Context context, AttributeSet attr", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0] * 25\n\n  def test_inf_input(self):\n    my_stream = white_noise", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               isinstance(t2, RecordMeta) or isinstance(t2, ListTypeMeta)\n            ):\n                t1.__instance__ = t2\n                unify(t1, t2, backref)\n            else:\n                raise\n\n    else:\n        raise Not", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       host=\"immedia-semi.com\",\n        region_id=\"US\",\n        client_id=\"blink-client-id\",\n        account_id=\"blink-account-id\",\n        token=\"blink-token\",\n        refresh_token=\"blink-refresh", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\tdef create_model_item(self, parent_item, data):\n\t\tmodel_item = DocumentModelItem(data, self, parent_item)\n\t\treturn model_item\n\n\tdef create_value_change_object(self, old_value, new_value,", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     raise ex\n\n    else:\n      self.next_sink.AsyncProcessRequest(self, msg, buf, headers)\n\n  def AsyncProcessResponse(self, sink_stack, context, stream, msg):\n    pass\n\n  def _OnTimeout(self, tag):", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       // assertThat(out.toString(), equalTo(\"\"));\n        // assertThat(out.toString(), startsWith(\"Thread dump\"));\n    }\n\n    @Test\n    public void cliNoSuchFileWithArguments() {\n        run(\"deadlocks\", \"--in\", \"", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data, false);\n    }\n\n    private static void assertThat(LinkedHashMap<Long, String> dataStoreContent, DataStoreMatcher matcher) {\n        assertThat(dataStoreContent, matcher);\n    }\n\n    private", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       RoxanaProperties properties = new RoxanaPropertiesMockBuilder()\n                .withBusiness(new BusinessMockBuilder()\n                        .withResponseStrategy(ResponseStrategy.REDIRECT)\n                        .build())\n                .build();\n\n        return properties;\n    }\n\n", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self.send(self._ping_msg)\n\n  def _OnMessage(self, message):\n    \"\"\"Called when a message is received from the remote server.\"\"\"\n    self._log.debug('Received message: %s', message)\n    if message.type == MessageType", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "   assert freq2lag(v) == lag2freq(v)\n\n\nclass TestCached(object):\n  @p(\"data\", [1, 2, 3, 4, 5])\n  def test_cached_works_with_single_input", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "   @commands.command(name=\"config\", help=\"Configure Clembot\")\n    async def config_command(self, ctx: Context):\n        ...\n\n    @commands.command(name=\"city\", help=\"Set the city for this channel\")\n    async def city_command(", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   return evaluate_comparison_operator(operands, context=context)\n\n\n@method('eq')\n@method('ne')\n@method('lt')\n@method('gt')\n@method('le')\n@method('ge')\ndef select_value_comparison_oper", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(\"Welcome, \" + getActivity().getSharedPreferences(Constants.PREF_USER_NAME, Context.MODE_PRIVATE).getString(Constants.PREF_USER_NAME, \"\"));\n\n        return header;\n    }\n\n    private void initializeEvents", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "       // Notify the fragment to update the chat list\n        InviteToChatFragment fragment = (InviteToChatFragment) getActivity();\n        fragment.updateChatPartnersList(selectedUsers);\n\n        // Notify the UserDetailsFragment to update the user list\n        User", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        System.out.println(JSON.toJSONString(response));\n    }\n\n    @Test\n    public void notify() throws WXPayApiException {\n\n        String nonceStr = SDKUtils", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       List<Parameter> parameters = creator.findParameters();\n        assertEquals(2, parameters.size());\n        assertEquals(STRING_PARAMETER_NAME_01, parameters.get(0).getName());\n        assertEquals(STRING_PARAMETER_NAME_02,", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "   public BigInteger readBigInteger() throws IOException {\n\t\treturn readOperand().asBigInteger();\n    }\n\n    public XReg readXReg() throws IOException {\n\t\treturn readOperand().asXReg();\n    }\n\n    public int readSmallIntValue", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "   def __repr__(self):\n        return self.name\n\n    def __str__(self):\n        return self.name\n\n    def __eq__(self, other):\n        return self.name == other\n\n    def __ne__(self, other):\n        return self.", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "       )\n\n        for line in ping_lines:\n            if line.startswith(\"Packets: Sent = \"):\n                continue\n\n            if line.startswith(\"Packets: Received = \"):\n                continue\n\n            if line.startswith(\"Minimum = \"):", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       m.videoSetFrameRate.setEditable(false);\n        m.videoSetFrameRate.setBackground(new Color(255, 0, 0));\n        m.videoSetFrameRate.setText(\"1\");\n        m.videoSetFrameRate.requestFocus();", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self.probe = probe\n        else:\n            self.probe = _probe_adjacency_list(self._load_probes())\n        self.channels_per_group = _channels_per_group(self.probe)\n        self.", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "   self._cdg = ControlDependence(self)\n\n    return self._cdg\n\n  def analyze(self):\n    self.compute_conditions()\n    self.compute_frames()\n    self.compute_dominators()\n    self.compute_control_dep", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       IntentIntegrator integrator = new IntentIntegrator(this);\n        integrator.setOrientationLocked(true);\n        integrator.setPrompt(\"Please scan the QR code\");\n        integrator.setActivity(this);\n        integrator.initiateScan();\n    }", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": " public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    result.append(OPEN_BRACKET);\n    visit(column);\n    result.append(\" \").append(IN).append(\" \");\n    accept", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile baseFile = new File(basePath + \"/input.xml\");\n\t\t\tFile expectedFile = new File(basePath + \"/expected/input.xforms\");\n\t\t\tFile actualFile = new File(basePath + \"/actual/input.xforms\");\n\t", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "       # Test the discrete distribution\n        dist = DiscreteDistribution(\n            pmf=np.array([0.3, 0.5, 0.2]),\n            X=np.array([0, 1, 2])\n        )\n        draws = dist.", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptString(StringTag tag, CharSequence value) {\n\t\tif (value == null) {\n\t\t\tthrow new InvalidValueException(tag, \"null value not allowed\");\n\t\t}\n\t\ttry {\n\t\t\tdispatch(value, this);\n\t", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "   def test_determine_date_of_birth(self):\n        self.assertEqual(\"1990-01-01\", determine_date_of_birth(month_of_pregnancy=12, date_of_sign_up=\"2", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfTheSystem();\n                                   ", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "# Decoder joker\nclass P1RestOctets(_Paf_):\n    def map(self, s):\n        # check if s is a string\n        if isinstance(s, str):\n            # check if it is a valid GSM string\n            if s.startswith", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "       # Check for abstract models\n        validate_not_abstract(model)\n\n        # Create the table\n        table_name = self._compute_table_name(model)\n        self.session.create_table(table_name)\n\n        # Set up the table\n        self", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "   def __init__(self, *args, **kwargs):\n        \"\"\"Inicializa a instância da classe.\n\n        :param args: Parâmetros opcionais.\n        :type args: tuple\n        :param kwargs: Parâmetros opcionais.\n        :", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   with pytest.raises(TypeError):\n        engine.bind(ComplexModel)\n\n\ndef test_bind_model_with_no_table(engine):\n    class NoTableModel(BaseModel):\n        pass\n\n    engine.bind(NoTableModel)\n", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == length\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"kg/m**3\")\n    assert u7.dimensions == mass\n    assert u7.base_", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "   ['Verify instance command references --no, returns paths',\n     ['references', 'TST_Person.name=\"Mike\"', '--no'],\n     {'stdout': ['\"root/cimv2:TST_FamilyCollection.name=\\\\\"Family2\\\\\"\",", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load modules\n        List<Module> modules = new ArrayList<>();\n        modules.add(new LoanModule());\n        modules.add(new SqlModule());\n        // Load commands\n        CommandLoader.loadCommands(this, modules);\n        // Initialize economy\n        economyService =", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       ckresult(\n            getattr(_dll, self._get_func)(\n                self._sptr, byref(index), byref(name)\n            )\n        )\n        return TAG(self, index, name)\n\n    def get_length(self):\n", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void onNewAccountClick() {\n                        startNewAccountActivity();\n                    }\n\n                    @Override\n                    public void onOrderClick(Account account, Order order) {\n                        startOrderDetailsActivity(account, order);\n                   ", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], ", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.id\n    value = 3\n    expected_ref = \":v0.#n0\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0.#n0\": expected_action.value}", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           Alert alert = new Alert(AlertType.WARNING, \"Error adding queue:\\n\" + e.getDump().getStacktrace(), ButtonType.OK);\r\n            alert.showAndWait();\r\n            return false;\r\n        } catch (NoSuchBuildNumberException e) {\r\n", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "   def get_post_url(self, *args, **kwargs):\n        slug = slugify(self.object.title)\n        return reverse('ploghubapp:view_post', args=(self.object.id, self.object.user, slug))\n", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji();\n\n    @GET(\"trending\")\n    Call<TrendingGifResponse> getTrendingGifs(@Query(\"platform\") String platform);\n\n    @GET(\"trending/terms\")\n    Call<TrendingTerm", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionWpsListener).ifPresent(ConnectionWpsListener::onDisconnect);\n            of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::error);\n            wifiLog(\"ERROR CONNECTING: \" + connectionErrorCode.name());\n        }", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\n            PressureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "   private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack.getArchivedCards())", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "   def __init__(self, *args, **kwargs):\n    def format(self, record: logging.LogRecord):\n    def parse_logs(self, log_directory: str):\n    def run(self):\n    def __init__(self, *args, **kwargs):\n", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Deployments deployments;\n    private final Jobs jobs;\n    private final Vms vms;\n    private final Errands errands;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag))\n        return tag\n\n    def get_subsound(self, index):\n        \"\"\"Retrieve a subsound.\n\n        :param int index: Index of the subsound", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "   def process_section(self, bufr_message, bit_writer, section):\n        \"\"\"\n        This method processes a single section of the BUFR message.\n\n        :param bufr_message: The BufrMessage object to which the section will be added.\n        :", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            abuse_report = form.save(commit=False)\n            abuse_report.logged_against = logged_against\n            abuse_report.logged", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   @Override\n    public void output(final AbstractResult paramResult) {\n        final NiceTable table = new NiceTable(paramResult.getNumberOfColumns());\n        table.addHeader(paramResult.getMethod().getDeclaringClass().getSimpleName() + \":\" + paramResult", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       // Initializing the application options\n        ApplicationOptions options = factory.getOptions();\n        options.setVersion(versionNumber);\n        options.setDate(versionDate);\n        options.setManualURL(URL_MANUAL);\n        options.setHomepageURL(URL_", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(URL(\"http://example.com/record\"), true);\n\t\t\n\t\tresponse.getWriter().println(\"Thank you for calling. This call has been recorded.\");\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "resposta.setQuestao(questaoDao.carrega(idDaQuestao));\nresposta.setAluno(alunoDao.carrega(resposta.getAluno()));\nresposta.setDisciplina(disciplinaDao.carreg", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int status, TrackListConnector connector) {\n\t\t\t\tif (status == 0) {\n\t\t\t\t\tProgramManager programManager = ProgramManager.getInstance();\n\t\t\t\t\tprogramManager.parseTrack(connector.get", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Inject\n    public ExoPlayerFSMTest() {\n        // Nothing to do here\n    }\n\n    @Before\n    public void setUp() {\n        // Nothing to do here\n    }\n\n    @Test\n    public void test_fetchAd_success() {", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tif (client != null) {\n\t\t\t\t\t\tclient.disconnect();\n\t\t\t\t\t}\n\t\t\t\t\tsuper.stop();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tauthorize(new", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String adapterName = adapterName(type.getQualifiedName());\n    String injectorName = injectorName(type.getQualifiedName());\n\n    // Generate the adapter class.\n    JavaFile adapterFile = JavaFile.builder(packageName, adapterName)\n        .", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n        public static void enableReceiveNormalMsg(boolean enable){Next line of code:\n\n            new EnableReceiveNormalMsgApi().enableReceiveNormalMsg(enable);\n        }\r\n    }\r\n", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_encoder():\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      '--", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   if is_xml_codepoint(item):\n        return f'/{item.value}'\n    elif is_comment_node(item):\n        return f'/{item.value}'\n    elif is_schema_node(item):\n        return f'/{item.name}'\n", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   def last_record(self):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self)\n\n    def dropnan_table(self):\n        \"\"\"\n        Drop rows where the values are missing\n        \"\"\"\n        dropnan_table(self", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               if (_isTyping)\n                {\n                    _isTyping = false;\n                    addMessage(new ChatMessage(ChatMessageSource.AUDIOLOGIST, new TypingMessage(message.getSelection())));\n                }\n            }\n        }\n   ", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\t# Initialize TFCE\n\t\tCreateAdjSet(dmy_leftvar, dmy_rightvar, dmy_covariates, medtype, nonzero, data, outdata_mask_lh, affine_mask_lh, adjac_lh,", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       assertThat(main.getStack(), Matchers.notNullValue());\n        assertThat(main.getLock(), Matchers.notNullValue());\n        assertThat(main.getUncaughtException(), Matchers.nullValue());\n        assertThat(main.getThreadName(), Matchers", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               // 打开时间选择对话框\n                DialogPicker dialog = new DialogPicker(this, mRecord.getRecordTime(), new DialogPicker.OnDateSetListener() {\n                    @Override\n                    public void onDateSet(LunarCalendar date", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 5 || type == 0) {\n            LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_home);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.link.connect()\n\n    def init_logging(self):\n        #logging.basicConfig(level=self.config.log_level,\n        #                    format=\"[%(name)s]: %(message)s\")\n        self.log = logging.get", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       if isinstance(emails, six.string_types):\n            emails = [[emails]]\n        elif isinstance(emails[0], list) is False:\n            raise ValueError(\"'emails' must be a list of lists.\")\n        if isinstance(duration, tim", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       // Set up the light level manager to listen for changes in the\n        // system's light level.\n        activityLightLevelManager = new ActivityLightLevelManager(this);\n        activityLightLevelManager.setOnLightLevelChangeListener(new ActivityLightLevelManager.OnLightLevelChangeListener()", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_ther", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('Identity', Pt=Identity(), Len=1+8), \\\r\n            if with_options: \\\r\n                Str('Option', Pt=Option(), Len=1+16)])\n        self.set_ie(self.ie_list[0])\n\n", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       self.__class_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_tc_qdisc_rule(self, device, qdisc_id", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "   result, index = apply_fast_eq(left.values, right.values, left.index, right.index)\n    return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)\n\ndef apply", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   def decorator(func):\n        return decorator\n\n    @decorator\n    def validate_response(response, validator_map):\n        raise SwaggerMappingError('Invalid response')\n\n    response = Mock(spec=Response)\n    with pytest.raises(Validation", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
