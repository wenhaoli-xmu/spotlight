{"pred": "\t\t\t\tforeach ( Gump g in m_Participants[i].Gumps )\n\t\t\t\t{\n\t\t\t\t\t\tif ( g is DuelContextGump )\n\t\t\t\t\t\t\t((DuelContextGump)g).Close();\n", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\t\n\t\t\tif 'R' in roots:\n\t\t\t\troots.remove('R')\n\t\t\tif w == float('-inf'):\n\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        # First, read some frames,", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   def get_text_by_css(self, css_selector):\n        return self.browser.find_element_by_css_selector(css_selector).text\n\n    def get_elements_list(self, css_selector):\n        return self.browser.find_elements", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += a.hint_string() + \"\\n\"\n        return ret\n\nclass _AnswerData(_QAData):\n    def __init__(self, question, answer):\n        self.question = question\n        self.answer =", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.print(\"Certificate: \");\n                cert.print(s);\n                s.println(\"***\");\n            }\n        }\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLI", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public synchronized static void registerSpace (String name, JESpace sp) {\n        spaceRegistrar.put (", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item.isAlchemical()) {\n\t\t\t\tif (item.quantity() == 1) {\n\t\t\t\t\tRed", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       # return self.handler(environ, start_response)\n\nComment:\n\nComment: I'm not sure what you're trying to do here. You're trying to call the handler function, but you're not passing it any arguments.\n\nComment: I'm trying to", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "           return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_extract_archive", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!Reference", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       for trust_manager in self.trust_managers:\n            return trust_manager.getAcceptedIssuers()\n        return None\n\n# FIXME: this is a bit heavyweight for the Python dev, but it's a good example of how to use\n#", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Finds the forward for the domain admin page.\n     *\n     * @param mapping the action mapping\n     * @param domain the", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "       self.__datastream_transport = await self.__server.accept()\n        self.__datastream_protocol = DataStreamProtocol(\n            self.__datastream_transport,\n            self.__datastream_address,\n            self.__event_loop)\n        self.__datast", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\tjumpID = 1;", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED_DATA(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE,\n\t\t\t\t\t\t\"Auto save", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.FinishSequence();\n            }\n        }\n        private class InternalTarget : Target\n        {\n            private ArchProtectionSpell m_Owner;\n            public InternalTarget(ArchProtectionSpell owner)\n                : base(Core.ML ?", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._new = {}\n        self._deleted = {}\n        self._flushing = False\n        self._autoflush = self.autoflush\n        self._autoflush_context = self._autoflush_context or []\n        self._autof", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getType().getClassName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like ``r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if self.request.path.endswith(\"/\"):\n           ", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n    ##\n    ## Wigle Downloader\n    ##\n    ##\n    ## Wigle Downloader\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(0) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds = android_builds(build, builds)\n    else:\n        builds = [{'os': 'os_android',\n                   'os_pretty': 'Android',\n                   'arch': 'x86',\n                   'arch_pretty': 'Android x", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.getByProjectTypeIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\t} else {\n\t\t\tstateBeansList", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Parent.GetType() == typeof(CallExpressionSyntax)) {\n                    var callExpression = (CallExpressionSyntax)argument.Parent;\n                    var method = callExpression.Method.Identifier.Value.StringValue", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the user_partition_id is set to the first group_id.\n        self.assertEqual(0, split_test.user_partition_id)\n        # Verify that the group_", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           tmp.Add(GetCIDFontType2(piref, subsetPrefix, metrics));\n            tmp.Add(GetFontBaseType(pire, subsetPrefix, GetToUnicode(metrics)));\n            writer.AddFont(tmp);\n        }\n        /** Gets the", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcgn.depth = 0;\n\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      final InputStream inputStream = context.getAssets().open(model.getSprite());\n      Bitmap bitmap = BitmapUtil", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\n\n\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               ScriptManager sm = ScriptManager.GetCurrent(Page);\n                sm.RegisterScriptControl(this);\n            }\n            if (String.IsNullOrEmpty(Roles)==false)\n            {\n                string[] roles = Roles.Split(new String[]{ RoleSeparator", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"Fire\"))\n\t\t{\n\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \"probability=\" + probability;\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects[0].select_related()\n        o = Organization.objects.first()\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(o.employ", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "                   if sel_dim:\n                        widget_dim.observe(on_widget_dim_change, names='value')\n                        widget_x.observe(on_widget_x_change, names='value')\n                        widget_y.observe(on_widget", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (rootFolder.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"rootFolder\");\n                }\n                if (rootFolder.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"rootFolder\");\n                }\n                if", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            isDiscussable = con", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tinternal byte m_X;\n\t\tinternal byte m_Y;\n\t\tinternal byte m_Z;\n\t\tinternal byte m_Hue;\n\t\tinternal byte m_Hue2;", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // get the parcel voice channel\n                    parcelVoiceInfo = new LLSDParcelVoiceInfoResponse(\n                        land.Name, land.LocalID, land.Flags, land.ParcelVoiceChannel,\n                        m_freeSwitchRealm", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(IsNew){\n\t\t\t\tPayPeriods.Insert(PayPeriodCur);\n\t\t\t}\n\t\t\telse{\n\t\t\t\t", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group or organization member')}\n    return authz.is_authorized('group_member_create', context, data_dict)\ndef group_member_create(context,", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint outcome = outcomes[parentIndex];\n\t\t\t\tint depth = depths[parentIndex];\n\t\t\t\tdouble confidence = confidences[parentIndex];\n\t\t\t\t// setting prediction\n\t\t\t\texample.setValue(predictionAttribute,", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = codePoint - 0x10000;\n            if (codePoint < 0xD800 || codePoint > 0xDBFF) {\n               return -1;\n            }\n            if (offset < strlen) {\n               ch =", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       if (existingRequired) {\n            if (StringUtil.isEmpty(studyFormName)) {\n                return ValidationResults.REQUIRED_FAIL;\n            }\n            if (!studyFormName.equals(accessionNumber.substring(PROGRAM_START,", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tLog.Write(\"server\", \"Rejected connection from {0}; {1}\",\n\t\t\t\t\t\t\tnewConn.Socket.RemoteEndPoint, message);\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean)beans[x]).build", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (Info.BuildingLimits == null)\n\t\t\t\treturn;\n\t\t\tvar rallyPoints = new List<CPos>();\n\t\t\tforeach (var building in Info.BuildingLimits.Keys)\n\t\t\t{\n\t\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       // Execution Plan\n        List<AbstractPlanNode> planNodes = new ArrayList<AbstractPlanNode>();\n        planNodes.add(plan);\n        return planNodes;\n    }\n    public CompiledPlan getCompiledPlan(String sql) {\n        return m_currentPlan;", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\tthis.comboBox1.Size = new System.Drawing.Size(241, 21);\n\t\t\tthis.comboBox", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\t\tdcb.BaudRate = baud_rate;\n\t\t\t\tdcb.Parity = parity;\n\t\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n    def test_user_with_cobrand", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    if _keep_tempdir:\n        print \"Keeping tempdir\"\n    else:\n        print \"Cleaning up tempdir\"\n    #print \"args is\",", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tif entry[0] == self.oldlist[ap]['essid']:\n\t\t\t\t\tif entry[3] == 'on':\n\t\t\t\t\t\tif entry[4] == self.oldlist[ap]['iface']:\n\t\t\t", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               return new Rectangle(x * fontX, y * fontY, fontX, fontY);\n            }\n        }\n        \n        /** Gets the maximum area that the barcode and the text, if\n        * any, will occupy. The lower left corner is always (0", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90.0, +90.0, 10.0)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            (\"longitude\",", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.ToText());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            if (currPacket == null", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   elif color == 'yellow':\n        print '\\033[1;33;40m'\nNext line of code:\n\n    else:\n        print '\\033[1;32;40m'\nNext line of code:\n\n    print '\\0", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "       }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "       if isinstance( original, _CheckContext ):\n            return self.nullFunction(\n                original.__name__,\n                original.DLL,\n                resultType = original.restype,\n                argTypes= original.argtypes,\n                doc = original.__doc__,\n", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           for (int i = 0; i < files.size(); i++) {\n                if (emptyStreams.get(i)) {\n                    baos.write(i);\n                }\n            }\n            header.write(baos.toByteArray());\n        }\n", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   if (alphaLevel < 255)\n                        alphaLevel++;\n                    else\n                        alphaLevel = 0;\n                    repaint();\n                }\n                else\n                {\n                    if (alphaLevel > 0)\n                        alphaLevel--;", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_max", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, can", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       f.writelines(['F) ', str(psf_oversamp), '\t\t\t# PSF oversampling factor\\n'])\n        f.writelines(['G) ', str(psf_oversamp), '\t\t\t# PSF oversampling factor", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    /* C", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return u\"{0}/{1}/{2}/{3}\".format(\n            self._course_dict['org'],\n            self._course_dict['number'],\n            self._course_dict['run'],\n            self._course_dict['display_name']\n        )", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tfor(String splitNumber : splitNumber) {\n\t\t\tif(splitNumber.equals(\"\")) continue;\n\t\t\tchance = chance * 10 / 1000;\n\t\t}\n\t\treturn (int) (chance * 100", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       # If the config directory doesn't exist, create it\n        if not os.path.exists(config_directory):\n            try:\n                os.makedirs(config_directory)\n            except:\n                module.fail_json(\"Could not create \" + config_directory)", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(5, 111);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            try:\n                plugruncount += 1\n                plug.collect()\n            except KeyboardInterrupt:\n                raise\n            except (OSError, IOError) as e:\n                if e.errno", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   def getRoomBookingList(self):\n        \"\"\" Session Room Booking List \"\"\"\n    getRoomBookingList.result = IConferenceParticipationFossil\n    getRoomBookingList.name = \"roomBookingList\"\n    def getSupportInfo(", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.alertError(parent, \"Error importing message: \" + e.getMessage());\n                            setVisible(true);\n                            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = messageWriter.importMessages(fileTextField.", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tif (value instanceof Integer) {\n\t\t       \t\t\t\tlayer = ((Integer) value).intValue();\n\t\t       \t\t\t}\n\t\t       \t\t}\n\t\t    \t}\n    \t\t}\n    \t\treturn layer;", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && !currentSession.equals(Session.getActiveSession())) {\n            userInfoSession = currentSession;\n            userInfoSession.request(new Session.StatusCallback() {\n                @Override\n                public void call(Session session, SessionState state, Exception exception", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (int i = 0; i < emotions.length; i++) {\n\t\t\tsum += emotions[i].strength;\n\t\t}\n\t\tfor (int i = 0; i < emotions.length; i++) {\n\t\t\tem", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n                }\n            }],\n            self.build.stages_to_list())\n    def test_to_dict_with_properties(self):\n        \"\"\"Test exporting as a dictonary with properties", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   if (NorthernHemisphere == 1):\n        LongRad = phi1 - LongOriginRad\n    else:\n        LongRad = phi1 - LongOriginRad\n    LongRadRad = LongRad * _deg2rad\n    #compute the UTM Zone from", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data['report']\n            report_user = ReportUser.objects.create(\n                report_user = user,\n                report_user_profile = profile,", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return \"Add series for %s\" % self.context.title\n    @property\n    def form_fields(self):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n       ", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n#endif\n\t\tpublic static KPTranslation LoadFrom(string strFileName)\n\t\t{\n\t", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @param value\n     * @throws InvalidDataTypeException\n     */\n    public void setValue(long value) throws InvalidDataTypeException\n    {\n        if", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "               new_positional_tags_list.append(\n                    TagRegex(flag, regex))\n            return new_positional_tags_list\n    def compile_tag_regex_with_defaults(positional_tags):\n        if not positional_tags:\n           ", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\nNext line of code:\n\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n           ", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.bus_name = dbus.service.BusName(name, allow_replacement=True, replace_existing=True)\n\t\tdbus.service.Object.__init__(self, self.bus_name, '/org/freedesktop/secrets')\n", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "               this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(Prism), 1073465, 1, 1", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       if exc is None:\n            exc = sys.exc_info()[1]\n        self.app.do_teardown_request(exc)\n        rv = _request_ctx_stack.pop()\n        assert rv is self, 'Popped wrong request", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       dx = (rot_dir[0] * ray_trafo.range.meshgrid[1] +\n              rot_dir[1] * ray_trafo.range.meshgrid[2])\n    else:\n        dx = (rot_dir[0] * ray", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "       return regx\n    def _buildURL(self, url):\n        \"\"\" Return the Proxyfied URL of the page \"\"\"\n        if self.isEnabled():\n            url = self.getProxyURL() + self.param + urllib.quote_plus(url) + self.", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (type == FontSize.AsUnit)\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\telse\n\t\t\t\treturn font_size_names [type];\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, I", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    Topic node1 = getVertexTopic(w + \" \" + h, topicmap, optionsValues);\n                    Topic node2 = getVertexTopic(w + \" \" (h + 1", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   # test\n    i1 = iso.Isoelastics(ds)\n    i2 = iso.Isoelastics(ds)\n    i3 = iso.Isoelastics(ds)\n    i4 = iso.Isoelastics", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       final String filename = args[0];\n        final String filename2 = args[1];\n        final String filename3 = args[2];\n        final String filename4 = args[3];\n        final String filename5 = args[4];\n        final String filename6 = args[5];", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "       history = [ {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                ", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performDownloadAndInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should uninstall Yarta.\n\t * \n\t * When the function returns true Yarta will be uninstalled.\n\t * \n\t * @return true", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tcontext = IntPtr.Zero;\n\t\t\tSDL.SDL_DestroyWindow(window.Window);\n\t\t\twindow = null;\n\t\t}\n\t\tpublic void SetThread", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       (projected onto the *y* axis).\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_mat_inverse, self.y_data_cov_mat_", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 adminUser = getEucalyptusAdmin();\n                  } else {\n                  accountIdAccountMap.put(walrusObject.getOwnerId(), owningAccount);\n                  LOG.warn(\"Account ID \" + walrusObject.getOwnerId() + \" does", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _intialized += value; }\n            remove { _intialized -= value; }\n        }", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command =\n                new ImportVmTemplateCommand(createParameters());\n        command.setIsImportAsNewEntity(isImportAsNewEntity);\n        command.setName(name);\n        CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command);", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint)(2));\n\t\t\tw10.LeftAttach = ((uint)(3));\n\t\t\tw10.RightAttach = ((uint", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "           environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n                self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sTOTAL", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = getVertex(i, x);\n            }\n        }\n    }\n    /**\n     * Stores in the <code>normal</code> array the normal values of quad\n     * <code>i</code>. If <code>i</code> is", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (showDateData.equals(\"true\")) {\n            result.add(\"date created\");\n        }\n        showDateData = property(\"categoryDateLastModified\", \"search\", \"\");\n        if (showDateData.equals(\"true\")) {\n            result.add(\"date last", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputField.text;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnResize(EventArgs e)\n    {\n      if (m_autoHeight)\n      {\nNext line of code:", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                else\n                {\n                    lastUser = string.Empty;\n                }\n                if (lastUser != string.Empty)\n                {\n                    Users.Add(lastUser);\n                }\n            }", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           if (CriteriaCodesUsed.Count > 1)\n            {\n                ValidationColumn = PcConferenceTable.ColumnConferenceKey;\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult(this, ErrorCodes.GetErrorInfo(", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __str__(self):\n        return \"PayloadRequirements(packages=%s, groups=%s)\" % (self.packages, self.groups)\n    def __repr__(self):\n        return 'PayloadRequirements(packages=%s, groups=%s)' % (", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\treturn Enabled && CopyCustom;\n\t\t}\n\t\t#endregion\n\t\t#region Private Methods\n\t\tprivate void OnImageBoxSelected(object sender, ImageBoxSelectedEventArgs e)\n\t\t{\n\t\t\tif (this.CurrentDisplaySet == null", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic string ConfDirectory {\nNext line of code:\n\n\t\t\tget {\n\t\t\t\treturn confDir;\n\t\t\t}\n\t\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation sourceLineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (sourceLineAnnotation.getLineNumber() < 0) {\n                    throw new BugInstanceException(\"Line number must be >= 0\");\n               ", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady() && min", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        clean_field_model_definitions()\n    def test_field_name_model_based_", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new object[] {\"E1\", \"10\"});\n                env.UndeployAll();\n            }\n        }\n        internal class InfraWidening2 : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public InfraWidening2(", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "       c = self.copy()\n        return c.__imul__(other)\n    \n    def __imod__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        clibrebound.reb_particle", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   def _get_view_arch(self, cr, uid, view_id, context=None):\n        \"\"\" Return the arch of the view.\n        \"\"\"\n        if isinstance(view_id, basestring):\n            return self.pool['ir.model.data'].", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n            c.setClientProperty(BasicHTML.propertyKey, value);\n        }\n        else {\n            c.setClientProperty(BasicHTML.propertyKey, null);\n        }\n        if (oldValue != null) {\n", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/html/test.html", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.namedquery = namedQueryReference;\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQueryParameter)\n\t\t{\n\t", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tforeach ( PlayerState pl in m_Members )\n\t\t\t{\n\t\t\t\tpl.Serialize( writer );\n\t\t\t}\n\t\t\tm_F", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.pop();\n    }\n    private void pushInvocation(MethodInvocation methodInvocation) {\n        invocationQueue.addLast(methodInvocation);\n    }\n    private void pushInvocationAndGraphs(MethodInvocation methodInvocation, int inliningDepth) {\n        inv", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               self.pytest_command = \"py.test -s -k '{}'\".format(pytest)\n            else:\n                self.pytest_command = \"py.test -s -k '{}'\".format(self.pr_metadata.get('pytest', None", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhiNode phi = getCachedPhi(key, value);\n                    for (int i = 1; i < states.size(); i++) {\n                        states.get(i).readCache.put(key, phi);\n", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraEvent */\n    public void handleCamera", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendLocalizedMessage(1156691); // You can't use this map here.\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   'BibrecBib{0:02d}x'.format(idx),\n    'Bib{0:02d}x'.format(idx),\n])\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def remove_user_session(self, username, domain, resource):\nNext line of code:\n\n    def remove_user_sessions(self, username, domain):\nNext line of code:\n\n    def remove_user_sessions(self, username, domain, resource):", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath)\n    def find(self, st, by='msgid'):\n        \"\"\"\n        Find entry which msgid (or property identified by the *", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    if res['Value']:\n      res = self.integrityClient.setTransformationParameter( transID, 'Status',", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(uri.getPath() == null)\n\t\t\t\t\tthrow new CommentException(l10n(\"invalidFormURI\"));\n\t\t\tif(uri.getPath().startsWith(PLUGINS_PREFIX))\n\t\t\t\tthrow new CommentException", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        msg = yield self.run_fake_single_build(gsp, buildResult,\n                                               expWarning=True)\n        result = makeReviewResult(msg,\n", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.text = 'test'\n    self.category.extension_attributes['foo'] = 'bar'\n    self.assert_(self.category.text == 'test')\n", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "           Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> r = new HashMap<String, AnnotationMirror>();\n            r.putAll(r1);\n            r.putAll(r2);\n            return r", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "       col = split.column()\n        col.prop(mat, \"use_transparency\")\n        col.prop(mat, \"transparency_method\")\n        col.prop(mat, \"transparency_factor\")\n        col.prop(mat, \"transparency", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_timer_irq_count = map16.TimerI", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenuItem jMnuOpenDocument = new JMenuItem(\"Open Document\");\n            jMnuOpenDocument.addActionListener(oActionListener);\n            _jMnuRoot.add(jMnuOpenDocument);\n        }\n        private void insertMenus(){\n            JMenu j", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t// Page 2\n\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\n\t\t// Page 3\n\tAdd(\"Party Quest\", 70027", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn SizeHeightToFitWithMin (min, min);\n\t\t}\n\t\tpublic int SizeHeightToFitWithMin (int min, int min2)\n\t\t{\n\t\t\tint height = 0;\n\t\t\tint width = 0;", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.announcement.title\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this announcement.\n        \"\"\"\n        return reverse('announcements:announcement_detail', kwargs={'slug': self.announ", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers.append('php', PhpLexer)\n# Enable highlighting for PHP code not between <?php ... ?>\n#lexers.append('php', PhpLexer)\n# Enable highlighting for PHP code not between <?php ... ?>\n#lexers.append", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                ORDER BY sdate, stime ''', (i,))\n    row_count = len(cursor.fetchall())\n    print \"Row count is: \", row_count\n    if row_count > 0:\n        print \"++++++++++++++++++++++", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       print(\"db_set_last_snapshot\", project_id, timestamp)\n        try:\n            conn.table('projects').update({'last_snapshot': timestamp})\n        except Exception as err:\n            log(\"Error updating project {project_id} in rethinkdb", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"Haha, you're joking, right?<br/>I'm not sure what you're talking about.<br/>I'm not sure what you're talking about.<br/>I'm not sure what you're talking about.<br/>I'", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead =", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nNext line of code:\n\n    def __repr__(self):\n        return 'TaskData(%s, %s, %s, %s", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               else if (toastType.equals(TOAST_NONE))\n                    Toast.makeText(context, getString(R.string.toast_message_done) + uri, Toast.LENGTH_LONG).show();\n                else if (toastType.equals(TOAST", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       build_ext = self.get_finalized_command('build_ext')\n        inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def get_command (self, cmd_name):\n        \"\"\"Return the command", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], session, entity", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-o', log_name,\n        '-q', '1',\n        '-N', '1,1',\n        '-c', '1',\n        '-t', '1',\n        '-n', '1',\n        '-l', '1',\n        '-m', '", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate(DelegateViewModel", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2})\", circle.X, circle.Y, circle.Radius);\n                    }\n                    if (obj is Vector2)\n                    {\n                        var vector = (", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   def handlePremium(self):\n        premium_url = None\n        if self.__name__ == \"FileserveCom\":\n            #try api download\n            res = self.load(\"http://app.fileserve.com/api/download/premium/\",\n                ", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t{\n\t\t\t\tvar closest = path.Min(pathFinder.GetClosest(self.Location, path.Min(pathFinder.GetClosest(self.Location, path.Min(path", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"service %s restart failed\" % service_name)\n                       return False\n            else:\n                self.logger.info(\"dhcpd -t -q\")\n                rc = utils.subprocess_call(self.logger, \"dhcp", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n        return Event.newBuilder(Event.getDefaultInstance());\n        return Event.newBuilder(Event.getDefaultInstance(), false);\n        return Event.newBuilder(Event.getDefaultInstance(), true);\n        return Event.newBuilder(Event.get", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           for (; stateIndex < MAXIMUM_ORDER; stateIndex++)\n            {\n                PpmState state = _allocator.AllocateUnits(1);\n                if (state == PpmState.ZERO)\n                {\n                    goto RestartModel;", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false, false, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t\t}\n\t\t\t\n\t\t\tstring [] tFull = t.Split(new char[] {':'});\n\t\t\tif(! Util.IsNumber(tFull[3], false))\n\t\t\t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 10)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00\\x00\\x", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'], csi_95, 'k')\n    ax.plot(cr['combined'][app][VC]['durations'], cr['combined'][app][VC]['stats'][stat], '", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_GID(self):\n        \"\"\"\n        Check GID/UID switches when current effective GID is non-root.\n        \"\"\"\n        self._testUIDGIDSwitch(0, 1, 0, 0, [], [])\n        self._testUID", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\t\tg.fillRect(x + 1, y + 1, controlSize - 3, controlSize - 3);\n\t\t\t\t}\n\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[0])\n  if winner != 0:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n\n  winner, _inferenceResult", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(kind, offset, value);\n    }\n    @HOSTED_ONLY\n    public void writeValue(Kind kind, ObjectMirror mirror, int offset, Value value, boolean isArray) {\n        assert kind.isPrimitiveOfSameSizeAs(", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = Path.GetFullPath(Path.Combine(Parent.Directory, relativePath));\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string.format(*args, **kwargs)\ndef str_format_color(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    \n    >>> str_format_color", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       n = m + i16 - 2;\n        i27 = i26 + i16 - 1;\n        i20 = i25 + i16 - 1;\n        i21 = i24 + i16 - 1;\n", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t\t\tif", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Lux\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lux\",\n                   ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.password\"));\n\t}\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(\n            OSError,\n            lambda: subprocess.Popen(\n                ['/sbin/modinfo', '-d', 'somemodule'],\n                stdin=subprocess.PIPE,\n                stdout=subprocess.PIPE,\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (PropertiesService.PropertiesServiceInitialized) {\n\t\t\t\tthrow new InvalidOperationException(\"PropertiesServiceInitialized must be false before calling StartCoreServices\");\n\t\t\t}\n\t\t\tPropertiesService.PropertiesServiceInitialized = true;\n\t\t\t\n\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tinternal void AddToConstraintCollection (ConstraintCollection collection)\n\t\t{\n\t\t\tif (collection == null)\n\t\t\t\tthrow new ArgumentNullException (\"collection\");\n\t\t\tif (collection.Contains (this))\n\t\t\t\tthrow new ArgumentException (\"Constraint already", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.setLayout(self.verticalLayout_2)\n\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n    def retranslateUi(self, Dialog):\n        Dialog.setWindowTitle(Qt", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               return false;\n            }\n            String stationId = wxs.getString( wxs.getColumnIndex( Awos1.WX_SENSOR_IDENT ) );\n            if ( stationId.length() == 0 ) {\n                // No station with TAF was", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tQueryStatistics stats = s.Statistics;\n\t\t\t\tstats.Clear();\n\t\t\t\ts.CreateQuery(\"from Continent\").List();\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t\t\t\ts.", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiByteValue |= (uint)p[iBufferIndex];\nNext line of code:\n\n                uiCRCITTSum = (uiCRCITTSum >> 8) ^ (uint)(((ulong)uiCRCITTSum & 0xFF) ^", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getDisguiseModule().getItem().getMaxDamage() * 10;\n\t}\n\t/**\n\t * @return The sentry's current position\n\t */\n\tpublic BlockPosition getPosition() {\n\t\treturn blockPosition();\n\t}\n", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new JavaHyperlinkDetector(), \n                    new ReferencesHyperlinkDetector(), \n                    new ReferencesPopup.ReferencesHyperlinkDetector(), \n                    new CeylonJavaBackendHy", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(Object3DAspectWidget(self))\n        self.l.addWidget(Object3DScale(self))\n        self.l.addWidget(Object3DProperties(self", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\t\tcase 3: // Set location\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\t\tshould", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedObj = selectConverter.convert(valueChoice);\n                        if (convertedObj.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (i!=j)\n\t\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+fractionWithAmount[i][j][0]+\"\\t\"+fractionWithAmount[i][j][1]+\"\\t\"+fractionWithAmount[i", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultType {\nNext line of code:\n\n\t\t\tget", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final int ownerGroupMode = 0700;\n        final int ownerGroupId2 = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int ownerGroupMode2 = 0700;\n        final int ownerGroupId3 = new Random", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v - viewport.ToVector2 ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 offset)\n\t\t{\n\t\t\treturn v - viewport.ToVector2 () + offset;\n", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\n\n\n\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tRemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// send a message to a specific client\n\t\t/// </summary>", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Step) {\n                logDataSet(list);\n            } else if(type == RequestType.Activity) {\n                logDataSet(convertToActivityBucketList(list));\n            } else if(type == RequestType.Step) {\n                log", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " if bind_count:\n    for i in xrange(bind_count):\n      print '    A%d a%d' % (i, i)\n  else:\n    print '    ReturnType (%s)(%s)' % (signature, method_types)\n", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return HttpResponse(simplejson.dumps(items), content_type=\"application/json\")\n    \"\"\"\n    response = HttpResponse(mimetype='application/json')\n    response['Content-Disposition'] = (\n        u'attachment; filename=\"{0}.json\"'.", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        final ASTContainer givenAST = new ASTContainer(given);\n        final AST", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       if request.method == \"POST\":\n            form = self.get_form()\n            if form.is_valid():\n                self.save_form(form)\n                return self._handle_set_is_active()\n        return super(UserDetailView, self).post(", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of named byte sequences persisted with the assembly and used during execution, typically via .NET Framework helper classes.\n    /// </summary>\n    public IEnumerable<IResource", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           for (int i = 0; i < input.Count; i++)\n            {\n                d[i] = 1.0;\n                r[i] = input[i];\n                uodd[i] = 0.0;\n                ueven[i] =", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\t\t\treturn new Apfloat[] {median};\n\t\t} else {\n\t\t\tApfloat median = sortedNumbers[left];\n\t\t\tApfloat median2 = sortedNumbers[right];\n\t\t\t\n\t", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               if sample_count[v, j] == 0:\n                    A[i, j] = edge.child\n                else:\n                    A[i, j] = -1\n                v = parent[v]\n    for i in range(len(focal)):\n", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for mapping in mapping_json['mappings']:\n            if mapping['type'] == 'sh':\n                result[mapping['type']] = csv_mapping.get_mapping(mapping['_source'])\n        return result\n    def _test_enrich_to_raw(self", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots && slot.Value.LockTeam == false && slot.Value.Slots.Count == 0)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\nclass SettingsFrame(Frame):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var bb = cluster.BoundingBox;\n            var bb2 = cluster.RectangularBoundary.BoundingBox;\n            if (bb.Width != bb2.Width || bb.Height != bb2.Height)\n                throw new Exception(\"Cluster \" +", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos(m_maxSlopeRadians);\n}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn m_maxSlopeRadians;\n}\nvoid btKinematicCharacter", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       if (initializers.size() == 1) {\n            ExpressionTree exp = initializers.get(0);\n            if (canBeLeaked(exp)) {\n                checker.report(Result.failure(\"unique.leaked\"), exp);\n            }\n        }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\t", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(Context, _returnNode.Attributes[TYPE_ATTRIB].Value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\t\tmyTrackBar.Width = 80;\n", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\twhen(classType.castToClass()).thenReturn(classType);\n\t\t\twhen(classType.isInitialized()).thenReturn(true);\n\t\t\twhen(instrumentationApplier", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isAbstractionActive() != other.isAbstractionActive())\n\t\t\treturn false;\n\t\tif (this.isImplicit() != other.isImplicit())\n\t\t\treturn false;\n\t\tif (this.getAccessPath().", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideRExtent[end][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "               'rsync', '--archive', '--delete', '--copy-del',\n                '--exclude', 'pg_xlog', '--exclude', 'pg_xlog.crt',\n                '--exclude', 'pg_xlog.crt.sig',", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact)proxyThat;\n\t\t\tif ( !(this.getId() == null && that.getId() == null) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t  with open(name, 'w') as f_ID:\n\t    f_ID.write(str(body_types[i]) + '\\n')\n\t    for j in range(body_types[i]):\n\t      orientation = bodies[body_offset + j].", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata is not None:\n            if all(isinstance(e, slice) and e.start is None and\n                   e.stop is None and (e.step is None or T.extract_constant(e.step,\n                                                                         only_process_const", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   def clean_groups(self):\n        \"\"\"Checks if the groups are selected\"\"\"\n        groups = self.cleaned_data['groups']\n        if not groups:\n            raise ValidationError(\"Please select at least one group.\")\n        return groups\n\n\n\n\n\n\n", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return fn(*arg, **kw)\n        else:\n            def wrap(*arg, **kw):\n                if not retval:\n                    query = arg[0]\n                    fn(*arg, **kw)\n                    return query\n                else:\n                    return fn", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           for location in self.show_tag_list:\n                self.runtime.add_block_as_child_node(location, xml_object)\n        self.runtime.add_block_as_child_node(self.get_icon_class(), xml_object)\n       ", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for key, old_value, new_value in data_model_changes]\n        self.update_filtered_data()\n        self.update_filter()\n        return global_changes\n    def get_filtered_data_shape(self):\n        return self.get_", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class == null && Method != null && Field != null && Sig != null)\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'method' or 'field' attribute with 'type' attribute", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 18;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assert", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\tif(wand.getItem() == Botania.getItem(\"wand_mana_collector\")) {\n\t\t\t\tif(linkedCollector == null) {\n\t\t\t\t\tif(cachedCollector", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           for (Node neighbor : component.getNeighbors()) {\n\n                intrinsicCohesion += this.getRepresentativity(neighbor, c);\n            }\n        }\n        this.memorizedcohesion.put(c, intrinsicCohes", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "def _fix_recid(recid, logger):\n    \"\"\"Fix a given recid.\"\"\"\n    #logger.info(\"Upgrading record %s:\" % recid)\n    # 1) moving docname and type to the relation with bibrec\n    bibrec_docs", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t/*\n\t\t\tforeach (Computer computer in computerMgmt.getComputerCollection()) \n\t\t\t{\n\t\t\t\tcomputer.Dispose();\n\t\t\t}\n\t\t\tforeach (Database database in computerMgmt.getDatabaseCollection())", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(date);\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Generates the occurrences of the specified event that occur in the specified period.", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo() { Component = sourceComponent, MemberName = sourceProperty };\n\t\tsourceEventBinding.DataTarget = new dfComponentMemberInfo() { Component = targetComponent, MemberName = targetProperty };\n\t\tsourceEventBinding.SourceEventName", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class,\n                    containerName, this);\n            SpanConfig cfgObject = new SpanConfig(jsonData);\n            Status result = switchManager.addSpan(cfgObject);\n", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n\n        }\n    public int randomChoice(int size, int min, int max) {\nNext line of code:\n\n        return rnd.nextInt(max - min + 1) + min;\n\n        }\n    public", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "                   la = LinkAnnotation()\n                    la.subject = man_obj.uuid  # the subordinate is the subject\n                    la.subject_type = man_obj.item_type\n                    la.project_uuid = man_obj.project_uuid\n                    la.", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktofit = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergecells   = \")\n                .Append(StringUtil.ToHexString", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\tbytes[posn++] = (byte)0xFF60;\n\t\t\t\tbytes[posn++] = (byte)0xFFA0;\n\t\t\t} else {\n\t\t\t\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   obj.operands = [dst, env.A[b], env.cst(off1.int(-1),10)]\n    obj.type = type_data_processing\n@ispec(\"32<[ ~off2(4) ~off3(6) ~off", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tpropertiesMap.loadProperties(stream, close);\n\t\t\treturn propertiesMap;\n\t\t}\n\t\tcatch (IOException e)\n\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator()\n        {\n            return this == SPECTATOR;\n        }\n        /**\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (\"BA\");\n\t\t\tSecurityIdentifier everyoneSid = new SecurityIdentifier (\"WD\");\n\t\t\tCommonSecurityDescriptor csd; DiscretionaryAcl d", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__idle(self.__process, results)\n        self.__idle(self.__progress_cb,\n                float(len(releases) / len(results)) * 100)\n    def run(self):\n        results = []\n        while not self.__sto", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       if (PhotonNetwork.isServer)\n        {\n            // add all rpcs to the list\n            foreach (var rpc in PhotonNetwork.rpcList)\n            {\n                if (rpc.IsServer)\n                {\n                    additionalRpcs", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       Button full_back = rootLayout.findViewById(R.id.full_back_button);\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           # Transform wave function\n            psit_G = psit_G.dot(self.symmetry.op_scc[s])\n            if time_reversal:\n                psit_G = psit_G.conj()\n            return psit_G", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamnamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(inty", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILLabel) {\n\t\t\t\t\t\tflatBody.Add(child);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\tif (prev", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    if (Owner != null) {\n\t\tOwner.IsRagdoll = ragdoll;\n\t    }\n\t    if (Owner == null) {\n\t\tif (", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        self.name =  \"\"\n        \"\"\"Layer Name\"\"\"\n        self.top =  ClassFactory( [InterfaceNodeSet, InterpolatedNodeSet] )\n        \"\"\"Accoding topology type interface node set or interpolated node set\"\"", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte)((num >> 24) & 0xff);\n        out[outOff + 2] = (byte)((num >> 16) & 0xff);\n        out[outOff + 1] =", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( new SimpleRegexValueGetter( objectVariables,\n                source,\n                new FilterExpression[] {\n                    new FilterBinaryNode(\n                        new FilterBinaryNode.BinaryOperator(\n                            FilterBinaryNode.BinaryOperator.EQUAL,\n                            new Filter", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "       elif key == 'VALEUR':\n            slice_json['valeur'] = transform_values_holder_xml_json_to_json(value[0])\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           if (ClientSettings.ICON_CLOSE_FRAME_SELECTED!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_CLOSE_FRAME_SELECTED)));\n          } else {\n            if", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n   ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, new ContentValues(), \"ID_GROUP = \" + deleteId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, new ContentValues(), \"ID_GROUP = \"", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               m_ptr = IntPtr.Zero;\n            }\n        }\n        #endregion\n    }\n}\n}\n", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "###############################################################################\n#                                                                                 #\n#                                                                                 #\n#                                                                                 #\n#                                                                                 #\n#                                                                                 #\n#                                                                                 #\n#                                                                                 #", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t\tqueue[0].Cancel(numberToCancel);\n\t\t}\n\t\tprotected void FinishProduction()\n\t\t{\nNext line of code:\n\n\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       infoText += \" file\" if numberOfFiles==1 else \"files\"\n        infoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = code.replace('%', '%%')\n        # replace all variables\n        for x in self.vars:\n            code = code.replace(x, self.vars[x])\n        # write the file\n        self.outputs[0].write(code)\n       ", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n        #===========================\n        if self._as.is_preempt_requested():\n            rospy.log", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx ] + chemical[ 0 ][ idx + 1 ]\n\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent - 2 ] +", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            default:\n                columnTypes.add(typeManager.nextTypeAdapter().of(type));\n                break;\n        }\n    }\n", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic System.Type ReturnedType\n\t\t{\n\t\t", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       if self.ntp_auth_conf['authentication'] != self.authentication:\n            if self.authentication == 'enable':\n                state = 'true'\n            else:\n                state = 'false'\n            xml_str = CE_NC_MERGE_NTP_AUT", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           # Verify that the component was last edited by editing_user\n            check_node(component.location, editing_user, after_create, editing_user, editing_user, after_create, editing_user)\n            # Verify that the child was last edited by editing_user\n", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        addToCharBuff(ch);\n        updateWithCharBuf();\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict)\ndef mklogical(dict):\n    return aetypes.Logical(dict)\ndef mkobject(dict):\n    return aetypes.", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = null;\n            if (typeof(HttpResponseMessage).IsAssignableFrom(typeof(HttpResponseMessage)))\n            {\n                type = typeof(HttpResponseMessage);\n            }\n            else if (typeof(HttpRequestMessage).IsAssignableFrom(typeof(HttpRequestMessage", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=callback)\n            return True\n        elif event.keyval == gtk.keysyms.Delete:\n            if isinstance(", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /**\n     * The order of precedence for properties loaded from a bean definition.\n     * \n     *", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           f.readline()\n        except IOError:\n            pass\n        else:\n            f.close()\n    if f is None:\n        module.fail_json(msg=\"Unable to open %s\" % path)\n    if state == \"absent\":\n        if", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       spm.addPrincipalToPrincipal( directedAclKeys.getPrincipalId(), directedAclKeys.getPrincipalType(),\n                directedAclKeys.getAclKey() );\n\n        return null;\n    }\n    @Timed\n    @Override\n   ", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element.\n        This verifies the tag of the element.", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   if node.nodeType == Node.DOCUMENT_TYPE_NODE:\n        clone = newOwnerDocument.createDocumentType(node.publicId,\n                                                     node.systemId)\n    elif node.nodeType == Node.ENTITY_NODE:\n        clone", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.Name, endOffset))\n\t\t\t\tdecodeName(keyLocator.getKeyName(), new int[1], new int[1], decoder);\n\t\t\telse if (decoder.peek", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the HUD\n        display.update(delta);\n        \n        //Updates the", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().getGameJoinManager().add( action );\n        hide();\n      }\n    } );\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n    //", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error downloading file: %s\" % r.data.decode(\"utf-8\"))\n    if progress:\n        log.debug(\"Downloading %s\", url)\n    filename = get_filename(r.headers)\n    if not filename:\n        raise RuntimeError", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t\tif (response == null)\n\t\t\t\t{\n\t\t\t\t\tfailureReason = SR.ExceptionMergeOrdersTool;\n\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\n            \"Cannot calculate yields for reactions with multiple metabolites.\"\n        )\n    return [coeff * met.weight for met, coeff in reaction.metabolites.items()]", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(\n            store__path__startswith=pootle_path,\n            submitted_by=user,\n        )\n    def get_for_path_and_store(self, pootle_path, store, user):\n       ", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id', models", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   def set_arp_handler(self, *args):\n        '''Dummy callback function for POX SoftwareSwitchBase'''\n        pass\n    def set_arp_handler(self, *args):\n        '''Dummy callback function for POX SoftwareSwitchBase'''\n        pass\n    def", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    if (m_RecentItems.size() >= m_MaxCount) {\n      m_RecentItems.remove(0);\n      m_RecentItems.clear();\n    }\n    m_RecentItems.", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Followers.Any(x => x.Defender == target) || src.Followers.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompAnySets() {\n\t\tallSyncSets = new BitArray(Symbol.terminals.Count);\n", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff)  >>  0);\n\t\t\tWriteReport(buff);\n\t\t\tif(!mReadDone.WaitOne(1000, false))\n\t\t\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (i = 0, k = 1; i < N_INDEXES; i++, k += 1)\n            {\n                _freeList[i].Address = k;\n            }\n            _freeListPos = _heapStart + realSize1;\n            _", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       rate.create()\n        return rate\n    def delete(self, rate):\n        \"\"\" Delete a rate in the UI\n        Args:\n            rate (ComputeRate): rate to delete\n        \"\"\"\n        navigate_to(rate, 'Details')\n        rate.delete()\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.Data, length );\n\t\t\t\tshadowBuffer.Unlock", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.satfinder_scan_nims.addNotifier(self.retune, initial_call = False)\n\t\tself.satfinder_scan_nims.addNotifier(self.retune, initial_call = False)\n\t\tself", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                tcpAcceptFilters.add(new TcpAddress.TcpAddressMask(filterStr));\n            }\n            return;\n        case ZMQ.ZMQ_DELAY_ON_CLOSE:\n            delayOnClose = (Integer) optval;\n           ", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Write the decoded row to the output stream\n                for (int i = 0; i < bytesPerRow; i++) {\n                    fout.Write(curr[i]);\n                }\n                prior = curr;\n            }\n            return fout.ToArray();\n", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface(':1.23'))\n        s.set_", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "               except:\n                    output += \"nothing\\n\"\n        _file = open(filename, 'w+')\n        _file.write(output)\n        _file.close()\n    def massey_product_printout_no_mat(self, filename):\n        output", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n                \"nosuchfield: 123\");\n            AssertParseError", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic boolean remove(Object key, Object value) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Object old = readElementByIndex( key );\n\t\t\tif ( old !=", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member buying an item\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return action_message\n    @api.multi\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the check in/out\n            message", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRowCollection grdResults = form.grdResults().getRows();\n\t\tfor (int i = 0; i < grdResults.size(); i++)\n\t\t{\n\t\t\tif (grdResults.get(i).getOrderInvestigation", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The index of this item", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       if not self.terminator.doing_layout:\n            self.terminator.last_active_window = self.uuid\n        # FIXME: Cause the terminal titlebars to update here\n        if self.terminator.doing_layout:\n            return\n        if", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\"+Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                    continue;\n                }\n                throw new UnknowTypeNameException( typeFragment );\n            }\n           ", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic bool IsPointer {\n\t\t\tget {\nNext line of code:\n\n\t\t\t\treturn base_type", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n        #region events\n        /// <summary>\n        /// \n        /// </summary>\n        public event EventHandler<EvidenceLookupArgs> Evidence", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.protocol = protocol\n        self.ciphers = self._get_ciphers()\n        self.verify_mode = self._get_verify_mode()\n        self.verify_cadata = self._get_verify_cadata()\n        self.verify_hostname =", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "               notebooks[\"board\"].set_current_page(new_num)\n                notebooks[\"board\"].set_tab_reorderable(new_num, False)\n                notebooks[\"board\"].set_tab_reorderable(old_num, True)\n                not", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Next-line\": QKeySequence(Qt.CTRL + Qt.Key_Enter),\n    \"Previous-line\": QKeySequence(Qt.CTRL + Qt.Key_Backspace),\n    \"Next-line-of-current-word\": QKeySequence(Qt.", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo{\" +\n\t\t\t\t\"persistenceUnitName='\" + this.persistenceUnitName + '\\'' +\n\t\t\t\t\", persistenceProviderClassName='\" + this.persistenceProviderClassName + '\\'' +\n\t\t\t\t\", transactionType=\" + this", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected boolean isFileWriteable()\n  {\nNext line of code:\n\n    return true;\n  }\n  \n  protected boolean isFileModified()\n  {\nNext line of code:\n\n    return false;\n ", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(802, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2_Legacy ()\n\t", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(EnumSwitchUnion.m_d) {\n\t        case option_1:\n\t        case option_2:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // int type\n\t            current_sum += ", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      else\n        return java.GetValue(\"JavaHome\").ToString();\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (String.IsNullOrEmpty(javaHome))\n        javaHome = Find", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               comment = name\n                break\n        if comment is not None:\n            return [comment, l]\n        # attempt to find job by name\n        for l in self.lines:\n            if re.match(r'%s' % self.ansible, l):\n                comment", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "       modifier.target = modifier_json['target']\n        modifier.vertex_group = modifier_json['vertex_group']\nclass MeshModifierVERTEX_WEIGHT_VERTEX_GROUP(MeshModifierCommon):\n    @classmethod\n", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           if(rankCounts == null)\n                continue;\n            double[] rankRanks = new double[totalBuckets];\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                double rank = rankCounts[i];\n", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def parser(self, option, cap=None):\n        if option == 'help':\n            self.print_usage()\n        elif option == 'list':\n            self.parser(option, cap=cap)\n        elif option == 'exit':\n            return\n        else:\n", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 161);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return false;\n            }\n        }\n        return false;\n    }\n    private void preprocessGlobalTypes(Schema parsedSchema) {\n        if (parsedSchema == null) {\n            return;\n        }\n        Iterator iter = parsedSchema.getTypes().iterator();", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       return self.write(cr, uid, ids, {'state':'validate2', 'manager_id': False})\n    def holidays_first_validate_notificate(self, cr, uid, ids, context=None):\n        obj_emp = self.pool.get", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the delegate that is called when the user double clicks\n        /// on a row\n        /// </summary>\n        public RowDoubleClickedHandler RowDoubleClickedDelegate { get;", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"Mixer Line {0} {1} {2} {3}\", mixerLine.dwLineID, mixerLine.dwComponentType, mixerLine.dwDestination, mixerLine.dwSource);\n        }\n    }\n}\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tif (valueObject.getCareContext() instanceof HibernateProxy) // If the proxy is set, there is no need to lazy load, the proxy knows the id already. \n\t\t\t{\n\t\t\t\tHibernateProxy p = (HibernateProxy) valueObject.get", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\",\n             \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\",", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = predictPositives ? estP : estN;\n\t\t\tif (function.equals(WRACC)) {\n\t\t\t\tscore = cov * (pnEst / (estP + est", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitItemStatuses, gitStash.Name, gitStash.Message);\n            }\n            Loading.IsAnimating = false;\n            Loading.", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "st_ARCH_ILLEGAL_BUFFER_ID.value\nst_ARCH_BEAM_ELEMENTS_BUFFER_ID.value\nst_ARCH_STATUS_SUCCESS.value\nst_ARCH_STATUS_SUCCESS.value\nst_AR", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (this == o) {\n            return true;\n        }\nNext line of code:\n\n        if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return this.match(that) == 0;\n        }\nNext", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}\n", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t}\n\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\ts += \", \";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erst", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n\n\t\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.putc(65, 'R1: 0x%02x' % res)\n        self.putc(666, 'R2: 0x%02x' % res)\n        self.putc(67, 'R3:", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         if (cursor >= limit) {\n            break lab0;\n          }\n          cursor++;\n        } while (false);\n        // call R2, line 200\n        if (!r_R2()) {\n          return false;\n        }\n        // (, line", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (cls != null) {\n                    o = cls.newInstance();\n                    cd.last = o;\n                    cd.viewer.setObject(o);\n                    cd.viewerFrame.setVisible(true);\n                }\n            } catch (Exception", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   return result, extension.critical\n\n    def _get_key_usage(self):\n        try:\n            current_key_ext = self.cert.get_extension_for_class(x509.KeyUsage)\n            current_key_usage = current_key", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tif (s.find (i->first) == s.end()) {\n\t\t\t\t\tstill_there = false;\n\t\t\t\t} else {\n\t\t\t\t\tstill_there = true;\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # The first value is the first word of the utf16 sequence.\n    # The second value is the second word of the utf16 sequence.\n    # The first word is the same as the second word.\n    # The second word is the same as the first word.\n    #", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (StartOf(13)) {\n\t\t\t\tGet();\n\t\t\t} else {\n\t\t\t\t\tSemErr(\"bad string in attributes\");\n\t\t\t}\n\t\t\tExpect(27);\n\t\t\tif (t.pos", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc_list.append(edi_doc)\n        return edi_doc_list\n    def edi_import(self, cr, uid, edi_document, context=None):\n        self._edi_requires_attributes(('product_id',", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openH", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testHasPermission_virtualFolder_permissions() throws Exception\n    {", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "       devices = context.list_devices()\n        devices = list(devices)\n        assert devices\n        assert len(devices) > 0\n        assert devices[0].subsystem == 'input'\n        assert devices[0].sys_name == 'mouse0'\n       ", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   app = Device(deviceToken)\n    app.check_inspection()\n    app.notification_postDevicetoken(loginId, password)\n    app.newUser(loginId, password)\n    app.mainmenu()\n    app.endTutorial()\n    app", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "       elif (index_elements[0] == \"AlphaReference\"):\n            comma_elements = outlines[i][11:].split(\",\")\n            if (comma_elements[0] != \"*******\"):\n                rv['alphaReference']['fluxDensity']", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (m_Keys.Count > 0)\n            {\n                ItemID = 0x1011;\n            }\n            else\n            {\n                ItemID = 0x1012;\n            }\n        }\n    }\n}", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iterator = devices.iterator(); iterator.hasNext();) {\n            String device = iterator.next();\n            // DRS 20181025 - Adding model to HDHR tuners\n            String model = liveModelMap.get(device);", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length == 0) {\n        throw new RuntimeException(\"No regexes in line \" + lineCount);\n      }\n      if (split.length == 1) {\n        throw new RuntimeException(\"No regexes in line \" + lineCount);\n      }\n", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           if SCons.Util.is_List(env['ENV'][var]):\n                env['ENV'][var] = os.pathsep.join(env['ENV'][var])\n            # Append the trailing os.pathsep character here to catch the case with no env[var", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def wkt_features(cls, keys, features):\n        \"\"\"A convenience function to wrap an iterator yielding pairs of WKT format geometry and dictionaries of\n        key-value pairs into mapnik features. Return this from PythonDatasource.features() passing it a sequence of keys\n", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       if self.want.ip == '*' and self.want.port != '*':\n            raise F5ModuleError(\n                \"Specifying a port number requires that an IP address be specified\"\n            )\n        if self.want.ip != '*' and", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   def fill(self, values):\n        \"\"\"\n        Args:\n            values (list): [] to remove all vars or [(\"var\", \"value\", \"type\"), ...] to fill the view\n        \"\"\"\n        if set(values) == set(self.all_vars):\n", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"ActionFactory\", \"getActionObject()\",\n                    \"ActionFactory\", \"getActionObject()\",\n                    \"ActionFactory\", \"getActionObject()\",\n                    \"ActionFactory\", \"getActionObject()\",\n                    \"ActionFactory\", \"getActionObject", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           embedManifestDllAction(target, source, env)\n        else:\n            raise SCons.Errors.UserError(\"Manifest file %s does not exist\" % manifestSrc)\n    else:\n        return 0\ndef embedManifestExeCheck(target, source", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(getSelectedResources(), new SubProgressMonitor(new ProgressMonitorJob(shell, true, false, errorStatus)));\n        } catch (InvocationTargetException e) {\n            errorStatus[0] = e.getStatus();\n        } catch (InterruptedException e) {\n", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tif (super.init(smi, sdi))\n\t\t{\n\t\t\t// if we get here, we are initialized!\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// if we get here, we are initialized", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('-3..-2', last) == (d(2014,1,31, 19,48), d(2014,1,31, 19,50))\n    assert f('-3..-2', last", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //Spawns\n            int count = 0;\n            int count2 = 0;\n            int count3 = 0;\n            int count4 = 0;\n            int count5 = 0;\n            int count6 = 0;\n            int count7", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest system log is dead. Resume failed.\")\n    @error_context.context_aware\n    def verify_gu", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc = service.submit(pub);\nNext line of code:\n\n        rc = service.submit(pub);\nNext line of code:\n\n        rc = service.submit(pub);\nNext line of code:\n\n        rc = service.submit(pub);", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn 1;\n\t\t\telse if (value <= 0x3FFF)\n\t\t\t\treturn 2;\n\t\t\telse if (value <= 0x1FFFFFFF)", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.notify(descr)\n        self.fm.env.copy.append(one_file)\n        self.fm.env.copy.append(one_file.dirname)\n        self.fm.env.copy.append(one_file.basename)\n", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, null);\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       locale = Locale.objects.get(code='de')\n        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            if \"avatar\" in cmd.parameters:\n                userstate.avatar = cmd.parameters[\"avatar\"]\n            if \"avatar_url\" in cmd.parameters:\n                userstate.avatar_url", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupChangeLeaderEvent(group, player));\n        }\n    }\n    public static void changeLeader(PlayerGroup group, Player newL", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "   def show(self, raw=False, **params):\n        formatter = params.get(\"formatter\", None)\n        outfile = params.get(\"outfile\", None)\n        align = params.get(\"align\", self.align)\n        fill = params.get(\"fill", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null && !parent.isEndTag());\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                Dialog = new DialogEntry();\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i];\n                    Dialog.Add(n.", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\telse if ( m_Peerless == PeerlessList.InterredGrizzle )\n\t\t\t\t\t\t\tm_key[i] = new InterredGrizzleActivation();\n\t\t\t\t\telse if ( m_Peer", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{1, 1, 1, 1}, new ECBlocks[]{new ECBlocks(1, new ECB[]{new ECB(1, 1)}, new ECB(1, 1))}, new ECBlocks[]{new ECBlocks", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = kdf.ComputeHash(pbMsg, pbSalt, pbKey, pbAssoc);\n\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\tif(cost > 0) {\n\t\t\tif(stack.getItem() instanceof IManaDiscountArmor) {\n\t\t\t\tIManaDiscountArmor manaDiscountArmor = (IManaDiscountArmor) stack.getItem();\n\t\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# On Unix systems, a value of None will", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but Lights has {1})\",\n\t\t\t\t\tNextFrame.PixelCount,\n\t\t\t\t\tLightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\nNext line of code:\n\n       ", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.callerId = p.readString();\n            dc.callerIdType = p.readInt();\n            dc.callerIdNumber = p.readString();\n            dc.callerIdNumberType = p.readInt();\n            dc.", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomainData()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.get", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                Vector3 pos = new Vector3(x * xPixelsPerTile, y * yPixelsPerTile, 1f);\n                newVertices[x + y *", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\tObject[] params = new Object[] { testInt1, testInt2 };\n\t\t\t\n\t\t\trawResult = client.call(API_METHOD_ADD", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n\n\t\t\t\treturn new int[0];\n\t\t\t}", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"Not found\");\n        }\n        else {\n            try {\n                out.writeBoolean(true);\n                out.writeObject(found.object);\n            }\n            catch (NotSerializableException e) {\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                       16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        0, 0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPAR", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .IsValidTarget(\n                                        Math.Min(spell.Range + spell.Width + 100, 2000), true,\n                                        spell.RangeCheckFrom))\n                                    )\n                                {\n                                    result.Add", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new LinkedList<>();\n        path.add(x);\n        for (Node b : graph.getAdjacentNodes(y)) {\n            if (path.contains(b)) {\n                return true;\n            }\n            path.add(b);", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child = pop[i];\n                    if (child is PlaceBase)\n                        plcs.Push(child as PlaceBase);\n                    else\n                        plcs.Push(child);\n                }\n            }\n            return null;\n        }\n        /// <", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (getClass() != other.getClass()) {\n            return false;\n        }\n        if (description == null) {\n            if (other.description != null) {\n                return false;\n            }\n        } else if (!description.equals(other.description)) {", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (m_Item.Deleted || m_Item.Map == Map.Internal)\n                            return;\n                        IPoint3D p = mobiles[i].GetWorldToLocal(m_Item.GetWorldLocation());\n                        if (p == null || from.", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg, msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tif (message)\n\t\t\t{\n", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n}\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId) {\n    return mock.getAvailCompoIds(sClient", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog2 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog2.show", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.channel.close();\n    }\n    public void close(Packet close) {\n        if (this.channel != null && this.channel.isOpen()) {\n            this.channel.close();\n            this.m();\n        }\n    }\n    public void close", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               if per == kk:\n                    z_arr[p_index, 0, 0] = z_dict[z_key][per]\n                    z_arr[p_index, 0, 1] = z_dict[z_][per]\n                ", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    } else {\n      String name = recipients.get(0).toShortString();\nNext line of code:\n\n      return context.getString(resourceTwo, name);\n    }\n    return context.getString(resourceMany,", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\" + \":\".join(extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\" + \":\".join(extra_lib)\n        if gonk:\n            env[\"GOONK_", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in type_paths:\n                for test in tests:\n                    tests_root = os.path.join(tests_root, path)\n                    if not os.path.exists(tests_root):\n                        raise ManifestError\n                    if not os", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.remove();\n        }\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding(new Object[] {\n                new ImportCustomizer() {\n                    @Override\n                    public void customize", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (caseInsensitive);\n\t\telse\n\t\t{\n\t\t\tif (this.ordinvcurrentstatus == null && obj.ordinvcurrentstatus != null)\n\t\t\t\treturn -1;\n\t\t\tif (this.ordinvcurrentstatus != null", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\n        assertTrue(found.get(0).getTags().containsAll(asList(\"search-tag1\", \"search-tag2\")));\n        assertTrue(found.get(1).getTags().containsAll(asList(\"search", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depthParameter = new ParameterImpl(\n                ParameterFamily.CRAWLER,\n                ParameterType.DEPTH,\n                depth);\n        depthParameter.setParameterValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION REGE", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// [$capture] (...)\n\t\t\tif (!AttributesMatch(candidate, pattern, ref captures, out unmatchedAttrs))\n\t\t\t\treturn false;\n\t\t\t// $capture or $(..capture)\n\t\t\tL", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (colisionList.Any())\n                    {\n                        extendedWillHit++;\n                        extendedFarmLocation = objAiBase.Position;\n                    }\n                }\n                if (extendedWillHit >= zedMenu.GetParamSlider(\"k", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t// Panel Controls\n\t\tRuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 104, 16, 240, 16, ims.framework.enumerations.ControlAnchoring.", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   return re.search(pattern, frozen_output)\n@task\n@timed\ndef install_python_packages():\n    \"\"\"\n    Install Python packages\n    \"\"\"\n    if no_python_uninstall():\n        print(NO_PYTHON_UNINSTALL_ME", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': [(6, 0, self.env['test_testing_utilities.m2m'].create({'name': 'a'}))],\n        })\n        f = Form(r)\n        with self.assertRaises(AssertionError):\n            f", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, 1, 2)).change_index(x, (x, 1, 2)) == \\\n        Sum(x, (x, 1, 2))\n    assert Sum(x, (x, 1, 2)).change", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._notifyAction = action;\n                this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._notifyAction = action;\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            writer.close();\n            streamWriter.close();\n            Object testObject = getReadControlObject();\n            if (testObject instanceof XMLRoot) {\n                XMLRoot xmlRoot", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.Campus2:\n                    c.Campus2 = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.C", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Width: {0}\", ide.width);\nConsole.WriteLine (\"Height: {0}\", ide.height);\nConsole.WriteLine (\"ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"Reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               JSR.addSuccessor(l);\n            }\n            if (l.inSubroutine(id)) {\n                l.addToSubroutine(id, nbSubroutines);\n            }\n        }\n    }\n    // ------------------------------------------------------------------------\n", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.select(position.toString());\n\t\t\tlblLabelPosition.setText(\"Label Position: \" + position.toString());\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {\n\t\t\treturn Position.valueOf(comboLabelPosition.get", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImage", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       if srv_token is not None:\n            self.transport._set_K_H(self.g, self.f)\n            self.transport._set_K_S(self.g, self.f)\n            self.transport._set_K_I(self.", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           if (disableTreeSelection) {\n                tree.setSelectionRow(0);\n            }\n            tree.removeAllChildren();\n            DatabaseNode databaseNode = new DatabaseNode(this.handler, connectionData);\n            tree.add(databaseNode, overallNodeName);\n            if (", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                return res or 0.0\n        class WorkedHours(BrowsableObject):\n\"\"\"            \"\"\"a class that will be used into", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       dVdzdOm.append(cosmo.dVdzdOm(zi))\n        #OK\n        #dVdzdOm.Om is in unit of 1/Mpc^3\n        #dVdzdOm is in unit of 1/Mpc^3", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize() * 10;\n        d.height = font.getSize();\n        return d;\n    }\n    \n    @Override\n    public void setFont(Font font) {\n        super.setFont(font);\n        if (", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       #print 'theta_res',theta_res\n        #print 'phi',phi\n        #print 'flag',flag\n        #print 'print_path',print_path\n        #print 'cutting_limit',self.cutting_limit\n        #print 'p0',self", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Visibility = window.Visibility == Visibility.Visible ? Visibility.Hidden : Visibility.Visible;\n\t\t}\n\t\tprivate void ShowOrHide(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tvar window = (Window)sender;", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                   for n in xrange(params[0]['nbins'])]\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           protocol.getStorage().updateFirstServerMsgId(contact);\n        }\n    }\n}\n", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\twhile (true) {\n\t\t\t\trsp = tag.readRecord(sfi);\n\t\t\t\tif (!rsp.isOkey())\n\t\t\t\t\tbreak;\n\t\t\t\taddLog24(rsp, ret);\n\t\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   def createDescription(self):\n        if self.desc_func:\n            return self.desc_func(self)\n        else:\n            return \"Unknown block of type %u\" % self[\"block_type\"].value\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tif (socketAdapter != null) {\n\t\t\tsocketAdapter.dispose();\n\t\t}\n\t\tsocketAdapter = null;\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       path = environ.get('PATH_INFO', '')\n        if path:\n            for app in self.apps:\n            # \"The WSGI application callable must not actually transmit\n            # the response headers. Instead, it must store them for the\n            # server or gateway to transmit", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) == 0)\n            {\n                res = EnhanceResult.Success;\n            }\n            else\n            {\n                res = EnhanceResult.Failure;\n            }\n        }\n        public static void CheckResult(ref", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           if displayname is None:\n                displayname = entry_name\n            if desc is None:\n                desc = entry_value\n            entries[entry_name] = rdltypes.UserEnum(\n                entry_name,\n                entry_value,\n                displayname,\n               ", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"Unable to locate any modules for the FOG Service\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Unable to locate any modules for the FOG Service\");\n                this.Close();\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"] ?? true;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True to submit value of selected items\n        /// </", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(!this.textureArray[textureHash].getImage().isSelected())\n                {\n                    this.texture[textureHash].getImage().selectTexture();", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if header not in exposedHeaders:\n        exposedHeaders = exposedHeaders + ', ' + header\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n    return response\ndef expose_headers(request):\n    \"\"\"\n    Add a header name to Access-Control-Expose", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                }\n            }\n            return oldDri", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var]\n    return var\ndef _format_dict(var, name):\n    \"\"\"Ensure that parameter is dictionary-like.\n    Used to let resolution and radius be single numbers if their elements are equal.\n    \"\"\"\n    # Single-number format.\n", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.setInitialState(CREATED)\nQUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(MOBS)\nQUEST.addKillReward(SI_ORE)\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60) / 60);\n\t\t\t\t\tint num3 = (int)Math.Floor((double)nullable.Value /", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = 0;\n            Attributes = new AttributeCollection(this);\n        }\n        public void Dis", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       for metabolite in self.metabolites:\n            metabolite._model = self\n        for reaction in self.reactions:\n            reaction._model = self\n        for gene in self.genes:\n            gene._model = self\n        self._trimmed = False\n", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tcoll.add( (TumourGroupListVo)beans.get(i) );\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcx = lines[selectedLine].getCenterX();\n\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\t\th = lines[selectedLine].", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.setAnimationListener(new AnimationListener() {\n            public void onAnimationStart(Animation animation) {\n            }\n\n            public void onAnimationRepeat(Animation animation) {\n            }\n\n            public void onAnimationEnd(Animation animation) {\n                mListView.set", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.FieldKey =", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(pssm.getSequence()[i]) != Mappings.indexUnknown)\n\t\t\t{\n\t\t\t\tthis.add", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
