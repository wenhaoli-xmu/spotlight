{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl == null )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tNetState ns = pl.Mobile.NetState;\n\t\t\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, **data.copy())\n\t\t\tif (e_u, e_v) in A.edges():\n\t\t\t\tY_.remove_edge(e_u, e_v)\n\t\t\tif (e_u, e_v) in Z_.edges():\n\t\t\t\tZ_.remove_edge(e_u, e_v)\n", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        # Open the copy file for writing\n        format = Format('wav', 'pcm16')\n        b = Sndfile(join(TEST_DATA_DIR, 'test2.wav", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "    def subtitle_languages(self):\n        langs = []\n        els = self.get_elements_list(self._SUB_LANGUAGES + \" a\")\n        for el in els:\n            langs.append(el.text)\n        return langs\n    def language_status(self, language):\n        els =  self.get_elements_list(self._SUB_LANGU", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n\t\t\t\tOLBaseClass ol", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "        for a in self.answers:\n            ret += \" %s\" % a\n        return ret\nclass _AnagramData(_QAData):\n    def ask_string(self):\n        return \"Anagram: %s\" % self.question\n    def hint_string(self):\n        return \"Hint: %s\" %", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                    mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(R", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "            for (X509Certificate cert : chain) {\n                s.println(cert);\n            }\n        }\n        s.println(\"***\");\n    }\n}\n/*\n * CertificateRequest... SERVER --> CLIENT\n *\n * Server asks client to send a certificate, e.g. to authenticate the\n * client's identity.  This message is sent", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "            sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public void registerSpace (String name, JESpace sp) {\n        sp.sl = (LocalSpace<Object,SpaceListener>) SpaceFactory.getSpace (name);\n       ", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "pos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item instanceof AlchemicalCatalyst) {\n\t\t\t\tRedButton btnAlchemy = new RedButton(Messages.get(this, \"alchemy\")) {\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\tWndImp.energize(item", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        \"\"\"SOAP POST gateway\"\"\"\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/xml\")\n        self.end_headers()\n        request = self.rfile.read(int(self.headers.getheader('content-length')))\n        response = self.server.dispatcher.dispatch(request)\n        self.wfile.write(response)\n        start", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "        mark = \"setRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def lock_status(self, status", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "            return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_extract_archive(self, login, password, status_id, params, session):\n       ", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b).IsSubsetOf (a), \"Trusted+Untrusted\");\n\t\t\tAssert.IsTrue (b.Union (a).IsSubsetOf (b), \"Untrusted+Trusted\");\n\t\t\tAssert.IsTrue (a.Union (b).Equals (a), \"Trusted+", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        DomainInfo domainInfo = manager.getDomain(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "        self.__datastream_transport, self.__datastream_protocol = await self.__server.accept(\n            'DATA', self.__event_loop)\n        self.__datastream_fd = os.dup(self.__datastream_transport.get_pipe_transport(0).get_handle())\n        logger.info(\"Datastream pipe is %d\", self.__", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, 5));\n\t\t\t\t\tstore.SetValue (iter, 5, \n\t\t\t\t\t\t\tcreateStringCalculatingPercent(oldPersonWeight, newPersonWeight, Convert.ToDouble(store.GetValue(iter, 8))));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        String[] argValues = new String[4];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n                String msgKey = args[i].getKey();\n               ", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferenceNode appearanceNode = new PreferenceNode(\n\t\t\t\t\"appearancePreferences\");\n\t\tPreferencePage appearancePage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHOW_MINI_MODE_DIALOG,\n\t\t\t\t\t\t\"Show mini mode dialog", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "        for state in states:\n            if state.key is not None:\n                self._identity_map.discard(state)\n            else:\n                self._identity_map.replace(state)\n        for state in states:\n            if state.key is not None:\n                self._identity_map.discard(state)\n            else:\n                self._identity", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed = new ArrayList<IField>(3);\n\t\t\t\tname2Field.put(name, named);\n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "    if self.request.path.endswith(\"/\"):\n        if self.request.method in (\"GET\", \"HEAD\"):\n            uri = self.request.path.rstrip(\"/\")\n            if uri:  # don't try to redirect '/' to ''\n                if self.request.query:\n                    uri += \"?\" + self.request.query\n                self.redirect(uri, permanent=True", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\t// LAMESPEC: msdn talks that only View contorls are allowed, for others controls HttpException should be thrown\n\t\t\t// but actually, aspx praser adds LiteralControl controls.\n\t\t\t//else\n\t\t\t//\tthrow new HttpException (\"MultiView cannot have children of type '", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "    args = parser.parse_args()\n    ## We either call compute_intervals() or parse_coordfile()\n    if args.coordfile:\n        coordfile = args.coordfile\n        outpath = args.outpath\n        ## We will use this one\n        downloader = WigleDownloader( args.user, args.password, coord", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                // SkillGroup3 replace SkillGroup3\n                if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.PossibleSkills)\n                        {\n                            if (i", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "        for plat in platforms:\n            if 'Firefox' in platforms[plat]:\n                builds.append(platforms[plat])\n    else:\n        builds = android_builds(build, platforms)\n    # Determine the download link for the build\n    download_link = make_download_link('firefox', build, version, platform,\n                                      ", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.getByProjectTypeIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\t} else {\n\t\t\tstateBeansList = StatusBL.loadAll();\n\t\t}\n\t\tif (stateBeansList!=null &&", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Parent is MethodDeclarationSyntax methodDeclarationSyntax ) {\n                    if ( methodDeclarationSyntax.Parent is Function function ) {\n                        if ( function.Parameter!= null ) {\n                            if ( function.Parameter.Any( x => x.Name.Token.Value.StringValue", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        split_test = self._update_partition_id(0)\n        # Verify that the children are correct.\n        self.assertEqual(2, len(split_test.children))\n        vertical_0 = self.get_item_from_modulestore(split_test.children[0], verify_is_draft=True)\n        vertical_1 = self.get_item_from_module", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            if (metrics.Length == 0)\n                return;\n            Object[] metrics = (Object[])longTag[\"metrics\"];\n            if (metrics.Length == 0)\n                return;\n            PdfIndirectReference fontDescriptor = (PdfIndirectReference)longTag[\"fontDescriptor\"];\n            PdfIndirectReference toUnicode", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\t// find the cell's GraphNode\n\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\t// if the cell is already placed, skip it\n\t\t\t\t\t\tif (cgn.depth!= -1) continue;\n\t\t\t\t\t\t// find all cells that use this cell\n\t\t\t\t\t\tfor(Iterator<Cell>", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                // Command history down\n                if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n            }\n        });\n    }\n}\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.onPose(timestamp, pose);\n\t\t}\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "                if (Enabled)\n                    ImageUrl = EnabledImageURL;\n                else\n                    ImageUrl = DisabledImageURL;\n                if (EnabledImageURL!= DisabledImageURL)\n                    ImageUrl = EnabledImageURL;\n                if (EnabledImageURL!= HoverImageURL)\n                    ImageUrl = HoverImageURL;\n                if", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "        return \"Effect{\" + \"probability=\" + probability + '}';\n    }\n    /**\n     * Get the XML tag name associated with this effect.\n     *\n     * @return The XML tag name.\n     */\n    public static String getXMLTagName() {\n        return \"effect\";\n    }\n    /**\n     * Get the", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'private',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n       'reporttime", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "                    interact(self._plot_line, dim=widget_dim, x=widget_x, y=widget_y)\n                else:\n                    # TODO (forman, 20160709): add sliders for x, y\n                    interact(self._plot_line, x=x, y=y, dim=fixed(valid_dim_names[0", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (rootFolder.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"rootFolder\");\n                }\n                if (path.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"path\");\n                }\n                if (path.IsRootFolder)\n                {\n                    _logger.Info(\"Scanning root folder: {0}\", rootFolder);\n                    to", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K,? super E,? extends E> remappingFunction) {\n\t\treturn read(key, internalMap.compute(key, transform(remappingFunction)));\n\t}\n\t@Override\n\tpublic E merge(K key,", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            isDiscussable = contobj.isDiscussable()\n            canReply = canreply(contobj)\n           ", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\t}\n\t\tpublic sbyte Z\n\t\t{\n\t\t\tget { return m_Z; }\nNext line of code:\n:\n\t\t\t}\n\t}\n\tpublic class TileList : List<Tile>\n\t{\n\t\tpublic TileList( int count )\n\t\t{\n\t\t\tfor ( int i = 0; i <", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                    channelUri = String.Format(\"sip:{0}@{1}\", land.LocalID, m_freeSwitchSIPProxy);\n                    parcelVoiceInfo = new LLSDParcelVoiceInfoResponse(channelUri, land.Name, land.LocalID,\n                                                                        land.RegionID, land.RegionName,\n                                                                        land.RegionOwner, land.RegionOwner", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(IsNew){\n\t\t\t\tPayPeriod payPeriodNew=new PayPeriod();\n\t\t\t\tpayPeriodNew.DateStart=textDateStart.Text;\n\t\t\t\tpayPeriodNew.DateStop=textDateStop.Text;\n\t\t\t\tpayPeriodNew.DatePaycheck=textDatePaycheck.Text;\n\t\t\t\tPayPeriod", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Skip the line after the column headings.\n        next(file_handle)\n        # Make a list of data lists to hold the data for each column.\n        data_lists = [[] for i in range(header['Number of fields'])]\n", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "    if not user:\n        return {'success': False,'msg': _('Valid API key needed to create a group member')}\n    return authz.is_authorized('group_member_create', context, data_dict)\ndef group_member_create(context, data_dict):\n    return _group_or_org_member_create(context, data_dict", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\t// removing label and confidences\n\t\t\t\tcurrentResultSet.getAttributes().remove(predictionAttribute);\n\t\t\t\t// assigning confidences\n\t\t\t\tdouble confidence = node.getConfidence(parentIndex);\n\t\t\t\t// setting confidences\n\t\t\t\tnode.setConfidence(parentIndex, node.getConfidence(parentIndex) * confidence);\n\t\t\t\t", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            return new[] { new SearchResults() { Results = new[] { new SearchResult() } } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments. If the provider doesn't support searching, the \n        ///             implementation should return a reasonable <see cref=\"T:Sdl", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "            codePoint = Character.toCodePoint(ch, string.charAt(offset++));\n         }\n         return _range.contains(codePoint)? offset : -1;\n      }\n   }\n   static class SetC extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, Regexp", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        if (studyFormNumber == null) {\n            return ValidationResults.SUCCESS;\n        }\n        if (studyFormNumber!= null) {\n            if (studyFormNumber.equals(existingStudyFormName)) {\n                return ValidationResults.SUCCESS;\n            } else {\n                if (existingRequired) {\n                    return ValidationResults.SAMPLE", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod!= ModData.Manifest.Id)\n\t\t\t\t{\n\t\t\t\t\tvar message = string.Format(\"Server requires mod {0}\", ModData.Manifest.Id);\n\t\t\t\t\tSendOrderTo(newConn", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\treturn coll;\n\t}\n\tpublic static boolean isEmpty(Object beans)\n\t{\n\t\treturn beans == null || beans instanceof Collection && ((Collection)beans).size() == 0;\n\t}\n\tpublic void add(ims.vo.interfaces.IPendingAdmission vo)\n\t{\n\t\tif(vo == null)\n\t\t\treturn;\n\t\tif", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelif prnum == 'notify':\n    notify()\nelif prnum == 'donate':\n    donate()\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "  plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plotName' in pD:\n    return S_ERROR( \"Missing plot name!\" )\n  plotName = pD[ 'plotName' ]\n", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        // Output Parameters\n        // We will need to update the system catalogs with this new information\n        // If this is an adhoc query then there won't be any parameters\n        for (int i = 0; i < plan.parameters.length; ++i) {\n            catalogStmt.getOutput_parameters().add", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(256, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Anchor = ((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) \n\t\t\t\t| System.Windows", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte)parity;\n\t\t\tdcb.ByteSize = (byte)data_bits;\n\t\t\tdcb.StopBits = (byte)bits;\n\t\t\tdcb.Handshake = (byte)hs;\n\t\t\tdcb.RtsControl = (byte)(", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    parser.add_argument('-h', '--help', action='help',\n                        help='Show this help message and exit')\n    parser.add_argument('-c', '--configfile', dest='configfile',\n                        help='Path to config file')\n    parser.add_argument('-d', '--debug', dest='debug',\n                        action", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tfor ap in newList:\n\t\t\t\tif ap[0] in self.oldlist:\n\t\t\t\t\tnewListIndex = self.newAPList.index(self.oldlist[ap[0]]['data'])\n\t\t\t\t\tcurrentListEntry = self.newAPList[newListIndex]\n\t\t\t\t\tcurrentListIndex = self[\"list\"].index(currentListEntry", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                float retX = fontX + 2 * x;\n                float retY = fontY + 2 * x;\n                if (retX > 0)\n                    retX += 2 * x;\n                if (retY > 0)\n                    retY += 2 * x;\n                return", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return results;\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "        y_points = np.arange(-90.0, +90.0, 2.0)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            (\"longitude\", x_points.flatten()),\n            (\"latitude\", y_points.flatten()),\n        ]\n        result = traj", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            Clipboard.SetDataObject(currPacket.Frame);\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            if (currPacket == null)\n            {\n                return;\n            }\n            if (currPacket.Frame == null)\n            {\n                return;\n", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "    print '\\033[0m'\n    return 0\ndef get_echonest_data(wav_dir):\n    # get the data from the internet\n    config.ECHO_NEST_API_KEY = \"BPQ7TEP9JXXDVIXA5\"  # daleloogn my api key", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            this.treeView1.ImageIndex = 0;\n            this.treeView1.ImageList = this.imageList1;\n            this.treeView1.Indent = 19;\n            this.treeView1.Location = new System.Drawing.Point(0, 24);\n            this.treeView1.Name = \"treeView1\";\n", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            baos.write(emptyStreams.toByteArray());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException {\n        boolean hasEmptyFiles = false;\n        for (final SevenZArchiveEntry entry : files) {\n            if (entry.isDirectory()) {\n                hasEmpty", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                    alphaLevel = rampUp? alphaLevel + 1 : alphaLevel - 1;\n                    if (alphaLevel == 0)\n                        inRamp = true;\n                }\n                else if (rampUp)\n                {\nNext line of code:\n:\n                    alphaLevel = 255;\n                    if (alpha", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "        [Test]\n        public void should_be_removable_and_should_allow_move_files_if_max_idletime_configured_and_paused()\n        {\n            GivenGlobalSeedLimits(2.0, 20);\n            PrepareClientToReturnCompletedItem(true, ratio: 1.0, seedingTime: 30);\n", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n                }\n            }\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "        f.writelines(['F) 0\t\t\t", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x08:\n                    /* C */\n                    i = b & 0x03;\n                    i +=", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        return self._course_key\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tchance = Float.parseFloat(splitNumber[0]);\n\t\t\tnumber = splitNumber[1];\n\t\t}\n\t\tint amount = 0;\n\t\tif(number.contains(\"-\")) {\n\t\t\tamount = Integer.parseInt(number.substring(0, number.indexOf(\"-\")));\n\t\t\tnumber =", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "        # Delete the key.pem and cert.pem files\n        types = ['key', 'cert']\n        for cert_type in types:\n            try:\n                # If we can't open the file it's not there, so we should delete it\n                cert_file = open('%s/%s.pem' % (config", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.lblPrivacy.Location = new System.Drawing.Point(6, 29);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(370, 26);\n            this.lblPrivacy.TabIndex = 1;\n            this.lblPrivacy.Text = \"This will improve the accuracy of", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for plugname, plug in self.loaded_plugins:\n            try:\n                plug.archive = self.archive\n                plug.collect()\n                plugruncount += 1\n            except KeyboardInterrupt:\n                raise\n            except:\n                if self.raise_plugins:\n                    raise\n                else:\n                    self._log_plugin_exception(plug", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = parent.mirthClient.importMessages(fileTextField.getText(), subfoldersCheckbox.isSelected(), true);\n                if (messageBrowser!= null) {\n                    messageBrowser.importMessages(fileTextField.getText(), subfoldersCheckbox.isSelected(), true);\n                }\n            } else", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession!= null && currentSession.isOpened()) {\n            userInfoSession = currentSession;\n            userInfoSession.addCallback(new Session.StatusCallback() {\n                @Override\n                public void call(Session session, SessionState state, Exception exception) {\n                    if (exception!= null) {\n                        return;\n                    }\n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (int i=0; i<emotions.length; i++){\n\t\t\tfloat emotionSum = 0;\n\t\t\tfor (int j=0; j<emotions[i].influences.length; j++)\n\t\t\t\temotionSum += emotions[i].influences[j][1];\n\t\t\temotions[i", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                    'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test exporting as an xml object.\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "    if NorthernHemisphere == 1:\n        ZoneLetter = '0'\n    else:\n        ZoneLetter = 'Z'\n    if (ZoneLetter == 'X'):\n        ZoneLetter = '0'\n    if (ZoneLetter == 'Z'):\n        ZoneLetter = '0'\n    if (ZoneLetter", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            reason = form.cleaned_data['reason']\n            msg = Report.objects.create(\n                reporter = request.user,\n                reported_user = user,\n                reason = reason,\n            )\n            messages.success(request, \"Report submitted!\")\n            return HttpResponseRedirect(reverse('", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "    @property\n    def series(self):\n        \"\"\"The series to be added.\"\"\"\n        return self.context\n    @property\n    def series_id(self):\n        \"\"\"The series id.\"\"\"\n        return self.context.id\n    @property\n    def series_name(self):\n        \"\"\"The series name.\"\"\"\n        return self.context", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\t{\n\t\t\t\t\t// TODO: Add customizations for this form\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// TODO: Add customizations for this form\n\t\t\t\t// TODO: Add customizations for this form\n\t\t\t\t// TODO: Add customizations for this form\n\t\t\t", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return the number of bytes required to write this to a file\n     */\n    public int getMinimumSize()\n    {\n        return minLength;\n    }\n    /**\n     * @param minimumSize\n     */\n    public", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "                if flag == constants.isa_tag_type:\n                    new_positional_tags_list.append(\n                        TagRegex(True, regex))\n                elif flag == constants.variant_tag_type:\n                    new_positional_tags_list.append(\n                        TagRegex(False, regex))\n                elif flag == constants.length_tag_type:\n                    new_positional_tags_list", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "        0x06: 'OBD-I and OBD-II ',\n        0x07: 'OBD-I and OBD-II as defined by the CARB',\n        0x08: 'OBD-I and OBD-II as defined by the EPA',\n        0x09: 'O", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "                this.AddRes(index, typeof(SwitchItem), 1073464, 1, 1044253);\n                this.ForceNonExceptional(index);\n                this.SetNeededExpansion(index, Expansion.ML);\n\t\t\t\t\n                index = this.AddCraft(typeof(EnchantedPrism), 1044294,", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        # If the request context was preserved we have to pop it now.\n        top = _request_ctx_stack.top\n        if top is not None and top.preserved:\n            top.preserved = False\n            top._preserved_exc = exc\n            return\n        # If the request context was preserved we have", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition defaultResourceTypeDefinition, ReleaseEntity release) {\n        List<Resource", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "        # Find projection of axis on detector\n        axis_proj = _axis_in_detector(ray_trafo.geometry)\n        # Find projection of detector on detector\n        det_proj = np.array([ray_trafo.geometry.det_init_axes[0],\n                             ray_trafo.geometry.det_init_axes[1]])\n        # Compute angles\n", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\nNext line of code:\n:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// add blocks\n\t\t\t\t\tbyte[] output = new byte[block1.Length", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tAssert.That(((JObject)obj.Properties[0].Value).Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(((JObject)obj.Properties[0].Value).Properties[0].Value.Type, Is.EqualTo(TokenType.String));\n\t\t\tAssert.That(((JObject)obj.Properties[0].Value", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "                for (int w = 0; w < width; w++) {\n                    if (w < width - 1) {\n                        edges.add(T2.create(w, w + 1));\n                    }\n                    if (h < height - 1) {\n                        edges.add(T2.create(w, w + width", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    i1 = iso.Isoelastics([get_isofile()])\n    data = i1.get(col1=\"area_um\",\n                  col2=\"deform\",\n                  channel_width=30,\n                  flow_rate=0.16,\n                  lut_identifier=\"LE-2D-FEM-19\",\n                  add_px_err", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        final String filename = args[0];\n        final String namespace = args[1];\n        final LocalTripleStore expected = new LocalTripleStore(filename,\n                namespace, true/* readOnly */, true/* statementIdentifiers */);\n        final LocalTripleStore actual = new LocalTripleStore(filename,\n                namespace, true/* readOnly", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\t// TODO Auto-generated method stub\n\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t * \n\t * @return true/false\n\t */\n\tpublic", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, new int[] { vao });\n\t\t\tOpenGL.glDeleteVertexArrays(1, new int[] { vao });\n\t\t\tOpenGL.glDeleteVertexArrays(1, new int[] { vao });\n\t\t\tOpenGL.glDeleteVertexArrays(1, new int[]", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.data_cov_mat_inverse\n    @property\n    def x_data_cor_mat(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the data *x* correlation matrix.\n        :rtype: numpy.ndarray\n       ", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        final ImportVmTemplateCommand command = new ImportVmTemplateCommand(p);\n        final Backend backend = mock(Backend.class);\n        final EngineContext context = mock(EngineContext.class);\n        final VmTemplate template = new VmTemplate();\n        template.setName(name);\n        final List<VmDevice> devices = new", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint)(2));\n\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+Table", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n                self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sTOTALSTATUS' % POSTPROC_ENVIRO_ID] = \\\n                self.totalstatus\n       ", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic ConstructorBuilder DefineRtspecialnameConstructor(MethodAttributes attribs)\n\t\t{\n\t\t\treturn DefineConstructor(attribs, CallingConventions.Standard, Type.EmptyTypes);\n\t\t}\n\t\tpublic ConstructorBuilder DefineSpecialNameConstructor(MethodAttributes attribs)\n\t\t{\n", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "      return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n    public", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                    vertices[x] = new Vector3f();\n                }\n                vertices[x].set(getVertex(getVertIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Stores in the <code>storage</code> array the indices of quad\n     * <code>i</code>. If <code>i", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (showDateData.equals(\"false\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATEMODIFIED);\n        }\n        return result;\n    }\n    /**\n     * Returns the value of the sort method property (\"method:direction:includefolders\").<p>\n    ", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tplaceholderText.color = placeholderOffColor;\n\t\t\tplaceholderRect.pivot = new Vector2 (0.5f, 0.5f);\n\t\t\tplaceholderRect.localScale = new Vector3 (1f, 1f, 1f);\n\t\t\tplaceholderRect.anchoredPosition = new Vector2 (0f,", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnEnabledChanged(EventArgs e)\n    {\n      Invalidate();\n      base.OnEnabledChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnFontChanged(EventArgs e)\n    {\n      Invalidate();\n     ", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser.Length > 0)\n                {\n                    if (!Users.Contains(lastUser))\n                    {\n                        Users.Add(lastUser);\n                    }\n                }\n            }\n            foreach (string user in Users)\n            {\n                SendEmailForUser(user, A", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\nNext line of code:\n:\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.LastMousePos.X < EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Left;\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            // displays a warning message\n            VerificationResult = new TScreenVerificationResult(new TVerificationResult(this, ErrorCodes.GetErrorInfo(\n                PetraErrorCodes.ERR_DISCOUNT_CRITERIA_CODE_NOT_USED)),\n                DiscountTable.Columns[PcDiscountTable.ColumnDiscountId], ValidationControlsData.ValidationControl);\n            // Handle", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "                // Adding file content as blob/byte[] into args.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\t// TODO:Support page\n\t\t\thelpUrl = String.Format (\"ghelp://{0}\", langHelpDir);\n\t\t}\n\t\t\n\t\tpublic string CacheDirectory {\nNext line of code:\n:\n\t\t\t// TODO:Support page\n\t\t\thelpUrl = String.Format (\"ghelp://{0}\", langHelpDir);\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": ":\npublic class Muffins : Food\n{\n\t[Constructable]\n\tpublic Muffins() : base( 0x9eb )\n\t{\n\t\tStackable = false;\n\t\tthis.Weight = 1.0;\n\t\tthis.FillFactor = 4;\n\t}\n\tpublic Muffins( Serial serial", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\") && eFarm.Position.DistanceToPlayer() < 200)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady())\n                    {\n                        Q.Cast", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t *", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(\n            field_model_def['rules']['json']['function'],\n            field_def['rules']['json']['function'])\n        self.assertEquals(\n            field_model_def['rules']['marc']['function'],\n            field_def['rules']['marc']['function'])\n        self.assertEquals(\n            field_model_def['rules']['mar", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new[] {new object[] {10L, \"E1\"}});\n                // widen to short\n                env.UndeployAll();\n                env.CompileDeploy(stmtTextCreate, path);\n                env.CompileDeploy(\n                    \"insert into MyInfraW(f1, f2) select LongPrimitive, The", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "        c = self.copy()\n        return c.__imul__(other)\n    \n    def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__idiv__(other)\n    \n    def __idiv__(self", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "    def _get_website_meta(self, cr, uid, view_id, context=None):\n        \"\"\" Return the meta information of a view, as a dict of\n        (key, value) pairs.\n        \"\"\"\n        view = self._view_obj(cr, uid, view_id, context=context)\n        if not view", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "            c.putClientProperty(BasicHTML.propertyKey, value);\n        }\n    }\n    /**\n     * Returns the HTML renderer for the given component.\n     *\n     * @param c a component\n     * @return an HTML renderer\n     */\n    public static View getHTMLRenderer(JComponent c) {\n        return", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "    s = create(filename, contents=content)\n    assert s.content_is_testharness\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_reference\n    assert not s.name_is_multi_global\n    assert not s.name_is_worker\n    assert not s", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t\tmapping.SqlLoader = new HbmSqlLoader {name = mapping.SqlLoader?.name, sql = mapping.SqlLoader?.sql};\n\t\t\tmapping.SqlLoaderSpecified = true;\n\t\t\tmapping.SqlLoaderSpecified = true;\n\t\t\tmapping.SqlLoaderSpecified = true;\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Faction.State = this;\n\t\t\t\tm_Faction.UpdateRanks();\n\t\t\t\twriter.WriteEncodedInt( (int) m_Members", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        invocationQueue.pop();\n    }\n    private void pushInvocation() {\n        graphQueue.peek().pushInvocation();\n    }\n    private void popInvocation(int count) {\n        assert count >= 0;\n        for (int i = 0; i < count; i++) {\n            graphQueue.peek().popInvocation();\n", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                self.args['sprout'] = True\n                self.args['sprout_stream'] = self.args['sprout_stream'] or \\\n                                            self.pr_metadata.get('sprout_stream', None)\n                self.args['sprout_username'] = self.args['sprout_username'] or \\\n                                               self.pr_metadata.get('", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "                if (phi) {\n                    ValueNode phiValue = getCachedPhi(key, value.stamp());\n                    if (value instanceof FixedWithNextNode) {\n                        effects.replaceAtUsages((FixedWithNextNode) value, phiValue);\n                    } else {\n                        effects.replaceAtUsages(value, phiValue);\n                   ", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def to_binary(self):\n        \"\"\"Return the mofile binary representation.\"\"\"\n        return self._BaseFile.to_binary()\n    def __str__(self):\n       ", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    if res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'WaitingIntegrity' )\n      if not res['", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\t// FreenetURI furi = new FreenetURI(action);\n\t\t\t// if(furi.getScheme()!= null || furi.getHost()!= null || furi.getPort()!= -1 || furi.getUserInfo()!= null)\n\t\t\t// throw new CommentException(l10n(\"invalid", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB)\n        msg = yield self.run_fake_single_build(gsp, buildResult)\n        result = makeReviewResult(msg,\n                                 (GERRIT_LABEL_VERIFIED, verifiedScore))\n        gsp.sendCodeReview.assert_called_once_with", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.scheme = 'http://www.google.com'\n    self.category.term = 'test'\n    self.category.label = 'test'\n    self.category.extension_attributes['foo'] = 'bar'\n    self.assert_(self.category.scheme ==", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "class MATERIAL_PT_lighting(MaterialButtonsPanel, Panel):\n    bl_label = \"Lighting\"\n    COMPAT_ENGINES = {'BLENDER_RENDER', 'BLENDER_GAME'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n        engine = context.scene.render.engine\n        return check", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            //MAPPER 17\n            if (_engine.Memory.Map.Cartridge.MapperNo == 17)\n            {\n                var map17 = (Mapper17) _engine.Memory.Map.CurrentMapper;\n                mapper17_IRQEnabled = map17.IRQEnabled;\n                mapper17_irq_counter = map17.irq_counter;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t//----------------\n\t\t// Party Quest\n\t\t//----------------\n\t\t// Page 2\n\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Blue Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Green Bears]\n\t\tAdd(\"Party Quest", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                 ORDER BY sdate, stime ''', (i,))\n    data = cursor.fetchall()\n    print \"Data for group: \", i, \" is: \", data\n    print \"Group: \", i, \" has: \", len(data), \" records\"\n    if len(data) > 1:\n        cursor", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "        # Get the project\n        try:\n            project = rethinkdb.db('smc-storage').table('projects').get(project_id).run(conn)\n        except Exception as err:\n            log(\"Problem getting project\", err)\n            continue\n        if project is None:\n            log(\"Project not found\", project_id", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass VoteAddedResponse(Response):\n    def", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "    def add_host(self, host_data):\n        \"\"\" record the start of a task for one or more hosts \"\"\"\n        self.host_data[host_data.uuid] = host_data\n    def __str__(self):\n        return '[%s] %s: %s' % (self.play, self.name, self", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def get_optimized (self):\n        \"\"\"Return the list of files that would be installed if this command\n        were actually run, and the 'optimize' flag", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnNumbers[j], session, entity);\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session, snapshot, j", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        '-N', job_name,\n        '-o', log_name + '.out',\n        '-e', log_name + '.err',\n        '-M', request['job_email'],\n        '-m', 'a',\n        '-q', request['job_queue'],\n        '-l', 'h_rt=%d:00:", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")] \n        public ActionResult SaveEventDelegate(DelegateViewModel model, int eventId)\n        {\n            var", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                        return string.Format(\"({0},{1},{2},{3})\", ((Circle) obj).Radius, ((Circle) obj).Color.ToArgb(), ((Circle) obj).Thickness, ((Circle) obj).IsVisible);\n                    }\n                    if (obj is Vector2)\n                    {\n                        return string.Format(\"({0", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "        #try normal download\n        if not premium_url:\n            self.html = self.load(self.url)\n            action = self.load(self.url, post={\"checkDownload\": \"check\"}, decode=True)\n            action = json_loads(action)\n            self.logDebug(action)\n            if \"fail\" in action:\n                if", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t// If we found a path, we can harvest from the first cell on the path.\n\t\t\tif (path!= null)\n\t\t\t{\n\t\t\t\tvar firstCell = path[0];\n\t\t\t\tif (harv.CanHarvestCell(self, firstCell) && claimLayer.CanClaimCell(self, firstCell))\n", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                        self.logger.error(\"dhcpd restart failed\")\n                        return False\n                    return True\n            elif which_dhcp_module == \"manage_dhcpd\":\n                service_name = utils.dhcpd_service_name(self.api)\n                if restart_dhcp!= \"0\":\n                    rc = utils.subprocess_call(self.logger, \"", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        return Event.newBuilder().setSource(source);\n    }\n    @Override\n    public void sendError(String type, String msg) {\n        sendError(type, msg);\n    }\n    @Override\n    public void sendWarning(String type, String msg) {\n        sendWarning(type, msg);\n    }\n    @Override", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            if (stateIndex == MAXIMUM_ORDER)\n            {\n                goto NoLoop;\n            }\n            if (stateIndex == 0)\n            {\n                gotoLoopEntry = true;\n            }\n            states[stateIndex++] = state;\n            if (stateIndex == MAXIMUM_ORDER)\n            {\n                goto NoLoop;\n", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t}\n\t\tstring [] sessionValues = new string[sessionValuesArray.Count];\n\t\tsessionValuesArray.CopyTo(sessionValues);\n\t\t//now we have all the sessions that have this test type\n\t\t//if there is no session, we can delete it\n", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 9)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00', self.read(o))\n    def test_smaller_than_file_at_start(self):\n        o = self.file(b'abcdefghij')\n        insert", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "    <td><?cs var:sdk.win64_bundle_bytes?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (intel)</td>\n    <td>\n  <a onClick=\"return onDownload", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    plt.plot(cr['combined'][app][VC]['durations'], 'r')\n    plt.plot(csi_95[0], 'b')\n    plt.plot(csi_95[1], 'b')\n    plt.plot(cr['pivot'][app][VC]['stats']['intervals'][0]['interval'][0", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "        self._testUIDGIDSwitch(1, 0, 1, 1, [0, 1, 0, 1], [1, 0])\n        self._testUIDGIDSwitch(1, 0, 1, 1, [0, 1,", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRect(x, y, controlSize, controlSize);\n\t\t\t\t}\n\t\t\t\telse if(model.isSelected()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRect(x, y, controlSize, controlSize);\n\t\t\t\t}\n\t\t\t\telse if(model.isRollover", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[1])\n  if winner!= 0:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n:\n  winner, _inferenceResult, _dist, _categoryDist =", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "            if (relativePath!= null && relativePath.Length > 0) {\n                string assemblyFile = FileUtils.CombinePaths(Parent.Directory, \n                    relativePath);\n                if (File.Exists(assemblyFile)) {\n                    return assemblyFile;\n                }\n            }\n            return null;\n        }\n        /// <summary>\n       ", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\"\"\"\nUtilities\n\"\"\"\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        i3 = i15 + i16 - 1;\n        i3 = i3 + i15;\n        i3 = i3 + i15;\n        i3 = i3 + i15;\n        i3 = i3 + i15;\n        i3 = i3 + i15;\n       ", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t\t\tif( s.name == name ) {\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                    CollisionObjects = new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Lulu\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lulu\",\n                    SpellName = \"LuluQ\",\n                   ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUserId()).thenReturn(\"test.user\");\n\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(UUID.fromString(\"test.user\"), \"test.tenant\"));\n\t}\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        self.assertRaises(\n            subprocess.CalledProcessError,\n            context.popen,\n            ['/sbin/modinfo', '-d','somemodule'])\n    @testlib.with_context\n    def test_popen(self, context):\n        import subprocess\n        context.setup_error_codes()\n        context.setup_error_codes()\n        context", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n    def retranslateUi(self, Dialog):\n        _translate = QtCore.QCoreApplication.translate\n        Dialog.setWindowTitle(_translate(\"Dialog\", \"Preferences\"))\n        self.settings_ui_groupbox.setTitle(_translate(\"Dialog\", \"UI\"))\n        self.zoom", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                return false;\n            }\n            // Get the location of this station\n            double lat = wxs.getDouble( wxs.getColumnIndex( Wxs.STATION_LATITUDE_DEGREES ) );\n            double lon = wxs.getDouble( wxs.getColumnIndex( Wxs.STATION_LONGITUDE_DEGREES ) );\n            Location location", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\t// Explicitly execute the query\n\t\t\t\ts.CreateQuery(\"from Continent\").List();\n\t\t\t\t// Explicitly execute the query\n\t\t\t\ts.CreateQuery(\"from Continent\").List();\n\t\t\t\t// Explicitly execute the query\n\t\t\t\ts.CreateQuery(\"from Continent\").List();\n\t\t\t\t// Explicitly execute the", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "                uiCRCITTSum = uiCRCITTSum ^ uiByteValue;\n                if ((uiCRCITTSum & 0x8000) > 0)\n                {\n                    uiCRCITTSum = uiCRCITTSum << 1;\n                    uiCRCITTSum = uiCRCITTSum ^ 0x102", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "            return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector(editor, \n                            controller, \n                            new CeylonSourceHover(editor, \n                                    controller), \n                            new CeylonInformationControlCreator(editor, \n                                    \"Tab or click for focus\"), \n                            new Ceylon", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "        self.aspectWidget = Object3DAspect(self)\n        self.scaleWidget = Object3DScale(self)\n        self.privateInterface = Object3DPrivateInterface(self)\n        self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(self.aspectWidget)\n        self.l.addWidget(self.scaleWidget)\n        self.l.addWidget", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( info.Int, info.Int2 );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 4: // Previous page\n\t\t\t\t\t{\n\t\t\t\t\t\tm_Mobile", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                     for (Object valueChoice : valueChoices)\n                     {\n                        if (selectConverter.convert(valueChoice).equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                  }\n                  if (chosenObj!= null)\n                  {\n                     result = chosenObj;\n                  }\n                  else\n                    ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (i!=j)\n\t\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+k+\"\\t\"+fractionWithAmount[i][j][k]+\"\\n\"); \n\t\t\t\t\t}\n\t\treturn sb.toString();\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        final int groupMode = 0700;\n        final int otherMode = 0700;\n        final int userId = new Random().nextInt(SecurityManagerImpl.MAX_USER_ID);\n        final int groupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int otherId = new Random().nextInt", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint(XDRStruct):\n    __slots__ = ['key', 'value','stats']\n    def __init__(self, key=None, value=None, stats=None):\n        self.key = key\n        self.value = value\n        self.stats = stats\n    @classmethod\n    def pack_into(self,", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  if is_method:\n    print'   object,'\n  if bind_count:\n    print'   &Class::%s,' % method_name\n  for i in xrange(bind_count):\n    print'   a%d' % i\n  if exec_count:\n    print'   %s' % exec_type", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    response = HttpResponse(\n        simplejson.dumps(\n        range_json(filename, items),\n        content_type=\"application/json\"\n    )\n    \"\"\"\n    response = HttpResponse(\n        simplejson.dumps(\n        range_json(filename, items),\n        content_type=\"application/json\"\n    )\n    )\n    return response\ndef range_json(filename", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                        new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                final ServiceNode service = new ServiceNode();\n                service.setQueryType(QueryType.SELECT);\n                service.setServiceGraphPattern(serviceGraphPattern);\n                service.setServiceIRI(new ConstantNode(searchIV));\n                service.setServiceBindingSet(new", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        if \"set_is_active\" in request.POST:\n            return self._handle_set_is_active()\n        return super(UserDetailView, self).post(request, *args, **kwargs)\n", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public virtual Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }\n    /// <summary>\n    /// Calls visitor.Visit", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            var w = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var y = new DenseVector(input.Count);\n            var p = new DenseVector(input.Count);\n            var q = new DenseVector(input.Count);\n            var s = new DenseVector(input.Count);\n            var t =", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the mean of an array of sorted numbers\n\t * @param sortedNumbers Array of sorted numbers\n\t *", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "                if reference_set_map[v]!= -1:\n                    sample_count[v] -= sample_count[edge.child]\n                v = parent[v]\n        for edge in edges_in:\n            parent[edge.child] = edge.parent\n            v = edge.child\n            while v!= -1:\nNext line of code:\n:\n               ", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        mapping = mapping_json[self.enrich_index]['mappings']['enriched']\n        for field in csv_mapping.fields:\n            if field not in mapping:\n                result[field] = 'not found'\n            else:\n                if csv_mapping.fields[field]!= mapping[field]['properties']:\n                    result[field] = 'not", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString();\n\t\t\t}\n\t\t\treturn \"NT_STATUS_\" + _status + \" (\" + GetMessageByCode(_status) + \")\";\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        return frame_header + padding_bytes + struct.pack('!x', self.pad_high) + struct.pack('!x', self.pad_low) + self.data\nclass HeadersFrame(Frame):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 2 3 4", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            if (cluster.BoundaryCurve!= null)\n                cluster.BoundaryCurve.CheckClusterConsistency(cluster);\n        }\n        internal void CheckClusterConsistency(Edge edge) {\n            if (edge.UnderCollapsedCluster()) return;\n            if (edge.Curve!= null)\n                edge.Curve.CheckClusterConsistency(this", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeCosine = btCos(m_maxSlopeRadians);\n}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn m_maxSlopeRadians;\n}\nvoid btKinematicCharacterController::setInterpolateUp(bool interpolateUp)\n{\n\tm_interpolateUp = interpolateUp;\n}\nbool bt", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        if (initializers!= null) {\n            for (ExpressionTree initializer : initializers) {\n                if (canBeLeaked(initializer)) {\n                    checker.report(Result.failure(\"unique.leaked\"), initializer);\n                }\n            }\n        }\n        return super.visitNewArray(node, p);\n    }\n    private boolean", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t// if a return type was specified\n\t\t\t\tif (typeAttribute!= null)\n\t\t\t\t{\n\t\t\t\t\t// init return type\n\t\t\t\t\t_returnType = Context.CreateType(\n\t\t\t\t\t\ttypeAttribute.Value,\n\t\t\t\t\t\t\"return\",\n\t\t\t\t\t\tCommentXmlNode,\n\t\t\t\t\t\t\"return\" );\n\t\t\t\t\t// init return type", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit!= other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.currentStmt == null) {\n\t\t\tif (other.currentStmt!= null)\n\t\t\t\treturn false;\n\t\t} else if (!this.currentStmt.equals(other.currentStmt))\n\t\t\treturn false;\n\t\tif (this.postdominators", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "            if (min1 > narrowL) {\n              continue;\n            }\n            int max1 = wideRExtent[start][r.leftChild];\n            int max2 = narrowL;\n            int max = (max1 < max2? max1 : max2);\n            if (min1 > max) {\n", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t// DbgManager thread\n\t\tvoid DbgManager_CurrentThreadChanged(object? sender, DbgThreadChangedEventArgs e) {\n\t\t\tif (e.CurrentThread is DbgProcess process) {\n\t\t\t\t// If the process is running, add it to the list\n\t\t\t\tif (process.IsRunning) {\n\t\t\t\t", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.endTag( null, name );\n\t}\n}", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( (aThat!= null) && (this.getClass()!= aThat.getClass()) ) {\n\t\t\treturn false;\n\t\t}\n\t\tif ( (aThat == null) || (this.getClass()!= aThat.getClass()) ) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!super.equals(aThat", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t    if n == 0:\n\t      status = 'w'\n\t    else:\n\t      status = 'a'\n\t    with open(name, status) as f_ID:\n\t      f_ID.write(str(body_types[i]) + '\\n')\n\t      for j in range(body_types[i]):\n\t\torientation = bodies[body_offset +", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        if cdata is None:\n            return\n        if cdata[0] == slice(None):\n            return\n        if cdata[0] == slice(None, None, None):\n            return\n        if cdata[0] == slice(None, None, 1):\n            return\n        if c", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "            show_tag_list = self.get_children()\n            for location in self.show_tag_list:\n                show_tag = etree.Element('show')\n                show_tag.text = self.xml_attributes.get('sources', '')\n                self.runtime.add_block_as_child_node(show_tag, xml_object)\n        return xml_object\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "        for change in data_model_changes:\n            if change.axis_id is not None:\n                axis_id = change.axis_id\n                if axis_id in self.current_filter:\n                    axis = self.get_axes(self.filtered_data)[axis_id]\n                    if axis is not None:\n                        change.axis = axis\n                        change.axis_id", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class!= null && Method!= null && Sig!= null)\n\t\t\t{\n\t\t\t\tif (Field!= null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'field' attribute with'method' attribute for ldtoken\");\n\t\t\t\t\treturn false;\n\t\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t// \n\t\t\t// objYText\n\t\t\t// \n\t\t\tthis.objYText.Location = new System.Drawing.Point(104, 224);\n\t\t\tthis.objYText.MaxLength = 40;\n\t\t\tthis.objYText.Name = \"objYText\";\n", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assertEqual(c.comments,\n                         \"remove leftover code, leave a temporary compatibility import. Note!", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> datum : csvData.entrySet()) {\n            if (datum.getValue()!= null &&!StringUtils.isBlank(datum.getValue", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\t}\n\t\t/**\n\t\t * If the flower is generating mana, it will be added to the mana network.\n\t\t */\n\t\tif(isGeneratingMana()) {\n\t\t\tif(!supertile.getWorld().isRemote) {\n\t\t\t\tint mana = getMaxMana();\n\t\t\t\tif(mana > 0) {\n\t\t\t\t\tif(", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": ":\n            intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        return intrinsicCohesion;\n    }\n    private float getIntrinsicCohesion(Community c, ArrayList<Community> newCommunitiesToReturn) {\n        //OPTIMISATION\n        this.memorizedcohesion", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                                if not are_equal:\n                                    logger.info(\"ERROR: Document %s: Expected flag %s and got %s\" % (str(docid), str(minfo['flags'][flagname][version][docformat]), str(flags[flagname][version][docformat])))\n                                else:\n                                    logger.info(\"Document", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tguiThread.Abort();\n\t\t\tguiThread.Join();\n\t\t\tguiThread=null;\n\t\t\tguiThread= new Thread(new ThreadStart(updateGuiThread));\n\t\t\tguiThread.Start();\n\t\t}\n\t\tprivate void computerMenuRefresh_Click(object sender, System.EventArgs e)\n\t\t{\n\t\t\tupdateListViews(\"Computer\");\n\t\t}\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Gets the iCal4J recurrence set of the specified event.\n   * @param event the event for which the recurrence set has", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceEventName = sourceProperty;\n\t\tsourceEventBinding.TargetEventName = SourceEventName;\n\t\tsourceEventBinding.Bind();\n\t\tsourceEventBinding.MirrorSourceProperty();\n\t\tsourceEventBinding = null;\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<df", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n    }\n    public int randomChoice() {\n        return rnd.nextInt();\n    }\n    public void setSeed(long seed) {\n        this.seed = seed;\n    }\n    public long getSeed() {\n        return seed;\n    }\n    public void setValues(List values) {\n        this.values", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "                    la = LinkAnnotation()\n                    la.subject = man_obj.uuid  # the subordinate is the subject\n                    la.subject_type = man_obj.item_type\n                    la.project_uuid = man_obj.project_uuid\n                    la.source_id = 'label-match'\n                    la.predicate_uri = 'http://www.w3.org/200", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"         .shrinktofit= \")\n               .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"         .mergecells = \")\n               .Append(StringUtil.ToHexString(MergeCells)).Append(\"\\n\");\n            buffer.Append(\"         .readingorder= \")\n               ", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains extra characters,\n\t\t\t\t// including half-width katakana.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (extraToJis [value])) |\n\t\t\t\t\t\t(((int) (extraToJis [value + 1", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    src1 = env.A[b]\n    src2 = off1//off2//off3\n    obj.operands = [dst, composer([src1, src2])]\n    obj.type = type_data_processing\n@ispec(\"32<[ ~off2(4) ~off3(6) ~", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.openStream();\n\t\t\tProperties props = new Properties();\n\t\t\tprops.load(stream);\n\t\t\treturn new JRPropertiesMap(props);\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif (close && stream!= null)\n", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\t// Purge the default DiscretionaryAcl.\n\t\t\tcsd = new CommonSecurityDescriptor (false, false, ControlFlags.None, null, null, null, null);\n\t\t\tAssert.AreEqual (20, csd.BinaryLength);\n\t\t\tAssert.AreEqual (1, csd.DiscretionaryAcl.Count);\n", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        PhotonEditor.Current.RpcList = PhotonEditor.Current.RpcList + additionalRpcs.ToArray();\n    }\n    #endregion\n    public static void ReLoadSettings()\n    {\n        PhotonEditor.ReLoadCurrentSettings();\n    }\n    public static void CheckPunSetup()\n    {\n        if (PhotonEditor.Current ==", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        fullNewMessageBtn = rootLayout.findViewById(R.id.full_new_button);\n        fullNewMessageBtn.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_create).sizeDp(20).color(secondaryColor), null, null);\n        fullNewMessageBtn.set", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            return np.dot(psit_G, op_cc)\n        # Time-reversal symmetry\n        if time_reversal:\n            return psit_G.conj()\n        else:\n            return psit_G\n    def get_count(self, rank):\n        \"\"\"Return number of k-point/spin combinations on rank.\"\"\"\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp, utkastRequest);\n        assertEquals(OK", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.GetSelfAndChildrenRecursive<ILNode>()) {\n\t\t\t\t\tif (child is ILBasicBlock) {\n\t\t\t\t\t\t// Flatten the child\n\t\t\t\t\t\tILBasicBlock childAsBB = child as ILBasicBlock;\n\t\t\t\t\t\tif (prevChildAsBB!= null) {\n\t\t\t\t\t\t\t// Add", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    if (Owner == null) {\n\t\t//we're not going to be able to do anything\n\t\treturn;\n\t    }\n\t    if (Owner.IsDead) {\n\t\t//we're dead, don't do anything\n\t\treturn;\n", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "    def __init__(self, config={}):\n        super().__init__(config)\n        self.top = ClassFactory([Interface, Interface])\n        \"\"\"List of interfaces\"\"\"\n        self.regions = ClassFactory([Region])\n        \"\"\"List of regions\"\"\"\n        self.region_ids = [ int ]\n        \"\"\"List of region indexes", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            super( source, new Predicate<PatternMatch>()\n            {\n                public boolean accept( PatternMatch match )\n                {\n                    return match.filter( new FilteredPatternFinder.FilteredFilter(\n                        objectVariables ) );\n                }\n            }\n        }\n        private static class FilteredFilter\n            implements FilterExpression\n        {\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "        elif key == 'TAUX':\n            slice_json['rate'] = transform_values_holder_xml_json_to_json(value[0])\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment'] = u'\\n\\n'.join(comments)\n    return slice_json\ndef transform", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            if (ClientSettings.ICON_ENABLE_FRAME!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_ENABLE_FRAME)));\n          }\n          else {\n            if (ClientSettings.ICON_CLOSE_FRAME!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_CLOSE_FRAME)));\n          }\n        }\n       ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n    {\n      for (int x = leftToRight? 0 : p.getRasterWidth() - 1; \n        (leftToRight && x < p.getRasterWidth())", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    ContentValues cv = new ContentValues();\n                    cv.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, cv, Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, cv, Db.Table", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "                else\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n                m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n        #endregion\n    }\n    internal enum AllocMethod\n    {\n        HGlobal,\n        CoTaskMem\n   ", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t// Cancel the production\n\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tvar item = queue[0];\n\t\t\t\tif (item.NumberToBuild > numberToCancel)\n\t\t\t\t\titem.NumberToBuild -= numberToCancel;\n\t\t\t\telse\n\t\t\t\t\tFinishProduction", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "        infoText += \" file\" if numberOfFiles==1 else \" files\"\n        infoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file\" if numberOfHiddenFiles==1 else", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = re_m4.sub(r'%%\\1%%', code)\n        self.outputs[0].write(code)\n        return 0\n@feature('subst_pc')\ndef subst_pc_files(self):\n    \"\"\"\n    Create *.pc* files from *.pc.in*. The task is executed whenever an input variable used", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "        result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );\nNext line of code:\n:\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] + chemical[ 1 ][ idx - 1 ]\n\t\t\t\t\t\t\t\t\t- 4 * chemical[ ", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern)));\n                break;\n            case ColumnType.STRING:\n                if (utf8) {\n                    columnTypes.add(typeManager.nextUtf8Adapter());\n                } else {\n                    columnTypes.add(typeManager.nextStringAdapter());\n                }\n                break;\n           ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@cti_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.cti_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\tParam = qs.NewParameter();\n\t\t", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        if self.trusted_key == 'enable':\n            trusted_key = 'true'\n        else:\n            trusted_key = 'false'\n        if self.auth_type == 'encrypt':\n            self.password = self.password.upper()\n        else:\n            self.password = self.password.lower()\n        self.cli_load_config(\n            [\"ntp", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            # Verify that the component was last edited by the editing_user\n            check_node(component.location, None, after_create, editing_user, None, after_create, editing_user)\n            # Verify that the child was last edited by the editing_user\n            check_node(child.location, None, after_create, editing_user,", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        digest.update((byte) (TEXT_CODE & 0xff));\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n        digest.update((byte", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "    if dict.has_key('type'):\n        type = dict['type']\n        del dict['type']\n    else:\n        type = 'type'\n    if type == 'type':\n        return aetypes.Range(dict)\n    return aetypes.Unknown(type, dict)\ndef mkinsertionloc(dict):\n    if dict.has", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            formatters = new Collection<MediaTypeFormatter>();\n            if (api == null)\n            {\n                throw new ArgumentNullException(\"api\");\n            }\n            IEnumerable<ApiDescriptionParameterModel> parameters = api.ParameterDescriptions.Select(p => new ApiDescriptionParameterModel(p.ParameterDescriptor.ParameterType, p.Name));\n            IEnumerable<ApiDescriptionParameter", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "                value = entry.get_active_text()\n            if event.keyval == gtk.keysyms.F3:\n                create = True\n            else:\n                create = False\n            if column._type in ('boolean'):\n                entry.handler_block(entry.editing_done_id)\n                entry.handler_block(entry.editing_done_id)\n                entry", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /*\n     * (non-Javadoc)\n     * @see org.springframework.beans.factory.config.BeanFactoryPostProcessor#getOrder()\n     */\n    public int getOrder()\n    {\n        return", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            if f.readline().strip():\n                f.close()\n                f = None\n        except IOError:\n            # No preexisting file to remove blank lines from\n            f = None\n    if f is not None:\n        f.close()\n    if not os.path.exists(path):\n        if check_mode:\n            module.exit", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "            );\n        [PreserveSig]\n        int QueueEventParamInt(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In] int hrStatus,\n            [In, MarshalAs(UnmanagedType.SysInt)] IntPtr pUnk\n            );\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "        spm.addPrincipalToPrincipal( directedAclKeys );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = REMOVE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody DirectedAclKeys directedAclKeys )", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        # Verify child elements\n        for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element matches what is expected.\n        This verifies the tag of the element matches what is expected.", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "    elif node.nodeType == Node.ENTITY_REFERENCE_NODE:\n        clone = newOwnerDocument.createEntityReference(node.nodeName)\n    elif node.nodeType == Node.ENTITY_NODE:\n        clone = newOwnerDocument._create_entity(node.nodeName,\n                                                node.publicId,\n                                                node.systemId,\n                                                node.notationName)\n    elif node", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t// TODO: Do we want to order the components (except for ANY)?\n\t\t\t// Encode the entries backwards.\n\t\t\tfor (int i = keyLocator.size() - 1; i >= 0; --i) {\n\t\t\t\tif (decoder.peekType(TlvTypeCodes.NameComponent, endOffset))\n", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        //Updates the player's HUD\n        display.update(delta, myPlayer, players, ActiveWeapons, ActiveWeapons, ActiveWeapons, auto);\n        \n        //Updates the map\n       ", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setColor( color );\n        GameEngine.model().getGame().addRegistration( action );\n        hide();\n      }\n    } );\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n    // add company selection\n    m_panel.add( new HTML( \"<b>\" + MApp", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            msgs = [e[\"msg\"] for e in err[\"errors\"]]\n            raise RuntimeError(\", \".join(msgs))\n    filename = get_filename(r.headers)\n    if not filename", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "    if len(reaction.metabolites)!= 1:\n        raise ValueError(\n            \"Cannot calculate yields for objectives with multiple reactions.\"\n        )\n    return [met.elements.get(\"C\", 0) for met in reaction.metabolites]\ndef _total_components_flux(\n    flux: float, components: List", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(\n            store__project__pootle_path=pootle_path,\n            store__project__pootle_path__isnull=False,\n            store__project__pootle_path__user=user,\n        )\nclass Unit(CachedTreeItem, CachedMethods, base.Translation", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Student',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('status',", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                    self.logger.debug(\"Sending ARP reply to {} on port {}\".format(dstip, portnum))\n                    arp = poxpkt.find('arp')\n                    arp.opcode = pktlib.arp.REPLY\n                    arp.protodst = IPAddr(portnum)\n                    arp.protosrc = IPAddr(srcip)\n", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (m_RecentItems.size() >= m_MaxCount) {\n      m_RecentItems.remove(0);\n      writeProps();\n    }\n    m_RecentItems.add(item);\n    if (m_Menu!= null)\n      updateMenu();\n    notifyRecentItemListenersOfAdd(item);\n  }\n  /**\n  ", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            if (target is ShadowKnight)\n                return false;\n            if (target is ShadowKnight)\n                return false;\n            if (target is ShadowKnight)\n                return false;\n            if (target is ShadowKnight)\n                return false;\n            if (target is ShadowKnight)\n                return false;\n            if (target", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t} else if (p.typ == Node.iter || p.typ == Node.opt) {\n\t\t\ta = LeadingAny(p.sub);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompSyncSets() {\n\t\tallSyncSets = new", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tbuff[5] = (byte)((size & 0x00ff) >> 8);\n\t\t\tbuff[6] = (byte)(size & 0x00ff);\n\t\t\tWriteReport(buff);\n\t\t\t//", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\tstring timeStamp = String.Format( \"{0:yyyy-MM-dd HH-mm-ss}\", DateTime.Now );\n\t\t\treturn timeStamp;\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\t//should bring from cache\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (k++; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (k++; i < N_INDEXES; i++, k += 4)\n            {\n                _indx", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "    def create(self, description, currency=None, fields=None):\n        \"\"\" Create a rate in the UI\n        Args:\n            description (str): name of the compute rate to create\n            currency (str): - type of currency for the rate\n            fields (dict): -  nested dictionary listing the Rate Details", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\t// if we are using shadow buffer, we have to write data to shadow buffer\n\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.Discard );\n\t\t\t\t// write data to shadow buffer\n\t\t\t\tMemory.Copy( src, shadowBuffer.Lock", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "            else {\n                tcpAcceptFilters.add(TcpAddress.parseAcceptFilter(filterStr));\n            }\n            return;\n        case ZMQ.ZMQ_XPUB_VERBOSE:\n            return;\n        case ZMQ.ZMQ_XPUB_NODROP:\n            return;\n        case ZMQ.ZMQ_XPUB_HWM:\n", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                // Write the decoded row to the output stream\n                for (int i = 0; i < bytesPerRow; i++) {\n                    fout.WriteByte(curr[i]);\n                }\n                // Read the next row of data\n                if (dataStream.Position == dataStream.Length) {\n                    return fout.ToArray();\n               ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('foo.bar'))\n        s.set_interface('foo.bar')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertTrue(s.has_interface('", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "                    for thing in m_product.get_basis():\n                        output += str(thing) + \"\\n\"\n                except (IndexError, ValueError):\n                    output += \"no such product\\n\"\n        _file = open(filename, 'w+')\n        _file.write(output)\n        _file.close()\n    def make_p_operator(self", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \"", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member returning an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\t// WDEV-3953\n\t\t/*if (orderInvestigationLiteVo.getSpecimenIsNotNull() && orderInvestigationLiteVo.getSpecimen().getSpecimenIndexIsNotNull())\n\t\t{\n\t\t\tif (orderInvestigationLiteVo.getSpecimen().getSpecimenIndex().getConf", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The list view this item belongs to.\n        /// </summary>\n        public SystemListView ListView { get { return new SystemListView(sw); } }\n        /// <summary>\n        /// The list view this item belongs to", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "        if not self.is_child_notebook():\n            err('Window::tab_new: not a notebook')\n        if self.get_visible_terminals():\n            err('Window::tab_new: window has visible terminals')\n        if self.config['hide_on_lose_focus']:\n            self.set_urgency_hint(False)\n        if", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                    toReturn.Add( new StructTypeInfo( nametypeFragments[1], managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn;\n        }\n        public void DllClose( Variant handle ) {\n            if ( handle.IsPtr ) {\n                IntPtr handlePtr = handle.GetIntPtr();\n               ", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "        self._context = OpenSSL.SSL.Context(_openssl_versions[protocol])\n        self._context.set_verify(\n            OpenSSL.SSL.VERIFY_PEER,\n            self._callback\n        )\n        self._context.set_verify_depth(5)\n        self._context.set_options(OpenSSL.SSL.OP_NO_SSLv2)\n", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\t// Container child hbox3.Gtk.Box+BoxChild\n\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.LabelProp = global::Mono.Unix.Catalog.GetString (\"_White Spaces:\");\n\t\t\tthis.label8.UseUnderline = true", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                headbook.reorder_child(child, new_num)\n                headbook.set_tab_reorderable(child, False)\n        headbook.connect(\"page_reordered\", page_reordered)\n    \n    # Initing the message area\n    \n    notebooks[\"messageArea\"].set_border_width(4)\n    notebooks[\"messageArea\"].set_show_tabs", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    IEditorPart editorPart = getEditorPart();\n    if (editorPart!= null)\n    {\n      IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();\n      if (page!= null)\n      {\n        IEditorInput input = editorPart.getEditorInput", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(802, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82, 20);\n\t\t\tthis.butAttach.TabIndex = 8;\n\t\t\tthis.butAttach.Text = \"Attach\";\n\t\t\tthis.butAttach", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "        if (sb == null)\n        {\n            return string;\n        }\n        else\n        {\n            return sb.toString();\n        }\n    }\n    /**\n     * Encodes the given string, so that it can be used within an HTML page.\n     * \n     * @param string     the String to convert\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\t// Test with a key shorter than the length of the HMAC output.\n\t\tpublic void RFC4231_TC2_Legacy ()\n\t\t{\n\t\t\tbyte[] key", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // option_1\n\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // option_2\n\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // option_", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "      return null;\n      String javaHome = java.GetValue(\"JavaHome\").ToString();\n      if (javaHome == null)\n        return null;\n      return javaHome;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (javaHome!= null)\n        return java", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = l\n        # attempt to find job by name\n        if comment is None:\n            for l in self.lines:\n                if re.match(r'%s' % name, l):\n                    return [comment, l]\n        # attempt to find job by job\n        if job is not None:\n           ", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            if(rankCounts == null)\n                continue;\n            for(int i = 0; i < rankCounts.length; ++i)\n            {\n                if(rankCounts[i] == 0)\n                {\n                    rankCounts[i] = minLikelihood;\n                    if(i == 0)\n                        rankCounts[i] *=", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "        neighbors.add(1);\n        neighbors.add(2);\n        neighbors.add(3);\n        assertEquals(3, neighbors.size());\n        val iterator = vertex.neighbors();\n        while (iterator.hasNext()) {\n            val neighbor = iterator.next();\n            assertTrue(vertex.contains(neighbor));\n        }\n    }\n    @Test\n    @", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                    elif self.choice.isdigit():\n                        self.cap = self.cap[int(self.choice)-1]\n                        print(self.grn+\"[*] Showing packet \"+self.choice+\": \"+self.cap.summary()+self.blk)\n                        time.sleep(1)\n                        self.parser(self.choice, cap=self.cap)\n                        continue\n                    else:\n                       ", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 159);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 198;\n            // \n            // label3\n", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': \"'created_scan_set'\", 'to': u\"", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "                return false;\n            }\n        }\n        return true;\n    }\n    private void processGlobalAttributes(Schema schema) {\n        if (schema == null) {\n            return;\n        }\n        // Process the attributes\n        java.util.List attributes = schema.getGlobalAttributes();\n        if (attributes == null) {\n           ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_refuse(self, cr, uid, ids, context=None):\n        self.holidays_refuse_notificate(cr, uid, ids, context=context)\n", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "            set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the <see cref=\"DataGridViewRow\"/> for the specified <see cref=\"IBusinessObject\"/>.\n        /// </summary>\n        /// <param name=\"businessObject\">The <see cref=\"IBusinessObject\"/> for", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "            return \"Mixer Line: \" + this.mixerHandle + \" \" + this.Name;\n        }\n    }\n    /// <summary>\n    /// Represents a mixer line (source or destination)\n    /// </summary>\n    public class MixerLine \n    {\n        private MixerInterop.MIXERLINE mixerLine;\n       ", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 =\n\t\t\t\tdomainObject.getCareContext() == null? null : domainObject.getCareContext().get( valueObject.getCareContext() );\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\t//This is to overcome a bug in both Sybase and Oracle which prevents them from", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            [\"cargo\", \"build\", \"--bin\", \"servo\", \"--bin\", \"servo-web\", \"servo\", \"servo-web\", \"servo-ccache\", \"servo-ccache-web\", \"servo-ccache-headless\", \"servo-ccache-headless-web", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\t// Improvement for negative rules: discard all positives, which are\n\t\t\t// at the same time considered to be negatives with confidence of 1\n\t\t\t// by the given prediction. As a complex second step discarding\n\t\t\t// further\n\t\t\t// negatives might help to improve the score,", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "                Stashed.SetStashDiffs(gitStash, gitItemStatuses);\n            }\n            Loading.Visible = false;\n            Loading.IsAnimating = false;\n            Stashes.Enabled = true;\n            Stashes.Visible = true;\n            Stashes.Enabled = true;\n            Stashes.SelectedIndex = Stashes.SelectedIndex;\n           ", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (o == this) {\n            return true;\n        }\n        if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return LangUtils.equals(this.host, that.host)\n                && this.port == that.port\n                && LangUtils.equals(this.realm, that.realm", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult result) {\n            object [] results = this.EndInvoke (result);\n            return ((int)(results[0]));\n        }\n    }\n    //\n    // This class is used to display the certificate dialog\n    //\n    [", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleStringAusMehrerenChargennummern(\n\t\t\tList<SeriennrChargennrMitM", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tdefault : \n\t\t\t\t\tbase.CSet(feature, value);\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "    archive_index = load_archive_index(args.index_file)\n    if args.action is None:\n        log.msg('No action specified - quitting')\n        sys.exit(1)\n    if not archive_index.exists():\n        log.msg('Archive index does not exist - quitting')\n        sys.exit(1)\n    if args.action ==", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        self.mosi_bits = mosi\n        self.miso_bits = miso\n        self.ss, self.es = ss, es\n        # TODO: Handle CMD[0:0] (always 0) and CMD[1:1] (always 1).\n        # TODO: Handle CMD[", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "          // literal, line 200\n          if (!(eq_s_b(1, \"a\"))) {\n            break lab0;\n          }\n          // ], line 200\n          ket = cursor;\n          // literal, line 200\n          if (!(eq_s_b(1, \"a\"))) {\n            break lab", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                if (cls == null) {\n                    System.out.println(\"Unknown fingerprint \"+fingerprint+\" for channel \"+channel);\n                    return;\n                }\n                ObjectDataInputStream odis = new ObjectDataInputStream(dins);\n                o = odis.readObject(cls);\n                if (o == null) {\n                    System.out.println", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                return result, extension.get_critical()\n        return None, False\n    def _get_key_usage(self):\n        return self._get_extension('keyUsage')\n    def _get_extended_key_usage(self):\n        return self._get_extension('extendedKeyUsage')\n    def _get_basic_constraints(self):\n        return self._", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    # The trigger sequence is the utf16 representation of the interval.\n    # The target sequence is the utf16 representation of the interval\n    # minus the first value.\n    return [ X, X - 1 ]\n", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\t//serviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\tserviceProperties.put(\"uri\", \"https://\"+bundleContext.getProperty(\"jetty.host\") + \":\" + httpSSLPort + \"/rest\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSL", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "        for device in devices:\n            assert isinstance(device, Device)\n    def test_list_devices_with_subsystem(self, context):\n        devices = list(context.list_devices().match_subsystem('input'))\n        for device in devices:\n            assert device.subsystem == 'input'\n    def test_list_devices_with_subsystem_nomatch", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "    opener = buildOpener()\n    device = Device(deviceToken)\n    user = device.notification_postDevicetoken(loginId, password)\n    print user\n    print user.menu.menulist()\n    print user.menu.friendlist()\n    print user.menu.friendlist()\n    print user.menu.friendlist()\n    print", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "        elif (index_elements[0] == \"Fit:\"):\n            rv['fitScatter'] = float(index_elements[1])\n        elif (index_elements[0] == \"Mode:\"):\n            rv['mode'] = index_elements[1]\n        elif (index_elements[0] == \"Stokes:", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": ":\n            if (m_Keys.Count > 0)\n            {\n                Hue = 0x0;\n                Hue = 0x0;\n                Hue = 0x0;\n                Hue = 0x0;\n                Hue = 0x0;\n                Hue = 0x0;\n                Hue", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            Tuner tuner = new TunerHdhr(device, addDevice);\n            tuner.liveDevice = true;\n            tunerList.add(tuner);\n            // DRS 20181103 - Added 1", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split.length < 2) {\n        throw new IllegalArgumentException(\"RegexNER mapping file must have at least two columns, but found only \" + split.length + \" on line \" + lineCount);\n      }\n      if (split.length > 4) {\n        throw new IllegalArgumentException(\"RegexNER mapping file must", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            # see if we find it using the path in env[var]\n            for n in try_names:\n                # see if we find it using the path in env[var]\n                for p in SCons.Util.flatten( sub_path ):\n                    if p:\n                        # FIXME: this is a hack to find the file in", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "        ctx = Context()\n        [ctx.push(x) for x in keys]\n        def make_it(feat, idx):\n            f = Feature(ctx, idx)\n            geom, attrs = feat\n            f.add_geometries_from_wkt(geom)\n            for k, v in attrs.iteritems():\n                f[k", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "        if self.want.port in [None, '*'] and self.want.ip!= '*':\n            raise F5ModuleError(\n                \"Specifying an IP address requires that a port number be specified\"\n            )\n        if self.want.port!= self.have.port:\n            raise F5ModuleError(\n                \"The port number", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "    @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text == 'Add Automate Method' and\n            self.location.is_displayed and\n            check_tree_path(\n                self.location.tree.currently_selected,\n                self.context['object'].tree_path))\n", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "            notifyListeners(new EventObject(this), EventStatusType.ERROR,\n                    getClass().toString() + \", getClassByName(), \"\n                    + \"class (\" + className + \") not found.\", null);\n        }\n        return result;\n    }\n    public IAction getActionObject(String className, String[] args) throws Exception {\n       ", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_request_error(\n            \"update_thread\",\n            {\"thread_id\": \"dummy\", \"course", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "            if env.get('WINDOWS_MANIFEST', 0):\n                # If the manifest is not in the source list, add it.\n                source.append(manifestSrc)\n            else:\n                # If the manifest is not in the source list, add it.\n                source.append(target[0].abspath + '.manifest", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "            Job job = new Job(getOperationMessage()) {\n                public IStatus run(IProgressMonitor monitor) {\n                    try {\n                        // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n                        monitor.beginTask(\"\", 1000); //$NON-NLS-1$\n                       ", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tmeta.setFields(data.outputRowMeta, getInputRowMeta(), meta.getFieldName(), meta.getFieldType(), meta.getFieldLength(), meta.getFieldPrecision(), meta.getFieldScale(), meta.getFieldNr(), meta.getFieldName(), meta.getFieldNr(), meta.getFieldName(), meta.getFieldNr(), meta.getFieldName(), meta.getFieldNr(), meta.getFieldName", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //WalkingRange\n            string swalkingrange2 = swalkingrange;\n            if (swalkingrange2.Contains(\"s\") || swalkingrange2.Contains(\"m\") || swalkingrange2.Contains", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest system log is not as expected.\")\n        logging.info(\"Guest system log is as expected.\")\n        self._cleanup_open_session()\n    @error_context.context_aware\n    def verify", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        assertThat(rc.get(), is(5));\n        assertThat(rc.get(), is(5));\n        assertThat(rc.get(), is(5));\n        assertThat(rc.get(), is(5));\n        assertThat(rc.get(), is(5));\n        assertThat(rc.get(), is(5));\n        assertThat(rc.get(), is(5));\n       ", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) {\n            logger.info(\"[FAULT] \" + this.ownerID + \" : FAILURE OF \" + destination.getID() +\n                \" SUSPECTED ON REQUEST SENDING : \" + e.getMessage());\n", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\t}\n\t\t\telse if (value <= 0x1FFFFFFF) {\n\t\t\t\twriter.Write((byte)((value >> 24) | 0xC0));\n\t\t\t\twriter.Write((byte)(value >> 16));\n\t\t\t\twriter.Write((byte)(value >> 8));\n\t\t\t\twriter.Write((byte)value);\n\t\t", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        self.fm.ui.console.print(\"extracting files from: \" + os.path.basename(one_file.dirname)\n        self.fm.loader.Add(\n            \"Extracting files\",\n            CommandLoader(copied_files, cwd, descr, refresh, au_flags),\n            original_path)\n", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringStringString ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\", \"COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        de = Locale.objects.get(code='de')\n        repo = self._setup(de, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs)\n        self.assertIn(self", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            if \"url\" in cmd.parameters:\n                userstate.url = cmd.parameters[\"url\"]\n            if \"user_id\" in cmd.parameters:\n                userstate.user_id = cmd.parameters[\"user_id\"]\n            if \"user_hash\" in cmd.parameters:\n                userstate", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        if align == \"<\":\n            align = \"left\"\n        elif align == \">\":\n            align = \"right\"\n        elif align == \"^\":\n            align = \"center\"\n        else:\n            align = \"left\"\n        if squash_c:\n            if self.ncols == 1:\n                return highlight(\n                   ", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "        column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None,", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof GridColumn) {\n\t\tGridColumn parentColumn = (GridColumn) parent;\n\t\tparentColumn.column.setParent(parentColumn.column);\n\t    }\n\t} while (parent!= null);\n\treturn EVAL_PAGE;\n    }\n    @Override\n    public int doEndTag() throws PageException {\n\treturn SKIP_BODY;\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "                nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                Dialog.LoadXML(nl, version);\n                nl = element.SelectSingleNode(\"Perception\").ChildNodes;\n                Perception = Convert.ToInt32(ReadElement(element, \"Perception\"));\n                nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                Dialog.LoadXML(nl", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                    else if (m_Peerless == PeerlessList.Travesty)\nNext line of code:\n:\n                    else if (m_Peerless == PeerlessList.ParoxysmusTrammel || m_Peerless == PeerlessList.ParoxysmusFelucca )\n\t\t\t\t\t\tm_key[i] =", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = kdf.ComputeHash(pbMsg, p);\n\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon2-1\");\n\t\t\t// ======================================================\n\t\t\t// From the official Argon2 1.3 reference code package\n\t\t\t//", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the cost.\n\t * @param manaToSend How much mana is to be sent.\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"expected {1})\", NextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Adds the current state of the Lights frame to the end of the output queue\n\t\t///", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if ((!this.getUserErrorMessage().equals(other.getUserErrorMessage())))\n            return false;\n        if ((!this.getActionTraceList().equals(other.getActionTraceList())))\n            return false;\n        if ((!this.getScreenShots().equals(other.getScreenShots())))\n            return false;\n        if ((!this.getFiles().equals(other.get", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "            dc.number = p.readString();\n            dc.name = p.readString();\n            dc.uusInfo = p.readInt();\n            dc.isMultiparty = p.readInt();\n            dc.isHold = p.readInt();\n            dc.isVideo = p.readInt();\n            dc.isUnknown = p.readInt();\n            dc.isRingingCall = p", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                int i = x + y * xSizeP;\n                newVertices[i] = new Vector3(x - 0.5f, y - 0.5f, 0f);\n                newNormals[i", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\tObject[] params = new Object[] { testInt1, testInt2 };\n\t\t\t\n\t\t\tLog.i(TAG, \"About to call \" + API_METHOD_ADD + \" with params \" + params[0] + \" and \" + params[1]);\n", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[]{0};\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[]{0};\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionStarts(@Nonnull int[] a)\n\t\t\t{\n\t\t\t\treturn new", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "            out.writeBoolean(false);\n            out.writeUTF(null);\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeUTF(found.object.getClass().getName());\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n    private void logging2(String msg) {\n        System.out.println(msg);\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                    spell.RangeCheckFrom.To2D().Distance(minionPrediction.CastPosition.To2D()) <= spell.Range)\n                                {\n                                    result.Add(minion);\n                                }\n                            }\n                            break;\n                        case CollisionableObjects.YasuoWall:\n                            if (ObjectManager.Player.Spellbook.CastSpell(spell.Slot, spell", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        if (x == y) return true;\n        if (graph.isAdjacentTo(x, y)) return true;\n        for (Node z : graph.getAdjacentNodes(x)) {\n            if (graph.isAdjacentTo(z, y)) {\n                return true;\n            }\n            if (existsInducingPathInto(z", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    if (pop[i] is PlaceBase)\n                        plcs.Push(pop[i] as PlaceBase);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (this.attachmentFile == null) {\n            if (other.attachmentFile!= null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n            return false;\n        }\n        if (this.fileId == null) {\n            if (other.fileId!= null", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                        if (mobiles[i]!= from && SpellHelper.ValidIndirectTarget(from, mobiles[i]) && from.CanBeHarmful(mobiles[i], false))\n                        {\n                            from.DoHarmful(mobiles[i]);\n                            AOS.Damage(mobiles[i], from, m_Item.Get", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": " */\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId) {\n    return mock.getAvailCompoIds(sClientSpaceId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sCompoName)", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                for ll in range(2):\n                    if z_dict[z_key][per][ll] == 0:\n                        z_dict[z_key][per][ll] = np.nan\n                    else:\n                        z_dict[z_key][per][ll] = z_dict[z_key][per][ll]\n            for t_key", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "            env[\"PATH\"] = \":\".join(extra_path) + \":\" + env[\"PATH\"]\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib) + \":\" + env[\"LD_LIBRARY_PATH\"]\n        if self.config[\"tools\"][\"ccache\"]:\n            env[\"RUSTC_WITH", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "            for path, test_list in iteritems(type_paths):\n                if test_type == \"reftest\" or test_type == \"reftest_node\":\n                    source_file = source_files.get(path)\n                    if source_file is None:\n                        source_file = Stub(tests_root,\n                                           path)\n                        source_files[path", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "        if (compiledScript!= null) {\n            compiledScript = null;\n        }\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding() {\n            @Override\n            public Object getVariable(String name) {\n                return null;\n            }\n            @Override\n            public void setVariable(String name", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "            throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n            throw new NotSupportedException();\n        }\n        ///", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "      for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E = np.reshape(grad_E, (-1,3))\n        transformed_grad.append", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (this.id == null || obj == null)\n\t\t\treturn - 1;\t\t// code from domain goes here\n\t\tint cmp = this.comparedTo ( orderinvcurrentstatus, orderinvcurrentstatus);\n\t\treturn cmp;\n\t}\n\tpublic synchronized static int generateValueObjectUniqueID()\n\t{\n", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertEquals(found.size(), 3);\n        final List<StackImpl> found2 = stackDao.searchStacks(null, asList(\"search-tag1\", \"search-tag2\"), 0, 1);\n        found2.forEach(s -> Collections.sort(s.getTags()));\n        assertEquals(found2.size(), 3);\n", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter p = new ParameterImpl();\n        p.setParameterCode(\"CRAWL_DEPTH\");\n        p.setParameterFamily(pf);\n        p.setParameterValue(depth);\n        crawlParameters.add(p);\n        //EXCLUSION REGEXP\n        Parameter p2 = new ParameterImpl();\n        p2.setParameterCode(\"CRAWL_EXCLUSION_REG", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// If the pattern is a call to #splice, then we can match any number of \n\t\t\t// arguments. If the pattern is a call to #params, then we can match any \n\t\t\t// number of arguments, but we must match at least one.\n\t\t\tif (pattern.Calls(S", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                        if (colisionList.Count() > 0)\n                        {\n                            extendedWillHit++;\n                        }\n                    }\n                    if (extendedWillHit >= zedMenu.GetParamSlider(\"koreanzed.laneclearmenu.useqif\"))\n                    {\n                        extendedFarmLocation = shadow.Position.To2D();\n                       ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t// Container class, LocalContractDetailsContainer\n\t\t// Local context variable class\n\t\t// Local context variables\n\t\tims.framework.utils.SizeInfo designSize1 = new ims.framework.utils.SizeInfo(848, 632);\n\t\tif(runtimeSize == null)\n\t\t\truntimeSize = designSize1", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "    return re.search(pattern, frozen_output) is not None\n@task\n@timed\ndef install_python_prereqs():\n    \"\"\"\n    Installs Python prerequisites\n    \"\"\"\n    if no_prereq_install():\n        print(NO_PREREQ_MESSAGE)\n        return\n    # We need to install the Python", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    assert Sum(x, (x, 1, 2)).doit() == 3\n    assert Sum(x, (x, 1, 2)).doit() == 3\n    assert Sum(x, (x, 1, 2)).doit() == 3\n   ", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                this._oldStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._oldStartingIndex = startingIndex;\n                this._oldItemList = (changedItems == null)? null : ArrayList.ReadOnly(changedItems);\n            }\n            this._notifyAction = action;\n        }\n        private void Initialize", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "            streamWriter.close();\n            writer.close();\n            StringReader reader = new StringReader(writer.toString());\n            InputSource inputSource = new InputSource(reader);\n            Document testDocument = parser.parse(inputSource);\n            objectToXMLDocumentTest(testDocument);\n        }\n    }\n    public void testObjectToXMLStreamWriterWithSchema", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                    c.Campus = Token2Csv();\n                    break;\n                case Param.OrgType:\n                    c.OrgType = Token2Csv();\n                    break;\n                case Param.OrgType3:\n                    c.OrgType3 = Token2Csv();\n                    break;\n                case Param.OrgType4:\n                    c", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Entry: {0}\", i);\nNext line of code:\n:\nConsole.WriteLine (\"Entry: {0}\", i);\nNext line of code:\n:\nConsole.WriteLine (\"Entry: {0}\", i);\nNext line of code:\n:\nConsole.WriteLine (\"Entry: {0}\", i);\nNext line of code:\n:\n", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "                if ((l.status & Label.JSR)!= 0) {\n                    // this block is a JSR target\n                    if (l.inSubroutine(id)) {\n                        // this block belongs to the subroutine\n                        l.status |= Label.VISITED;\n                        if (l.successors!= null) {\n                           ", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(StackObject.To", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\t}\n\t\tprivate Position getPosition() {return PageSupport.getPosition(comboLabelPosition.getSelectionIndex());}\n\t\tprivate void setPosition(Position position) {comboLabelPosition.select(PageSupport.getPosition(position));}\n\t\t\n\t\t@Override\n\t\tpublic void widgetSelected(SelectionEvent e) {\n\t\t\tif(e.getSource() == comboLabelPosition", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImageValue)-1, \"Failed to decrement the", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "        K = pow(self.e, self.x, self.p)\n        # okay, build up the hash H of\n        # (V_C || V_S || I_C || I_S || K_S || min || n || max || p || g || e || f || K)  # noqa\n        hm", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "            FileSystemNodeManager manager = FileSystemNodeManager.getInstance();\n            DatabaseNode databaseNode = nodeMap.get(connectionData);\n            if (databaseNode!= null) {\n                DefaultMutableTreeNode node =\n                        (DefaultMutableTreeNode) treeModel.getRoot().getChildAt(0);\n                DefaultMutableTreeNode folderNode = null;\n                for", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "\"\"\"                res = self.cr.fetchone()[0]\n                return res and res[0] or 0.0\n            def sum(self, code, from_date, to_date=None):\n                if to_date is None:\n                    to_date = fields.Date.from_string(fields.Date.today()).strftime('%Y-%m-%d", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        dlnmdlnm.append(cosmo.dlnMdensitydlnMcritOR200(zi))\n        #dlnmdlnm.append(cosmo.dlnMdensitydlnMcritOR200(zi))\n        #dlnmdlnm.append(cosmo.dlnMdensitydlnMcritOR", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        d.setSize(font.getSize(), font.getSize());\n        return d;\n    }\n    /**\n     * The FigText is not interested in the owner's properties.\n     * \n     * @param property the property name\n     * @param newValue the new value\n     * @return true if the property is of interest\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "        self.cal_p2(phi=phi,flag=flag)\n        #print self.p2\n        #print self.edge\n        #print self.edge[0,:]\n        #print self.edge[1,:]\n        #print self.edge[0,:]-self.edge[1,:]\n        #print self.edge", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void ShowOrHide(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tvar window = sender as Window;\n\t\t\tif (window == null)\n\t\t\t\tthrow new ArgumentNullException(\"window\");\n\t\t\tShowOrHide(window", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                    for n in xrange(params[0]['nbins'])]\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params[1]['bins'] = [\n                    params[", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            if (query.onMoreMessagesLoaded!= null) {\n                query.onMoreMessagesLoaded.onMoreMessagesLoaded(contact, query);\n            }\n            if (query.onMoreMessagesLoaded!= null) {\n                query.onMoreMessagesLoaded = null;\n            }\n        }\n    }\n    private void processMore(XmppConnection connection", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "                im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\", rgb2g)\n            else:\n                im", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "class BlockParser(Parser):\n    endian = LITTLE_ENDIAN\n    PARSER_TAGS = {\n        \"id\": \"ace\",\n        \"category\": \"archive\",\n        \"min_size\": 0x1000,\n        \"description\": \"ACE archive\",\n        \"magic\": (MAGIC, {\"offset\": 0", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data, sys.argv[ 2 ] )\n\t\tmodel.setnetwork( model.network, model.topological, train = True )\n\t\tmodel.trainmodel()\n\t\tprint \"Score = %s\" % model.score()\n\t\tprint \"Topological", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (chance > 0)\n            {\n                if (Utility.Random(100) < chance)\n                    res = EnhanceResult.Success;\n                else\n                    res = EnhanceResult.Failure;\n            }\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "            entries[entry_name] = (entry_value, displayname, desc)\n        # Create the user-defined enum type\n        enum_type = rdltypes.UserEnum(\n            type_name,\n            entries,\n            self.src_ref\n        )\n        return enum_type\n    #---------------------------------------------------------------------------\n    def addressBlock_vendorExtensions", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                    pnlServices.Controls.Add(arChkBx[i]);\n                    pnlServices.Refresh();\n                }\n            }\n        }\n        private void FrmSetup_FormClosing(object sender, FormClosingEventArgs e)\n        {\n            if (e.CloseReason == CloseReason.UserClosing)\n            {\n                if (File.Exists(CONFIGPATH))\n            {\n               ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "                return (bool)this.ViewState[\"SubmitText\"]?? true;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6.", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                if(this.textureArray[textureHash]!= null)\n                {\n                    if(!this.textureArray[textureHash].getImage().isSelected())\n                    {\n                        this.textureArray[textureHash].getImage().selectTexture();\n                    }\n                    Main.opengl.glBegin(Main.opengl.GL_TRIANGLES());\n                    for(int tri = 0; tri", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    response['Access-Control-Expose-Headers'] = header + ',' + exposedHeaders\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                    Driver driver = idlePool.Peek();\n                    if (driver.IdleSince.Add(settings.IdleConnectionTimeout) < now)\n                    {\n                        // remove the driver from the idle pool\n                        oldDrivers.Add(driver);\n                        // and return it to the caller\n                        idlePool.Dequeue();\n                    }\n                    else\n                   ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "        var = [var]\n    # List format.\n    else:\n        if not all(isinstance(val, (int, float)) for val in var):\n            raise ValueError('Invalid {0} provided: {1}'.format(name, var))\n        var = tuple(var)\n    return var\ndef _verify_list(name", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(MOBS)\nQUEST.addKillId(MOBS)\nQUEST.addKillId(MOBS)\nQUEST.addKillId(MOBS)\nQUEST.addKillId(MOBS)\nQUEST.addKillId(M", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - ((double)num * 60 + (double)num1 * 60)) * 100);\n\t\t\t\t\tstring[] str = new string[] { num.ToString(\"D2\"), \":\",", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = GL.CreateProgram();\n            GL.ShaderSource(ShaderProgram, vertexShader);\n            GL.ShaderSource(ShaderProgram, fragmentShader);\n           ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "        for x in self.reactions:\n            x._model = self\n        for x in self.metabolites:\n            x._model = self\n        for x in self.genes:\n            x._model = self\n        self._trimmed = False\n        self._trimmed_genes = []\n        self._trimmed", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\treturn coll;\n\t}\n\tpublic static ims.clinicaladmin.vo.beans.TumourGroupListVoBean buildBeanCollection()\n\t{\n\n\t\treturn null;\n\t}\n\tpublic Object getCacheHash()\n\t{\n\t\treturn null;\n\t}\n}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\treturn current;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * Highlights a section of lines that form a paragraph\n\t */\n\tpublic Rectangle setFoundTextAreas(int x, int y){\n\t\tRectangle[] lines = PdfHighlights.getLineAreas();\n\t\tif(lines!=null){\n\t\t\tRectangle", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "        mListView.setLayoutAnimation(controller);\n    }\n    \n    /**\n     * Fill the list with the bookmarks.\n     */\n    private void fillData() {\n    \tmCursor = mDbAdapter.fetchWeaveBookmarksList();\n    \tif (mCursor!= null) {\n    \t\tmCursor.moveToFirst();\n    \t\t\n    \t\tListAdapter adapter =", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "                if (PartnerInterestRow.RowState!= DataRowState.Deleted)\n                {\n                    if (PartnerInterestRow.FieldKey > HighestNumber)\n                    {\n                        HighestNumber = PartnerInterestRow.FieldKey;\n                    }\n                }\n                if (HighestNumber == 0)\n                {\n                    HighestNumber = 1;\n                }\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(structure[i])!= Mappings.indexUnknown)\n\t\t\t{\n\t\t\t\tthis.addWindowToDatabase(pssm, i, structure);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
