{"pred": "\t\t\t\tforeach ( Mobile m in m_Participants[i].Participants )\n\t\t\t\t{\n\t\t\t\t\tforeach ( Gump g in m.NetState.Gumps )\n\t\t\t\t\t{\n\t\t\t\t\t\tif (", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, **data.copy())\n\t\t\t\n\t\t\tif 'R' in roots:\n\t\t\t\troots.remove('R')\n\t\t\tif 'R' in roots:\n\t\t\t\troots.remove('R')\n\t\t\t\t\t\n\t\t\tif 'R' in roots:\n\t\t\t\tro", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        buff = a.read_frames(buffsize)\n        a.seek(0)\n        a.sync()\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0, 1)\n        a.seek(0, 2)\n        a.seek(0", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   self.click_by_css(self._SUB_LANGUAGES + \" a[text()='\" + language + \"']\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue style = (OLStyleValue) value;\n\t\t\t\twriter.addAttribute(\"name\", style.getName());\n\t\t\t\t\t\twriter.addAttribute(\"default\", style.getDefaultValue());\n\t\t\t\t\t\twriter.addAttribute(\"min\", style.getMinValue());\n\t\t\t\t\t\twriter.addAttribute(\"max\", style.getMaxValue());\n\t\t\t\t\t\twriter.addAttribute(\"step\", style.getStepValue());\n\t\t\t\t\twriter.addAttribute(\"units\", style.getUnits());\n\t\t\t\t\twriter.addAttribute(\"default\", style.getDefaultValue());\n\t\t\t\t\twriter.addAttribute(\"min\", style.getMinValue());\n\t\t\t\t\twriter.addAttribute(\"max\", style.getMaxValue());\n\t\t\t\t\twriter.addAttribute(\"step\", style.getStepValue());\n\t\t\t\t\twriter.addAttribute(\"units\", style.getUnits());\n\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value instanceof OLStyleColorRamps) {\n\t\t\t\t\tOLStyleColorRamps style = (OLStyleColorRamps) value;\n\t\t\t\t\twriter.addAttribute(\"default\", style.getDefaultRamp());\n\t\t\t\t\t\twriter.addAttribute(\"min\", style.getMinValue());\n\t\t\t\t\t\twriter.addAttribute(\"max\", style.getMaxValue());\n\t\t\t\t\t\twriter.addAttribute(\"step\", style.getStepValue());\n\t\t\t\t\twriter.addAttribute(\"units\", style.getUnits());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value instanceof OLStyleValue) {\n\t\t\t\t\t\tOLStyleValue style = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", style.getName());\n\t\t\t\t\t\twriter.addAttribute(\"default\", style.getDefaultValue());\n\t\t\t\t\t\twriter.addAttribute(\"min\", style.getMinValue());\n\t\t\t\t\twriter.addAttribute(\"max\", style.getMaxValue());\n\t\t\t\t\t\twriter.addAttribute(\"step\", style.getStepValue());\n\t\t\t\t\t\twriter.addAttribute(\"units\", style.getUnits());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value instanceof OLStyleValue) {\n\t\t\t\t\tOLStyleValue style = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", style.getName());\n\t\t\t\t\twriter.addAttribute(\"default\", style.getDefaultValue());\n\t\t\t\t\t\twriter.addAttribute(\"min\", style.getMinValue());\n\t\t\t\t\twriter.addAttribute(\"max\", style.getMaxValue());\n\t\t\t\t\twriter.addAttribute(\"step\", style.getStepValue());\n\t\t\t\t\twriter.addAttribute(\"units\", style.getUnits());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\tif (value instanceof OLStyleValue) {\n\t\t\t\t\tOLStyleValue style = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", style.getName());\n\t\t\t\t\t\twriter.addAttribute(\"default\", style.getDefaultValue());\n\t\t\t\t\t\twriter.addAttribute(\"min\", style.getMinValue());\n\t\t\t\t\t\twriter.addAttribute(\"max\", style.getMaxValue());\n\t\t\t\t\t\twriter.addAttribute(\"step\", style.getStepValue());\n\t\t\t\t\t\twriter.addAttribute(\"units\", style.getUnits());\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\tif (value instanceof OLStyleValue) {\n\t\t\t\t\t\tOLStyleValue style = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += a.hint_string()\n        return ret\n    def is_correct(self, answer):\n        return answer in self.answers\nclass _AnswerData(_QAData):\n    def __init__(self, answer", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 4:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 5:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 6:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 7:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 8:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 9:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 10:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 11:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 12:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 13:\n                    mob.SendMessage(\"Enter", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.print(\"  \");\n                cert.print(s);\n                s.println();\n            }\n        }\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLIENT\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public synchronized static void unregister (String name) {\n        spaceRegistrar.remove (name);\n    }\n    public synchronized static void register (String name, JESpace sp) {\n        spaceRegistrar.put (name, sp);\n    }\n    public synchronized static void register (String name, JESpace sp, String path) {\n        spaceRegistrar.put (name, sp);\n        sp.dbe.setPath (path);\n    }\n    public synchronized static void register (String name, JESpace sp, String path, String dbPath) {\n        spaceRegistrar.put (name, sp);\n        sp.dbe.setPath (path);\n        sp.dbe.setDatabasePath (dbPath);\n    }\n    public synchronized static void register (String name, JESpace sp, String path, String dbPath, String dbName) {\n        spaceRegistrar.put (name, sp);\n        sp.dbe.setPath (path);\n        sp.dbe.setDatabasePath (dbPath);\n        sp.dbe.setDatabaseName (dbName);\n    }\n    public synchronized static void register (String name, JESpace sp, String path, String dbPath, String dbName, String dbUser) {\n        spaceRegistrar.put (name, sp);\n        sp.dbe.setPath (path);\n        sp.dbe.setDatabasePath (dbPath);\n        sp.dbe.setDatabaseName (dbName);\n        sp.dbe.setDatabaseUser (dbUser);\n    }\n    public synchronized static void register (String name, JESpace sp, String path, String dbPath, String dbName, String dbUser, String dbPassword) {\n        spaceRegistrar.put (name, sp);\n        sp.dbe.setPath (path);\n        sp.dbe.setDatabasePath (dbPath);\n        sp.dbe.setDatabaseName (dbName);\n        sp.dbe.setDatabaseUser (dbUser);\n        sp.dbe.setDatabasePassword (dbPassword);\n    }\n    public synchronized static void register (String name, JESpace sp, String path, String dbPath, String dbName, String dbUser, String dbPassword, String dbHost) {\n        spaceRegistrar.put (name, sp);\n        sp.dbe.setPath (path);\n        sp.dbe.setDatabasePath (dbPath);\n        sp.dbe.setDatabaseName (dbName);\n        sp.dbe.setDatabaseUser (dbUser);\n        sp.dbe.setDatabasePassword (dbPassword);\n        sp.dbe.setDatabaseHost (dbHost);\n    }\n    public synchronized static void register (String name, JESpace sp, String path, String dbPath, String dbName, String dbUser, String dbPassword, String dbHost, String dbPort) {\n        spaceRegistrar.put (name, sp);\n        sp.dbe.setPath (path);\n        sp.dbe.setDatabasePath (dbPath);\n        sp.dbe.setDatabaseName (dbName);\n        sp.dbe.setDatabaseUser (dbUser);\n        sp.dbe.setDatabasePassword (dbPassword);\n        sp.dbe.setDatabaseHost (dbHost);\n        sp.dbe.setDatabasePort (dbPort);\n    }\n    public synchronized static void register (String name, JESpace sp, String path, String dbPath, String dbName, String dbUser, String dbPassword, String dbHost, String dbPort, String dbSSL) {\n        spaceRegistrar.put (name, sp);\n        sp.dbe.setPath (path);\n        sp.dbe.setDatabasePath (dbPath);\n        sp.dbe.setDatabaseName (dbName);\n        sp.dbe.setDatabaseUser (dbUser);\n        sp.dbe.setDatabasePassword (dbPassword);\n        sp.dbe.setDatabaseHost (dbHost);\n        sp.dbe.setDatabasePort (dbPort);\n        sp.dbe.setDatabaseSSL (dbSSL);\n    }\n    public synchronized static void register (String name, JESpace sp, String path, String dbPath, String dbName, String dbUser, String dbPassword, String dbHost, String dbPort, String dbSSL, String dbCipher) {\n        spaceRegistrar.put (name, sp);\n        sp.dbe.setPath (path);\n        sp.dbe.setDatabasePath (dbPath);\n        sp.dbe.setDatabaseName (dbName);\n        sp.dbe", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item.quantity() == 1) {\n\t\t\t\tRedButton btnAlchemize = new RedButton(Messages.get(this, \"alchemize\")) {\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\tAlchemize.consumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tbtnAlchemize.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\tbtnAlchemize.icon(new ItemSprite(ItemSpriteSheet.ALCHEMY));\n\t\t\t\tadd(btnAlchemize);\n\t\t\t\tpos = btnAlchemize.bottom();\n\t\t\t} else {\n\t\t\t\tint quantityAll = item.quantity();\n\t\t\t\tRedButton btnAlchemize1 = new RedButton(Messages.get(this, \"alchemize_1\", quantityAll / item.quantity())) {\n\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tAlchemize.consumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnAlchemize1.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\tbtnAlchemize1.icon(new ItemSprite(ItemSpriteSheet.ALCHEMY));\n\t\t\t\t\tadd(btnAlchemize1);\n\t\t\t\t\tRedButton btnAlchemizeAll = new RedButton(Messages.get(this, \"alchemize_all\", quantityAll)) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\t\tAlchemize.consumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnAlchemizeAll.setRect(0, btnAlchemize1.bottom() + 1, width, BTN_HEIGHT);\n\t\t\t\t\tbtnAlchemizeAll.icon(new ItemSprite(ItemSpriteSheet.ALCHEMY));\n\t\t\t\t\tadd(btnAlchemizeAll);\n\t\t\t\t\tpos = btnAlchemizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item.quantity() == 1) {\n\t\t\t\tRedButton btnAlchemizeAll = new RedButton(Messages.get(this, \"alchemize_all\")) {\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\tAlchemize.consumeAlchemize();\n\t\t\t\t\t\thide();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tbtnAlchemizeAll.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\t\tbtnAlchemizeAll.icon(new ItemSprite(ItemSpriteSheet.ALCHEMY));\n\t\t\t\t\tadd(btnAlchemizeAll);\n\t\t\t\tpos = btnAlchemizeAll.bottom();\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onBack() {\n\t\t\tif (owner != null) {\n\t\t\t\towner.show();\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onCancel() {\n\t\t\tif (owner != null) {\n\t\t\t\towner.show();\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onConfirm() {\n\t\t\tif (owner != null) {\n\t\t\t\towner.show();\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onSelect(int index) {\n\t\t\tif (owner != null) {\n\t\t\t\towner.show();\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onDeselect(int index) {\n\t\t\tif (owner != null) {\n\t\t\t\towner.show();\n\t\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onSelectAll() {\n\t\t\tif (owner != null) {\n\t\t\t\towner.show();\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onDeselectAll() {\n\t\t\tif (owner != null) {\n\t\t\t\towner.show();\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onCancelAll() {\n\t\t\tif (owner != null) {\n\t\t\t\towner.show();\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onConfirmAll() {\n\t\t\t\tif (owner != null) {\n\t\t\t\towner.show();\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onSelectOne() {\n\t\t\tif (owner != null) {\n\t\t\t\towner.show();\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onDeselectOne() {\n\t\t\tif (owner != null) {\n\t\t\t\towner.show();\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onCancelOne() {\n\t\t\tif (owner != null) {\n\t\t\t\towner.show();\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       request = self.dispatcher.dispatch(request)\n        start_response('200 OK', [('Content-Type', 'text/xml'), ('Content-Length', str(len(request))), ('Connection', 'close')])\n        return [request]\n\\end{", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.webview.execute_javascript(\"setRepeated('%s');\" % status_id)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def lock_status(self, status_id):\n        lock = \"lock('%s');\" % status_id\n        self.webview.execute_javascript(lock)\n    def unlock_status(self, status_id):\n        lock = \"unlock('%s');\" % status_id\n        self.webview.execute_javascript(lock)\n    def get_statuses(self):\n        return self.statuses\n    def get_conversations(self):\n        return self.conversations\n    def get_last_status_id(self):\n        return self.last_id\n    def get_last_status(self):\n        return self.statuses[-1]\n    def get_last_conversation(self):\n        return self.conversations.get(self.last_id, None)\n    def get_last_conversation_id(self):\n        return self.last_id\n    def get_last_conversation_root_id(self):\n        return self.last_id\n    def get_last_conversation_root_id_for_status(self, status_id):\n        return self.last_id\n    def get_last_conversation_root_id_for_status_root(self, status_root_id):\n        return self.last_id\n    def get_last_conversation_root_id_for_status_root_id(self, status_root_id):\n        return self.last_id\n    def get_last_conversation_root_id_for_status_root_id_for_status(self, status_root_id, status_id):\n        return self.last_id\n    def get_last_conversation_root_id_for_status_root_id_for_status_root(self, status_root_id, status_root_id2):\n        return self.last_id\n    def get_last_conversation_root_id_for_status_root_id_for_status_root_id(self, status_root_id, status_root_id2, status_id):\n        return self.last_id\n    def get_last_conversation_root_id_for_status_root_id_for_status_root_id_for_status(self, status_root_id, status_root_id2, status_id, status_id2):\n        return self.last_id\n    def get_last_conversation_root_id_for_status_root_id_for_status_root_id_for_status(self, status_root_id, status_root_id2, status_id, status_id2):\n        return self.last_id\n    def get_last_conversation_root_id_for_status_root_id_for_status_root", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "           return {\"error\": False}\n\nComment: I'm not sure what you're trying to do here. You're trying to return a dictionary from a function that doesn't return anything.\n\nComment: I'm trying to return a dictionary from a function that doesn't return", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals1\");\n\t\t\tz = (ZoneIdentityPermission) b.Union (a);\n\t\t\t\tAssert.IsTrue (Same (a, z), \"Untrusted+Trusted\");\n\t\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals2\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Intersect ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (SecurityZone.Trusted);\n\t\t\tZoneIdentityPermission b = new ZoneIdentityPermission (SecurityZone.Untrusted);\n\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Intersect (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals1\");\n\t\t\tz = (ZoneIdentityPermission) b.Intersect (a);\n\t\t\t\tAssert.IsTrue (Same (a, z), \"Untrusted+Trusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals2\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Intersect_DifferentIdentities ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (SecurityZone.Trusted);\n\t\t\tZoneIdentityPermission b = new ZoneIdentityPermission (SecurityZone.Untrusted);\n\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Intersect (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals1\");\n\t\t\tz = (ZoneIdentityPermission) b.Intersect (a);\n\t\t\t\tAssert.IsTrue (Same (a, z), \"Untrusted+Trusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals2\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Intersect_DifferentPermissions ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (SecurityZone.Trusted);\n\t\t\tSecurityPermission b = new SecurityPermission (PermissionState.None);\n\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Intersect (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+PS.None\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals1\");\n\t\t\tz = (ZoneIdentityPermission) b.Intersect (a);\n\t\t\t\tAssert.IsTrue (Same (a, z), \"PS.None+Trusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals2\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Intersect_DifferentZones ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (SecurityZone.Trusted);\n\t\t\tZoneIdentityPermission b = new ZoneIdentityPermission (SecurityZone.Untrusted);\n\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Intersect (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals1\");\n\t\t\tz = (ZoneIdentityPermission) b.Intersect (a);\n\t\t\t\tAssert.IsTrue (Same (a, z), \"Untrusted+Trusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals2\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Intersect_DifferentIdentities_DifferentZones ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (SecurityZone.Trusted);\n\t\t\tZoneIdentityPermission b = new ZoneIdentityPermission (SecurityZone.Untrusted);\n\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Intersect (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals1\");\n\t\t\tz = (ZoneIdentityPermission) b.Intersect (a);\n\t\t\t\tAssert.IsTrue (Same (a, z), \"Untrusted+Trusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals2\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Intersect_DifferentIdentities_DifferentPermissions ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (SecurityZone.Trusted);\n\t\t\tSecurityPermission b = new SecurityPermission (PermissionState.None);\n\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Intersect (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+PS.None\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals1\");\n\t\t\tz = (ZoneIdentityPermission) b.Intersect (a);\n\t\t\t\tAssert.IsTrue (Same (a, z), \"PS.None+Trusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals2\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Intersect_DifferentIdentities_DifferentZones ()\n\t\t{\n\t\t\tZoneIdentityPermission a =", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getAcceptedIssuers()\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getAcceptedIssuers(self):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getAcceptedIssuers()\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificate(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificate(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth_type)\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getCertificateChain(self, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getCertificateChain(auth", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "           self.__tmp_dir,\n            'datastream.sock')\n        self.__datastream_transport = self.__event_loop.create_datagram_endpoint(\n            self.__datastream_address,\n            self.__datastream_protocol)\n        self.__", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1 == true) {\n\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf)\n\t\t\t\t{\n\t\t\t\t\t\treturn new TimedData(id, conf);\n\t\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic ConcurrentMap<UUID, TimedData> getLoadedData()\n\t\t\t\t{\n\t\t\t\t\treturn DataManager.timedData;\n\t\t\t}\n\t\t\t\t@Override\n\t\t\t\t\tpublic String getSavePath()\n\t\t\t\t{\n\t\t\t\t\t\treturn Capitalism.SAVE_PATH;\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic String getSaveFile()\n\t\t\t\t{\n\t\t\t\t\treturn \"timed.yml\";\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic Map<String, Object> serialize(UUID id)\n\t\t\t{\n\t\t\t\t\treturn getLoadedData().get(id).serialize();\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic UUID convertFromString(String stringId)\n\t\t\t\t{\n\t\t\t\t\t\treturn UUID.fromString(stringId);\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\t\tpublic void loadToData()\n\t\t\t\t{\n\t\t\t\t\t\ttimedData = loadFromFile();\n\t\t\t\tsaveTimed(Capitalism.SAVE_PATH, \"timed\", timedData);\n\t\t\t\tsaveTimed(Capitalism.SAVE_PATH, \"timed\", null);\n\t\t\t\t}\n\t\t\t}), SERVER(new ConfigFile<String, ServerData>()\n\t\t\t{\n\t\t\t\t@Override\n\t\t\t\tpublic ServerData create(String string, ConfigurationSection conf)\n\t\t\t\t{\n\t\t\t\t\treturn new ServerData(string, conf);\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\t\tpublic ConcurrentMap<String, ServerData> getLoadedData()\n\t\t\t\t{\n\t\t\t\t\treturn DataManager.serverData;\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\t\tpublic String getSavePath()\n\t\t\t\t{\n\t\t\t\t\treturn Capitalism.SAVE_PATH;\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic String getSaveFile()\n\t\t\t\t{\n\t\t\t\t\treturn \"server.yml\";\n\t\t\t\t}\n\t\t\t@Override\n\t\t\t\tpublic Map<String, Object> serialize(String stringId)\n\t\t\t\t{\n\t\t\t\t\treturn getLoadedData().get(stringId).serialize();\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic String convertFromString(String stringId)\n\t\t\t\t{\n\t\t\t\t\treturn stringId;\n\t\t\t}\n\t\t\t\t@Override\n\t\t\t\t\tpublic void loadToData()\n\t\t\t\t\t{\n\t\t\t\t\t\tserverData = loadFromFile();\n\t\t\t\t\tsaveServerData(Capitalism.SAVE_PATH, \"server\", serverData);\n\t\t\t\t\tsaveServerData(Capitalism.SAVE_PATH, \"server\", null);\n\t\t\t\t}\n\t\t\t}),\n\t\t\t;\n\t}\n}\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\t\tgeneralNode.setPage(new PreferencePage() {\n\t\t\t\t\t@Override\n\t\t\t\tprotected void createFieldEditors() {\n\t\t\t\t\taddField(new BooleanFieldEditor(\n\t\t\t\t\t\"Show mini-mode dialog", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.Caster.SendAsciiMessage(\"Target selected\");\n            }\n        }\n        private class InternalTarget : Target\n        {\n            private ArchProtectionSpell m_Owner;\n            public InternalTarget(ArchProtectionSpell owner)\n                : base(Core.ML ? 10 : 12, false, TargetFlags.Beneficial)\n            {\n                m_Owner = owner;\n            }\n            protected override void OnTarget(Mobile from, object o)\n            {\n                if (o is IPoint3D)\n                {\n                    m_Owner.SpellTarget = o;\n                    m_Owner.CastSpell();\n                }\n                else\n                {\n                    m_Owner.Caster.SendAsciiMessage(\"Invalid target\");\n                }\n            }\n            protected override void OnTargetFinish(Mobile from)\n            {\nNext line of code:\n                m_Owner.Caster.SendAsciiMessage(\"Target selected\");\n            }\n        }\n\t}\n}\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._finalize_loaded(states)\n        self._finalize_loaded(states)\n        self._finalize_loaded(states)\n        self._finalize_loaded(states)\n        self._finalize_loaded(states)\n        self._finalize_loaded(", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getName().toString();\n\t\t\t\tList<IField> named = name2Field.get(name);\n\t\t\t\tif (named==null) { \n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like ``r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Pos", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds = [{'os': 'os_windows',\n                   'os_pretty': 'Windows',\n                   'os_arch_pretty': 'x86',\n                   'arch': 'x86',\n                   'arch_pretty': 'x86',\n                   'download_link': download_urls['direct']}]\n    else:\n        builds = android_builds(build, builds)\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_linux',\n                     'os_pretty': 'Linux',\n                     'os_arch_pretty': 'x86',\n                     'arch': 'x86',\n                     'arch_pretty': 'x86',\n                     'download_link': download_urls['direct']})\n    if not mobile:\n        builds.append({'os': 'os_osx',\n                           'os_pretty': 'Mac OS X',\n                           'os_arch_pretty': 'x86',\n                           'arch': 'x86',\n                           'arch_pretty': 'x86',\n                           'download_link': download_urls['direct']})\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_linux64',\n                           'os_pretty': 'Linux 64-bit',\n                           'os_arch_pretty': 'x86',\n                           'arch': 'x86',\n                           'arch_pretty': 'x86',\n                           'download_link': download_urls['direct']})\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_osx64',\n                       'os_pretty': 'Mac OS X 64-bit',\n                       'os_arch_pretty': 'x86',\n                       'arch': 'x86',\n                       'arch_pretty': 'x86',\n                       'download_link': download_urls['direct']})\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_windows64',\n                       'os_pretty': 'Windows 64-bit',\n                       'os_arch_pretty': 'x86',\n                       'arch': 'x86',\n                       'arch_pretty': 'x86',\n                       'download_link': download_urls['direct']})\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_osx64',\n                       'os_pretty': 'Mac OS X 64-bit',\n                       'os_arch_pretty': 'x86',\n                       'arch': 'x86',\n                       'arch_pretty': 'x86',\n                       'download_link': download_urls['direct']})\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_linux64',\n                       'os_pretty': 'Linux 64-bit',\n                       'os_arch_pretty': 'x86',\n                       'arch': 'x86',\n                       'arch_pretty': 'x86',\n                       'download_link': download_urls['direct']})\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_osx64',\n                       'os_pretty': 'Mac OS X 64-bit',\n                       'os_arch_pretty': 'x86',\n                       'arch': 'x86',\n                       'arch_pretty': 'x86',\n                       'download_link': download_urls['direct']})\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_windows64',\n                       'os_pretty': 'Windows 64-bit',\n                       'os_arch_pretty': 'x86',\n                       'arch': 'x86',\n                       'arch_pretty': 'x86',\n                       'download_link': download_urls['direct']})\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_osx64',\n                       'os_pretty': 'Mac OS X 64-bit',\n                       'os_arch_pretty': 'x86',\n                       'arch': 'x86',\n                       'arch_pretty': 'x86',\n                       'download_link': download_urls['direct']})\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_linux64',\n                       'os_pretty': 'Linux 64-bit',\n                       'os_arch_pretty': 'x86',\n                       'arch': 'x86',\n                       'arch_pretty': 'x86',\n                       'download_link': download_urls['direct']})\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_osx64',\n                       'os_pretty': 'Mac OS X 64-bit',\n                       'os_arch_pretty': 'x86',\n                       'arch': 'x86',\n                       'arch_pretty': 'x86',\n                       'download_link': download_urls['direct']})\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_windows64',\n                       'os_pretty': 'Windows 64-bit',\n                       'os_arch_pretty': 'x86',\n                       'arch': 'x86',\n                       'arch_pretty': 'x86',\n                       'download_link': download_urls['direct']})\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_osx64',\n                       'os_pretty': 'Mac OS X 64-bit',\n                       'os_arch_pretty': 'x86',\n                       'arch': 'x86',\n                       'arch_pretty': 'x86',\n                       'download_link': download_urls['direct']})\n    # Gather data about the build for each platform\n    if not mobile:\n        builds.append({'os': 'os_linux64',\n                       'os_pretty': 'Linux 64-bit',\n                       'os_arch_pretty': 'x86',", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByProjectTypeIssueTypeAssignments(projectID, issueTypeID);\n\t\t} else {\n\t\t\tstateBeansList = StatusBL.loadAll();\n\t\t}\n\t\tif (stateBeansList!=null && !stateBeansList.isEmpty()) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Returns the list of possible values for the field\n\t * @param fieldID\n\t * @param locale\n\t * @return\n\t */\n\t@Override\n\tpublic List<ISerializableLabelBean> getPossibleValues(Integer fieldID, Locale locale) {\n\t\tList<ISerializableLabelBean> possibleValues = new ArrayList<ISerializableLabelBean>();\n\t\tList<", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if (argumentSyntax.Parent is LabeledStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExpressionStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is AssignmentStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ReturnStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ForStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is WhileStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is DoUntilStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ContinueCaseStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ContinueLoopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (argumentSyntax.Parent is ExitloopStatementSyntax) {\n                    continue;\n                }\n                if (", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the child verticals have been set to match the groups\n        self.assertEqual(2, len(split_test.children))\n        vertical_0 = self.get_item_from_", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           tmp.Add(GetCIDFontType2(piref, subset, parms));\n            tmp.Add(GetFontBaseType(piref, subset, null));\n            tmp.Add(GetToUnicode(parms));\n            writer.WriteObject(tmp);\n        }\n        /** Outputs to the writer the font dictionaries and streams.\n         * @param writer the writer for this document\n         * @param ref the font indirect reference\n         * @param parms several parameters that depend on the font type\n         * @throws IOException on error\n         * @throws DocumentException error in generating the object\n         */\n        internal override void WriteFont(PdfWriter writer, PdfIndirectReference piref, Object[] parms) {\n            Hashtable longTag = (Hashtable)parms[0];\n            AddRangeUni(longTag, true, subset);\n            ArrayList tmp = new ArrayList();\nNext line of code:\n            tmp.Add(GetCIDFontType2(piref, subset, parms));\n            tmp.Add(GetFontBaseType(piref, subset, null));\n            tmp.Add(GetToUnicode(parms));\n            writer.WriteObject(tmp);\n        }\n        /** Outputs to the writer the font dictionaries and streams.\n         * @param writer the writer for this document\n         * @param ref the font indirect reference\n         * @param parms several parameters that depend on the font type\n         * @throws IOException on error\n         * @throws Document", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null) continue;\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcgn.depth = 0;\n\t\t\t\t\t\t\t\t\tcgn.clock = 0;\n\t\t\t\t\t\t\t\t\tcgn.pin = cell.getPin(0);\n\t\t\t\t\t\t\t\t\t\tcgn.topPin = cell.getPin(0);\n\t\t\t\t\t\t\t\t\tcgn.botPin = cell.getPin(0);\n\t\t\t\t\t\t\t\t\tcgn.main = cgn;\n\t\t\t\t\t\t\t\t\tcgn.x = cell.getX();\n\t\t\t\t\t\t\t\t\t\tcgn.y = cell.getY();\n\t\t\t\t\t\t\t\t\tcgn.yoff = 0;\n\t\t\t\t\t\t\t\tcgn.name = cell.describe(false);\n\t\t\t\t\t\t\t\t\tcgn.clock = cell.getClock();\n\t\t\t\t\t\t\t\t\tcgn.pin", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<Bitmap>(callable);\n        task.addListener(new FutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(Bitmap result) {\n            bitmapReference = new SoftReference<Bitmap>(result);\n            if (bitmapReference != null) {\n              task = null;\n            }\n          }\n          @Override public void onFailure(Throwable error) {\n            Log.w(TAG, error);\n          }\n        });\n        return task;\n    }\n    private Bitmap loadPage() throws IOException {\n      final InputStream is = context.getResources().openRawResource(model.getSprite());\n      try {\n        return BitmapUtil.decodeStream(is);\n      } finally {\n        is.close();\n      }\n    }\n  }\n}\n", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n            }\n        });\n    }\n}", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\nclass NodeEditTagsForm(NodeView):\n    tag_category = BootstrapSelect('tag_cat')\n    tag = BootstrapSelect('tag_add')\n    # less than ideal button duplication between classes\n    save_button = Button('Save')\n    reset_button = Button('Reset')\n    cancel_button = Button('Cancel')\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Tag Assignment') and\n            sel.is_displayed(resource_locator.format(self.context['object'].name))\n        )\n@navigator.register(Node, 'EditTags')\nclass EditTags(CFMENavigateStep):\n    VIEW = NodeEditTagsForm\n    prerequisite = NavigateToSibling('Details')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Edit Tags')\nclass NodeManagePoliciesForm(NodeView):\n    policy_profiles = BootstrapSelect('protectbox')\n    # less than ideal button duplication between classes\n    save_button = Button('Save')\n    reset_button = Button('Reset')\n    cancel_button = Button('Cancel')\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Select Policy Profiles') and\n            sel.is_displayed(resource_locator.format(self.context['object'].name))\n        )\n@navigator.register(Node, 'ManagePolicies')\nclass ManagePolicies(CFMENavigateStep):\n    VIEW = NodeManagePoliciesForm\n    prerequisite = NavigateToSibling('EditTags')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\nclass NodeEditTagsForm(NodeView):\n    tag_category = BootstrapSelect('tag_cat')\n    tag = BootstrapSelect('tag_add')\n    # less than ideal button duplication between classes\n    save_button = Button('Save')\n    reset_button = Button('Reset')\n    cancel_button = Button('Cancel')\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Tag Assignment') and\n            sel.is_displayed(resource_locator.format(self.context['object'].name))\n        )\n@navigator.register(Node, 'EditTags')\nclass EditTags(CFMENavigateStep):\n    VIEW = NodeEditTagsForm\n    prerequisite = NavigateToSibling('ManagePolicies')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Edit Tags')\nclass NodeManagePoliciesForm(NodeView):\n    policy_profiles = BootstrapSelect('protectbox')\n    # less than ideal button duplication between classes\n    save_button = Button('Save')\n    reset_button = Button('Reset')\n    cancel_button = Button('Cancel')\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Select Policy Profiles') and\n            sel.is_displayed(resource_locator.format(self.context['object'].name))\n        )\n@navigator.register(Node, 'ManagePolicies')\nclass ManagePolicies(CFMENavigateStep):\n    VIEW = NodeManagePoliciesForm\n    prerequisite = NavigateToSibling('EditTags')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\nclass NodeEditTagsForm(NodeView):\n    tag_category = BootstrapSelect('tag_cat')\n    tag = BootstrapSelect('tag_add')\n    # less than ideal button duplication between classes\n    save_button = Button('Save')\n    reset_button = Button('Reset')\n    cancel_button = Button('Cancel')\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Tag Assignment') and\n            sel.is_displayed(resource_locator.format(self.context['object'].name))\n        )\n@navigator.register(Node, 'EditTags')\nclass EditTags(CFMENavigateStep):\n    VIEW = NodeEditTagsForm\n    prerequisite = NavigateToSibling('ManagePolicies')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Edit Tags')\nclass NodeManagePoliciesForm(NodeView):\n    policy_profiles = BootstrapSelect('protectbox')\n    # less than ideal button duplication between classes\n    save_button = Button('Save')\n    reset_button = Button('Reset')\n    cancel_button = Button('Cancel')\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Select Policy Profiles') and\n            sel.is_displayed(resource_locator.format(self.context['object'].name))\n        )\n@navigator.register(Node, 'ManagePolicies')\nclass ManagePolicies(CFMENavigateStep):\n    VIEW = NodeManagePoliciesForm\n    prerequisite = NavigateToSibling('EditTags')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\nclass NodeEditTagsForm(NodeView):\n    tag_category = BootstrapSelect('tag_cat')\n    tag = BootstrapSelect('tag_add')\n    # less than ideal button duplication between classes\n    save_button = Button('Save')\n    reset_button = Button('Reset')\n    cancel_button = Button('Cancel')\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Tag Assignment') and\n            sel.is_displayed(resource_locator.format(self.context['object'].name))\n        )\n@navigator.register(Node, 'EditTags')\nclass EditTags(CFMENavigateStep):\n    VIEW = NodeEditTagsForm\n    prerequisite = NavigateToSibling('ManagePolicies')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Edit Tags')\nclass NodeManagePoliciesForm(NodeView):\n    policy_profiles = BootstrapSelect('protectbox')\n    # less than ideal button duplication between classes\n    save_button = Button('Save')\n    reset_button = Button('Reset')\n    cancel_button = Button('Cancel')\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Select Policy Profiles') and\n            sel.is_displayed(resource_locator.format(self.context['object'].name))\n        )\n@navigator.register(Node, 'ManagePolicies')\nclass ManagePolicies(CFMENavigateStep):\n    VIEW = NodeManagePoliciesForm\n    prerequisite = NavigateToSibling('EditTags')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\nclass NodeEditTagsForm(NodeView):\n    tag_category = BootstrapSelect('tag_cat')\n    tag = BootstrapSelect('tag_add')\n    # less than ideal button duplication between classes\n    save_button = Button('Save')\n    reset_button = Button('Reset')\n    cancel_button = Button('Cancel')\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Tag Assignment') and\n            sel.is_displayed(resource_locator.format(self.context['object'].name))\n        )\n@navigator.register(Node, 'EditTags')\nclass EditTags(CFMENavigateStep):\n    VIEW = NodeEditTagsForm\n    prerequisite = NavigateToSibling('ManagePolicies')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Edit Tags')\nclass NodeManagePoliciesForm(NodeView):\n    policy_profiles = Bootstrap", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\t\tlistener.onPose(timestamp, pose);\n\t\t}\n\t}\n}\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               ScriptManager sm = ScriptManager.GetCurrent(Page);\n                sm.RegisterScriptControl(this);\n            }\n            base.Render(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.get", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect{\" +\n            \"probability=\" + probability +\n            \", scopes=\" + scopes +\n            '}';\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n        'reporttime': arrow.utcnow().datetime\n    }, flush=True)\n    assert i\n    i = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'everyone'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(i) == 1\n# test hunter submit to any group\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF_ELASTICSEARCH_TEST=1 to run')\ndef test_store_elasticsearch_tokens_groups7(store, token, indicator):\n    t = store.store.tokens.create({\n        'username': 'hunter',\n        'groups': ['hunter_test'],\n        'token': 'abc123',\n        'write': True,\n        'read': False\n    })\n    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n        'reporttime': arrow.utcnow().datetime\n    }, flush=True)\n    assert i\n    i = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'everyone'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(i) == 1\n# test hunter submit to any group\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF_ELASTICSEARCH_TEST=1 to run')\ndef test_store_elasticsearch_tokens_groups8(store, token, indicator):\n    t = store.store.tokens.create({\n        'username': 'hunter',\n        'groups': ['hunter_test'],\n        'token': 'abc123',\n        'write': True,\n        'read': False\n    })\n    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n        'reporttime': arrow.utcnow().datetime\n    }, flush=True)\n    assert i\n    i = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'everyone'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(i) == 1\n# test hunter submit to any group\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF_ELASTICSEARCH_TEST=1 to run')\ndef test_store_elasticsearch_tokens_groups9(store, token, indicator):\n    t = store.store.tokens.create({\n        'username': 'hunter',\n        'groups': ['hunter_test'],\n        'token': 'abc123',\n        'write': True,\n        'read': False\n    })\n    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n        'reporttime': arrow.utcnow().datetime\n    }, flush=True)\n    assert i\n    i = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'everyone'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(i) == 1\n# test hunter submit to any group\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF_ELASTICSEARCH_TEST=1 to run')\ndef test_store_elasticsearch_tokens_groups10(store, token, indicator):\n    t = store.store.tokens.create({\n        'username': 'hunter',\n        'groups': ['hunter_test'],\n        'token': 'abc123',\n        'write': True,\n        'read': False\n    })\n    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n        'reporttime': arrow.utcnow().datetime\n    }, flush=True)\n    assert i\n    i = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'everyone'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(i) == 1\n# test hunter submit to any group\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF_ELASTICSEARCH_TEST=1 to run')", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects[0].select_related()\n        o = Organization.objects.first()\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(o.employees[0], employee)\n        self.assertEqual(employee.employer, o)\n    def test_circular_reference_deltas_3(self):\n        self.circular_reference_deltas_3(Document, Document)\n        self.circular_reference_deltas_3(Document, DynamicDocument)\n        self.circular_reference_deltas_3(DynamicDocument, Document)\n        self.circular_reference_deltas_3(DynamicDocument, DynamicDocument)\n    def circular_reference_deltas_3(self, DocClass1, DocClass2):\n        class Person(DocClass1):\n            name = StringField()\n            owns = ListField(ReferenceField('Organization'))\n        class Organization(DocClass2):\n            name = StringField()\n            owner = ReferenceField('Person')\n            employees = ListField(ReferenceField('Person'))\n        Person.drop_collection()\n        Organization.drop_collection()\n        person = Person(name=\"owner\").save()\n        organization = Organization(name=\"company\").save()\n        person.owns.append(organization)\n        organization.owner = person\n        organization.employees.append(person)\n        person.save()\n        organization.save()\n        p = Person.objects[0].select_related()\n        o = Organization.objects.first()\n        self.assertEqual(p", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   if self._interactive:\n        self._plot_line(x=x, y=y)\n        self._plot_line(x=x, y=y)\n        self._plot_line(x=x, y=y)\n        self._plot_line(", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (path.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"path\");\n                }\n                if (rootFolder.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"rootFolder\");\n                }\n                if (toScan.Contains(path))\n                {\n                    continue;\n                }\n                toScan.Add(path);\n            }\n            foreach (var item in toScan)\n            {\n                var rootFolder = _rootFolderService.GetRootFolder(item);\n                if (rootFolder == null)\n                {\n                    _logger.Warn(\"Could not find root folder for {0}\", item);\n                    continue;\n                }\n                var path = rootFolder.Path;\n                if (path.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"path\");\n                }\n                if (path.Equals(item, StringComparison.OrdinalIgnoreCase))\n                {\n                    _logger.Info(\"Ignoring change to {0}\", item);\n                    _tempIgnoredPaths.TryAdd(item, 1);\n                    continue;\n                }\n                _logger.Info(\"Reporting change to {0}\", item);\n                _rootFolderService.Handle(new ModelEvent<RootFolder>(rootFolder, ModelAction.Changed, path));\n            }\n        }\n        private void DisposeWatcher(FileSystemWatcher watcher, bool dispose)\n        {\n            if (dispose)\n            {\n                watcher.EnableRaisingEvents = false;\n                watcher.Dispose();\n            }\n        }\n    }\n}\n", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfAbsent(K key,\n\t\t\t\t\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.computeIfAbsent(key, transform(remappingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E merge(K key,\n\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.merge(key, transform(remappingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E merge(K key,\n\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction,\n\t\t\t  BiFunction<? super E, ? super E, ? extends E> mergingFunction) {\n\t\tI computed = internalMap.merge(key, transform(remappingFunction), transform(mergingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.computeIfPresent(key, transform(remappingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction,\n\t\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> mergingFunction) {\n\t\tI computed = internalMap.computeIfPresent(key, transform(remappingFunction), transform(mergingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t\tBiFunction<? super K, ? super E, ? extends E> remappingFunction,\n\t\t\t\t\t\t\t\tBiFunction<? super E, ? super E, ? extends E> mergingFunction) {\n\t\tI computed = internalMap.computeIfPresent(key, transform(remappingFunction), transform(mergingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction,\n\t\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> mergingFunction,\n\t\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> remappingMergingFunction) {\n\t\tI computed = internalMap.computeIfPresent(key, transform(remappingFunction), transform(mergingFunction), transform(remappingMergingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t\t\tBiFunction<? super K, ? super E, ? extends E> remappingFunction,\n\t\t\t\t\t\t\tBiFunction<? super E, ? super E, ? extends E> mergingFunction,\n\t\t\t\t\t\t\tBiFunction<? super E, ? super E, ? extends E> remappingMergingFunction) {\n\t\tI computed = internalMap.computeIfPresent(key, transform(remappingFunction), transform(mergingFunction), transform(remappingMergingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction,\n\t\t\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> mergingFunction,\n\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> remappingMergingFunction,\n\t\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> remappingMergingMergingFunction) {\n\t\tI computed = internalMap.computeIfPresent(key, transform(remappingFunction), transform(mergingFunction), transform(remappingMergingFunction), transform(remappingMergingMergingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t\tBiFunction<? super K, ? super E, ? extends E> remappingFunction,\n\t\t\t\t\t\t\tBiFunction<? super E, ? super E, ? extends E> mergingFunction,\n\t\t\t\t\t\t\tBiFunction<? super E, ? super E, ? extends E> remappingMergingFunction,\n\t\t\t\t\t\t\tBiFunction<? super E, ? super E, ? extends E> remappingMergingMergingFunction,\n\t\t\t\t\t\t\tBiFunction<? super E, ? super E, ? extends E> remappingMergingMergingMergingFunction) {\n\t\tI computed = internalMap.computeIfPresent(key, transform(remappingFunction), transform(mergingFunction), transform(remappingMergingFunction), transform(remappingMergingMergingFunction), transform(remappingMergingMergingMergingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction,\n\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> mergingFunction,\n\t\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> remappingMergingFunction,\n\t\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> remappingMergingMergingFunction,\n\t\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> remappingMergingMergingMergingFunction) {\n\t\tI computed = internalMap.computeIfPresent(key, transform(remappingFunction), transform(mergingFunction), transform(remappingMergingFunction), transform(remappingMergingMergingFunction), transform(remappingMergingMergingMergingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction,\n\t\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> mergingFunction,\n\t\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> remappingMergingFunction,\n\t\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> remappingMergingMergingFunction,\n\t\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> remappingMergingMergingMergingFunction,\n\t\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> remappingMergingMergingMergingMergingFunction) {\n\t\tI computed = internalMap.computeIfPresent(key, transform(remappingFunction), transform(mergingFunction), transform(remappingMergingFunction), transform(remappingMergingMergingFunction), transform(remappingMergingMergingMergingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction,\n\t\t\t\t\t\t  BiFunction<? super E, ? super E, ? extends E> mergingFunction,\n\t\t\t", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            isDiscussable =", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tinternal byte m_X;\n\t\tpublic int X\n\t\t{\n\t\t\tget { return m_X; }\nNext line of code:\n\t\t\t\tset { m_X", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": voice enabled for parcel\",\n                    //                     scene.Region", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\tif(IsNew){\n\t\t\t\tPayPeriods.Add(PayPeriodCur);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tPayPeriods.Edit(PayPeriodCur);\n\t\t\t}\n\t\t\tDialogResult=DialogResult.OK;\n\t\t}\n\t\tprivate void butCancel_Click(object sender, System.EventArgs e) {\n\t\t\tDialogResult=DialogResult.Cancel;\n\t\t}\n\t}\n}", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(header)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_headings", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_create(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_update(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_delete(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role_and_permission(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role_and_permission_and_permission_type(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role_and_permission_and_permission_type_and_permission_type_id(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role_and_permission_and_permission_type_and_permission_type_id_and_permission_type_id(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role_and_permission_and_permission_type_and_permission_type_id_and_permission_type_id_and_permission_type_id(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role_and_permission_and_permission_type_and_permission_type_id_and_permission_type_id_and_permission_type_id(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role_and_permission_and_permission_type_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role_and_permission_and_permission_type_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role_and_permission_and_permission_type_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role_and_permission_and_permission_type_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role_and_permission_and_permission_type_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role_and_permission_and_permission_type_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('User not found')}\n    return {'success': True}\ndef group_member_list_by_group_and_user_and_role_and_permission_and_permission_type_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id_and_permission_type_id(context, data_dict):\n    user = context['user']\n    if not user:\n       ", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint outcome = example.getValue(predictionAttribute);\n\t\t\t\tint childIndex = parentIndex == -1 ? node.getPartitionId() : parentIndex;\n\t\t\t\t\t// setting confidences\n\t\t\t\t\tconfidences[resultIndex] = Math.pow(confidences[resultIndex], 1d / depths[resultIndex]);\n\t\t\t\t\t// setting outcome\n\t\t\t\texample.setValue(predictionAttribute, outcome);\n\t\t\t\t// setting child node\n\t\t\t\texample.setValue(predictionAttribute, childIndex);\n\t\t\t\t// setting depth\n\t\t\t\tdepths[resultIndex] = depth;\n\t\t\t\t\t// setting result index\n\t\t\t\t\tresultIndex++;\n\t\t\t\t}\n\t\t\t// removing confidences\n\t\t\tfor (int i = 0; i < resultIndex; i++) {\n\t\t\tconfidences[i] = 1d;\n\t\t\t}\n\t\t// removing predicted label\n\t\t\tfor (int i = 0; i < resultIndex; i++) {\n\t\t\t\texample.removeValue(predictionAttribute);\n\t\t\t}\n\t\t\t// applying recursively\n\t\t\tperformPredictionRecursivly(applySet, node.getChild(example.getValue(predictionAttribute)), confidences, outcomes, depths,\n\t\t\t\tdepth + 1, numberOfPartitions);\n\t\t} else {\n\t\t\t// applying\n\t\t\tExampleSet currentResultSet = node.getModel().apply(applySet);\n\t\t\t// extracting data\n\t\t\tAttribute predictionAttribute = currentResultSet.getAttributes().getPredictedLabel();\n\t\t\tint outcome = exampleSet.getAttributes().getPredictedLabel().getMapping().mapIndex(exampleSet.getValue(predictionAttribute));\n\t\t\t// setting confidences\n\t\t\tconfidences[depth] = Math.pow(confidences[depth], 1d / depths[depth]);\n\t\t\t// setting outcome\n\t\t\texampleSet.setValue(predictionAttribute, outcome);\n\t\t\t// setting confidences\n\t\t\tfor (int i = 0; i < depths.length; i++) {\n\t\t\t\tconfidences[i] = confidences[i] * confidences[depth];\n\t\t}\n\t\t\t// removing confidences\n\t\t\tfor (int i = 0; i < depths.length; i++) {\n\t\t\t\tconfidences[i] = 1d;\n\t\t\t}\n\t\t\t// removing predicted label\n\t\t\tfor (int i = 0; i < depths.length; i++) {\n\t\t\t\texampleSet.removeValue(predictionAttribute);\n\t\t\t}\n\t\t}\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"HierarchicalMultiClassModel [root=\" + root + \"]\";\n\t}\n}", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">The array containing the segments to search for.</param><param name=\"previousTranslationHashes\">Corresponding hash codes of a previous translation (0 if unknown). The parameter may be null.</param>\n        /// <returns>\n        /// An array of <see cref=\"T:Sdl.LanguagePlatform.TranslationMemory.SearchResults\"/> objects, which mirrors the segments array. It has the exact same size and contains the\n        ///             search results for each segment with the same index within the segments array.\n        /// </returns>\n        public virtual SearchResults[] SearchSegments(SearchSettings settings, Segment[] segments, int[] previousTranslationHashes)\n        {\n            return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">The array containing the segments to search for.</param><param name=\"previousTranslationHashes\">Corresponding hash codes of a previous translation (0 if unknown). The parameter may be null.</param><param name=\"mask\">A boolean array with the same cardinality as the TU array, specifying which TUs to search for.</param>\n        /// <returns>\n        /// An array of <see cref=\"T:Sdl.LanguagePlatform.TranslationMemory.SearchResults\"/> objects, which mirrors the segments array. It has the exact same size and contains the\n        ///             search results for each segment with the same index within the segments array.\n        /// </returns>\n        public virtual SearchResults[] SearchSegmentsMasked(SearchSettings settings, Segment[] segments, int[] previousTranslationHashes, bool[] mask)\n        {\n            return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">The array containing the segments to search for.</param><param name=\"previousTranslationHashes\">Corresponding hash codes of a previous translation (0 if unknown). The parameter may be null.</param><param name=\"mask\">A boolean array with the same cardinality as the TU array, specifying which TUs to search for.</param><param name=\"searchDirection\">The search direction.</param>\n        /// <returns>\n        /// An array of <see cref=\"T:Sdl.LanguagePlatform.TranslationMemory.SearchResults\"/> objects, which mirrors the segments array. It has the exact same size and contains the\n        ///             search results for each segment with the same index within the segments array.\n        /// </returns>\n        public virtual SearchResults[] SearchSegmentsMasked(SearchSettings settings, Segment[] segments, int[] previousTranslationHashes, bool[] mask, SearchDirection searchDirection)\n        {\n            return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">The array containing the segments to search for.</param><param name=\"previousTranslationHashes\">Corresponding hash codes of a previous translation (0 if unknown). The parameter may be null.</param><param name=\"mask\">A boolean array with the same cardinality as the TU array, specifying which TUs to search for.</param><param name=\"searchDirection\">The search direction.</param><param name=\"searchResult\">The search result.</param>\n        /// <returns>\n        /// An array of <see cref=\"T:Sdl.LanguagePlatform.TranslationMemory.SearchResults\"/> objects, which mirrors the segments array. It has the exact same size and contains the\n        ///             search results for each segment with the same index within the segments array.\n        /// </returns>\n        public virtual SearchResults[] SearchSegmentsMasked(SearchSettings settings, Segment[] segments, int[] previousTranslationHashes, bool[] mask, SearchDirection searchDirection, SearchResult searchResult)\n        {\n            return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">The array containing the segments to search for.</param><param name=\"previousTranslationHashes\">Corresponding hash codes of a previous translation (0 if unknown). The parameter may be null.</param><param name=\"mask\">A boolean array with the same cardinality as the TU array, specifying which TUs to search for.</param><param name=\"searchDirection\">The search direction.</param><param name=\"searchResult\">The search result.</param><param name=\"searchResultMask", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = codePoint << 10;\n            ch = string.charAt(offset++);\n            if ('\\uDC00' <= ch && ch <= '\\uDFFF' && offset < strlen) {\n               codePoint = codePoint << 18;\n", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       if (existingRequired) {\n            if (StringUtil.isEmpty(studyFormName)) {\n                return ValidationResults.REQUIRED_FAIL;\n            }\n        }\n        SampleDAO sampleDAO = new SampleDAOImpl();\n        Sample sample = sampleDAO.getSampleByAccessionNumber(accessionNumber);\n        if (sample != null) {\n            if (StringUtil.isEmpty(studyFormName)) {\n                return ValidationResults.REQUIRED_FAIL;\n            }\n            if (studyFormName.equals(sample.getStudyFormName())) {\n                return ValidationResults.SUCCESS;\n            }\n            return ValidationResults.SAMPLE_NOT_FOUND;\n        }\n        return ValidationResults.SAMPLE_NOT_FOUND;\n    }\n\tpublic SampleDAO getSampleDAO() {\n\t\treturn sampleDAO;\n\t}\n\tpublic void setSampleDAO(SampleDAO sampleDAO) {\n\t\tthis.sampleDAO = sampleDAO;\n\t}\n\tpublic ProjectDAO getProjectDAO() {\n\t\treturn projectDAO;\n\t}\n\tpublic void setProjectDAO(ProjectDAO projectDAO) {\n\t\tthis.projectDAO = projectDAO;\n\t}\n\tpublic boolean isNeedProgramCode() {\n\t\treturn NEED_PROGRAM_CODE;\n\t}\n\tpublic void setNeedProgramCode(boolean needProgramCode) {\n\t\tNEED_PROGRAM_CODE = needProgramCode;\n\t}\n\tpublic boolean isProgramCodeRequired() {\n\t\treturn true;\n\t}\n\tpublic void setProgramCodeRequired(boolean programCodeRequired) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\tpublic boolean isProgramCodeRequiredForPatient() {\n\t\treturn true;\n\t}\n\tpublic void setProgramCodeRequiredForPatient(boolean programCodeRequiredForPatient) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\tpublic boolean isProgramCodeRequiredForSample() {\n\t\treturn true;\n\t}\n\tpublic void setProgramCodeRequiredForSample(boolean programCodeRequiredForSample) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\tpublic boolean isProgramCodeRequiredForOrder() {\n\t\treturn true;\n\t}\n\tpublic void setProgramCodeRequiredForOrder(boolean programCodeRequiredForOrder) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\tpublic boolean isProgramCodeRequiredForOrderModify() {\n\t\treturn true;\n\t}\n", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest.Id)\n\t\t\t\t{\n\t\t\t\t\tvar message = \"Incorrect mod\";\n\t\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Version != ModData.Manifest.Metadata.Version)\n\t\t\t\t\t{\n\t\t\t\tvar message = \"Incorrect version\";\n\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Map != Settings.Map)\n\t\t\t\t\t{\n\t\t\t\t\tvar message = \"Incorrect map\";\n\t\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Settings.EnableSingleplayer && !handshake.IsSingleplayer)\n\t\t\t{\n\t\t\t\tvar message = \"Incorrect game mode\";\n\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\tif (Settings.EnableSingleplayer && handshake.IsSingleplayer && !Settings.AllowMultiplayer)\n\t\t\t\t{\n\t\t\t\t\tvar message = \"Incorrect game mode\";\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (Settings.AllowMultiplayer && !handshake.IsSingleplayer && !Settings.AllowMultiplayer)\n\t\t\t\t{\n\t\t\t\t\tvar message = \"Incorrect game mode\";\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\tif (Settings.AllowMultiplayer && handshake.IsSingleplayer && Settings.AllowMultiplayer)\n\t\t\t\t{\n\t\t\t\t\tvar message = \"Incorrect game mode\";\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Settings.AllowMultiplayer && handshake.IsSingleplayer && !Settings.AllowMultiplayer)\n\t\t\t\t{\n\t\t\t\t\tvar message = \"Incorrect game mode\";\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Settings.AllowMultiplayer && !handshake.IsSingleplayer && Settings.AllowMultiplayer)\n\t\t\t\t{\n\t\t\t\t\t\tvar message = \"Incorrect game mode\";\n\t\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Settings.AllowMultiplayer && !handshake.IsSingleplayer && !Settings.AllowMultiplayer)\n\t\t\t\t{\n\t\t\t\t\tvar message = \"Incorrect game mode\";\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Settings.AllowMultiplayer && handshake.IsSingleplayer && Settings.AllowMultiplayer)\n\t\t\t\t{\n\t\t\t\t\tvar message = \"Incorrect game mode\";\n\t\t\t\t\tSendOrderTo(newConn, \"", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\t\tcoll.add((ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo)beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static CatsReferralPendingEmergencyNonEDAdmissionListVoCollection buildFromCollection(java.util.Collection coll, boolean removeDuplicates)\n\t{\n\t\tif (removeDuplicates)\n\t\t{\n\t\t\tcoll = new java.util.ArrayList(coll);\n\t\t\tcoll.removeAll(coll);\n\t\t}\n\t\tCatsReferralPendingEmergencyNonEDAdmissionListVoCollection ret = new CatsReferralPendingEmergencyNonEDAdmissionListVoCollection();\n\t\tfor(java.util.Iterator iter = coll.iterator(); iter.hasNext(); )\n\t\t{\n\t\t\tret.add(new CatsReferralPendingEmergencyNonEDAdmissionListVo((ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo)iter.next()));\n\t\t}\n\t\treturn ret;\n\t}\n\tpublic static CatsReferralPendingEmergencyNonEDAdmissionListVoCollection buildFromCollection(java.util.List collections, boolean removeDuplicates)\n\t{\n\t\tif (removeDuplicates)\n\t\t{\n\t\t\tcollections.removeAll(collections);\n\t\t}\n\t\tCatsReferralPendingEmergencyNonEDAdmissionListVoCollection ret = new CatsReferralPendingEmergencyNonEDAdmissionListVoCollection();\n\t\tfor(java.util.Iterator iter =", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<string>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \nNext line of code:\n            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<float>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \nNext line of code:\n            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<double>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \nNext line of code:\n            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n       ", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot' ]\n  del( pD[ 'plot' ]", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (Info.BuildingLimits == null)\n\t\t\t\treturn;\n\t\t\tvar rallyPoints = new List<CPos>();\n\t\t\tforeach (var building in Info.BuildingLimits.Keys)\n\t\t\t{\n\t\t\t\tvar limit = Info.BuildingLimits[building];\n\t\t\t\t\tif (limit == 0)\n\t\t\t\t\tcontinue;\n\t\t\t\tvar rallyPoint = GetRallyPoint(bot, building, limit);\n\t\t\t\tif (rallyPoint == null)\n\t\t\t\t\t\tcontinue;\n\t\t\t\trallyPoints.Add(rallyPoint);\n\t\t\t}\n\t\t\tif (rallyPoints.Count == 0)\n\t\t\t\treturn;\n\t\t\tforeach (var rallyPoint in rallyPoints)\n\t\t\t\tbot.AddRallyPoint(rallyPoint);\n\t\t}\n\t\tCPos GetRallyPoint(IBot bot, string building, int limit)\n\t\t{\n\t\t\tvar rallyPoint = null;\n\t\t\tvar rallyRadius = Info.RallyPointScanRadius;\n\t\t\tvar rallyCells = new List<CPos>();\n\t\t\tvar rallyRadiusCells = new List<CPos>();\n\t\t\tvar rallyRadiusCells2 = new List<CPos>();\n\t\tvar rallyRadiusCells3 = new List<CPos>();\n\t\t\tvar rallyRadiusCells4 = new List<CPos>();\n\t\t\tvar rallyRadiusCells5 = new List<CPos>();\n\t\t\tvar rallyRadiusCells6 = new List<CPos>();\n\t\t\tvar rallyRadiusCells7 = new List<CPos>();\n\t\t\tvar rallyRadiusCells8 = new List<CPos>();\n\t\t\tvar rallyRadiusCells9 = new List<CPos>();\n\t\t\tvar rallyRadiusCells10 = new List<CPos>();\n\t\t\tvar rallyRadiusCells11 = new List<CPos>();\n\t\t\tvar rallyRadiusCells12 = new List<CPos>();\n\t\t\tvar rallyRadiusCells13 = new List<CPos>();\n\t\t\tvar rallyRadiusCells14 = new List<CPos>();\n\t\t\tvar rallyRadiusCells15 = new List<CPos>();\n\t\t\tvar rallyRadiusCells16 = new List<CPos>();\n\t\t\tvar rallyRadiusCells17 = new List<CPos>();\n\t\t\tvar rallyRadiusCells18 = new List<CPos>();\n\t\t\tvar rallyRadiusCells19 = new List<CPos>();\n\t\t\tvar rallyRadiusCells20 = new List<CPos>();\n\t\t\tvar rallyRadiusCells21 = new List<CPos>();\n\t\t\tvar rallyRadiusCells22 = new List<CPos>();\n\t\t\tvar rallyRadiusCells23 = new List<CPos>();\n\t\t\tvar rallyRadiusCells24 = new List<CPos>();\n\t\t\tvar rallyRadiusCells25 = new List<CPos>();\n\t\t\tvar rallyRadiusCells26 = new List<CPos>();\n\t\t\tvar rallyRadiusCells27 = new List<CPos>();\n\t\t\tvar rallyRadiusCells28 = new List<CPos>();\n\t\t\tvar rallyRadiusCells29 = new List<CPos>();\n\t\t\tvar rallyRadiusCells30 = new List<CPos>();\n\t\t\tvar rallyRadiusCells31 = new List<CPos>();\n\t\t\tvar rallyRadiusCells32 = new List<CPos>();\n\t\t\tvar rallyRadiusCells33 = new List<CPos>();\n\t\t\tvar rallyRadiusCells34 = new List<CPos>();\n\t\t\tvar rallyRadiusCells35 = new List<CPos>();\n\t\t\tvar rallyRadiusCells36 = new List<CPos>();\n\t\t\tvar rallyRadiusCells37 = new List<CPos>();\n\t\t\tvar rallyRadiusCells38 = new List<CPos>();\n\t\t\tvar rallyRadiusCells39 = new List<CPos>();\n\t\t\tvar rallyRadiusCells40 = new List<CPos>();\n\t\t\tvar rallyRadiusCells41 = new List<CPos>();\n\t\t\tvar rallyRadiusCells42 = new List<CPos>();\n\t\t\tvar rallyRadiusCells43 = new List<CPos>();\n\t\t\tvar rallyRadiusCells44 = new List<CPos>();\n\t\t\tvar rallyRadiusCells45 = new List<CPos>();\n\t\t\tvar rallyRadiusCells46 = new List<CPos>();\n\t\t\tvar rallyRadiusCells47 = new List<CPos>();\n\t\t\tvar rallyRadiusCells48 = new List<CPos>();\n\t\t\tvar rallyRadiusCells49 = new List<CPos>();\n\t\t\tvar rallyRadiusCells50 = new List<CPos>();\n\t\t\tvar rallyRadiusCells51 = new List<CPos>();\n\t\t\tvar rallyRadiusCells52 = new List<CPos>();\n\t\t\tvar rallyRadiusCells53 = new List<CPos>();\n\t\t\tvar rallyRadiusCells54 = new List<CPos>();\n\t\t\tvar rallyRadiusCells55 = new List<CPos>();\n\t\t\tvar rallyRadiusCells56 = new List<CPos>();\n\t\t\tvar rallyRadiusCells57 = new List<CPos>();\n\t\t\tvar rallyRadiusCells58 = new List<CPos>();\n\t\t\tvar rallyRadiusCells59 = new List<CPos>();\n\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       // Execution Plan\n        for (PlanNodeList planNodeList : plan.getPlanNodes()) {\n            AbstractPlanNode planNode = planNodeList.get(0);\n            if (planNode instanceof CompiledPlan) {\n                CompiledPlan compiledPlan = (CompiledPlan) planNode;\n                if (compiledPlan.getPlanNodeList() != null) {\n                    for (PlanNodeList planNodeList2 : compiledPlan.getPlanNodeList()) {\n                        AbstractPlanNode planNode2 = planNodeList2.get(0);\n                        if (planNode2 instanceof CompiledPlan) {\n                            CompiledPlan compiledPlan2 = (CompiledPlan) planNode2;\n                            if (compiledPlan2.getPlanNodeList() != null) {\n                                for (PlanNodeList planNodeList3 : compiledPlan2.getPlanNodeList()) {\n                                    AbstractPlanNode planNode3 = planNodeList3.get(0);\n                                    if (planNode3 instanceof CompiledPlan) {\n                                        CompiledPlan compiledPlan3 = (CompiledPlan) planNode3;\n                                        if (compiledPlan3.getPlanNodeList() != null) {\n                                            for (PlanNodeList planNodeList4 : compiledPlan3.getPlanNodeList()) {\n                                                AbstractPlanNode planNode4 = planNodeList4.get(0);\n                                                if (planNode4 instanceof CompiledPlan) {\n                                                    CompiledPlan compiledPlan4 = (CompiledPlan) planNode4;\n                                                    if (compiledPlan4.getPlanNodeList() != null) {\n                                                        for (PlanNodeList planNodeList5 : compiledPlan4.getPlanNodeList()) {\n                                                            AbstractPlanNode planNode5 = planNodeList5.get(0);\n                                                            if (planNode5 instanceof CompiledPlan) {\n                                                                CompiledPlan compiledPlan5 = (CompiledPlan) planNode5;\n                                                                if (compiledPlan5.getPlanNodeList() != null) {\n                                                                    for (PlanNodeList planNodeList6 : compiledPlan5.getPlanNodeList()) {\n                                                                        AbstractPlanNode planNode6 = planNodeList6.get(0);\n                                                                                        if (planNode6 instanceof CompiledPlan) {\n                                                                                            CompiledPlan compiledPlan6 = (CompiledPlan) planNode6;\n                                                                                            if (compiledPlan6.getPlanNodeList() != null) {\n                                                                                                for (PlanNodeList planNodeList7 : compiledPlan6.getPlanNodeList()) {\n                                                                                                    AbstractPlanNode planNode7 = planNodeList7.get(0);\n                                                                                                    if (planNode7 instanceof CompiledPlan) {\n                                                                                                                        CompiledPlan compiledPlan7 = (CompiledPlan) planNode7;\n                                                                                                                        if (compiledPlan7.getPlanNodeList() != null) {\n                                                                                                                            for (PlanNodeList planNodeList8 : compiledPlan7.getPlanNodeList()) {\n                                                                                                                                                AbstractPlanNode planNode8 = planNodeList8.get(0);\n                                                                                                                                                if (planNode8 instanceof CompiledPlan) {\n                                                                                                                                                                                CompiledPlan compiledPlan8 = (CompiledPlan) planNode8;\n                                                                                                                                                                    if (compiledPlan8.getPlanNodeList() != null) {\n                                                                                                                                                                                        for (PlanNodeList planNodeList9 : compiledPlan8.getPlanNodeList()) {\n                                                                                                                                                                                            AbstractPlanNode planNode9 = planNodeList9.get(0);\n                                                                                                                                                                                            if (planNode9 instanceof CompiledPlan) {\n                                                                                                                                                                                                                CompiledPlan compiledPlan9 = (CompiledPlan) planNode9;\n                                                                                                                                                                                                                if (compiledPlan9.getPlanNodeList() != null) {\n                                                                                                                                                                                                                    for (PlanNodeList planNodeList10 : compiledPlan9.getPlanNodeList()) {\n                                                                                                                                                                                                                                        AbstractPlanNode planNode10 = planNodeList10.get(0);\n                                                                                                                                                                                                                                        if (planNode10 instanceof CompiledPlan) {\n                                                                                                                                                                                                                                                            CompiledPlan compiledPlan10 = (CompiledPlan) planNode10;\n                                                                                                                                                                                                                                                            if (compiledPlan10.getPlanNodeList() != null) {\n                                                                                                                                                                                                                                                                for (PlanNodeList planNodeList11 : compiledPlan10.getPlanNodeList()) {\n                                                                                                                                                                                                                                                                                    AbstractPlanNode planNode11 = planNodeList11.get(0);\n                                                                                                                                                                                                                                                                                    if (planNode11 instanceof CompiledPlan) {\n                                                                                                                                                                                                                                                                                                        CompiledPlan compiledPlan11 = (CompiledPlan) planNode11;\n                                                                                                                                                                                                                                                                                                        if (compiledPlan11.getPlanNodeList() != null) {\n                                                                                                                                                                                                                                                                                                            for (PlanNodeList planNodeList12 : compiledPlan11.getPlanNodeList()) {\n                                                                                                                                                                                                                                                                                                                AbstractPlanNode planNode12 = planNodeList12.get(0);\n                                                                                                                                                                                                                                                                                                                if (planNode12 instanceof CompiledPlan) {\n                                                                                                                                                                                                                                                                                                                                    CompiledPlan compiledPlan12 = (CompiledPlan) planNode12;\n                                                                                                                                                                                                                                                                                                                                    if (compiledPlan12.getPlanNodeList() != null) {\n                                                                                                                                                                                                                                                                                                                                        for (PlanNodeList planNodeList13 : compiledPlan12.getPlanNodeList()) {\n                                                                                                                                                                                                                                                                                                                                                            AbstractPlanNode planNode13 = planNodeList13.get(0);\n                                                                                                                                                                                                                                                                                                                                            if (planNode13 instanceof CompiledPlan) {\n                                                                                                                                                                                                                                                                                                                                CompiledPlan compiledPlan13 = (CompiledPlan) planNode13;\n                                                                                                                                                                                                                                                                                                                               ", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(291, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Anchor = ((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) \n\t\t\t\t\t| System.Windows.Forms.AnchorStyles.Right);\n\t\t\tthis.textBox2.Location = new System.Drawing.Point(59, 230);\n\t\t\tthis.textBox2.Name = \"textBox2\";\n\t\t\tthis.textBox2.Size = new System.Drawing.Size(291, 20);\n\t\t\tthis.textBox2.TabIndex = 1;\n\t\t\t// \n\t\t\t// button1\n\t\t\t// \n\t\t\tthis.button1.Anchor = ((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) \n\t\t\t\t| System.Windows.Forms.AnchorStyles.Right);\n\t\t\tthis.button1.Location = new System.Drawing.Point(59, 252);\n\t\t\tthis.button1.Name = \"button1\";\n\t\t\t\tthis.button1.Size = new System.Drawing.Size(291, 23);\n\t\t\tthis.button1.TabIndex = 2;\n\t\t\tthis.button1.Text = \"Connect\";\n\t\t\tthis.button1.UseVisualStyleBackColor = true;\n\t\t\tthis.button1.Click += new System.EventHandler(this.button1_Click);\n\t\t\t// \n\t\t\t// label1\n\t\t\t// \n\t\t\tthis.label1.Anchor = ((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) \n\t\t\t\t| System.Windows.Forms.AnchorStyles.Right);\n\t\t\tthis.label1.AutoSize = true;\n\t\t\tthis.label1.Location = new System.Drawing.Point(59, 274);\n\t\t\t\tthis.label1.Name = \"label1\";\n\t\t\t\tthis.label1.Size = new System.Drawing.Size(291, 13);\n\t\t\t\tthis.label1.TabIndex = 3;\n\t\t\tthis.label1.Text = \"Enter a hostname or IP address to connect to:\";\n\t\t\t// \n\t\t\t// richTextBox1\n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (Parity)parity;\n\t\t\tdcb.StopBits = bits;\n\t\t\t\tdcb.fBinary = true;\n\t\t\tdcb.fParity = true;\n\t\t\tdcb.fOutxCtsFlow = true;\n\t\t\tdcb.fOutxDsrFlow = true;\n\t\t\tdcb.fDtrControl = DTR_CONTROL_ENABLE;\n\t\t\tdcb.fDsrSensitivity = DSR_SENSITIVITY_AUTO;\n\t\t\tdcb.fOutxDsrHold = false;\n\t\t\tdcb.fDsrSensitivity = DSR_SENSITIVITY_AUTO;\n\t\t\tdcb.fTXContinueOnXoff = false;\n\t\t\tdcb.fOutxCtsFlow = true;\n\t\t\tdcb.fOutxDsrFlow = true;\n\t\t\tdcb.fDtrControl = DTR_CONTROL_ENABLE;\n\t\t\tdcb.fDsrSensitivity = DSR_SENSITIVITY_AUTO;\n\t\t\tdcb.fOutxDsrHold = false;\n\t\t\tdcb.fDsrSensitivity = DSR_SENSITIVITY_AUTO;\n\t\t\tdcb.fTXContinueOnXoff = false;\n\t\t\tif (!SetCommState (handle, dcb))\n\t\t\t\tReportIOError (null);\n\t\t}\n\t\tpublic void SetSignal (SerialSignal signal)\n\t\t{\n\t\t\tswitch (signal) {\n\t\t\tcase SerialSignal.Dsr:\n\t\t\t\tSetSignal (SerialSignal.Dsr, true);\n\t\t\t\tbreak;\n\t\t\tcase SerialSignal.DsrSensitivity:\n\t\t\t\tSetSignal (SerialSignal.DsrSensitivity, true);\n\t\t\t\tbreak;\n\t\t\tcase SerialSignal.Dtr:\n\t\t\t\tSetSignal (SerialSignal.Dtr, true);\n\t\t\t\tbreak;\n\t\t\tcase SerialSignal.DtrSensitivity:\n\t\t\t\tSetSignal (SerialSignal.DtrSensitivity, true);\n\t\t\t\tbreak;\n\t\t\tcase SerialSignal.Rts:\n\t\t\t\tSetSignal (SerialSignal.Rts, true);\n\t\t\t\tbreak;\n\t\t\tcase SerialSignal.RtsSensitivity:\n\t\t\t\tSetSignal (SerialSignal.RtsSensitivity, true);\n\t\t\t\tbreak;\n\t\t\tcase Serial", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                               login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n    def test_user_with_c", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    else:\n        _keep_tempdir = False\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\",", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tif entry[0] == currentListEntry:\n\t\t\t\t\t\tcurrentListIndex = newListIndex\n\t\t\t\t\tcurrentListEntry = entry\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tnewListIndex", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               return new Rectangle(x, y, fontX, fontY);\n            }\n        }\n        \n        /** Gets the maximum area that the barcode and the text, if\n        * any, will occupy. The lower left corner is always (0, 0).\n        * @return the size the barcode occupies.\n        */    \n        public override Rectangle TextSize {\n            get {\n                float fontX = 0;\n                float fontY = 0;\n                if (font != null) {\n                    if (baseline > 0)\n                        fontY = baseline - font.GetFontDescriptor(BaseFont.DESCENT, size);\n                    else\n                        fontY = -baseline + size;\n                    fontX = font.GetWidthPoint(altText != null ? altText : code, size);\n                }\n                return new Rectangle(x, y, fontX, fontY);\n            }\n        }\n        \n        /** Gets the maximum area that the barcode and the text, if\n        * any, will occupy. The lower left corner is always (0, 0).\n        * @return the size the barcode occupies.\n        */    \n        public override Rectangle TextBarcodeSize {\n            get {\n                float fontX = 0;\n                float fontY = 0;\n                if (font != null) {\n                    if (baseline > 0)\n                        fontY = baseline - font.GetFontDescriptor(BaseFont.DESCENT, size);\n                    else\n                        fontY = -baseline + size;\n                    fontX = font.GetWidthPoint(altText != null ? altText : code, size);\n                }\n                return new Rectangle(x, y, fontX, fontY);\n            }\n        }\n        \n        /** Gets the maximum area that the barcode and the text, if\n        * any, will occupy. The lower left corner is always (0, 0).\n        * @return the size the barcode occupies.\n        */    \n        public override Rectangle TextBarcodeSizeWithChecksum {\n            get {\n                float fontX = 0;\n                float fontY = 0;\n                if (font != null) {\n                    if (baseline > 0)\n                        fontY = baseline - font.GetFontDescriptor(BaseFont.DESCENT, size);\n                    else\n                        fontY = -baseline + size;\n                    fontX = font.GetWidthPoint(altText != null ? altText : code + GetChecksum(code), size);\n                }\n                return new Rectangle(x, y, fontX, fontY);\n            }\n        }\n        \n        /** Gets the maximum area that the barcode and the text, if\n        * any, will occupy. The lower left corner is always (0, 0).\n        * @return the size the barcode occupies.\n        */    \n        public override Rectangle TextBarcodeSizeWithChecksumAndText {\n            get {\n                float fontX", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return ArrayUtils.toPrimitive(results);\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1\") should return the same thing as\n   *    new String[] { \"value1\", \"value2\", \"a quoted value\", \"another quoted value\" };\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue) {\n    String[] results = MetaClass.cast(props.getProperty(key), String [].class);\n    if (results == null) {\n      return defaultValue == null ? new String[] {} : defaultValue.split(\",\");\n    } else {\n      return ArrayUtils.toPrimitive(results);\n    }\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1\") should return the same thing as\n   *    new String[] { \"value1\", \"value2\", \"a quoted value\", \"another quoted value\" };\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue, String delimiter) {\n    String[] results = MetaClass.cast(props.getProperty(key), String [].class);\n    if (results == null) {\n      return defaultValue == null ? new String[] {} : defaultValue.split(delimiter);\n    } else {\n      return ArrayUtils.toPrimitive(results);\n    }\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1\") should return the same thing as\n   *    new String[] { \"value1\", \"value2\", \"a quoted value\", \"another quoted value\" };\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue) {\n    String[] results = MetaClass.cast(props.getProperty(key), String [].class);\n    if (results == null) {\n      return defaultValue == null ? new String[] {} : defaultValue.split(\",\");\n    } else {\n      return ArrayUtils.toPrimitive(results);\n    }\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1\") should return the same thing as\n   *    new String[] { \"value1\", \"value2\", \"a quoted value\", \"another quoted value\" };\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue, String delimiter) {\n    String[] results = MetaClass.cast(props.getProperty(key), String [].class);\n    if (results == null) {\n      return defaultValue == null ? new String[] {} : defaultValue.split(delimiter);\n    } else {\n      return ArrayUtils.toPrimitive(results);\n    }\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1\") should return the same thing as\n   *    new String[] { \"value1\", \"value2\", \"a quoted value\", \"another quoted value\" };\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue, String delimiter, String quote) {\n    String[] results = MetaClass.cast(props.getProperty(key), String [].class);\n    if (results == null) {\n      return defaultValue == null ? new String[] {} : defaultValue.split(delimiter);\n    } else {\n      return ArrayUtils.toPrimitive(results);\n    }\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1\") should return the same thing as\n   *    new String[] { \"value1\", \"value2\", \"a quoted value\", \"another quoted value\" };\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue, String delimiter, String quote, String quoteDelimiter) {\n    String[] results = MetaClass.cast(props.getProperty(key), String [].class);\n    if (results == null) {\n      return defaultValue == null ? new String[] {} : defaultValue.split(delimiter);\n    } else {\n      return ArrayUtils.toPrimitive(results);\n    }\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1\") should return the same thing as\n   *    new String[] { \"value1\", \"value2\", \"a quoted value\", \"another quoted value\" };\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue, String delimiter, String quote, String quoteDelimiter, String quoteQuote) {\n    String[] results = MetaClass.cast(props.getProperty(key), String [].class);\n    if (results == null) {\n      return defaultValue == null ? new String[] {} : defaultValue.split(delimiter);\n    } else {\n      return ArrayUtils.toPrimitive(results);\n    }\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1\") should return the same thing as\n   *    new String[] { \"value1\", \"value2\", \"a quoted value\", \"another quoted value\" };\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue, String delimiter, String quote, String quoteDelimiter, String quoteQuote, String quoteQuoteDelimiter) {\n    String[] results = MetaClass.cast(props.getProperty(key), String [].class);\n    if (results == null) {\n      return defaultValue == null ? new String[] {} : defaultValue.split(delimiter);\n    } else {\n      return ArrayUtils.toPrimitive(results);\n    }\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1\") should return the same thing as\n   *    new String[] { \"value1\", \"value2\", \"a quoted value\", \"another quoted value\" };\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue, String delimiter, String quote, String quoteDelimiter, String quoteQuote, String quoteQuoteDelimiter, String quoteQuoteDelimiter) {\n    String[] results = MetaClass.cast(props.getProperty(key), String [].class);\n    if (results == null) {\n      return defaultValue == null ? new String[] {} : defaultValue.split(delimiter);\n    } else {\n      return ArrayUtils.toPrimitive(results);\n    }\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1\") should return the same thing as\n   *    new String[] { \"value1\", \"value2\", \"a quoted value\", \"another quoted value\" };\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue, String", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90.0, +90.0, 15.0)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            (\"longitude\", x_points.flatten()),\n            (\"latitude\", y_points.flatten()),\n        ]\n        result = traj_interpolate(test_cube, sample_points, method=\"nearest\")\n        expected = [\n            288.07168579,\n            288.07168579,\n            287.9367981,\n            287.82736206,\n            287.78564453,\n            287.8374939,\n            287.8374939,\n            288.07168579,\n            288.07168579,\n            287.9367981,\n            287.82736206,\n            287.78564453,\n            287.8374939,\n            287.8374939,\n            287.8374939,\n            288.07168579,\n            288.07168579,\n            287.9367981,\n            287.82736206,\n            287.78564453,\n            287.8374939,\n            287.8374939,\n            288.0716857", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           if (currPacket == null)\n            {\n                return;\n            }\n            Clipboard.SetText(currPacket.ToText());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            if (currPacket == null)\n            {\n                return;\n            }\n            byte[] bytes = currPacket.ToBytes();\n            Clipboard.SetText(bytes.ToHex());\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            if (currPacket == null)\n            {\n                return;\n            }\n            if (currPacket.Frame.IsBasic)\n            {\n                currPacket.Frame.Save();\n            }\n            else\n            {\n                currPacket.Frame.Save();\n            }\n        }\n        private void toolStripButtonRevert_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            if (currPacket == null)\n            {\n                return;\n            }\n            currPacket.Frame.Revert();\n            currPacket.Frame.Save();\n        }\n        private void toolStripButtonClose_Click(object sender, EventArgs e)\n        {\n            Close();\n        }\n        private void timer_Tick(object sender, EventArgs e)\n        {\n            if (_packets.Count == 0)\n            {\n                Close();\n            }\n            else\n            {\n                UpdatePacketDisplay();\n            }\n        }\n    }\n}\n", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   print '\\0333[0m'\n    else:\n        print '\\033[1;31;40m'\nNext line of code:\n    print '\\033[0m'\n    else:\n        print '\\033[1;", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "           set { _numValues = value; }\n        }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, ", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "       else:\n            return self.constructFunction(\n                original.__name__,\n                original.DLL,\n                resultType = original.restype,\n                argTypes= original.argtypes,\n                doc = original.__doc__,\n                argNames = original.argNames,\n                extension = original.extension,\n                deprecated = original.deprecated,\n            )\n        return self.constructFunction(\n            original.__name__,\n            original.DLL,\n            resultType = original.restype,\n            argTypes= original.argtypes,\n            doc = original.__doc__,\n            argNames = original.argNames,\n            extension = original.extension,\n            deprecated = original.deprecated,\n        )\n    def nullFunction( self, functionName, dll, resultType=ctypes.c_int, \n        argTypes=(), doc = None, argNames = (), extension = None, deprecated = False ):\n        \"\"\"Create a null function\"\"\"\n        from OpenGL import wrapper\n        func = wrapper.nullFunction(\n            functionName,\n            resultType,\n            argTypes,\n            doc = doc,\n            argNames = argNames,\n            extension = extension,\n            deprecated = deprecated,\n        )\n        return func\n    def getExtensionProcedure( self, name ):\n        \"\"\"Get the procedure for the given extension\"\"\"\n        from OpenGL import extensions\n        if name in self.EXTENSIONS_USE_BASE_FUNCTIONS:\n            return self.getBaseFunction( name )\n        else:\n            return extensions.getExtensionProcedure( name )\n    def getBaseFunction( self, name ):\n        \"\"\"Get the base function for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getBaseFunction( name )\n    def getFunction( self, name ):\n        \"\"\"Get the function for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getFunction( name )\n    def getContextFunction( self, name ):\n        \"\"\"Get the context function for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunction( name )\n    def getContextFunctionPointer( self, name ):\n        \"\"\"Get the context function pointer for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointer( name )\n    def getContextFunctionPointers( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointers( name )\n    def getContextFunctionPointersFor( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersFor( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension( name )\n    def getContextFunctionPointersForExtension( self, name ):\n        \"\"\"Get the context function pointers for the given extension\"\"\"\n        from OpenGL import extensions\n        return extensions.getContextFunctionPointersForExtension(", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           for (int i = 0; i < files.size(); i++) {\n                if (emptyStreams.get(i)) {\n                    baos.write(i);\n                }\n            }\n            baos.write(NID.kEnd);\n            ba", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   if (alphaLevel < 255)\n                        alphaLevel++;\n                    else\n                        alphaLevel = 0;\n                }\n                else\n                {\n                    if (alphaLevel > 0)\n                        alphaLevel--;\n                    else\n                        alphaLevel = 2555;\n                }\n                Graphics2D g = (Graphics2D) getGraphics();\n                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n                g.setColor(new Color(255, 255, 255, alphaLevel));\n                g.fill(ticker[0]);\n                g.setColor(getForeground());\n                g.draw(ticker[0]);\n                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n                g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_OFF);\n                g.setColor(new Color(255, 255, 255, alphaLevel));\n                g.fill(ticker[0]);\n                g.setColor(getForeground());\n                g.draw(ticker[0]);\n                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n                g.setColor(new Color(255, 255, 255, alphaLevel));\n                g.fill(ticker[0]);\n                g.setColor(getForeground());\n                g.draw(ticker[0]);\n                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n                g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_OFF);\n                g.setColor(new Color(255, 255, 255, alphaLevel));\n                g.fill(ticker[0]);\n                g.setColor(getForeground());\n                g.draw(ticker[0]);\n                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n                g.setColor(new Color(255, 255, 255, alphaLevel));\n                g.fill(ticker[0]);\n                g.setColor(getForeground());\n                g.draw(ticker[0]);\n                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n                g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_OFF);\n                g.setColor(new Color(255, 255, 255, alphaLevel));\n                g.fill(ticker[0]);\n                g.setColor(getForeground());\n                g.draw(ticker[0]);\n                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n                g.setColor(new Color(255, 255, 255, alphaLevel));\n                g.fill(ticker[0]);\n                g.setColor(getForeground());\n                g.draw(ticker[0]);\n                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n                g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_OFF);\n                g.setColor(new Color(255, 255, 255, alphaLevel));\n                g.fill(ticker[0]);\n                g.setColor(getForeground());\n                g.draw(ticker[0]);\n                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n                g.setColor(new Color(255, 255, 255, alphaLevel));\n                g.fill(ticker[0]);\n                g.setColor(getForeground());\n                g.draw(ticker[0]);\n                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n                g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_OFF);\n                g.setColor(new Color(255, 255, 255, alphaLevel));\n                g.fill(ticker[0]);\n                g.setColor(getForeground());\n                g.draw(ticker[0]);\n                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n                g.setColor(new Color(255, 255, 255, alphaLevel));\n                g.fill(ticker[0]);\n                g.setColor(getForeground());\n                g.draw(ticker[0]);\n                g.setRenderingHint(Rendering", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n                }\n            }\n        }\n    }\n}\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       f.writelines(['F) ', str(oversamp), '\t\t\t# PSF oversampling factor\\n'])\n        f.writelines(['G) ', str(cutout), '\t\t\t# Cutout size\\n'])\n        f.writ", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    /* C */\n                    i = b & 0x03;\n                    i += ((b & 0x80) >> 4);\n                    i += (((~b) & 0x40) >> 1);\n                    i += ((b & 0x20) >> 1);\n                    i += ((b & 0x10) >> 2);\n                    i += ((b & 0x08) << 3);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x03:\n                    /* D */\n                    i = b & 0x23;\n                    i += ((b & 0xC0) >> 4);\n                    i += ((b & 0x10) << 2);\n                    i += ((b & 0x08) << 1);\n                    i += (((~b) & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n            }\n            lo[0] = i;\n        }\n    };\n    /**\n     * *************************************************************************\n     */\n    /* MB 971025 - Emulate Sega G80 security chip 315-", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key.make_locator()\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in the Studio.\n        \"\"\"\n        self._course_key = self._create_course()\n        return self._course_key\n    def _create", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length == 1) {\n\t\t\tchance = Float.parseFloat(splitNumber[0]);\n\t\t} else {\n\t\t\tchance = Float.parseFloat(splitNumber[0])/Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\tint drop = (int) (chance*100);\n\t\treturn drop;\n\t}\n}\n", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   return 0, \"Meter \" + name + \" deleted\"\ndef create_certs(module, name, apiid, apikey):\n    meters = search_meter(module, name, apiid, apikey)\n    if len(meters) > 0:\n        # If the meter already exists, do nothing\n        module.exit_json(status=\"Meter \" + name + \" already exists\",changed=False)\n    else:\n        # If it doesn't exist, create it\n        body = '{\"name\":\"' + name + '\"}'\n        response, info = http_request(module, name, apiid, apikey, data=body, action=\"create\")\n        if info['status'] != 200:\n            module.fail_json(\"Failed to connect to api host to create meter\")\n        # If the config directory doesn't exist, create it\n        if not os.path.exists(config_directory):\n            try:\n                os.makedirs(config_directory)\n            except:\n                module.fail_json(\"Could not create \" + config_directory)\n        # Download both cert files from the api host\n        types = ['key', 'cert']\n        for cert_type in types:\n            try:\n                # If we can't open the file it's not there, so we should download it\n                cert_file = open('%s/%s.pem' % (config_directory,cert_type))\n            except IOError:\n                # Now download the file...\n                rc = download_request(module, name, apiid, apikey, cert_type)\n                if rc == False:\n                    module.fail_json(\"Download request for \" + cert_type + \".pem failed\")\n        return 0, \"Meter \" + name + \" created\"\ndef download_request(module, name, apiid, apikey, cert_type):\n    url = \"https://%s/%s/meters/%s/%s.pem\" % (api_host, apiid, name, cert_type)\n    headers = dict()\n    headers[\"Authorization\"] = \"Basic %s\" % auth_encode(apikey)\n    headers[\"Content-Type\"] = \"application/json\"\n    response, info = fetch_url(module, url, headers=headers)\n    if info['status'] != 200:\n        module.fail_json(\"Failed to connect to api host to download cert\")\n    return 0\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            apiid=dict(required=True),\n            apikey=dict(required=True),\n            state=dict(required=False, default='present', choices=['present', 'absent']),\n            validate_certs=dict(required=False, default='yes', choices=['yes', 'no']),\n        ),\n        supports_check_mode=True\n    )\n    name = module.params['name']\n    apiid = module.params['apiid']\n    apikey = module.params['apikey']\n    state = module.params['state']\n    validate_certs = module.params['validate_certs']\n    if state == 'absent':\n        if not search_meter(module, name, apiid, apikey):\n            module.exit_json(changed=False, status=\"Meter \" + name + \" does not exist\")\n    else:\n        if search_meter(module, name, apiid, apikey):\n            module.exit_json(changed=False, status=\"Meter \" + name + \" already exists\")\n    if state == 'present':\n        if create_meter(module, name, apiid, apikey):\n            module.exit_json(changed=True, status=\"Meter \" + name + \" created\")\n        else:\n            module.exit_json(changed=False, status=\"Meter \" + name + \" already exists\")\n    elif state == 'absent':\n        if delete_meter(module, name, apiid, apikey):\n            module.exit_json(changed=True, status=\"Meter \" + name + \" deleted\")\n        else:\n            module.exit_json(changed=False, status=\"Meter \" + name + \" does not exist\")\n    elif state == 'present':\n        if create_certs(module, name, apiid, apikey):\n            module.exit_json(changed=True, status=\"Meter \" + name + \" created\")\n        else:\n            module.exit_json(changed=False, status=\"Meter \" + name + \" already exists\")\n    else:\n        module.fail_json(\"Invalid state\")\n\nif __name__ == '__main__':\n    main()", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(9, 20);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            try:\n                plug.collect()\n            except KeyboardInterrupt:\n                raise\n            except (OSError, IOError) as e:\n                if e.errno in fatal_fs_errors:\n                ", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   getRoomFullName.produce = lambda s: s.getRoom()\n    getRoomFullName.name = \"room\"\n    def getAdjustedStartDate(self):\n        \"\"\" Session Adjusted Start Date \"\"\"\n    getAdjustedStartDate.convert = Conversion.datetime\n    getAdjustedStartDate.name = \"startDate\"\n    def getAdjustedEndDate(self):\n        \"\"\" Session Adjusted End Date \"\"\"\n    getAdjustedEndDate.convert = Conversion.datetime\n    getAdjustedEndDate.name = \"endDate\"\n    def getTimezone(self):\n        \"\"\" Session Timezone \"\"\"\n    def getSupportInfo(self):\n        \"\"\" Session Support Info \"\"\"\n    getSupportInfo.result = ISupportInfoFossil\nclass ISessionMinimalFossil(IFossil):\n    def getId(self):\n        \"\"\" Session Id \"\"\"\n    def getTitle(self):\n        \"\"\" Session Title \"\"\"\n    def getDescription(self):\n        \"\"\" Session Description \"\"\"\n    def getColor(self):\n        \"\"\" Session Color \"\"\"\n    def getAdjustedStartDate(self):\n        \"\"\" Session Adjusted Start Date \"\"\"\n    getAdjustedStartDate.convert = Conversion.datetime\n    def getAdjustedEndDate(self):\n        \"\"\" Session Adjusted End Date \"\"\"\n    getAdjustedEndDate.convert = Conversion.datetime\n    def getTimezone(self):\n        \"\"\" Session Timezone \"\"\"\n    def getLocation(self):\n        \"\"\" Session Location \"\"\"\n    getLocation.convert = Conversion.locationName\n    def getAddress(self):\n        \"\"\" Session Address \"\"\"\n    getAddress.produce = lambda s: s.getLocation()\n    getAddress.convert = Conversion.locationAddress\n    def getRoom(self):\n        \"\"\" Session Room \"\"\"\n    getRoom.convert = Conversion.roomName\n    def getRoomFullName(self):\n        \"\"\" Session Room \"\"\"\n    getRoomFullName.produce = lambda s: s.getRoom()\n    getRoomFullName.convert = Conversion.roomName\n    def getAdjustedStartDate(self):\n        \"\"\" Session Adjusted Start Date \"\"\"\n    getAdjustedStartDate.convert = Conversion.datetime\n    getAdjustedStartDate.name = \"startDate\"\n    def getAdjustedEndDate(self):\n        \"\"\" Session Adjusted End Date \"\"\"\n    getAdjustedEndDate.convert = Conversion.datetime\n    getAdjustedEndDate.name = \"endDate\"\n    def getSupportInfo(self):\n        \"\"\" Session Support Info \"\"\"\n    getSupportInfo.result = ISupportInfoFossil\nclass ISessionFossil(ISessionMinimalFossil):\n    def getNumSlots(self):\n        \"\"\" Number of slots present in the session \"\"\"\n    getNumSlots.produce = lambda s: len(s.getSlotList())\n    def getSlotList(self):\n        \"\"\" List of slots present in the session \"\"\"\n    getSlotList.result = ISessionSlotFossil\n    def getSlot(self, slotId):\n        \"\"\" Session Slot \"\"\"\n    getSlot.result = ISessionSlotFossil\nclass ISessionSlotFossil(IFossil):\n    def getId(self):\n        \"\"\" Session Slot Id \"\"\"\n    def getTitle(self):\n        \"\"\" Session Slot Title \"\"\"\n    def getDescription(self):\n        \"\"\" Session Slot Description \"\"\"\n    def getColor(self):\n        \"\"\" Session Slot Color \"\"\"\n    def getAdjustedStartDate(self):\n        \"\"\" Session Slot Adjusted Start Date \"\"\"\n    getAdjustedStartDate.convert = Conversion.datetime\n    getAdjustedStartDate.name = \"startDate\"\n    def getAdjustedEndDate(self):\n        \"\"\" Session Slot Adjusted End Date \"\"\"\n    getAdjustedEndDate.convert = Conversion.datetime\n    getAdjustedEndDate.name = \"endDate\"\n    def getTimezone(self):\n        \"\"\" Session Slot Timezone \"\"\"\n    def getLocation(self):\n        \"\"\" Session Slot Location \"\"\"\n    getLocation.convert = Conversion.locationName\n    def getAddress(self):\n        \"\"\" Session Slot Address \"\"\"\n    getAddress.produce = lambda s: s.getLocation()\n    getAddress.convert = Conversion.locationAddress\n    def getRoom(self):\n        \"\"\" Session Slot Room \"\"\"\n    getRoom.convert = Conversion.roomName\n    def getRoomFullName(self):\n        \"\"\" Session Slot Room \"\"\"\n    getRoomFullName.produce = lambda s: s.getRoom()\n    getRoomFullName.convert = Conversion.roomName\n    def getSupportInfo(self):\n        \"\"\" Session Slot Support Info \"\"\"\n    getSupportInfo.result = ISupportInfoFossil\nclass ISessionParticipationFossil(IFossil):\n    def getId(self):\n        \"\"\" Session Participation Id \"\"\"\n    def getTitle(self):\n        \"\"\" Session Participation Title \"\"\"\n    def getDescription(self):\n        \"\"\" Session Participation Description \"\"\"\n    def getColor(self):\n        \"\"\" Session Participation Color \"\"\"\n    def getAdjustedStartDate(self):\n        \"\"\" Session Participation Adjusted Start Date \"\"\"\n    getAdjustedStartDate.convert = Conversion.datetime\n    getAdjustedStartDate.name = \"startDate\"\n    def getAdjustedEndDate(self):\n        \"\"\" Session Participation Adjusted End Date \"\"\"\n    getAdjustedEndDate.convert = Conversion.datetime\n    getAdjustedEndDate.name = \"endDate", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.alertError(parent, e.getMessage());\n                        }\n                        return true;\n                    }\n                };\n                result = new MessageImportResult(messageBrowser.getMessages(), messageWriter);\n            } else {\n                MessageImporter messageImporter = new MessageImporter(channelId);\n                result = messageImporter.importMessages(fileTextField.getText());\n            }\n        } catch (MessageImportInvalidPathException e) {\n            parent.alertError(parent, e.getMessage());\n            setVisible(true);\n            return;\n        } catch (MessageImportInvalidPathException e) {\n            parent.alertError(parent, e.getMessage());\n            setVisible(true);\n            return;\n        } catch (MessageImporter.MessageImportInvalidPathException e) {\n            parent.alertError(parent, e.getMessage());\n            setVisible(true);\n            return;\n        } catch (MessageImporter.MessageImporterException e) {\n            parent.alertError(parent, e.getMessage());\n            setVisible(true);\n            return;\n        } catch (MessageImporter.MessageImporterException e) {\n            parent.alertError(parent, e.getMessage());\n            setVisible(true);\n            return;\n        } catch (Exception e) {\n            parent.alertError(parent, e.getMessage());\n            setVisible(true);\n            return;\n        }\n        if (result.getMessages().size() > 0) {\n            parent.alertSuccess(parent, \"Imported \" + result.getMessages().size() + \" message(s).\");\n        } else {\n            parent.alertSuccess(parent, \"No message(s) imported.\");\n        }\n        setVisible(false);\n    }\n}", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tif (value instanceof Integer) {\n\t\t       \t\t\t\tlayer = ((Integer)value).intValue();\n\t\t       \t\t\t}\n\t\t       \t\t}\n\t\t    \t\t}\n    \t\treturn layer;\n    \t\t}\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    }\n    \n    protected int getView(Object options) throws Exception {\n\t\tint view = -1;\n    \ttry {\n    \t\tif (options != null) {\n    \t\t\tObject value = null;\n    \t\t\tif (options instanceof Scriptable) {\n    \t\t\t\tvalue = ((Scriptable) options).get(VIEW, (Scriptable) options);\n    \t\t\t} else if (options instanceof Map) {\n    \t\t\t\tvalue = ((Map) options).get(VIEW);\n    \t\t\t}\n\t\t    \tif (value != null) {\n\t\t       \t\t\tif (value instanceof Scriptable) {\n\t\t       \t\t\t\tif (value instanceof Integer) {\n\t\t       \t\t\t\t\t\tview = ((Integer)value).intValue();\n\t\t       \t\t\t\t}\n\t\t       \t\t\t}\n\t\t    \t\t}\n    \t\t}\n    \t\treturn view;\n    \t\t}\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    }\n    \n    protected boolean getFilter(Object options) throws Exception {\n    \tboolean filter = false;\n    \ttry {\n    \t\tif (options != null) {\n    \t\t\tObject value = null;\n    \t\t\tif (options instanceof Scriptable) {\n    \t\t\t\tvalue = ((Scriptable) options).get(FILTER, (Scriptable) options);\n    \t\t\t} else if (options instanceof Map) {\n    \t\t\t\tvalue = ((Map) options).get(FILTER);\n    \t\t\t}\n\t\t    \tif (value != null) {\n\t\t       \t\tif (value instanceof Scriptable) {\n\t\t       \t\t\tif (value instanceof Boolean) {\n\t\t       \t\t\t\t\tfilter = ((Boolean)value).booleanValue();\n\t\t       \t\t\t}\n\t\t       \t\t}\n\t\t    \t}\n    \t\t}\n    \t\treturn filter;\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    }\n    \n    protected boolean getFilter(Object options, String field) throws Exception {\n    \tboolean filter = false;\n    \ttry {\n    \t\tif (options != null) {\n    \t\t\tObject value = null;\n    \t\t\tif (options instanceof Scriptable) {\n    \t\t\t\tvalue = ((Scriptable) options).get(field, (Scriptable) options);\n    \t\t\t} else if (options instanceof Map) {\n    \t\t\t\tvalue = ((Map) options).get(field);\n    \t\t\t}\n\t\t    \tif (value != null) {\n\t\t       \t\tif (value instanceof Scriptable) {\n\t\t       \t\t\tif (value instanceof Boolean) {\n\t\t       \t\t\t\tfilter = ((Boolean)value).booleanValue();\n\t\t       \t\t\t}\n\t\t       \t\t}\n\t\t    \t}\n    \t\t}\n    \t\treturn filter;\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    }\n    \n    protected boolean getFilter(Object options, String field, String value) throws Exception {\n    \tboolean filter = false;\n    \ttry {\n    \t\tif (options != null) {\n    \t\t\t\tObject value = null;\n    \t\t\t\tif (options instanceof Scriptable) {\n    \t\t\t\t\tvalue = ((Scriptable) options).get(field, (Scriptable) options);\n    \t\t\t\t} else if (options instanceof Map) {\n    \t\t\t\t\tvalue = ((Map) options).get(field);\n    \t\t\t\t}\n\t\t    \t\tif (value != null) {\n\t\t       \t\tif (value instanceof Scriptable) {\n\t\t       \t\t\tif (value instanceof String) {\n\t\t       \t\t\t\tfilter = ((String)value).equals(value);\n\t\t       \t\t\t\t}\n\t\t       \t\t\t}\n\t\t    \t\t}\n    \t\t\t}\n    \t\treturn filter;\n    \t} catch (Exception e) {\n    \t\t\tthrow e;\n    \t}\n    }\n    \n    protected boolean getFilter(Object options, String field, String value, String operator) throws Exception {\n    \tboolean filter = false;\n    \ttry {\n    \t\tif (options != null) {\n    \t\t\tObject value = null;\n    \t\t\tif (options instanceof Scriptable) {\n    \t\t\t\t\tvalue = ((Scriptable) options).get(field, (Scriptable) options);\n    \t\t\t} else if (options instanceof Map) {\n    \t\t\t\tvalue = ((Map) options).get(field);\n    \t\t\t}\n\t\t    \tif (value != null) {\n\t\t       \t\tif (value instanceof Scriptable) {\n\t\t       \t\t\tif (value instanceof String) {\n\t\t       \t\t\tif (operator != null) {\n\t\t       \t\t\t\tfilter = ((String)value).equals(value);\n\t\t       \t\t\t} else {\n\t\t       \t\t\t\tfilter = ((String)value).equalsIgnoreCase(value);\n\t\t       \t\t\t}\n\t\t       \t\t}\n\t\t       \t\t}\n\t\t    \t}\n    \t\t}\n    \t\treturn filter;\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    }\n    \n    protected boolean getFilter(Object options, String field, String value, String operator, String type) throws Exception {\n    \tboolean filter = false;\n    \ttry {\n    \t\tif (options != null) {\n    \t\t\tObject value = null;\n    \t\tif (options instanceof Scriptable) {\n    \t\t\t\tvalue = ((Scriptable) options).get(field, (Scriptable) options);\n    \t\t\t} else if (options instanceof Map) {\n    \t\t\t\tvalue = ((Map) options).get(field);\n    \t\t\t}\n\t\t    \tif (value != null) {\n\t\t       \t\tif (value instanceof Scriptable) {\n\t\t       \t\t\tif (value instanceof String) {\n\t\t       \t\t\t\tif (operator != null) {\n\t\t       \t\t\t\t\tfilter = ((String)value).equals(value);\n\t\t       \t\t\t\t} else {\n\t\t       \t\t\t\t\tfilter = ((String)value).equalsIgnoreCase(value);\n\t\t       \t\t\t\t\t}\n\t\t       \t\t\t}\n\t\t       \t\t\tif (type != null) {\n\t\t       \t\t\t\tif (type.equalsIgnoreCase(\"number\")) {\n\t\t       \t\t\t\t\tfilter = ((String)value).equals(value);\n\t\t       \t\t\t\t}\n\t\t       \t\t\t\t}\n\t\t       \t\t\t}\n\t\t    \t\t}\n    \t\t\t}\n    \t\treturn filter;\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    }\n    \n    protected boolean getFilter(Object options, String field, String value, String operator, String type, String type2) throws Exception {\n    \tboolean filter = false;\n    \ttry {\n    \t\tif (options != null) {\n    \t\t\tObject value = null;\n    \t\t\tif (options instanceof Scriptable) {\n    \t\t\t\tvalue = ((Scriptable) options).get(field, (Scriptable) options);\n    \t\t\t} else if (options instanceof Map)", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && !currentSession.equals(Session.getActiveSession())) {\n            GraphUser user = null;\n            try {\n                user = GraphUser.getCurrentUser(currentSession);\n            } catch (MalformedURLException e) {\n                e.printStackTrace();\n            }\n            if (user != null) {\n                userProfilePicID = user.getId();\n                userProfilePic = user.getPicture();\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatarFor(userProfilePicID);\n                }\n                if (userProfilePic != null) {\n                    userProfilePicID = userProfilePic.getId();\n                }\n                if (userProfilePicID != null) {\n                    userProfilePic = GraphUser.getDefaultAvatar", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (int i=0; i<emotions.length; i++)\n\t\t\tsum += emotions[i].strength;\n\t\tfor (int i=0; i<emotions.length; i++)\n\t\temotions[i].strength = (float) (sum / emotions.length);\n\t}\n}\n", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_dict_with_properties(self):\n        \"\"\"Test exporting as a dictonary with properties.\"\"\"", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   phi2Rad = (1-e1/2)*(1-e1/2)*(1-e1/2)*(1-e1/2)*sin(2*phi1)\n    phi2 = phi2Rad*_rad2deg\n    LongRad = x*_deg2rad\n    Long = LongRad + LongOriginRad\n    if NorthernHemisphere:\n        if Long < 0:\n            Long += 360\n        if Long > 180:\n            Long -= 360\n    else:\n        if Long < 0:\n            Long += 180\n        if Long > 360:\n            Long -= 360\n    if Long < 0:\n        Long += 360\n    if Long > 360:\n        Long -= 360\n    if Long < 0:\n        Long += 360\n    if Long > 360:\n        Long -= 360\n    if Long < 0:\n        Long += 360\n    if Long > 360:\n        Long -= 360\n    if Long < 0:\n        Long += 360\n    if Long > 360:\n        Long -= 360\n    if Long < 0:\n        Long += 360\n    if Long > 360:\n        Long -= 360\n    if Long < 0:\n        Long += 360\n    if Long > 360:\n        Long -= 360\n    if Long < 0:\n        Long += 360\n    if Long > 360:\n        Long -= 360\n    if Long < 0:\n        Long += 360\n    if Long > 360:\n        Long -= 360\n    if Long < 0:\n       ", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data\n            report_user = ReportUserForm(request.POST)\n            if report_user.is_valid():\n                report_user.save()\n                messages.success(request, \"Reported user successfully!\")\n                return HttpResponseRedirect(reverse('profile-user', args=[user.username]))\n    else:\n        form = ReportUserForm()\n    return render_to_response('accounts/reportuser.html', {\n        'form': form,\n        'profile': profile,\n    }, context_instance=RequestContext(request))\n@login_required\ndef report_user_form(request):\n    if request.method == 'POST':\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data\n            report_user = ReportUserForm(request.POST)\n            if report_user.is_valid():\n                report_user.save()\n                messages.success(request, \"Reported user successfully!\")\n                return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUserForm()\n    return render_to_response('accounts/reportuser.html', {\n        'form': form,\n    }, context_instance=RequestContext(request))\n@login_required\ndef report_user_list(request):\n    if request.method == 'POST':\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data\n            report_user = ReportUserForm(request.POST)\n            if report_user.is_valid():\n                report_user.save()\n                messages.success(request, \"Reported user successfully!\")\n                return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUserForm()\n    return render_to_response('accounts/reportuser.html', {\n        'form': form,\n    }, context_instance=RequestContext(request))\n@login_required\ndef report_user_list_form(request):\n    if request.method == 'POST':\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data\n            report_user = ReportUserForm(request.POST)\n            if report_user.is_valid():\n                report_user.save()\n                messages.success(request, \"Reported user successfully!\")\n                return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUserForm()\n    return render_to_response('accounts/reportuser.html', {\n        'form': form,\n    }, context_instance=RequestContext(request))\n@login_required\ndef report_user_list_form_2(request):\n    if request.method == 'POST':\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data\n            report_user = ReportUserForm(request.POST)\n            if report_user.is_valid():\n                report_user.save()\n                messages.success(request, \"Reported user successfully!\")\n                return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUserForm()\n    return render_to_response('accounts/reportuser.html', {\n        'form': form,\n    }, context_instance=RequestContext(request))\n@login_required\ndef report_user_list_form_3(request):\n    if request.method == 'POST':\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data\n            report_user = ReportUserForm(request.POST)\n            if report_user.is_valid():\n                report_user.save()\n                messages.success(request, \"Reported user successfully!\")\n                return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUserForm()\n    return render_to_response('accounts/reportuser.html', {\n        'form': form,\n    }, context_instance=RequestContext(request))\n@login_required\ndef report_user_list_form_4(request):\n    if request.method == 'POST':\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data\n            report_user = ReportUserForm(request.POST)\n            if report_user.is_valid():\n                report_user.save()\n                messages.success(request, \"Reported user successfully!\")\n                return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUserForm()\n    return render_to_response('accounts/reportuser.html', {\n        'form': form,\n    }, context_instance=RequestContext(request))\n@login_required\ndef report_user_list_form_5(request):\n    if request.method == 'POST':\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data\n            report_user = ReportUserForm(request.POST)\n            if report_user.is_valid():\n                report_user.save()\n                messages.success(request, \"Reported user successfully!\")\n                return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUserForm()\n    return render_to_response('accounts/reportuser.html', {\n        'form': form,\n    }, context_instance=RequestContext(request))\n@login_required\ndef report_user_list_form_6(request):\n    if request.method == 'POST':\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data\n            report_user = ReportUserForm(request.POST)\n            if report_user.is_valid():\n                report_user.save()\n                messages.success(request, \"Reported user successfully!\")\n                return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUserForm()\n", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @cachedproperty\n    def series_and_releases(self):\n        \"\"\"Get a batch of series and release\n        Each entry returned is a tuple of (series, release).\n        \"\"\"\n        series_and_releases = []\n        for series in self.product.", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n#endif\n\t\tpublic void ApplyTo(Form form)\n\t\t{\n\t\t\tif(form == null) throw new ArgumentNullException(\"form\");\n\t\t\tif(m_props.RightToLeft)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t{\n\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(false); }\n\t\t\t}\n\t\t\tstring strTypeName = form.GetType().FullName;\n\t\t\tforeach(KPFormCustomization kpfc in m_vForms)\n\t\t\t{\n\t\t\t\tif(kpfc.FullName == strTypeName)\n\t\t\t\t{\n\t\t\t\t\tkpfc.ApplyTo(form);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(m_props.RightToLeft)\n\t\t\t{\nNext line of code:\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n\t\tpublic static KPTranslation LoadFrom(string strFile)\n\t\t{\n\t\t\tKPTranslation kpTrl = null;\n\t\t\tusing(FileStream fs = new FileStream(strFile, FileMode.Open,\n\t\t\tFileAccess.Read, FileShare.Read))\n\t\t\t{\n\t\t\t\tkpTrl = Load(fs);\n\t\t\t}\n\t\t\treturn kpTrl;\n\t\t}\n\t\tpublic static KPTranslation LoadFrom(Stream s)\n\t\t{\n\t\t\tKPTranslation kpTrl = null;\n\t\t\tif(s == null) throw new ArgumentNullException(\"s\");\n#if !KeePassLibSD\n\t\t\tusing(GZipStream gz = new GZipStream(s, CompressionMode.Decompress))\n#else\n\t\t\tusing(GZipInputStream gz = new GZipInputStream(s))\n#endif\n\t\t\t{\n\t\t\t\tkpTrl = Load(gz);\n\t\t\t}\n\t\t\treturn kpTrl;\n\t\t}\n\t\tpublic static KPTranslation LoadFrom(string strFile, IXmlSerializerEx xs)\n\t\t{\n\t\t\tKPTranslation kpTrl = null;\n\t\t\tusing(FileStream fs = new FileStream(strFile, FileMode.Open,\n\t\t\t\tFileAccess.Read, FileShare.Read))\n\t\t\t{\n\t\t\t\tkpTrl = Load(fs, xs);\n\t\t\t}\n\t\t\treturn kpTrl;\n\t\t}\n\t\tpublic static KPTranslation LoadFrom(Stream s, IXmlSerializerEx xs)\n\t\t{\n\t\t\tif(s == null) throw new ArgumentNullException(\"s\");\n\t\t\tif(xs == null) throw new ArgumentNullException(\"xs\");\n\t\t\tKPTranslation kpTrl = null;\n#if !KeePassLibSD\n\t\t\tusing(GZipStream gz = new GZipStream(s, CompressionMode.Decompress))\n#else\n\t\t\tusing(GZipInputStream gz = new GZipInputStream(s))\n#endif\n\t\t\t{\n\t\t\t\tkpTrl = Load(gz, xs);\n\t\t\t}\n\t\t\treturn kpTrl;\n\t\t}\n\t\tpublic static KPTranslation LoadFrom(string strFile,\n\t\t\tIXmlSerializerEx xs, bool bForceNew = false)\n\t\t{\n\t\t\tKPTranslation kpTrl = null;\n\t\t\tusing(FileStream fs = new FileStream(strFile, FileMode.Open,\n\t\t\t\tFileAccess.Read, FileShare.Read))\n\t\t\t{\n\t\t\t\tkpTrl = Load(fs, xs, bForceNew);\n\t\t\t}\n\t\t\treturn kpTrl;\n\t\t}\n\t\tpublic static KPTranslation LoadFrom(Stream s, IXmlSerializerEx xs,\n\t\t\tbool bForceNew = false)\n\t\t{\n\t\t\tif(s == null) throw new ArgumentNullException(\"s\");\n\t\t\tif(xs == null) throw new ArgumentNullException(\"xs\");\n\t\t\tKPTranslation kpTrl = null;\n#if !KeePassLibSD\n\t\t\tusing(GZipStream gz = new GZipStream(s, CompressionMode.Decompress))\n#else\n\t\t\tusing(GZipInputStream gz = new GZipInputStream(s))\n#endif\n\t\t\t{\n\t\t\t\tkpTrl = Load(gz, xs, bForceNew);\n\t\t\t}\n\t\t\treturn kpTrl;\n\t\t}\n\t\tpublic static KPTranslation LoadFrom(string strFile,\n\t\t\tIXmlSerializerEx xs, bool bForceNew = false, bool bForceNew2 = false)\n\t\t{\n\t\t\tKPTranslation kpTrl = null;\n\t\t\tusing(FileStream fs = new FileStream(strFile, FileMode.Open,\n\t\t\t\tFileAccess.Read, FileShare.Read))\n\t\t\t{\n\t\t\t\tkpTrl = Load(fs, xs, bForceNew, bForceNew2);\n\t\t\t}\n\t\t\treturn kpTrl;\n\t\t}\n\t\tpublic static KPTranslation LoadFrom(Stream s, IXmlSerializerEx xs,\n\t\t\tbool bForceNew = false, bool bForceNew2 = false)\n\t\t{\n\t\t\tif(s == null) throw new ArgumentNullException(\"s\");\n\t\t\tif(xs == null) throw new ArgumentNullException(\"xs\");\n\t\t\tKPTranslation kpTrl = null;\n#if !KeePassLibSD\n\t\t\tusing(GZipStream gz = new GZipStream(s, CompressionMode.Decompress))\n#else\n\t\t\tusing(GZipInputStream gz = new GZipInputStream(s))\n#endif\n\t\t\t{\n\t\t\t\tkpTrl = Load(gz, xs, bForceNew, bForceNew2);\n\t\t\t}\n\t\t\treturn kpTrl;\n\t\t}\n\t\tpublic static KPTranslation LoadFrom(string strFile,\n\t\t\tIXmlSerializerEx xs, bool bForceNew = false, bool bForceNew2 = false,\n\t\t\tbool bForceNew3 = false)\n\t\t{\n\t\t\tKPTranslation kpTrl = null;\n\t\t\tusing(FileStream fs = new FileStream(strFile, FileMode.Open,\n\t\t\t\tFileAccess.Read, FileShare.Read))\n\t\t\t{\n\t\t\t\tkpTrl = Load(fs, xs, bForceNew, bForceNew2, bForceNew3);\n\t\t\t}\n\t\t\treturn kpTrl;\n\t\t}\n\t\tpublic static KPTranslation LoadFrom(Stream s, IXmlSerializerEx xs,\n\t\t\tbool bForceNew = false, bool bForceNew2 = false, bool bForceNew3 = false)\n\t\t{\n\t\t\tif(s == null) throw new ArgumentNullException(\"s\");\n\t\t\tif(xs == null) throw new ArgumentNullException(\"xs\");\n\t\t\tKPTranslation kpTrl = null;\n#if !KeePassLibSD\n\t\t\tusing(GZipStream gz = new GZipStream(s, CompressionMode.Decompress))\n#else\n\t\t\tusing(GZipInputStream gz = new GZipInputStream(s))\n#endif\n\t\t\t{\n\t\t\t\tkpTrl = Load(gz, xs, bForceNew, bForceNew2, bForceNew3);\n\t\t\t}\n\t\t\treturn kpTrl;\n\t\t}\n\t\tpublic static KPTranslation LoadFrom(string strFile, IXmlSerializerEx xs,\n\t\t\tbool bForceNew = false, bool bForceNew2 = false, bool bForceNew3 = false,\n\t\t\tbool bForceNew4 = false)\n\t\t{\n\t\t\tKPTranslation kpTrl = null;\n\t\t\tusing(FileStream fs = new FileStream(strFile, FileMode.Open,\n\t\t\t\tFileAccess.Read, FileShare.Read))\n\t\t\t{\n\t\t\t\tkpTrl = Load(fs, xs, bForceNew, bForceNew2, bForceNew3, bForceNew4);\n\t\t\t}\n\t\t\treturn kpTrl;\n\t\t}\n\t\tpublic static KPTranslation LoadFrom(Stream s, IXmlSerializerEx xs,\n\t\t\tbool bForceNew = false, bool bForceNew2 = false, bool bForceNew3 = false,\n\t\t\tbool bForceNew4 = false)\n\t\t{\n\t\t\tif(s == null) throw new ArgumentNullException(\"s\");\n\t\t\tif(xs == null) throw new ArgumentNullException(\"xs\");\n\t\t\tKPTranslation kpTrl = null;\n#if !KeePassLibSD\n\t\t", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}\n", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "               new_positional_tags_list.append((flag, regex))\n            return new_positional_tags_list\n    def compile_tag_regex(compile_tag_regex):\n        if not compile_tag_regex:\n            return compile_tag_regex\n        else:\n            return compile_tag_regex[0]\n    def compile_tag_regex_list(compile_tag_regex_list):\n        if not compile_tag_regex_list:\n            return compile_tag_regex_list\n        else:\n            return compile_tag_regex_list[0]\n    def compile_tag_regex_list_default(compile_tag_regex_list_default):\n        if not compile_tag_regex_list_default:\n            return compile_tag_regex_list_default\n        else:\n            return compile_tag_regex_list_default[0]\n    def compile_tag_regex_list_default_default(compile_tag_regex_list_default_default):\n        if not compile_tag_regex_list_default_default:\n            return compile_tag_regex_list_default_default\n        else:\n            return compile_tag_regex_list_default_default[0]\n    def compile_tag_regex_list_default_default_default(\n        compile_tag_regex_list_default_default_default):\n        if not compile_tag_regex_list_default_default_default:\n            return compile_tag_regex_list_default_default\n        else:\n            return compile_tag_regex_list_default_default[0]\n    def compile_tag_regex_list_default_default_default_default(\n        compile_tag_regex_list_default_default_default_default):\n        if not compile_tag_regex_list_default_default_default_default:\n            return compile_tag_regex_list_default_default_default\n        else:\n            return compile_tag_regex_list_default_default_default[0]\n    def compile_tag_regex_list_default_default_default_default(\n        compile_tag_regex_list_default_default_default_default):\n        if not compile_tag_regex_list_default_default_default_default:\n            return compile_tag_regex_list_default_default_default_default\n        else:\n            return compile_tag_regex_list_default_default_default_default[0]\n    def compile_tag_regex_list_default_default_default_default_default(\n", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new ConstructorInfo[0];\n            }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstruct", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "   fields_desc = [\n        XByteEnumField('data', 0, obdStandards)\n    ]\nclass OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_ManufacturerSpecificData\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID1E(OBD_Packet):\n    name = \"PID_1E_ManufacturerSpecificData2\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID1F(OBD_Packet):\n    name = \"PID_1F_ManufacturerSpecificData3\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID20(OBD_Packet):\n    name = \"PID_20_ManufacturerSpecificData4\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID21(OBD_Packet):\n    name = \"PID_21_ManufacturerSpecificData5\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID22(OBD_Packet):\n    name = \"PID_22_ManufacturerSpecificData6\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID23(OBD_Packet):\n    name = \"PID_23_ManufacturerSpecificData7\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID24(OBD_Packet):\n    name = \"PID_24_ManufacturerSpecificData8\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID25(OBD_Packet):\n    name = \"PID_25_ManufacturerSpecificData9\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID26(OBD_Packet):\n    name = \"PID_26_ManufacturerSpecificData10\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID27(OBD_Packet):\n    name = \"PID_27_ManufacturerSpecificData11\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID28(OBD_Packet):\n    name = \"PID_28_ManufacturerSpecificData12\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID29(OBD_Packet):\n    name = \"PID_29_ManufacturerSpecificData13\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID2A(OBD_Packet):\n    name = \"PID_2A_ManufacturerSpecificData14\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID2B(OBD_Packet):\n    name = \"PID_2B_ManufacturerSpecificData15\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID2C(OBD_Packet):\n    name = \"PID_2C_ManufacturerSpecificData16\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID2D(OBD_Packet):\n    name = \"PID_2D_ManufacturerSpecificData17\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID2E(OBD_Packet):\n    name = \"PID_2E_ManufacturerSpecificData18\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID2F(OBD_Packet):\n    name = \"PID_2F_ManufacturerSpecificData19\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 16)\n    ]\nclass OBD_PID2G(OBD_Packet):\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tready_pipe = dbus.service.Object.listen(self.bus_name, '/org/freedesktop/secrets',\n\t\t                                  signature='ss',\n\t\t                                  method_names=['Get', 'GetAll', 'Set', '", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "               this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(SwitchItem), 1073466, 1,", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       if self._preserved:\n            self._preserved_exc = sys.exc_info()[1]\n        self._preserved = False\n        self._preserved_exc = None\n        if self._implicit_app_ctx_stack:\n            self._implicit_app_ctx_stack.pop()\n        if self._implicit_app_ctx_stack:\n            self._implicit_app_ctx_stack.pop()\n        if self.preserved:\n            self.preserved = False\n        if hasattr(sys, 'exc_clear'):\n            sys.exc_clear()\n        _request_ctx_stack.pop()\n        if self.app is not None:\n            self.app.do_teardown_request(self.request, exc)\n    def __enter__(self):\n        self.push()\n        return self\n    def __exit__(self, exc_type, exc_value, tb):\n        self.pop(exc_value)\n    def __getattr__(self, name):\n        if name in ('request', 'url_for', 'url_rule', 'url_defaults',\n                      'url_defaults_map', 'url_defaults_map_defaults',\n                      'url_defaults_map_defaults_defaults',\n                      'url_for_defaults', 'url_for_defaults_map',\n                      'url_for_defaults_map_defaults',\n                      'url_for_defaults_map_defaults_defaults',\n                      'url_for_defaults_map_defaults_defaults_defaults',\n                      'url_for_defaults_map_defaults_defaults_defaults_defaults',\n                      'url_for_defaults_map_defaults_defaults_defaults_defaults_defaults',\n                      'url_for_defaults_map_defaults_defaults_defaults_defaults_defaults_defaults',\n                      'url_for_defaults_map_defaults_defaults_defaults_defaults_defaults_defaults_defaults',\n                      'url_for_defaults_map_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults',\n                      'url_for_defaults_map_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_default", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition defaultResourceTypeDefinition, ReleaseEntity release) {\n        List<ResourceEntity> resources = resource.getProvidedRelatedResourcesByResourceType(defaultResourceTypeDefinition);\n        if (resources == null) {\n            return null;\n        }\n        Set<ResourceEntity> result = new LinkedHashSet<ResourceEntity>();\n        for (ResourceEntity r : resources) {\n            ResourceEntity resourceEntityForRelease = getResourceEntityForRelease(r.getResourceGroup(), release);\nNext line of code:\n            if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       dx = (rot_dir[0] * angles[1] + rot_dir[1] * angles[2])\n    else:\n        dx = (rot_dir[0] * angles[1] + rot_dir[1] * angles[2] +\n               rot_dir[2] * angles[3] + rot_dir[3] * angles[4])\n    # Compute angles\n    phi = np.arctan(dx / (src_radius + det_radius))\n    theta = phi * 2\n    # Compute lower and upper bound\n    source_to_line_distance = src_radius + src_radius * np.cos(theta)\n    scale = (src_radius + det_radius) / source_to_line_distance\n    source_to_line_lower = pitch * (theta - min_rot_angle) / (2 * np.pi)\n    source_to_line_upper = pitch * (theta + min_rot_angle) / (2 * np.pi)\n    lower_proj = source_to_line_lower * scale\n    upper_proj = source_to_line_upper * scale\n    # Compute a smoothed width\n    interval = (upper_proj - lower_proj)\n    width = interval * q\n    # Create weighting function\n    def parker_weighting_fcn(x):\n        x_along_axis = axis_proj[0] * x[1] + axis_proj[1] * x[2]\n        if q != 1.0:\n            lower_wndw = 0.5 * (\n                1 + sp.special.erf((x_along_axis - lower_proj) / width))\n            upper_wndw = 0.5 * (\n                1 + sp.special.erf((upper_proj - x_along_axis) / width))\n        else:\n            lower_wndw = (x_along_axis >= lower_proj)\n            upper_wndw = (x_along_axis <= upper_proj)\n        return lower_wndw * upper_wndw\n    return ray_trafo.range.element(parker_weighting_fcn)\n\ndef fbp_filter_op(norm_freq, filter_type, frequency_scaling):\n    \"\"\"Create a smoothing filter for FBP.\n    Parameters\n    ----------\n    norm_freq : `array-like`\n        Frequencies normalized to lie in the interval [0, 1].\n    filter_type : {'Ram-Lak', 'Shepp-Logan', 'Cosine', 'Hamming', 'Hann'}\n        The type of filter to be used.\n    frequency_scaling : float\n        Scaling of the frequencies for the filter. All frequencies are\n        scaled by this number, any relative frequency above ``frequency_scaling``\n        is set to 0.\n    Returns\n    -------\n    smoothing_filter : `numpy.ndarray`\n    Examples\n    --------\n    Create an FBP filter\n    >>> norm_freq = np.linspace(0, 1, 10)\n    >>> filt = _fbp_filter(norm_freq,\n    ...                   filter_type='Hann',\n    ...                   frequency_scaling=0.8)\n    \"\"\"\n    if filter_type == 'Ram-Lak':\n        filt = 1\n    elif filter_type == 'Shepp-Logan':\n        filt = np.sinc(norm_freq / (2 * frequency_scaling))\n    elif filter_type == 'Cosine':\n        filt = np.cos(norm_freq * np.pi / (2 * frequency_scaling))\n    elif filter_type == 'Hamming':\n        filt = 0.54 + 0.46 * np.cos(norm_freq * np.pi / (frequency_scaling))\n    elif filter_type == 'Hann':\n        filt = np.cos(norm_freq * np.pi / (2 * frequency_scaling)) ** 2\n    else:\n        raise ValueError('unknown `filter_type` ({})'\n                         ''.format(filter_type))\n    indicator = (norm_freq <= frequency_scaling)\n    return indicator * filt\n\ndef fbp_op(ray_trafo,\n           fbp_filter_type='Hann',\n           fbp_filter_frequency_scaling=0.8,\n           fbp_filter_window_type='Tam-Danielson',\n           fbp_filter_window_smoothing_width=0.05,\n           fbp_filter_window_n_half_rot=1,\n           fbp_filter_window_use_smoothing=True,\n           fbp_filter_window_use_parker_weighting=True,\n           fbp_filter_window_use_parker_weighting_q=0.25,\n           fbp_filter_window_use_parker_weighting_q_min=0.01,\n          ", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "       return regx\n    def _buildURL(self, url):\n        \"\"\" Return the Proxyfied URL of the page \"\"\"\n        if self.isEnabled():\n            url = self.getProxyURL() + self.param + urllib.quote_plus(url) + self", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn String.Format (fmt, \"{0} {1}\", type, unit);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (Thread.CurrentThread.CurrentCulture);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, IFormatProvider fmt)\n\t\t{\n\t\t\treturn new FontUnit (s, fmt);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s)\n\t\t{\n\t\t\treturn Parse (s, Thread.CurrentThread.CurrentCulture);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture)\n\t\t{\n\t\t\treturn new FontUnit (s, culture);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, Thread.CurrentThread.CurrentCulture, format, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, params object [] args)\n\t\t{\n\t\t\treturn new FontUnit (s, culture, format, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, Thread.CurrentThread.CurrentCulture, format, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, params object [] args)\n\t\t{\n\t\t\treturn new FontUnit (s, culture, format, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, Thread.CurrentThread.CurrentCulture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn new FontUnit (s, culture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, Thread.CurrentThread.CurrentCulture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn new FontUnit (s, culture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, CultureInfo culture, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, Thread.CurrentThread.CurrentCulture, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn new FontUnit (s, culture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, CultureInfo culture, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, Thread.CurrentThread.CurrentCulture, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn new FontUnit (s, culture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, CultureInfo culture, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, Thread.CurrentThread.CurrentCulture, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, Thread.CurrentThread.CurrentCulture, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, Thread.CurrentThread.CurrentCulture, format, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, Thread.CurrentThread.CurrentCulture, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, CultureInfo culture, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, Thread.CurrentThread.CurrentCulture, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, CultureInfo culture, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, CultureInfo culture, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, CultureInfo culture, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, Thread.CurrentThread.CurrentCulture, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, CultureInfo culture, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, Thread.CurrentThread.CurrentCulture, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, CultureInfo culture, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, Thread.CurrentThread.CurrentCulture, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, CultureInfo culture, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, Thread.CurrentThread.CurrentCulture, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, CultureInfo culture, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, fmt, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, string format, CultureInfo culture, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, Thread.CurrentThread.CurrentCulture, args);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture, string format, IFormatProvider fmt, params object [] args)\n\t\t{\n\t\t\treturn Parse (s, culture, format, fmt, args);\n\t\t}\n\t", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add blocks\n\t\t\tbyte[] output = new byte[GetOutputBlockSize()];\n\t\t\tif (forEncryption)\n\t\t\t{\n\t\t\t\t// encrypt\n\t\t\tBigInteger tmp = new BigInteger(1, block1, 0, block1.Length);\n\t\t\t\tBigInteger tmp2 = new BigInteger(1, block2, 0, block2.Length);\n\t\t\t\tBigInteger tmp3 = tmp.Add(tmp2);\n\t\t\ttmp3 = tmp3.ModPow(key.G, key.Modulus);\n\t\t\ttmp3 = tmp3.ToByteArray();\n\t\t\tArray.Copy(tmp3, 0, output, 0, tmp3.Length);\n\t\t\treturn output;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// decrypt\n\t\t\t\tBigInteger tmp = new BigInteger(1, block1, 0, block1.Length);\n\t\t\t\tBigInteger tmp2 = new BigInteger(1, block2, 0, block2.Length);\n\t\t\t\tBigInteger tmp3 = tmp.Add(tmp2);\n\t\t\t\ttmp3 = tmp3.ModPow(key.G, key.Modulus);\n\t\t\t\ttmp3 = tmp3.ToByteArray();\n\t\t\t\tArray.Copy(tmp3, 0, output, 0, tmp3.Length);\n\t\t\t\treturn output;\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t* Adds the contents of two encrypted blocks mod sigma\n\t\t*\n\t\t* @param block1\n\t\t*            the first encrypted block\n\t\t* @param block2\n\t\t*            the second encrypted block\n\t\t* @return encrypt((block1 + block2) mod sigma)\n\t\t* @throws InvalidCipherTextException\n\t\t*/\n\t\tpublic byte[] AddCryptedBlocks(\n\t\t\tbyte[] block1,\n\t\t\tbyte[] block2)\n\t\t{\n\t\t\t// check for correct blocksize\n\t\t\tif (forEncryption)\n\t\t\t{\n\t\t\t\t\tif ((block1.Length > GetOutputBlockSize())\n\t\t\t\t\t\t|| (block2.Length > GetOutputBlockSize()))\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ((block1.Length > GetInputBlockSize())\n\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add blocks\n\t\t\tbyte[] output = new byte[GetOutputBlockSize()];\n\t\t\tif (forEncryption)\n\t\t\t{\n\t\t\t\t// encrypt\n\t\t\t\tBigInteger", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    edges.add(new T2<String,String>(w, h));\n                }\n            }\n            return edges;\n        }\n        @Override\n        public Collection<String> getVertices() {\n            ArrayList<String> vertices = new ArrayList<>();\n            for (int h = 0; h < height; h++) {\nNext line of code:\n                for (int w = 0; w < width; w++) {\n                    vertices.add(w + \" \" + h);\n                }\n            }\n            return vertices;\n        }\n        @Override\n        public Topic getVertexTopic(String vertex, TopicMap topicmap, Map<String,String> optionsValues) {\n            String newBasename = getName()+\" vertex \"+vertex;\n            if(globalBasenamePattern != null && globalBasenamePattern.trim().length() > 0) {\n                newBasename = globalBasenamePattern.replaceAll(\"__n__\", vertex);\n            }\n            Topic t = getOrCreateTopic(topicmap, newBasename, getName()+\" vertex\");\n            if(connectWithWandoraClass) {\n                try {\n                    Topic graphTopic = getOrCreateTopic(topicmap, getSIPrefix()+\"edge\", getName()+\" edge\");\n                    Topic wandoraClass = getOrCreateTopic(topicmap, TMBox.W", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   ds.config[\"setup\"][\"viscosity\"] = 1.0\n    ds.config[\"setup\"][\"lut\"] = \"test-LE-2D-ana-18\"\n    ds.config[\"setup\"][\"lut_identifier\"] = \"test-LE-", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       final String filename1 = args[0];\n        final String filename2 = args[1];\n        final String namespace1 = args[2];\n        final String namespace2 = args[3];\n        final String timestamp1 = args[4];\n        final String timestamp2 = args[5];\n        final String mode1 = args[6];\n        final String mode2 = args[7];\n        final String mode3 = args[8];\n        final String mode4 = args[9];\n        final String mode5 = args[10];\n        final String mode6 = args[11];\n        final String mode7 = args[12];\n        final String mode8 = args[13];\n        final String mode9 = args[14];\n        final String mode10 = args[15];\n        final String mode11 = args[16];\n        final String mode12 = args[17];\n        final String mode13 = args[18];\n        final String mode14 = args[19];\n        final String mode15 = args[20];\n        final String mode16 = args[21];\n        final String mode17 = args[22];\n        final String mode18 = args[23];\n        final String mode19 = args[24];\n        final String mode20 = args[25];\n        final String mode21 = args[26];\n        final String mode22 = args[27];\n        final String mode23 = args[28];\n        final String mode24 = args[29];\n        final String mode25 = args[30];\n        final String mode26 = args[31];\n        final String mode27 = args[32];\n        final String mode28 = args[33];\n        final String mode29 = args[34", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.105200',\n                     u'AvailabilityZone': 'us-east-1b'}]\n        result = alert.lowest_spotprice(history)\n        assert result == 0.105200, \"The lowest spotprice should be 0.105200\"\n    def test_highest_spotprice(self):\n        \"\"\"We should find the highest spotprice for a given zone or return None.\"\"\"\n        history = [ {u'Timestamp': datetime.datetime(2015, 12, 31, 22, 13, 43,\n                                                        tzinfo=tzutc()),\n                        u'ProductDescription': 'Windows',\n                        u'InstanceType': 'g2.2xlarge',\n                        u'SpotPrice': '0.105200',\n                        u'AvailabilityZone': 'us-east-1b'},\n                     {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 56, 18,\n                                                       tzinfo=tzutc()),\n                        u'ProductDescription': 'Windows',\n                        u'InstanceType': 'g2.2xlarge',\n                        u'SpotPrice': '0.104400',\n                        u'AvailabilityZone': 'us-east-1d'},\n                     {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 56, 18,\n                                                   tzinfo=tzutc()),\n                        u'ProductDescription': 'Windows',\n                        u'InstanceType': 'g2.2xlarge',\n                        u'SpotPrice': '0.106300',\n                        u'AvailabilityZone': 'us-east-1c'},\n                     {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 31, 6,\n                                                     tzinfo=tzutc()),\n                        u'ProductDescription': 'Windows',\n                        u'InstanceType': 'g2.2xlarge',\n                        u'SpotPrice': '0.767100',\n                        u'AvailabilityZone': 'us-east-1e'},\n                     {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                ", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performDownloadAndInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should uninstall Yarta.\n\t * \n\t * When the function returns true Yarta will be uninstalled.\n\t * \n\t * @return true/false\n\t */\n\tpublic boolean uninstall() {\n\t\tint selection = JOptionPane.showConfirmDialog(null,\n\t\t\t\tStrings.InstallerUninstallPrompt,\n\t\t\t\tStrings.InstallerUninstallTitle, JOptionPane.OK_CANCEL_OPTION,\n\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\tif (selection == JOptionPane.OK_OPTION) {\n\t\t\treturn performUninstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Returns the timestamp of yarta.jar from Internet.\n\t * \n\t * @return\n\t */\n\tprivate long getLastModifiedRemote() {\n\t\tlong lastModified = 0;\n\t\ttry {\n\t\t\tURL url = new URL(Strings.DownloaderYartaLink);\n\t\t\tURLConnection conn = url.openConnection();\n\t\t\t\tlastModified = conn.getLastModified();\n\t\t} catch (Exception ex) {\n\t\t}\n\t\treturn lastModified;\n\t}\n\t/**\n\t * Checks for updates, and if there are any, asks users and update.\n\t * Returns false otherwise.\n\t * \n\t * @return true/false\n\t */\n\tpublic boolean checkAndUpdate() {\n\t\tlong lastModifiedLocal = new File(installedJarPath).lastModified();\n\t\tlong lastModifiedRemote = getLastModifiedRemote();\n\t\tif (lastModifiedRemote > lastModifiedLocal) {\n\t\t\tint option = 0;\n\t\t\ttry {\n\t\t\t\toption = JOptionPane.showConfirmDialog(null,\n\t\t\t\t\t\tStrings.InstallerUpdatePrompt,\n\t\t\t\t\t\t\tStrings.InstallerUpdateTitle,\n\t\t\t\t\t\t\tJOptionPane.OK_CANCEL_OPTION,\n\t\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\t\t} catch (Exception ex) {\n\t\t\t\t// system does not have UI\n\t\t\t\toption = JOptionPane.OK_OPTION;\n\t\t\t}\n\t\t\tif (option == JOptionPane.OK_OPTION) {\n\t\t\t\t\tString downloadedJarFile = performDownload();\n\t\t\t\t\tif (downloadedJarFile != null) {\n\t\t\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Returns the timestamp of yarta.jar from Internet.\n\t * \n\t * @return\n\t */\n\tprivate long getLastModifiedRemote() {\n\t\tlong lastModified = 0;\n\t\ttry {\n\t\t\tURL url = new URL(Strings.DownloaderYartaLink);\n\t\t\tURLConnection conn = url.openConnection();\n\t\t\tlastModified = conn.getLastModified();\n\t\t} catch (Exception ex) {\n\t\t}\n\t\treturn lastModified;\n\t}\n\t/**\n\t * Checks for updates, and if there are any, asks users and update.\n\t * Returns false otherwise.\n\t * \n\t * @return true/false\n\t */\n\tpublic boolean checkAndUpdate() {\n\t\tlong lastModifiedLocal = new File(installedJarPath).lastModified();\n\t\tlong lastModifiedRemote = getLastModifiedRemote();\n\t\tif (lastModifiedRemote > lastModifiedLocal) {\n\t\t\tint option = 0;\n\t\t\ttry {\n\t\t\t\toption = JOptionPane.showConfirmDialog(null,\n\t\t\t\t\t\t\tStrings.InstallerUpdatePrompt,\n\t\t\t\t\t\t\tStrings.InstallerUpdateTitle,\n\t\t\t\t\t\t\tJOptionPane.OK_CANCEL_OPTION,\n\t\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\t\t} catch (Exception ex) {\n\t\t\t\t// system does not have UI\n\t\t\t\toption = JOptionPane.OK_OPTION;\n\t\t\t}\n\t\t\tif (option == JOptionPane.OK_OPTION) {\n\t\t\t\tString downloadedJarFile = performDownload();\n\t\t\t\tif (downloadedJarFile != null) {\n\t\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Returns the timestamp of yarta.jar from Internet.\n\t * \n\t * @return\n\t */\n\tprivate long getLastModifiedRemote() {\n\t\tlong lastModified = 0;\n\t\ttry {\n\t\t\tURL url = new URL(Strings.DownloaderYartaLink);\n\t\t\tURLConnection conn = url.openConnection();\n\t\t\tlastModified = conn.getLastModified();\n\t\t} catch (Exception ex) {\n\t\t}\n\t\treturn lastModified;\n\t}\n\t/**\n\t * Checks for updates, and if there are any, asks users and update.\n\t * Returns false otherwise.\n\t * \n\t * @return true/false\n\t */\n\tpublic boolean checkAndUpdate() {\n\t\tlong lastModifiedLocal = new File(installedJarPath).lastModified();\n\t\tlong lastModifiedRemote = getLastModifiedRemote();\n\t\tif (lastModifiedRemote > lastModifiedLocal) {\n\t\t\tint option = 0;\n\t\t\ttry {\n\t\t\t\toption = JOptionPane.showConfirmDialog(null,\n\t\t\t\t\t\tStrings.InstallerUpdatePrompt,\n\t\t\t\t\t\tStrings.InstallerUpdateTitle,\n\t\t\t\t\t\t\tJOptionPane.OK_CANCEL_OPTION,\n\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\t\t} catch (Exception ex) {\n\t\t\t\t// system does not have UI\n\t\t\t\toption = JOptionPane.OK_OPTION;\n\t\t\t}\n\t\t\tif (option == JOptionPane.OK_OPTION) {\n\t\t\t\tString downloadedJarFile = performDownload();\n\t\t\t\tif (downloadedJarFile != null) {\n\t\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Returns the timestamp of yarta.jar from Internet.\n\t * \n\t * @return\n\t */\n\tprivate long getLastModifiedRemote() {\n\t\tlong lastModified = 0;\n\t\ttry {\n\t\t\tURL url = new URL(Strings.DownloaderYartaLink);\n\t\t\tURLConnection conn = url.openConnection();\n\t\t\tlastModified = conn.getLastModified();\n\t\t} catch (Exception ex) {\n\t\t}\n\t\treturn lastModified;\n\t}\n\t/**\n\t * Checks for updates, and if there are any, asks users and update.\n\t * Returns false otherwise.\n\t * \n\t * @return true/false\n\t */\n\tpublic boolean checkAndUpdate() {\n\t\tlong lastModifiedLocal = new File(installedJarPath).lastModified();\n\t\tlong lastModifiedRemote = getLastModifiedRemote();\n\t\tif (lastModifiedRemote > lastModifiedLocal) {\n\t\t\tint option = 0;\n\t\t\ttry {\n\t\t\t\toption = JOptionPane.showConfirmDialog(null,\n\t\t\t\t\t\tStrings.InstallerUpdatePrompt,\n\t\t\t\t\t\tStrings.InstallerUpdateTitle,\n\t\t\t\t\t\t\tJOptionPane.OK_CANCEL_OPTION,\n\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\t\t} catch (Exception ex) {\n\t\t\t\t// system does not have UI\n\t\t\t\toption = JOptionPane.OK_OPTION;\n\t\t\t}\n\t\t\tif (option == JOptionPane.OK_OPTION) {\n\t\t\t\tString downloadedJarFile = performDownload();\n\t\t\t\tif (downloadedJarFile != null) {\n\t\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Returns the timestamp of yarta.jar from Internet.\n\t * \n\t * @return\n\t */\n\tprivate long getLastModifiedRemote() {\n\t\tlong lastModified = 0;\n\t\ttry {\n\t\t\tURL url = new URL(Strings.DownloaderYartaLink);\n\t\t\tURLConnection conn = url.openConnection();\n\t\t\tlastModified = conn.getLastModified();\n\t\t} catch (Exception ex) {\n\t\t}\n\t\treturn lastModified;\n\t}\n\t/**\n\t * Checks for updates, and if there are any, asks users and update.\n\t * Returns false otherwise.\n\t * \n\t * @return true/false\n\t */\n\tpublic boolean checkAndUpdate() {\n\t\tlong lastModifiedLocal = new File(installedJarPath).lastModified();\n\t\tlong lastModifiedRemote = getLastModifiedRemote();\n\t\tif (lastModifiedRemote > lastModifiedLocal) {\n\t\t\tint option = 0;\n\t\t\ttry {\n\t\t\t\toption = JOptionPane.showConfirmDialog(null,\n\t\t\t\t\t\t\tStrings.InstallerUpdatePrompt,\n\t\t\t\t\t\t\tStrings.InstallerUpdateTitle,\n\t\t\t\t\t\t\tJOptionPane.OK_CANCEL_OPTION", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tcontext = IntPtr.Zero;\n\t\t\t\twindow.Dispose();\n\t\t}\n\t\tvoid SetThreadAffinity()\n\t\t{\n\t\t\tif (SDL.SDL_SetThreadPriority(SDL.SDL_THREAD_PRIORITY_HIGHEST) < 0)\n\t\t\t\tthrow new InvalidOperationException(\"Can not set thread priority. (Error: {0})\".F(SDL.SDL_GetError()));\n\t\t}\n\t\tvoid VerifyThreadAffinity()\n\t\t{\n\t\t\tif (SDL.SDL_GetThreadPriority() != SDL.SDL_THREAD_PRIORITY_HIGHEST)\n\t\t\t\tthrow new InvalidOperationException(\"Thread is not running at highest priority. (Error: {0})\".F(SDL.SDL_GetError()));\n\t\t}\n\t\tvoid OpenGL.CheckGLError()\n\t\t{\n\t\t\tif (OpenGL.glGetError() != OpenGL.GL_NO_ERROR)\n\t\t\t\t\tthrow new InvalidOperationException(\"OpenGL error. (Error: {0})\".F(OpenGL.glGetError()));\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       (projected onto the *y* axis).\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_in", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_internal, m_type);\n        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_internal, m_type);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        if (m_toStringRepr == null) {\n            m_toStringRepr = ReflectionToStringBuilder.toString(this, ToStringStyle.SHORT_PREFIX_STYLE);\n        }\n        return m_toStringRepr;\n    }\n}", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 } else {\n                    accountIdAccountMap.put(walrusObject.getOwnerId(), owningAccount);\n                  }\n                } catch (AuthException e) { // In case the account is deleted, transfer the ownership to eucalyptus admin\n                 ", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _intialized += value; }\n            remove { _intialized -= value; }\n        }\n        public event EventHandler FoldersInvalidated\n        {\n            add { _folderInvalidateTimer = new Timer(InvalidateFolders, null, 1000, 100); }\n            remove { _folderInvalidateTimer.Dispose(); }\n        }\n        public event EventHandler FoldersChanged\n        {\n            add { _folderSystem.Folders.FoldersChanged += FoldersChangedEventHandler; }\n            remove { _folderSystem.Folders.FoldersChanged -= FoldersChangedEventHandler; }\n        }\n        public event EventHandler FoldersAdded\n        {\n            add { _folderSystem.Folders.FoldersAdded += FoldersAddedEventHandler; }\n            remove { _folderSystem.Folders.FoldersAdded -= FoldersAddedEventHandler; }\n        }\n        public event EventHandler FoldersRemoved\n        {\n            add { _folderSystem.Folders.FoldersRemoved += FoldersRemovedEventHandler; }\n            remove { _folderSystem.Folders.FoldersRemoved -= FoldersRemovedEventHandler; }\n        }\n        public event EventHandler FolderPropertiesChanged\n        {\n            add { _folderSystem.FolderPropertiesChanged += FolderPropertiesChangedEventHandler; }\n            remove { _folderSystem.FolderPropertiesChanged -= FolderPropertiesChangedEventHandler; }\n        }\n        public event EventHandler FolderAdded\n        {\n            add { _folderSystem.Folders.FolderAdded += FolderAddedEventHandler; }\n            remove { _folderSystem.Folders.FolderAdded -= FolderAddedEventHandler; }\n        }\n        public event EventHandler FolderRemoved\n        {\n            add { _folderSystem.Folders.FolderRemoved += FolderRemovedEventHandler; }\n            remove { _folderSystem.Folders.FolderRemoved -= FolderRemovedEventHandler; }\n        }\n        #endregion\n        #region Private Methods\n        private void SelectFolder(FolderTreeNode folderTreeNode)\n        {\n\t\t\tif (folderTreeNode == null)\n\t\t\t\treturn;\n\t\t\tif (folderTreeNode.Folder == null)\n\t\t\t\treturn;\n\t\t\tif (folderTreeNode.Folder.IsRoot)\n\t\t\t\treturn;\n\t\t\tif (_selectedTreeNode != null && _selectedTreeNode.Folder == folderTreeNode.Folder)\n\t\t\treturn;\n\t\t\t_selectedTreeNode = folderTreeNode;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_selectedTreeNode.Folder.Selected = true;\n\t\t\t_", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        command.setIsImportAsNewEntity(isImportAsNewEntity);\n        CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage.VARIABLE_VALUE_NOT_VALID,\n                EngineMessage", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint)(2));\n\t\t\tw10.LeftAttach = ((uint)(1));\n\t\t\tw10.RightAttach = ((uint)(2));\n\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t\t\tthis.spinbuttonCpuPercent = new global::Gtk.SpinButton (1D, 100D, 1D);\n\t\t\tthis.spinbuttonCpuPercent.CanFocus = true;\n\t\t\tthis.spinbuttonCpuPercent.Name = \"spinbuttonCpuPercent\";\n\t\t\tthis.spinbuttonCpuPercent.Adjustment.PageIncrement = 1D;\n\t\t\tthis.spinbuttonCpuPercent.ClimbRate = 1D;\n\t\t\tthis.spinbuttonCpuPercent.Numeric = true;\n\t\t\tthis.spinbuttonCpuPercent.Value = 1D;\n\t\t\tthis.table1.Add (this.spinbuttonCpuPercent);\n\t\t\tglobal::Gtk.Table.TableChild w11 = ((global::Gtk.Table.TableChild)(this.table1 [this.spinbuttonCpuPercent]));\n\t\t\tw11.TopAttach = ((uint)(2));\n\t\t\tw11.BottomAttach = ((uint)(3));\n\t\t\t\tw11.LeftAttach = ((uint)(1));\n\t\t\t\tw11.RightAttach = ((uint)(2));\n\t\t\tw11.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw11.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t\t\tthis.GtkAlignment1 = new global::Gtk.Alignment (0F, 0F, 1F, 1F);\n\t\t\tthis.GtkAlignment1.Name = \"GtkAlignment1\";\n\t\t\tthis.GtkAlignment1.LeftPadding = ((uint)(12));\n\t\t\tthis.GtkAlignment1.RightPadding = ((uint)(12));\n\t\t\t// Container child GtkAlignment1.Gtk.Container+ContainerChild\n\t\t\t", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "           environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n                self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sTOT", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t{\n\t\t\treturn DefineMethod(name, attributes, callConv, parameterTypes, requiredCustomModifiers, optionalCustomModifiers);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t{\n\t\t\treturn DefineMethod(name, attributes, callConv, parameterTypes, requiredCustomModifiers, optionalCustomModifiers, null);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers, Type[] returnType)\n\t\t{\n\t\t\treturn DefineMethod(name, attributes, callConv, parameterTypes, requiredCustomModifiers, optionalCustomModifiers, returnType, null);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers, Type[] returnType, Type[][] genericParamConstraints)\n\t\t{\n\t\t\treturn DefineMethod(name, attributes, callConv, parameterTypes, requiredCustomModifiers, optionalCustomModifiers, returnType, genericParamConstraints, null);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers, Type[] returnType, Type[][] genericParamConstraints, Type[][][] optionalGenericParamConstraints)\n\t\t{\n\t\t\treturn DefineMethod(name, attributes, callConv, parameterTypes, requiredCustomModifiers, optionalCustomModifiers, returnType, genericParamConstraints, optionalGenericParamConstraints, null);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers, Type[] returnType, Type[][] genericParamConstraints, Type[][][] optionalGenericParamConstraints, Type[][][] customAttributeDeclarations)\n\t\t{\n\t\t\treturn DefineMethod(name, attributes, callConv, parameterTypes, requiredCustomModifiers, optionalCustomModifiers, returnType, genericParamConstraints, optionalGenericParamConstraints, customAttributeDeclarations);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers, Type[] returnType, Type[][] genericParamConstraints, Type[][] optionalGenericParamConstraints, Type[][][] customAttributeDeclarations, Type[][][][] genericParamConstraintCustomAttributeDeclarations)\n\t\t{\n\t\t\treturn DefineMethod(name, attributes, callConv, parameterTypes, requiredCustomModifiers, optionalCustomModifiers, returnType, genericParamConstraints, optionalGenericParamConstraints, customAttributeDeclarations, genericParamConstraintCustomAttributeDeclarations);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers, Type[] returnType, Type[][] genericParamConstraints, Type[][] optionalGenericParamConstraints, Type[][][] customAttributeDeclarations, Type[][][][] genericParamConstraintCustomAttributeDeclarations, Type[][][][] securityDeclarations)\n\t\t{\n\t\t\treturn DefineMethod(name, attributes, callConv, parameterTypes, requiredCustomModifiers, optionalCustomModifiers, returnType, genericParamConstraints, optionalGenericParamConstraints, customAttributeDeclarations, genericParamConstraintCustomAttributeDeclarations, securityDeclarations);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers, Type[] returnType, Type[][] genericParamConstraints, Type[][] optionalGenericParamConstraints, Type[][][] customAttributeDeclarations, Type[][][][] genericParamConstraintCustomAttributeDeclarations, Type[][][][] securityDeclarations, Type[][][][] typeSecurityDeclarations)\n\t\t{\n\t\t\treturn DefineMethod(name, attributes, callConv, parameterTypes, requiredCustomModifiers, optionalCustomModifiers, returnType, genericParamConstraints, optionalGeneric", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder().MergeFrom(prototype);\n    }\n    protected Builder ThisBuilder {\n      get { return this; }\n    }\n    public Builder ToBuilder() {\n      Builder builder = new Builder();\n      builder.mergeFrom(this);", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = getVertex(getVertIndex(i, x));\n                else\nNext line of code:\n                    vertices[x] = getVertex(getVertIndex(i, x));\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <code>i</code> is an invalid quad index,\n     * nothing happens.\n     * \n     * @param i\n     * @param vertices\n     */\n    public void getQuad(int i, FloatBuffer vertices) {\n        if (i < getQuadCount() && i >= 0) {\n            for (int x = 0; x < 4; x++) {\n                if (vertices == null)\nNext line of code:\n                    vertices.put(getVertex(getVertIndex(i, x)));\n                else\nNext line of code:\n                    vertices.put(getVertex(getVertIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <code>i</code> is an invalid quad index,\n     * nothing happens.\n     * \n     * @param i\n     * @param vertices\n     */\n    public void getQuad(int i, FloatBuffer vertices) {\n        if (i < getQuadCount() && i >= 0) {\n            for (int x = 0; x < 4; x++) {\n                if (vertices == null)\nNext line of code:\n                    vertices.put(getVertex(getVertIndex(i, x)));\n                else\nNext line of code:\n                    vertices.put(getVertex(getVertIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <code>i</code> is an invalid quad index,\n     * nothing happens.\n     * \n     * @param i\n     * @param vertices\n     */\n    public void getQuad(int i, FloatBuffer vertices, FloatBuffer normal) {\n        if (i < getQuadCount() && i >= 0) {\n            for (int x = 0; x < 4; x++) {\n                if (vertices == null)\nNext line of code:\n                    vertices.put(getVertex(getVertIndex(i, x)));\n                else\nNext line of code:\n                    vertices.put(getVertex(getVertIndex(i, x)));\n                if (normal == null)\nNext line of code:\n                    normal.put(getNormal(getVertIndex(i, x)));\n                else\nNext line of code:\n                    normal.put(getNormal(getVertIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <code>i</code> is an invalid quad index,\n     * nothing happens.\n     * \n     * @param i\n     * @param vertices\n     */\n    public void getQuad(int i, FloatBuffer vertices, FloatBuffer color) {\n        if (i < getQuadCount() && i >= 0) {\n            for (int x = 0; x < 4; x++) {\n                if (vertices == null)\nNext line of code:\n                    vertices.put(getVertex(getVertIndex(i, x)));\n                else\nNext line of code:\n                    vertices.put(getVertex(getVertIndex(i, x)));\n                if (color == null)\nNext line of code:\n                    color.put(getColor(getVertIndex(i, x)));\n                else\nNext line of code:\n                    color.put(getColor(getVertIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <code>i</code> is an invalid quad index,\n     * nothing happens.\n     * \n     * @param i\n     * @param vertices\n     */\n    public void getQuad(int i, FloatBuffer vertices, FloatBuffer color,\n            FloatBuffer normal) {\n        if (i < getQuadCount() && i >= 0) {\n            for (int x = 0; x < 4; x++) {\n                if (vertices == null)\nNext line of code:\n                    vertices.put(getVertex(getVertIndex(i, x)));\n                else\nNext line of code:\n                    vertices.put(getVertex(getVertIndex(i, x)));\n                if (color == null)\nNext line of code:\n                    color.put(getColor(getVertIndex(i, x)));\n                else\nNext line of code:\n                    color.put(getColor(getVertIndex(i, x)));\n                if (normal == null)\nNext line of code:\n                    normal.put(getNormal(getVertIndex(i, x)));\n                else\nNext line of code:\n                    normal.put(getNormal(getVertIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <code>i</code> is an invalid quad index,\n     * nothing happens.\n     * \n     * @param i\n     * @param vertices\n     */\n    public void getQuad(int i, FloatBuffer vertices, FloatBuffer color,\n            FloatBuffer normal, TexCoords coords) {\n        if (i < getQuadCount() && i >= 0) {\n            for (int x = 0; x < 4; x++) {\n                if (vertices == null)\nNext line of code:\n                    vertices.put(getVertex(getVertIndex(i, x)));\n                else\nNext line of code:\n                    vertices.put(getVertex(getVertIndex(i, x)));\n                if (color == null)\nNext line of code:\n                    color.put(getColor(getVertIndex(i, x)));\n                else\nNext line of code:\n                    color.put(getColor(getVertIndex(i, x)));\n                if (normal == null)\nNext line of code:\n                    normal.put(getNormal(getVertIndex(i, x)));\n                else\nNext line of code:\n                    normal.put(getNormal(getVertIndex(i, x)));\n                if", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (showDateData.equals(\"true\")) {\n            result.add(\"categoryDateCreated\");\n        }\n        return result;\n    }\n    /**\n     * Returns the page type.<p>\n     *\n     * @return the page type\n     */\n   ", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\tdisplayText.text = inputField.text;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t\tdisplayText.text = inputText.text;\n\t\t\t}\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    #endregion\n    //--------------------------------------------------------------------------------\n  }\n}\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser != string.Empty)\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            if (Users.Count > 0)\n            {\n                // send emails to the users\n                foreach (string user in Users)\n                {\n                    SendEmailForUser(user);\n                }\n            }\n        }\n    }\n}", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\nNext line of code:\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (directions != ScrollDirection.None)\n\t\t\t\treturn directions;\n\t\t\tif (Viewport.LastMousePos.X < EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Left;\n\t\t\t\tif (Viewport.LastMousePos.Y < EdgeCornerScrollThreshold)\n\t\t\t\t\tdirections |= ScrollDirection.Up;\n\t\t\t\tif (Viewport.LastMousePos.X >= Game.Renderer.Resolution.Width - EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeCornerScrollThreshold)\n\t\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n\t\t}\n\t}\n}", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           if (CriteriaCodesUsed.Count > 1)\n            {\n                ValidationColumn = DiscountTable.Columns[PcDiscountTable.ColumnDiscountCriteriaCode];\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult(this", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __str__(self):\n        return \"PayloadRequirements(packages=%s, groups=%s)\" % (self.packages, self.groups)\n    def __repr__(self):\n        return 'PayloadRequirements(packages=%s, groups=%s)' % (self.packages, self.groups)\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\treturn Enabled && _copyOption == CopyOption.CopyCustom;\n\t\t}\n\t\t}\n\t\t#endregion\n\t\t#region IImageViewer\n\t\tpublic void CopyToClipboard()\n\t\t{\n\t\t\tif (this", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\t\tget {\n\t\t\t\t\treturn dataDir;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation sourceLineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (sourceLineAnnotation.getLineNumber() < 0) {\n                    throw new BugInstanceException(\"Line number must be >= 0\");\n                }\n            }\n        }\n    }\n}", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                        }\n                    }\n                }\n            }\n        private void JungleClear()\n        {", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height)\n\t{\n\t\treturn get(x, y, width, height, DEFAULT_FILL, DEFAULT_ANCHOR);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill)\n\t{\n\t\treturn get(x, y, width, height, fill, DEFAULT_ANCHOR);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\t\tchar fill, String anchor)\n\t{\n\t\treturn get(x, y, width, height, fill, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill)\n\t{\n\t\treturn get(x, y, width, height, fill, DEFAULT_ANCHOR);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill, String anchor)\n\t{\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\t\tgetAnchor(anchor), getFill(fill),\n\t\t\t\tnew Insets(2, 2, 2, 2), 0, 0);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill, String anchor)\n\t{\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\t\tgetAnchor(anchor), getFill(fill),\n\t\t\t\tnew Insets(2, 2, 2, 2), 0, 0);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill)\n\t{\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\t\tgetFill(fill), new Insets(2, 2, 2, 2), 0, 0);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill, String anchor)\n\t{\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\t\tgetAnchor(anchor), getFill(fill),\n\t\t\t\tnew Insets(2, 2, 2, 2), 0, 0);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill, String anchor)\n\t{\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\t\tgetAnchor(anchor), getFill(fill),\n\t\t\t\t\tnew Insets(2, 2, 2, 2), 0, 0);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill)\n\t{\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\t\tgetFill(fill), new Insets(2, 2, 2, 2), 0, 0);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill, String anchor)\n\t{\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\t\tgetAnchor(anchor), getFill(fill),\n\t\t\t\tnew Insets(2, 2, 2, 2), 0, 0);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill, String anchor)\n\t{\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\t\tgetAnchor(anchor), getFill(fill),\n\t\t\t\tnew Insets(2, 2, 2, 2), 0, 0);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill, String anchor)\n\t{\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\t\tgetAnchor(anchor), getFill(fill),\n\t\t\t\tnew Insets(2, 2, 2, 2), 0, 0);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill)\n\t{\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\t\tgetFill(fill), new Insets(2, 2, 2, 2), 0, 0);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill, String anchor)\n\t{\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\t\tgetAnchor(anchor), getFill(fill),\n\t\t\t\tnew Insets(2, 2, 2, 2), 0, 0);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill, String anchor)\n\t{\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\t\tgetAnchor(anchor), getFill(fill),\n\t\t\t\tnew Insets(2, 2, 2, 2), 0, 0);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:\n            return {}\n        date = datetime.datetime(int(year), int(month), int(day), 12, 0, 0, 0, tzinfo=self.tz)\n        pollen = re.findall(r\"<tns:Ort>([^<]+)</tns:Ort>\\n *<tns:Wert>([^<]+)</tns:Wert>\", fb)\n        if len(pollen) == 1:\n            forecast[date] = int(pollen[0])\n        return forecast\n    def weather(self, region, location):\n        directory = 'gds/specials/warnings/FG'\n        forecast = {}\n        for frame in ['12', '36', '60']:\n            filename = \"{0}/{1}_{2}.xml\".format(directory, region, frame)\n            fb = self._retr_file(filename)\n            try:\n                year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n            except:\n                continue\n            date = datetime.datetime(int(year), int(month), int(day), 12, 0, 0, 0, tzinfo=self.tz)\n            forecast[date] = re.findall(r\"<tns:Ort>([^<]+)</tns:Ort>\\n *<tns:Wert>([^<]+)</tns:Wert>\", fb)\n        return forecast\n    def sun(self, region, location):\n        directory = 'gds/specials/warnings/FG'\n        forecast = {}\n        for frame in ['12', '36', '60']:\n            filename = \"{0}/{1}_{2}.xml\".format(directory, region, frame)\n            fb = self._retr_file(filename)\n            try:\n                year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n            except:\n                continue\n            date = datetime.datetime(int(year), int(month), int(day), 12, 0, 0, 0, tzinfo=self.tz)\n            forecast[date] = re.findall(r\"<tns:Ort>([^<]+)</tns:Ort>\\n *<tns:Wert>([^<]+)</tns:Wert>\", fb)\n        return forecast\n    def wind(self, region, location):\n        directory = 'gds/specials/warnings/FG'\n        forecast = {}\n        for frame in ['12', '36', '60']:\n            filename = \"{0}/{1}_{2}.xml\".format(directory, region, frame)\n            fb = self._retr_file(filename)\n            try:\n                year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n            except:\n                continue\n            date = datetime.datetime(int(year), int(month), int(day), 12, 0, 0, 0, tzinfo=self.tz)\n            forecast[date] = re.findall(r\"<tns:Ort>([^<]+)</tns:Ort>\\n *<tns:Wert>([^<]+)</tns:Wert>\", fb)\n        return forecast\n    def rain(self, region, location):\n        directory = 'gds/specials/warnings/FG'\n        forecast = {}\n        for frame in ['12', '36', '60']:\n            filename = \"{0}/{1}_{2}.xml\".format(directory, region, frame)\n            fb = self._retr_file(filename)\n            try:\n                year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n            except:\n                continue\n            date = datetime.datetime(int(year), int(month), int(day), 12, 0, 0, 0, tzinfo=self.tz)\n            forecast[date] = re.findall(r\"<tns:Ort>([^<]+)</tns:Ort>\\n *<tns:Wert>([^<]+)</tns:Wert>\", fb)\n        return forecast\n    def temperature(self, region, location):\n        directory = 'gds/specials/warnings/FG'\n        forecast = {}\n        for frame in ['12', '36', '60']:\n            filename = \"{0}/{1}_{2}.xml\".format(directory, region, frame)\n            fb = self._retr_file(filename)\n            try:\n                year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n            except:\n                continue\n            date = datetime.datetime(int(year), int(month), int(day), 12, 0, 0, 0, tzinfo=self.tz)\n            forecast[date] = re.findall(r\"<tns:Ort>([^<]+)</tns:Ort>\\n *<tns:Wert>([^<]+)</tns:Wert>\", fb)\n        return forecast\n    def humidity(self, region, location):\n        directory = 'gds/specials/warnings/FG'\n        forecast = {}\n        for frame in ['12',", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        clean_field_model_definitions()\n    def test_field_name_model_based_override(self):\n        \"\"\"JSONAlchemy - field name model based override\"\"\"\n        clean_field_model_definitions()\n        field_model_def = Field_parser.field_definition_model_based(\n            'title', 'test_model', 'testsuite')\n        field_def = Field_parser.field_definitions('testsuite')['title_title']\n        self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        clean_field_model_definitions()\n    def test_field_name_model_based_override_with_extras(self):\n        \"\"\"JSONAlchemy - field name model based override with extras\"\"\"\n        clean_field_model_definitions()\n        field_model_def = Field_parser.field_definition_model_based(\n            'title', 'test_model', 'testsuite')\n        field_def = Field_parser.field_definitions('testsuite')['title_title']\n        self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        clean_field_model_definitions()\n    def test_field_name_model_based_override_with_extras_and_override(self):\n        \"\"\"JSONAlchemy - field name model based override with extras and override\"\"\"\n        clean_field_model_definitions()\n        field_model_def = Field_parser.field_definition_model_based(\n            'title', 'test_model', 'testsuite')\n        field_def = Field_parser.field_definitions('testsuite')['title_title']\n        self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        clean_field_model_definitions()\n    def test_field_name_model_based_override_with_extras_and_override_and_extras(self):\n        \"\"\"JSONAlchemy - field name model based override with extras and override\n        and extras\"\"\"\n        clean_field_model_definitions()\n        field_model_def = Field_parser.field_definition_model_based(\n            'title', 'test_model', 'testsuite')\n        field_def = Field_parser.field_definitions('testsuite')['title_title']\n        self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        clean_field_model_definitions()\n    def test_field_name_model_based_override_with_extras_and_override_and_extras_and_override(self):\n        \"\"\"JSONAlchemy - field name model based override with extras and override\n        and extras and override\"\"\"\n        clean_field_model_definitions()\n        field_model_def = Field_parser.field_definition_model_based(\n            'title', 'test_model', 'testsuite')\n        field_def = Field_parser.field_definitions('testsuite')['title_title']\n        self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        clean_field_model_definitions()\n    def test_field_name_model_based_override_with_extras_and_override_and_extras_and_override_and_extras(self):\n        \"\"\"JSONAlchemy - field name model based override with extras and override\n        and extras and override and extras\"\"\"\n        clean_field_model_definitions()\n        field_model_def = Field_parser.field_definition_model_based(\n            'title', 'test_model', 'testsuite')\n        field_def = Field_parser.field_definitions('testsuite')['title_title']\n        self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        clean_field_model_definitions()\n    def test_field_name_model_based_override_with_extras_and_override_and_extras_and_override_and_extras_and_override(self):\n        \"\"\"JSONAlchemy - field name model based override with extras and override\n        and extras and override and extras and override\"\"\"\n        clean_field_model_definitions()\n        field_model_def = Field_parser.field_definition_model_based(\n            'title', 'test_model', 'testsuite')\n        field_def = Field_parser.field_definitions('testsuite')['title_title']\n        self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        clean_field_model_definitions()\n    def test_field_name_model_based_override_with_extras_and_override_and_extras_and_override_and_extras_and_override_and_extras(self):\n        \"\"\"JSONAlchemy - field name model based override with extras and override\n        and extras and override and extras and override and extras and override\"\"\"\n        clean_field_model_definitions()\n        field_model_def = Field_parser.field_definition_model_based(\n            'title', 'test_model', 'testsuite')\n        field_def = Field_parser.field_definitions('testsuite')['title_title']\n        self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        clean_field_model_definitions()\n    def test_field_name_model_based_override_with_extras_and_override_and_extras_and_override_and_extras_and_override_and_ext", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new object[] {\"E1\", 10L});\n                env.UndeployAll();\n            }\n        }\n        internal class InfraWideningSceneTwo : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public InfraWidening", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "       c = self.copy()\n        return c.__imul__(other)\n    \n    def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n       ", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    def save_embedded_field(self, cr, uid, el, context=None):\n        Model = self.pool[el.get('data-oe-model')]\n        field = el.get('data-oe-field')\n        converter = self.pool['website.qweb'].get_converter_for(\n            el.get('data-oe-type'))\n        value = converter.from_html(cr, uid, Model, field, el)\n        if value is not None:\n            # TODO: batch writes?\n            Model.write(cr, uid, [int(el.get('data-oe-id'))], {\n                field: value\n            }, context=context)\n\n    def to_field_ref(self, cr, uid, el, context=None):\n        # filter out meta-information inserted in the document\n        attributes = dict((k, v) for k, v in el.items()\n                               if not k.startswith('data-oe-'))\n        attributes['t-field'] = el.get('data-oe-expression')\n        out = html.html_parser.makeelement(el.tag, attrib=attributes)\n        out.tail = el.tail\n        return out\n\n    def replace_arch_section(self, cr, uid, res_id, xpath, arch, context=None):\n        # the root of the arch section shouldn't actually be replaced as it's\n        # not really editable itself, only the content truly is editable.\n        [view] = self.browse(cr, uid, [res_id], context=context)\n        arch = etree.fromstring(view.arch.encode('utf-8'))\n        # => get the replacement root\n        if not xpath:\n            root = arch\n        else:\n            # ensure there's only one match\n            [root] = arch.xpath(xpath)\n        root.text = arch.text\n        root.tail = arch.tail\n        # replace all children\n        del root[:]\n        for child in arch:\n            root.append(copy.deepcopy(child))\n        return arch\n\n    def render(self, cr, uid, id_or_xml_id, values=None, engine='ir.qweb', context=None):\n        if request and getattr(request, 'website_enabled', False):\n            engine='website.qweb'\n            if isinstance(id_or_xml_id, list):\n                id_or_xml_id = id_or_xml_id[0]\n            if not context:\n                context = {}\n            qcontext = dict(\n                context.copy(),\n                website=request.website,\n                url_for=website.url_for,\n                slug=website.slug,\n                res_company=request.website.company_id,\n                user_id=self.pool.get(\"res.users\").browse(cr, uid, uid),\n                translatable=context.get('lang') != request.website.default_lang_code,\n                editable=request.website.is_publisher(),\n                menu_data=self.pool['ir.ui.menu'].load_menus_root(cr, uid, context=context) if request.website.is_user() else None,\n            )\n            # add some values\n            if values:\n                qcontext.update(values)\n            values = qcontext\n        return super(view, self).render(cr, uid, id_or_xml_id, values=values, engine=engine, context=context)\n\n    def _pretty_arch(self, arch):\n        # remove_blank_string does not seem to work on HTMLParser, and\n        # pretty-printing with lxml more or less requires stripping\n        # whitespace: http://lxml.de/FAQ.html#why-doesn-t-the-pretty-print-option-reformat-my-xml-output\n        arch_no_whitespace = etree.fromstring(\n            etree.tostring(arch, encoding='utf-8'),\n            parser=etree.XMLParser(encoding='utf-8', remove_blank_text=True))\n        return etree.tostring(\n            arch_no_whitespace, encoding='unicode', pretty_print=True)\n\n    def save(self, cr, uid, res_id, value, xpath=None, context=None):\n        res_id = int(res_id)\n        arch_section = html.fromstring(\n            value, parser=html.HTMLParser(encoding='utf-8'))\n        if xpath is None:\n            # value is an embedded field on its own, not a view section\n            self.save_embedded_field(cr, uid, arch_section, context=context)\n            return\n        for el in self.extract_embedded_fields(cr, uid, arch_section, context=context):\n            self.save_embedded_field(cr, uid, el, context=context)\n            # transform embedded field back to t-field\n            el.getparent().replace(el, self.to_field_ref(cr, uid, el, context=context))\n        arch = self.replace_arch_section(cr, uid, res_id, xpath, arch_section, context=context)\n        self.write(cr, uid, res_id, {\n            'arch': self._pretty_arch(arch)\n        }, context=context)\n\n    def save_embedded_field(self, cr, uid, el, context=None):\n        Model = self.pool[el.get('data-oe-model')]\n        field = el.get('data-oe-field')\n        converter = self.pool['website.qweb'].get_converter_for(\n            el.get('data-oe-type'))\n        value = converter.from_html(cr, uid, Model, field, el)\n        if value is not None:\n            # TODO: batch writes?\n            Model.write(cr, uid, [int(el.get('data-oe-id'))], {\n                field: value\n            }, context=context)\n\n    def to_field_ref(self, cr, uid, el, context=None):\n        # filter out meta-information inserted in the document\n        attributes = dict((k, v) for k, v in el.items()\n                             if not k.startswith('data-oe-'))\n        attributes['t-field'] = el.get('data-oe-expression')\n        out = html.html_parser.makeelement(el.tag, attrib=attributes)\n        out.tail = el.tail\n        return out\n\n    def replace_arch_section(self, cr, uid, res_id, xpath, arch, context=None):\n        # the root of the arch section shouldn't actually be replaced as it's\n        # not really editable itself, only the content truly is editable.\n        [view] = self.browse(cr, uid, [res_id], context=context)\n        arch = etree.fromstring(view.arch.encode('utf-8'))\n        # => get the replacement root\n        if not xpath:\n            root = arch\n        else:\n            # ensure there", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n        }\n        else if (oldValue != null) {\n            c.removeClientProperty(BasicHTML.propertyKey);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n    }\n    /**\n     * Returns the key used to store the HTML renderer in the client\n     * properties of a JComponent.\n     *\n     * @return the key used to store the HTML renderer in the\n     *         client properties of a JComponent\n     */\n    public static String propertyKey = \"html\";\n    /**\n     * Returns the key used to store the HTML renderer in the client\n     * properties of a JComponent.\n     *\n     * @return the key used to store the HTML renderer in the\n     *         client properties of a JComponent\n     */\n    public static String htmlDisable = \"htmlDisable\";\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory2() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory3() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory4() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory5() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory6() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory7() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory8() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory9() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory10() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory11() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory12() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory13() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory14() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory15() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory16() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory17() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory18() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory19() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory20() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory21() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory22() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory23() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory24() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory25() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory26() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory27() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory28() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory29() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer factory.\n     *\n     * @return the HTML renderer factory\n     */\n    public static BasicEditorKit.Factory getFactory30() {\n        return BasicEditorKit.getFactory();\n    }\n    /**\n     * Returns the HTML renderer", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert not s.name_is_worker\n    assert not s.name_is_reference\n    assert not s.content_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/html/test.\" + ext + \".html\",\n    ]\n    assert len(items) == len(expected_urls)\n    for item, url in zip(items, expected_urls):\n        assert item.url == url\n        assert item.timeout is None\ndef test_testharness_long_timeout():\n    content = b\"<script src=/resources/testharness.js></script>\"\n    filename = \"html/test.\" + \"htm\"\n    metadata = list(read_script_metadata(BytesIO(content), js_meta_re))\n    assert metadata == [(b\"timeout\", b\"long\")]\n    s = create(\"html/test.\" + \"htm\", contents=content)\n    assert s.name_is_testharness\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert not s.name_is_worker\n    assert not s.name_is_reference\n    assert not s.content_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/html/test.\" + \"htm\" + \".html\",\n    ]\n    assert len(items) == len(expected_urls)\n    for item, url in zip(items, expected_urls):\n        assert item.url == url\n        assert item.timeout == \"long\"\ndef test_testharness_long_timeout_and_manual():\n    content = b\"<script src=/resources/testharness.js></script>\"\n    filename = \"html/test.\" + \"htm\"\n    metadata = list(read_script_metadata(BytesIO(content), js_meta_re))\n    assert metadata == [(b\"timeout\", b\"long\"), (b\"manual\", b\"manual\")]\n    s = create(\"html/test.\" + \"htm\", contents=content)\n    assert s.name_is_testharness\n    assert s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert not s.name_is_worker\n    assert not s.name_is_reference\n    assert not s.content_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/html/test.\" + \"htm\" + \".html\",\n    ]\n    assert len(items) == len(expected_urls)\n    for item, url in zip(items, expected_urls):\n        assert item.url == url\n        assert item.timeout == \"long\"\ndef test_testharness_long_timeout_and_manual_and_visual():\n    content = b\"<script src=/resources/testharness.js></script>\"\n    filename = \"html/test.\" + \"htm\"\n    metadata = list(read_script_metadata(BytesIO(content), js_meta_re))\n    assert metadata == [(b\"timeout\", b\"long\"), (b\"manual\", b\"manual\"), (b\"visual\", b\"visual\")]\n    s = create(\"html/test.\" + \"htm\", contents=content)\n    assert s.name_is_testharness\n    assert s.name_is_manual\n    assert s.name_is_visual\n    assert not s.name_is_multi_global\n    assert not s.name_is_worker\n    assert not s.name_is_reference\n    assert not s.content_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/html/test.\" + \"htm\" + \".html\",\n    ]\n    assert len(items) == len(expected_urls)\n    for item, url in zip(items, expected_urls):\n        assert item.url == url\n        assert item.timeout == \"long\"\ndef test_testharness_long_timeout_and_manual_and_visual_and_multi_global():\n    content = b\"<script src=/resources/testharness.js></script>\"\n    filename = \"html/test.\" + \"htm", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.NamedQueryReference = namedQueryReference;\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQuery)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.NamedQueryReference = namedQueryReference;\n\t\t\tmapping.SqlLoader.NamedQuery = namedQuery;\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQuery, string namedQueryParameter)\n\t\t{\n\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.NamedQueryReference = namedQueryReference;\n\t\t\t\tmapping.SqlLoader.NamedQuery = namedQuery;\n\t\t\tmapping.SqlLoader.NamedQueryParameter = namedQueryParameter;\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQuery, string namedQueryParameter, string namedQueryParameter2)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.NamedQueryReference = namedQueryReference;\n\t\t\tmapping.SqlLoader.NamedQuery = namedQuery;\n\t\t\tmapping.SqlLoader.NamedQueryParameter = namedQueryParameter;\n\t\t\tmapping.SqlLoader.NamedQueryParameter2 = namedQueryParameter2;\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQuery, string namedQueryParameter, string namedQueryParameter2, string namedQueryParameter3)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.NamedQueryReference = namedQueryReference;\n\t\t\tmapping.SqlLoader.NamedQuery = namedQuery;\n\t\t\tmapping.SqlLoader.NamedQueryParameter = namedQueryParameter;\n\t\t\tmapping.SqlLoader.NamedQueryParameter2 = namedQueryParameter2;\n\t\t\tmapping.SqlLoader.NamedQueryParameter3 = namedQueryParameter3;\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQuery, string namedQueryParameter, string namedQueryParameter2, string namedQueryParameter3, string namedQueryParameter4)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.NamedQueryReference = namedQueryReference;\n\t\t\tmapping.SqlLoader.NamedQuery = namedQuery;\n\t\t\tmapping.SqlLoader.NamedQueryParameter = namedQueryParameter;\n\t\t\tmapping.SqlLoader.NamedQueryParameter2 = namedQueryParameter2;\n\t\t\tmapping.SqlLoader.NamedQueryParameter3 = namedQueryParameter3;\n\t\t\tmapping.SqlLoader.NamedQueryParameter4 = namedQueryParameter4;\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQuery, string namedQueryParameter, string namedQueryParameter2, string namedQueryParameter3, string namedQueryParameter4, string namedQueryParameter5)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.NamedQueryReference = namedQueryReference;\n\t\t\tmapping.SqlLoader.NamedQuery = namedQuery;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter = namedQueryParameter;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter2 = namedQueryParameter2;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter3 = namedQueryParameter3;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter4 = namedQueryParameter4;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter5 = namedQueryParameter5;\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQuery, string namedQueryParameter, string namedQueryParameter2, string namedQueryParameter3, string namedQueryParameter4, string namedQueryParameter5, string namedQueryParameter6)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.NamedQueryReference = namedQueryReference;\n\t\t\t\tmapping.SqlLoader.NamedQuery = namedQuery;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter = namedQueryParameter;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter2 = namedQueryParameter2;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter3 = namedQueryParameter3;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter4 = namedQueryParameter4;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter5 = namedQueryParameter5;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter6 = namedQueryParameter6;\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQuery, string namedQueryParameter, string namedQueryParameter2, string namedQueryParameter3, string namedQueryParameter4, string namedQueryParameter5, string namedQueryParameter6, string namedQueryParameter7)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.NamedQueryReference = namedQueryReference;\n\t\t\tmapping.SqlLoader.NamedQuery = namedQuery;\n\t\t\tmapping.SqlLoader.NamedQueryParameter = namedQueryParameter;\n\t\t\tmapping.SqlLoader.NamedQueryParameter2 = namedQueryParameter2;\n\t\t\tmapping.SqlLoader.NamedQueryParameter3 = namedQueryParameter3;\n\t\t\tmapping.SqlLoader.NamedQueryParameter4 = namedQueryParameter4;\n\t\t\tmapping.SqlLoader.NamedQueryParameter5 = namedQueryParameter5;\n\t\t\tmapping.SqlLoader.NamedQueryParameter6 = namedQueryParameter6;\n\t\t\tmapping.SqlLoader.NamedQueryParameter7 = namedQueryParameter7;\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQuery, string namedQueryParameter, string namedQueryParameter2, string namedQueryParameter3, string namedQueryParameter4, string namedQueryParameter5, string namedQueryParameter6, string namedQueryParameter7, string namedQueryParameter8)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.NamedQueryReference = namedQueryReference;\n\t\t\tmapping.SqlLoader.NamedQuery = namedQuery;\n\t\t\tmapping.SqlLoader.NamedQueryParameter = namedQueryParameter;\n\t\t\tmapping.SqlLoader.NamedQueryParameter2 = namedQueryParameter2;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter3 = namedQueryParameter3;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter4 = namedQueryParameter4;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter5 = namedQueryParameter5;\n\t\t\t\tmapping.SqlLoader.NamedQueryParameter6 = namedQueryParameter6;\n\t\t", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\tint memberCount = m_Members.Count;\n\t\t\twriter.WriteEncodedInt( (int) memberCount );\n\t\t\tfor ( int i = 0; i < memberCount; ++i )\n\t\t\t{\n\t\t\t\tPlayerState pl = m_Members[i];\n\t\t\t\twriter.Write( (Mobile) pl.Mobile );\n\t\t\t\tpl.Serialize( writer );\n\t\t\t}\n\t\t\tm_Faction.Serialize( writer );\n\t\t\tm_FactionItems.Serialize( writer );\n\t\t\tif ( version >= 2 )\n\t\t\t{\n\t\t\t\tint factionItemCount = m_FactionItems.Count;\n\t\t\t\twriter.WriteEncodedInt( (int) factionItemCount );\n\t\t\t\tfor ( int i = 0; i < factionItemCount; ++i )\n\t\t\t\t{\n\t\t\t\t\tFactionItem factionItem = m_FactionItems[i];\n\t\t\t\t\tif ( !factionItem.HasExpired )\n\t\t\t\t\t{\n\t\t\t\t\t\tfactionItem.Attach();\n\t\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tTimer.DelayCall( TimeSpan.Zero, new TimerCallback( factionItem.Detach ) ); // sandbox detachment\n\t\t\t\t}\n\t\t\t\t\twriter.Write( (Item) factionItem );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( version >= 3 )\n\t\t\t{\n\t\t\t\tint factionTrapCount = m_FactionTraps.Count;\n\t\t\t\t\twriter.WriteEncodedInt( (int) factionTrapCount );\n\t\t\t\t\tfor ( int i = 0; i < factionTrapCount; ++i )\n\t\t\t\t{\n\t\t\t\t\tBaseFactionTrap trap = m_FactionTraps[i];\n\t\t\t\tif ( !trap.CheckDecay() )\n\t\t\t\t\t{\n\t\t\t\t\t\ttrap.Attach();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tTimer.DelayCall( TimeSpan.Zero, new TimerCallback( trap.Detach ) ); // sandbox detachment\n\t\t\t\t}\n\t\t\t\t\twriter.Write( (Item) trap );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tint version = reader.ReadEncodedInt();\n\t\t\tswitch ( version )\n\t\t\t{\n\t\t\t\t\tcase 4:\n\t\t\t\t\t{\n\t\t\t\t\t\tint count = reader.ReadEncodedInt();\n\t\t\t\t\tfor ( int i = 0; i < count; ++i )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDateTime time = reader.ReadDateTime();\n\t\t\t\t\t\tif ( i < m_LastBroadcasts.Length )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tm_LastBroadcasts[i] = time;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 3:\n\t\t\t\tcase 2:\n\t\t\t\t\t{\n\t\t\t\t\t\tm_Election = new Election( reader );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 1:\n\t\t\t\t\t{\n\t\t\t\t\t\tm_Faction = Faction.ReadReference( reader );\n\t\t\t\t\t\t\tm_Commander = reader.ReadMobile();\n\t\t\t\t\t\tif ( version < 4 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDateTime time = reader.ReadDateTime();\n\t\t\t\t\t\t\tif ( m_LastBroadcasts.Length > 0 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tm_LastBroadcasts[0] = time;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tm_Tithe = reader.ReadEncodedInt();\n\t\t\t\t\t\tm_Silver = reader.ReadEncodedInt();\n\t\t\t\t\t\tint memberCount = reader.ReadEncodedInt();\n\t\t\t\t\t\tm_Members = new PlayerStateCollection();\n\t\t\t\t\t\tfor ( int i = 0; i < memberCount; ++i )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tPlayerState pl = new PlayerState( reader, m_Faction, m_Members );\n\t\t\t\t\t\t\t\tif ( pl.Mobile != null )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tm_Members.Add( pl );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tm_Faction.State = this;\n\t\t\t\t\tm_Faction.UpdateRanks();\n\t\t\t\t\t\tm_FactionItems = new FactionItemCollection();\n\t\t\t\t\t\tif ( version >= 2 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint factionItemCount = reader.ReadEncodedInt();\n\t\t\t\t\t\t\tfor ( int i = 0; i < factionItemCount; ++i )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tFactionItem factionItem = new FactionItem( reader, m_Faction );\n\t\t\t\t\t\t\t\tif ( !factionItem.HasExpired )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfactionItem.Attach();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tTimer.DelayCall( TimeSpan.Zero, new TimerCallback( factionItem.Detach ) ); // sandbox detachment\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( version >= 3 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint factionTrapCount = reader.ReadEncodedInt();\n\t\t\t\t\t\t\tfor ( int i = 0; i < factionTrapCount; ++i )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tBaseFactionTrap trap = reader.ReadItem() as BaseFactionTrap;\n\t\t\t\t\t\t\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.pop();\n    }\n    private void pushInvocation(MethodInvocation methodInvocation) {\n        invocationQueue.addFirst(methodInvocation);\n    }\n    private void pushInvocationAndGraphs(MethodInvocation methodInvocation) {\n        pushInvocation(methodInvocation);", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               pytest_command = \"py.test -s {} -s {} -s {} -s {}\".format(\n                    self.args['selff'], self.args['selff'], self.args['selff'],\n                    self.args['selff'], self.args['", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhiNode phiNode = getCachedPhi(value, value.stamp());\n                    if (phiNode != null) {\n                        value = phiNode;\n                    }\n                }\n                if (value != null) {\n                    value.replaceAllUsagesWith(value);\n                }\n            }\n        }\n    }\n    private static class ReadEliminationBlockState {\n        private final HashMap<CacheEntry<?>, ValueNode> readCache = new HashMap<>();\n        private final HashMap<LocationIdentity, ValueNode> readCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> writeCache = new HashMap<>();\n        private final HashMap<LocationIdentity, ValueNode> writeCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeCache = new HashMap<>();\n        private final HashMap<LocationIdentity, ValueNode> unsafeCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeLoadCache = new HashMap<>();\n        private final HashMap<LocationIdentity, ValueNode> unsafeLoadCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreCache = new HashMap<>();\n        private final HashMap<LocationIdentity, ValueNode> unsafeStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadCache = new HashMap<>();\n        private final HashMap<LocationIdentity, ValueNode> unsafeStoreLoadCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreCache = new HashMap<>();\n        private final HashMap<LocationIdentity, ValueNode> unsafeStoreLoadStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreCache = new HashMap<>();\n        private final HashMap<LocationIdentity, ValueNode> unsafeStoreLoadStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreCache = new HashMap<>();\n        private final HashMap<LocationIdentity, ValueNode> unsafeStoreLoadStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<LocationIdentity, ValueNode> unsafeStoreLoadStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<LocationIdentity, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreCache = new HashMap<>();\n        private final HashMap<CacheEntry<?>, ValueNode> unsafeStoreLoadStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStoreStore", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraEvent */\n    public void handleCameraEvent(int event) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraError */\n    public void handleCameraError(int error) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraError(error);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraEvent */\n    public void handleCameraEvent(int event, CameraCapabilities cameraCapabilities) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraEvent(event, cameraCapabilities);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraError */\n    public void handleCameraError(int error, CameraCapabilities cameraCapabilities) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraError(error, cameraCapabilities);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraEvent */\n    public void handleCameraEvent(int event, CameraCapabilities cameraCapabilities,\n            CameraCapabilities cameraCapabilities2) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraEvent(event, cameraCapabilities, cameraCapabilities2);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraError */\n    public void handleCameraError(int error, CameraCapabilities cameraCapabilities,\n            CameraCapabilities cameraCapabilities2) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraError(error, cameraCapabilities, cameraCapabilities2);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraEvent */\n    public void handleCameraEvent(int event, CameraCapabilities cameraCapabilities,\n            CameraCapabilities cameraCapabilities2, CameraCapabilities cameraCapabilities3) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraEvent(event, cameraCapabilities, cameraCapabilities2,\n                        cameraCapabilities3);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraError */\n    public void handleCameraError(int error, CameraCapabilities cameraCapabilities,\n            CameraCapabilities cameraCapabilities2, CameraCapabilities cameraCapabilities3) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraError(error, cameraCapabilities, cameraCapabilities2,\n                        cameraCapabilities3);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraEvent */\n    public void handleCameraEvent(int event, CameraCapabilities cameraCapabilities,\n            CameraCapabilities cameraCapabilities2, CameraCapabilities cameraCapabilities3,\n            CameraCapabilities cameraCapabilities4) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraEvent(event, cameraCapabilities, cameraCapabilities2,\n                        cameraCapabilities3, cameraCapabilities4);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraError */\n    public void handleCameraError(int error, CameraCapabilities cameraCapabilities,\n            CameraCapabilities cameraCapabilities2, CameraCapabilities cameraCapabilities3,\n            CameraCapabilities cameraCapabilities4) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraError(error, cameraCapabilities, cameraCapabilities2,\n                        cameraCapabilities3, cameraCapabilities4);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraEvent */\n    public void handleCameraEvent(int event, CameraCapabilities cameraCapabilities,\n            CameraCapabilities cameraCapabilities2, CameraCapabilities cameraCapabilities3,\n            CameraCapabilities cameraCapabilities4, CameraCapabilities cameraCapabilities5) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraEvent(event, cameraCapabilities, cameraCapabilities2,\n                        cameraCapabilities3, cameraCapabilities4, cameraCapabilities5);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraError */\n    public void handleCameraError(int error, CameraCapabilities cameraCapabilities,\n            CameraCapabilities cameraCapabilities2, CameraCapabilities cameraCapabilities3,\n            CameraCapabilities cameraCapabilities4, CameraCapabilities cameraCapabilities5) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraError(error, cameraCapabilities, cameraCapabilities2,\n                        cameraCapabilities3, cameraCapabilities4, cameraCapabilities5);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraEvent */\n    public void handleCameraEvent(int event, CameraCapabilities cameraCapabilities,\n            CameraCapabilities cameraCapabilities2, CameraCapabilities cameraCapabilities3,\n            CameraCapabilities cameraCapabilities4, CameraCapabilities cameraCapabilities5,\n            CameraCapabilities cameraCapabilities6) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraEvent(event, cameraCapabilities, cameraCapabilities2,\n                        cameraCapabilities3, cameraCapabilities4, cameraCapabilities5,\n                        cameraCapabilities6);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraError */\n    public void handleCameraError(int error, CameraCapabilities cameraCapabilities,\n            CameraCapabilities cameraCapabilities2, CameraCapabilities cameraCapabilities3,\n            CameraCapabilities cameraCapabilities4, CameraCapabilities cameraCapabilities5,\n            CameraCapabilities cameraCapabilities6) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraError(error, cameraCapabilities, cameraCapabilities2,\n                        cameraCapabilities3, cameraCapabilities4, cameraCapabilities5,\n                        cameraCapabilities6);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraEvent */\n    public void handleCameraEvent(int event, CameraCapabilities cameraCapabilities,\n            CameraCapabilities cameraCapabilities2, CameraCapabilities cameraCapabilities3,\n            CameraCapabilities cameraCapabilities4, CameraCapabilities cameraCapabilities5,\n            CameraCapabilities cameraCapabilities6, CameraCapabilities cameraCapabilities7) {\nNext line of code:\n        if (mCallback != null) {\n            try {\n                mCallback.handleCameraEvent(event, cameraCapabilities, cameraCapabilities2,\n                        cameraCapabilities3, cameraCapabilities4, cameraCapabilities5,\n                        cameraCapabilities6, cameraCapabilities7);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraError */\n    public void handleCameraError(int error, CameraCapabilities cameraCapabilities,\n            CameraCapabilities cameraCapabilities2, CameraCapabilities cameraCapabilities3,\n            CameraCapabilities cameraCapabilities4, CameraCapabilities cameraCap", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\t\tfrom.SendLocalizedMessage(1156701); // You can't use this map here.\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t\twriter.Write(0);\n\t\t}\n\t\t\n\t\tpublic override void Deserialize(GenericReader reader)\n\t\t{\n\t\t\t\tbase.Deserialize(reader);\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\t\n\tpublic class EodonianWallMap2 : Item\n\t{\n\t\tpublic override int LabelNumber { get { return 1156702; } } // Wall Map of Eodon\n\t\t[Constructable]\n\t\tpublic EodonianWallMap2() : base(11636)\n\t\t{\n\t\t}\n\t\t\n\t\tpublic override void OnDoubleClick(Mobile from)\n\t\t{\n\t\t\tif(from.InRange(GetWorldLocation(), 5))\n\t\t\t{\nNext line of code:\n\t\t\t\tfrom.SendLocalizedMessage(1156703); // You can't use this map here.\n\t\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t\twriter.Write(0);\n\t\t}\n\t\t\n\t\tpublic override void Deserialize(GenericReader reader)\n\t\t{\n\t\t\tbase.Deserialize(reader);\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\t\n\tpublic class EodonianWallMap3 : Item\n\t{\n\t\tpublic override int LabelNumber { get { return 1156704; } } // Wall Map of Eodon\n\t\t[Constructable]\n\t\tpublic EodonianWallMap3() : base(11637)\n\t\t{\n\t\t}\n\t\t\n\t\tpublic override void OnDoubleClick(Mobile from)\n\t\t{\n\t\t\tif(from.InRange(GetWorldLocation(), 5))\n\t\t\t{\nNext line of code:\n\t\t\t\t\tfrom.SendLocalizedMessage(1156705); // You can't use this map here.\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t\twriter.Write(0);\n\t\t}\n\t\t\n\t\tpublic override void Deserialize(GenericReader reader)\n\t\t{\n\t\t\tbase.Deserialize(reader);\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\t\n\tpublic class EodonianWallMap4 : Item\n\t{\n\t\tpublic override int LabelNumber { get { return 1156706; } } // Wall Map of Eodon\n\t\t[Constructable]\n\t\tpublic EodonianWallMap4() : base(11638)\n\t\t{\n\t\t}\n\t\t\n\t\tpublic override void OnDoubleClick(Mobile from)\n\t\t{\n\t\t\tif(from.InRange(GetWorldLocation(), 5))\n\t\t\t{\nNext line of code:\n\t\t\t\t\tfrom.SendLocalizedMessage(1156707); // You can't use this map here.\n\t\t\t\t}\n\t\t}\n\t\t\t\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t\twriter.Write(0);\n\t\t}\n\t\t\n\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   'BibrecBibxxx',\n])\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       \"\"\"Remove a user from the cache.\"\"\"\n        user = '%s@%s' % (username, domain)\n        data = self.module.get(user)\n        if data is None:\n            raise UserNotFound(username, domain)\n        else:\n            self.module.delete(user)\n            self.module.set('all_users', set([u for u in self.module.get('all_users', set())\n                                                     if u.endswith('@%s' % domain)]))\n            self.module.set('all_sessions', set([s for s in self.module.get('all_sessions', set())\n                                                        if s.jid != user]))\n    def get_random_password(self):\n        \"\"\"Generate a random password.\"\"\"\n        return ''.join(self.get_random_characters(10))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters(self, length):\n        \"\"\"Generate a random string of length length.\"\"\"\n        return ''.join(self.get_random_characters(length))\n    def get_random_characters", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def find(self, st, by='msgid'):\n        \"\"\"\n        Find entry which msgid", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    if res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'WaitingIntegrity' )\n      if not res['OK']:\n        gLogger.error( \"Failed to update status of transformation %s to WaitingIntegrity\" % ( transID ) )\n        return res\n    else:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput' )\n      if not res['OK']:\n        gLogger.error( \"Failed to update status of transformation %s to ValidatedOutput\" % ( transID ) ) )\n        return res\n    return S_OK()\n  #############################################################################\n  def getTransformationTypes( self ):\n    \"\"\" Get the transformation types\n    \"\"\"\n    return self.transformationTypes\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  #############################################################################\n  def getTransformationTypesString( self ):\n    \"\"\" Get the transformation types as a string\n    \"\"\"\n    return \", \".join( self.transformationTypes )\n  ###################################################################", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(uri.getPath() == null)\n\t\t\t\tthrow new CommentException(l10n(\"invalidFormURI\"));\n\t\t\tif(uri.getPath().startsWith(PLUGINS_PREFIX))\n\t\t\treturn uri.getPath", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        msg = yield self.run_fake_single_build(gsp, buildResult,\n                                                verifiedScore)\n        result = makeReviewResult(msg,\n                                  (GERRIT_LABEL_VERIFIED, verifiedScore))\n        gsp.sendCodeReview.assert_called_once_with(self.TEST_PROJECT,\n                                               self.TEST_REVISION,\n                                               result)\n    @defer.inlineCallbacks\n    def check_single_build_legacy(self, buildResult, verifiedScore):\n        gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        msg = yield self", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testTitleToAndFromString(self):\n    self.category.type = 'text'\n    self.category.text = 'Less: &lt;'\n    self.assert_(self.category.type == 'text')\n    self.assert_(self.category.text == 'Less: &lt;')\n    new_category = atom.CategoryFromString(self.category.ToString())\n    self.assert_(self.category.type == new_category.type)\n    self.assert_(self.category.text == new_category.text)\nclass EntryTest(unittest.TestCase):\n  def setUp(self):\n    self.entry = atom.Entry()\n  def testTitleToAndFromString(self):\n    self.entry.title = atom.Title()\n    self.entry.title.type = 'text'\n    self.entry.title.text = 'Less: &lt;'\n    self.entry.subtitle = atom.Subtitle()\n    self.entry.subtitle.type = 'text'\n    self.entry.subtitle.text = 'sub & title'\n    self.entry.summary = atom.Summary()\n    self.entry.summary.type = 'text'\n    self.entry.summary.text = 'Less: &lt;'\n    self.entry.category = atom.Category()\n    self.entry.category.type = 'text'\n    self.entry.category.text = 'Less: &lt;'\n    self.entry.generator = atom.Generator()\n    self.entry.generator.uri = 'www.google.com'\n    self.entry.generator.version = '1.0'\n    self.entry.generator.extension_attributes['foo'] = 'bar'\n    self.entry.link = atom.Link()\n    self.entry.link.href = 'test href'\n    self.entry.link.hreflang = 'english'\n    self.entry.link.type = 'text/html'\n    self.entry.link.extension_attributes['foo'] = 'bar'\n    self.assert_(self.entry.title.type == 'text')\n    self.assert_(self.entry.title.text == 'Less: &lt;')\n    self.assert_(self.entry.subtitle.type == 'text')\n    self.assert_(self.entry.subtitle.text == 'sub & title')\n    self.assert_(self.entry.summary.type == 'text')\n    self.assert_(self.entry.summary.text == 'Less: &lt;')\n    self.assert_(self.entry.category.type == 'text')\n    self.assert_(self.entry.category.text == 'Less: &lt;')\n    self.assert_(self.entry.generator.uri == 'www.google.com')\n    self.assert_(self.entry.generator.version == '1.0')\n    self.assert_(self.entry.generator.extension_attributes['foo'] ==\n        'bar')\n    self.assert_(self.entry.link.href == 'test href')\n    self.assert_(self.entry.link.hreflang == 'english')\n    self.assert_(self.entry.link.type == 'text/html')\n    self.assert_(self.entry.link.extension_attributes['foo'] ==\n        'bar')\n    new_entry = atom.EntryFromString(self.entry.ToString())\n    self.assert_(self.entry.title.type == new_entry.title.type)\n    self.assert_(self.entry.title.text == new_entry.title.text)\n    self.assert_(self.entry.subtitle.type == new_entry.subtitle.type)\n    self.assert_(self.entry.subtitle.text == new_entry.subtitle.text)\n    self.assert_(self.entry.summary.type == new_entry.summary.type)\n    self.assert_(self.entry.summary.text == new_entry.summary.text)\n    self.assert_(self.entry.", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "               Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> r = new HashMap<String, AnnotationMirror>();\n            for (Map.Entry<String, AnnotationMirror> entry : r1.entrySet", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "\nclass MATERIAL_PT_options_2(MaterialButtonsPanel, Panel):\n    bl_label = \"Options\"\n    COMPAT_ENGINES = {'BLENDER_RENDER', 'BLENDER_GAME'}\n    @", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_timer_irq_count = map16.", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           _jMnuRoot.add(getOpenDocumentMenuItem(sTDocUrl));\n        }\n        private JMenuItem getOpenDocumentMenuItem(String _sTDocUrl){\n            JMenuItem oMenuItem = new JMenuItem(_sTDocUrl);\n            oMenuItem.addActionListener(oActionListener);\n            return oMenuItem;\n        }\n        private void insertMenus(){\n            JMenu jMnuFile = new JMenu(\"File\");\n            JMenu jMnuEdit = new JMenu(\"Edit\");\n            JMenu jMnuView = new JMenu(\"View\");\n            JMenu jMnuHelp = new JMenu(\"Help\");\n            JMenu jMnuInspect = new JMenu(\"Inspect\");\n            JMenu jMnuOptions = new JMenu(\"Options\");\n            JMenu jMnuAbout = new JMenu(\"About\");\n            JMenu jMnuTools = new JMenu(\"Tools\");\n            JMenu jMnuWindow = new JMenu(\"Window\");\n            JMenu jMnuWindow1 = new JMenu(\"Window\");\n            JMenu jMnuWindow2 = new JMenu(\"Window\");\n            JMenu jMnuWindow3 = new JMenu(\"Window\");\n            JMenu jMnuWindow4 = new JMenu(\"Window\");\n            JMenu jMnuWindow5 = new JMenu(\"Window\");\n            JMenu jMnuWindow6 = new JMenu(\"Window\");\n            JMenu jMnuWindow7 = new JMenu(\"Window\");\n            JMenu jMnuWindow8 = new JMenu(\"Window\");\n            JMenu jMnuWindow9 = new JMenu(\"Window\");\n            JMenu jMnuWindow10 = new JMenu(\"Window\");\n            JMenu jMnuWindow11 = new JMenu(\"Window\");\n            JMenu jMnuWindow12 = new JMenu(\"Window\");\n            JMenu jMnuWindow13 = new JMenu(\"Window\");\n            JMenu jMnuWindow14 = new JMenu(\"Window\");\n            JMenu jMnuWindow15 = new JMenu(\"Window\");\n            JMenu jMnuWindow16 = new JMenu(\"Window\");\n            JMenu jMnuWindow17 = new JMenu(\"Window\");\n            JMenu jMnuWindow18 = new JMenu(\"Window\");\n            JMenu jMnuWindow19 = new JMenu(\"Window\");\n            JMenu jMnuWindow20 = new JMenu(\"Window\");\n            JMenu jMnuWindow21 = new JMenu(\"Window\");\n            JMenu jMnuWindow22 = new JMenu(\"Window\");\n            JMenu jMnuWindow23 = new JMenu(\"Window\");\n            JMenu jMnuWindow24 = new JMenu(\"Window\");\n            JMenu jMnuWindow25 = new JMenu(\"Window\");\n            JMenu jMnuWindow26 = new JMenu(\"Window\");\n            JMenu jMnuWindow27 = new JMenu(\"Window\");\n            JMenu jMnuWindow28 = new JMenu(\"Window\");\n            JMenu jMnuWindow29 = new JMenu(\"Window\");\n            JMenu jMnuWindow30 = new JMenu(\"Window\");\n            JMenu jMnuWindow31 = new JMenu(\"Window\");\n            JMenu jMnuWindow32 = new JMenu(\"Window\");\n            JMenu jMnuWindow33 = new JMenu(\"Window\");\n            JMenu jMnuWindow34 = new JMenu(\"Window\");\n            JMenu jMnuWindow35 = new JMenu(\"Window\");\n            JMenu jMnuWindow36 = new JMenu(\"Window\");\n            JMenu jMnuWindow37 = new JMenu(\"Window\");\n            JMenu jMnuWindow38 = new JMenu(\"Window\");\n            JMenu jMnuWindow39 = new JMenu(\"Window\");\n            JMenu jMnuWindow40 = new JMenu(\"Window\");\n            JMenu jMnuWindow41 = new JMenu(\"Window\");\n            JMenu jMnuWindow42 = new JMenu(\"Window\");\n            JMenu jMnuWindow43 = new JMenu(\"Window\");\n            JMenu jMnuWindow44 = new JMenu(\"Window\");\n            JMenu jMnuWindow45 = new JMenu(\"Window\");\n            JMenu jMnuWindow46 = new JMenu(\"Window\");\n            JMenu jMnuWindow47 = new JMenu(\"Window\");\n            JMenu jMnuWindow48 = new JMenu(\"Window\");\n            JMenu jMnuWindow49 = new JMenu(\"Window\");\n            JMenu jMnuWindow50 = new JMenu(\"Window\");\n            JMenu jMnuWindow51 = new JMenu(\"Window\");\n            JMenu jMnuWindow52 = new JMenu(\"Window\");\n            JMenu jMnuWindow53 = new JMenu(\"Window\");\n            JMenu jMnuWindow54 = new JMenu(\"Window\");\n            JMenu jMnuWindow55 = new JMenu(\"Window\");\n            JMenu jMnuWindow56 = new JMenu(\"Window\");\n            JMenu jMnuWindow57 = new JMenu(\"Window\");\n            JMenu jMnuWindow58 = new JMenu(\"Window\");\n            JMenu jMnuWindow59 = new JMenu(\"Window\");\n            JMenu jMnuWindow60 = new JMenu(\"Window\");\n            JMenu jMnuWindow61 = new JMenu(\"Window\");\n            JMenu jMnuWindow62 = new JMenu(\"Window\");\n            JMenu jMnuWindow63 = new JMenu(\"Window\");\n            JMenu jMnuWindow64 = new JMenu(\"Window\");\n            JMenu jMnuWindow65 = new JMenu(\"Window\");\n            JMenu jMnuWindow66 = new JMenu(\"Window\");\n            JMenu jMnuWindow67 = new JMenu(\"Window\");\n            JMenu jMnuWindow68 = new JMenu(\"Window\");\n            JMenu jMnuWindow69 = new JMenu(\"Window\");\n            JMenu jMnuWindow70 = new JMenu(\"Window\");\n            JMenu jMnuWindow71 = new JMenu(\"Window\");\n            JMenu jMnuWindow72 = new JMenu(\"Window\");\n            JMenu jMnuWindow73 = new JMenu(\"Window\");\n            JMenu jMnuWindow74 = new JMenu(\"Window\");\n            JMenu jMnuWindow75 = new JMenu(\"Window\");\n            JMenu jMnuWindow76 = new JMenu(\"Window\");\n            JMenu jMnuWindow77 = new JMenu(\"Window\");\n            JMenu jMnuWindow78 = new JMenu(\"Window\");\n            JMenu jMnuWindow79 = new JMenu(\"Window\");\n            JMenu jMnuWindow80 = new JMenu(\"Window\");\n            JMenu jMnuWindow81 = new JMenu(\"Window\");\n            JMenu jMnuWindow82 = new JMenu(\"Window\");\n            JMenu jMnuWindow83 = new JMenu(\"Window\");\n            JMenu jMnuWindow84 = new JMenu(\"Window\");\n            JMenu jMnuWindow85 = new JMenu(\"Window\");\n            JMenu jMnuWindow86 = new JMenu(\"Window\");\n            JMenu jMnuWindow87 = new JMenu(\"Window\");\n            JMenu jMnuWindow88 = new JMenu(\"Window\");\n            JMenu jMnuWindow89 = new JMenu(\"Window\");\n            JMenu jMnuWindow90 = new JMenu(\"Window\");\n            JMenu jMnuWindow91 = new JMenu(\"Window\");\n            JMenu jMnuWindow92 = new JMenu(\"Window\");\n            JMenu jMnuWindow93 = new JMenu(\"Window\");\n            JMenu jMnuWindow94 = new JMenu(\"Window\");\n            JMenu jMnuWindow95 = new JMenu(\"Window\");\n            JMenu jMnuWindow96 = new JMenu(\"Window\");\n            JMenu jMnuWindow97 = new JMenu(\"Window\");\n            JMenu jMnuWindow98 = new JMenu(\"Window\");\n            JMenu jMnuWindow99 = new JMenu(\"Window\");\n            JMenu jMnuWindow100 = new JMenu(\"Window\");\n            JMenu jMnuWindow101 = new JMenu(\"Window\");", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70028); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70029); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70030); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70031); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70032); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70033); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70034); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70035); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70036); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn SizeHeightToFitWithMin (min, min);\n\t\t}\n\t\tpublic int SizeHeightToFitWithMin (int min, int min2)\n\t\t{\n\t\t\tint height = 0;\n\t\t\tint height2 = 0;\n\t\t\tint height3 = 0;\n\t\t\tint height4 = 0;\n\t\t\tint height5 = 0;\n\t\t\tint height6 = 0;\n\t\t\tint height7 = 0;\n\t\t\tint height8 = 0;\n\t\t\tint height9 = 0;\n\t\t\tint height10 = 0;\n\t\t\t\tint height11 = 0;\n\t\t\t\tint height12 = 0;\n\t\t\t\tint height13 = 0;\n\t\t\t\tint height14 = 0;\n\t\t\t\t\tint height15 = 0;\n\t\t\t\t\tint height16 = 0;\n\t\t\t\t\tint height17 = 0;\n\t\t\t\t\t\tint height18 = 0;\n\t\t\t\t\t\tint height19 = 0;\n\t\t\t\t\t\tint height20 = 0;\n\t\t\t\t\t\t\tint height21 = 0;\n\t\t\t\t\t\t\tint height22 = 0;\n\t\t\t\t\t\tint height23 = 0;\n\t\t\t\t\t\tint height24 = 0;\n\t\t\t\t\t\tint height25 = 0;\n\t\t\t\t\tint height26 = 0;\n\t\t\t\t\tint height27 = 0;\n\t\t\t\t\t\tint height28 = 0;\n\t\t\t\t\t\tint height29 = 0;\n\t\t\t\t\t\tint height30 = 0;\n\t\t\t\t\t\tint height31 = 0;\n\t\t\t\t\t\tint height32 = 0;\n\t\t\t\t\t\t\tint height33 = 0;\n\t\t\t\t\t\t\tint height34 = 0;\n\t\t\t\t\t\t\tint height35 = 0;\n\t\t\t\t\t\t\tint height36 = 0;\n\t\t\t\t\t\t\t\tint height37 = 0;\n\t\t\t\t\t\t\t\tint height38 = 0;\n\t\t\t\t\t\t\t\t\t\tint height39 = 0;\n\t\t\t\t\t\t\t\tint height40 = 0;\n\t\t\t\t\t\t\t\t\t\tint height41 = 0;\n\t\t\t\t\t\t\t\t\t\tint height42 = 0;\n\t\t\t\t\t\t\t\t\t\tint height43 = 0;\n\t\t\t\t\t\t\t\t\t\t\tint height44 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tint height45 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\tint height46 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tint height47 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tint height48 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height49 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height50 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height51 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height52 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height53 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height54 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height55 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height56 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height57 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height58 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height59 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height60 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height61 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height62 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height63 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height64 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height65 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height66 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height67 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height68 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint height69 = 0;\n\t\t\t\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.announcement.title\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this announcement.\n        \"\"\"\n        return reverse('announcements:announcement_detail', kwargs={'slug': self.announcement.slug})\n    def save(self, *args, **kwargs):\n        \"\"\"\n        Save the announcement, fix non-unique slug, fix/update last content modification date and render the text.\n        :param args: For super()\n        :param kwargs: For super()\n        \"\"\"\n        # Avoid duplicate slug\n        # FIXME AutoSlugField\n        self.slug = unique_slug(AnnouncementTwitterCrossPublication, self, self.slug, 'slug', self.announcement.title)\n        # Save the model\n        super(AnnouncementTwitterCrossPublication, self).save(*args, **kwargs)\n", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers.register(PhpLexer)\n# Enable highlighting for PHP code not between <?php ... ?>\n#lexers.register(PhpLexer, 'php')\n# Enable highlighting for PHP code not between <?php ... ?>\n#lexers.register(PhpLexer, 'php', 'php')\n# Enable highlighting for PHP code not between <?php ... ?>\n#lexers.register(PhpLexer, 'php', 'php', 'php')\n# Enable highlighting for PHP code not between <?php ... ?>\n#lexers.register(PhpLexer, 'php', 'php', 'php', 'php')\n# Enable highlighting for PHP code not between <?php ... ?>\n#lexers.register(PhpLexer, 'php', 'php', 'php", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                ORDER BY sdate, stime ''', (i,))\n    row = cursor.fetchone()\n    sdate = row[0]\n    stime = row[1]\n    edate = row[2]\n    etime = row[3]\n    duration = row[4]\n    src_callsign = row[5]\n    max_altitude = row[6]\n    registration = row[7]\n    print \"sdate is: \", sdate\n    print \"stime is: \", stime\n    print \"edate is: \", edate\n    print \"etime is: \", etime\n    print \"duration is: \", duration\n    print \"src_callsign is: \", src_callsign\n    print \"max_altitude is: \", max_altitude\n    print \"registration is: \", registration\n    print \"groupID is: \", i\n    print \"max_groupID is: \", max_groupID\n    if i == max_groupID:\n        print \"Last group\"\n        break\n    i = i + 1\n    cursor.execute('''INSERT INTO flight_log_final(sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration)\n                 VALUES(:sdate,:stime,:edate,:etime,:duration,:src_callsign,:max_altitude,:registration)''',\n                        {'sdate':sdate, 'stime':stime, 'edate':edate, 'etime':etime, 'duration':duration,\n                        'src_callsign':src_callsign, 'max_altitude':max_altitude, 'registration':registration})\n    print \"Row inserted\"\n    cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration\n                 FROM flight_group WHERE groupID=?\nNext line of code:\n                 ORDER BY sdate, stime ''', (i,))\n    row = cursor.fetchone()\n    sdate = row[0]\n    stime = row[1]\n    edate = row[2]\n    etime = row[3]\n    duration = row[4]\n    src_callsign = row[5]\n    max_altitude = row[6]\n    registration = row[7]\n    print \"sdate is: \", sdate\n    print \"stime is: \", stime\n    print \"", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       print(\"db_set_last_snapshot\", project_id, timestamp)\n        try:\n            # Get the project\n            project = conn.table('projects').get(project_id)\n            # Set the last_snapshot field\n            project['last_snapshot'] = timestamp\n            # Save the project\n            conn.table('projects').update(project_id, project)\n        except Exception as err:\n            log(\"Error setting last_snapshot for project {project_id}\".format(project_id=project_id))\n            log(err)\n            conn.close()\n            return\n    # Close the connection\n    conn.close()\ndef get_snapshot_time(project_id):\n    \"\"\"\n    Get the last_snapshot timestamp for a project.\n    \"\"\"\n    try:\n        # Get the project\n        project = rethinkdb_connection().table('projects').get(project_id)\n        # Get the last_snapshot timestamp\n        return project['last_snapshot']\n    except Exception as err:\n        log(\"Error getting last_snapshot for project {project_id}\".format(project_id=project_id))\n        log(err)\n        return None\ndef get_snapshot_time_for_project(project_id):\n    \"\"\"\n    Get the last_snapshot timestamp for a project.\n    \"\"\"\n    return get_snapshot_time(project_id)\ndef get_snapshot_time_for_project_and_namespace(project_id, namespace):\n    \"\"\"\n    Get the last_snapshot timestamp for a project and namespace.\n    \"\"\"\n    return get_snapshot_time_for_project(project_id)\ndef get_snapshot_time_for_namespace(namespace):\n    \"\"\"\n    Get the last_snapshot timestamp for a namespace.\n    \"\"\"\n    return get_snapshot_time_for_project_and_namespace(namespace, namespace)\ndef get_snapshot_time_for_namespace_and_project(namespace, project_id):\n    \"\"\"\n    Get the last_snapshot timestamp for a namespace and project.\n    \"\"\"\n    return get_snapshot_time_for_project_and_namespace(project_id, namespace)\ndef get_snapshot_time_for_namespace_and_project_and_image(namespace, project_id, image):\n    \"\"\"\n    Get the last_snapshot timestamp for a namespace and project and image.\n    \"\"\"\n    return get_snapshot_time_for_namespace_and_project(namespace, project_id)\ndef get_snapshot_time_for_namespace_and_", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"I'm not sure what you mean by that.<br/>I'm not a very good liar, you know.\");\n\t\t\t\t\tbreak;\n\t\t\tcase \"complicity_2\":\nNext line of code:\n\t\t\t\tMsg", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()\n        self.codetail = ()\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n\"\"\"\n    Add a host to the task data.\n    \"\"\"\n\"\"\"\n    @param host_data: The host data to add.\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"\n    @return: None\n\"\"\"\n\"\"\"", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               else if (toastType.equals(TOAST_DETAILED))\n                    Toast.makeText(context, getString(R.string.toast_message_done) + uri, Toast.LENGTH_LONG).show();\n                else\n                    Toast.makeText(context, getString(R.string.toast_message_done) + uri, Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n}\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg.epoch, pkg.version, pkg.release, pkg.arch))\n        raise AssertionError(\"Additional packages in primary.xml\")\n@behave.step(\"filelists in \\\"{path}\\\" has only packages\")\ndef filelists_in_path_contains_only_packages(context, path):\n    check_context_table(context, [\"Name\", \"Epoch\", \"Version\", \"Release\", \"Architecture\"])\n    filepath = os.path.join(context.tempdir_manager.tempdir, path.lstrip('/'), \"*-filelists.xml.*\")\n    filelists_filepath = glob.glob(filepath)[0]\n    filelists = xml_parse_repodata(filelists_filepath, \"{%s}package\" % ns[\"fil_ns\"], \"filelists\")\n    for name, epoch, version, release, architecture in context.table:\n        nevra = build_nevra(name, epoch, version, release, architecture)\n        found = False\n        for key in filelists.keys():\n            pkg = filelists.items[key]\n            if (nevra == pkg.nevra()):\n                del filelists.items[key]\n                found = True\n                break\n        if not found:\n            print(\"filelists.xml yet unmatched packages:\")\n            for key in filelists.keys():\n                pkg = filelists.items[key]\n                print(\"\\t\" + build_nevra(pkg.name, pkg.epoch, pkg.version, pkg.release, pkg.arch))\n            raise AssertionError(\"Package \" + nevra + \" not found\")\n    if (len(filelists.keys()) > 0):\n        print(\"filelists.xml contains additional packages:\")\n        for key in filelists.keys():\n            pkg = filelists.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg.epoch, pkg.version, pkg.release, pkg.arch))\n        raise AssertionError(\"Additional packages in filelists.xml\")\n@behave.step(\"filelists in \\\"{path}\\\" doesn't have any packages\")\ndef filelists_in_path_doesnt_contain_any_packages(context, path):\n    filepath = os.path.join(context.tempdir_manager.tempdir, path.lstrip('/'), \"*-filelists.xml.*\")\n    filelists_filepath", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def get_command_outputs (self):\n        \"\"\"Return a list of strings containing the output of the command\n        (as it would be printed to stdout).\n        \"\"\"\n        if self.dry_run:\n            return []\n        if self.distribution.has_pure_modules():\n            build_py = self.get_finalized_command('build_py')\n            outputs = build_py.get_outputs()\n            for output in outputs:\n                self.stdout.write(output)\n        if self.distribution.has_ext_modules():\n            build_ext = self.get_finalized_command('build_ext')\n            outputs = build_ext.get_outputs()\n            for output in outputs:\n                self.stdout.write(output)\n        return []\n    # get_command_outputs ()\n    def get_command_output (self, command_name):\n        \"\"\"Return a string containing the output of the command\n        (as it would be printed to stdout).\n        \"\"\"\n        if self.dry_run:\n            return \"\"\n        if self.distribution.has_pure_modules():\n            build_py = self.get_finalized_command('build_py')\n            output = build_py.get_output(command_name)\n            if output:\n                self.stdout.write(output)\n        if self.distribution.has_ext_modules():\n            build_ext = self.get_finalized_command('build_ext')\n            output = build_ext.get_output(command_name)\n            if output:\n                self.stdout.write(output)\n        return \"\"\n    # get_command_output ()\n    def get_command_outputs (self, command_name):\n        \"\"\"Return a list of strings containing the output of the command\n        (as it would be printed to stdout).\n        \"\"\"\n        if self.dry_run:\n            return []\n        if self.distribution.has_pure_modules():\n            build_py = self.get_finalized_command('build_py')\n            outputs = build_py.get_outputs(command_name)\n            for output in outputs:\n                self.stdout.write(output)\n        if self.distribution.has_ext_modules():\n            build_ext = self.get_finalized_command('build_ext')\n            outputs = build_ext.get_outputs(command_name)\n            for output in outputs:\n                self.stdout.write(output)\n        return []\n    # get_command_outputs ()\n    def get_command_outputs_for_file (self, filename):\n        \"\"\"Return a list of strings containing the output of the command\n        (as it would be printed to stdout).\n        \"\"\"\n        if self.dry_run:\n            return []\n        if self.distribution.has_pure_modules():\n            build_py = self.get_finalized_command('build_py')\n            outputs = build_py.get_outputs_for_file(filename)\n            for output in outputs:\n                self.stdout.write(output)\n        if self.distribution.has_ext_modules():\n            build_ext = self.get_finalized_command('build_ext')\n            outputs = build_ext.get_outputs_for_file(filename)\n            for output in outputs:\n                self.stdout.write(output)\n        return []\n    # get_command_outputs_for_file ()\n    def get_command_outputs_for_file_and_ext (self, filename, ext):\n        \"\"\"Return a list of strings containing the output of the command\n        (as it would be printed to stdout).\n        \"\"\"\n        if self.dry_run:\n            return []\n        if self.distribution.has_pure_modules():\n            build_py = self.get_finalized_command('build_py')\n            outputs = build_py.get_outputs_for_file_and_ext(filename, ext)\n            for output in outputs:\n                self.stdout.write(output)\n        if self.distribution.has_ext_modules():\n            build_ext = self.get_finalized_command('build_ext')\n            outputs = build_ext.get_outputs_for_file_and_ext(filename, ext)\n            for output in outputs:\n                self.stdout.write(output)\n        return []\n    # get_command_outputs_for_file_and_ext ()\n    def get_command_outputs_for_file_and_ext_and_level (self,\n                                                             filename,\n                                                             ext,\n                                                             level):\n        \"\"\"Return a list of strings containing the output of the command\n        (as it would be printed to stdout).\n        \"\"\"\n        if self.dry_run:\n            return []\n        if self.distribution.has_pure_modules():\n            build_py = self.get_finalized_command('build_py')\n            outputs = build_py.get_outputs_for_file_and_ext_and_level(\n                                                                  filename, ext, level)\n            for output in outputs:\n                self.stdout.write(output)\n        if self.distribution.has_ext_modules():\n            build_ext = self.get_finalized_command('build_ext')\n            outputs = build_ext.get_outputs_for_file_and_ext_and_level(\n                                                                      filename, ext, level)\n            for output in outputs:\n                self.stdout.write(output)\n        return []\n    # get_command_outputs_for_file_and_ext_and_level ()\n    def get_command_outputs_for_file_and_ext_and_level_and_compile (self,\n                                                                        filename,\n                                                                        ext,\n                                                                        level,\n                                                                        compile):\n        \"\"\"Return a list of strings containing the output of the command\n        (as it would be printed to stdout).\n        \"\"\"\n        if self.dry_run:\n            return []\n        if self.distribution.has_pure_modules():\n            build_py = self.get_finalized_command('build_py')\n            outputs = build_py.get_outputs_for_file_and_ext_and_level_and_compile(\n                                                                              filename, ext, level, compile)\n            for output in outputs:\n                self.stdout.write(output)\n        if self.distribution.has_ext_modules():\n            build_ext = self.get_finalized_command('build_ext')\n            outputs = build_ext.get_outputs_for_file_and_ext_and_level_and_compile(\n                                                                                                  filename, ext, level, compile)\n            for output in outputs:\n                self.stdout.write(output)\n        return []\n    # get_command_outputs_for_file_and_ext_and_level_and_compile ()\n    def get_command_outputs_for_file_and_ext_and_level_and_compile_and_optimize (self,\n                                                                                      filename,\n                                                                                      ext,\n                                                                                      level,\n                                                                                      compile,\n                                                                                      optimize):\n        \"\"\"Return a list of strings containing the output of the command\n        (as it would be printed to stdout).\n        \"\"\"\n        if self.dry_run:\n            return []\n        if self.distribution.has_pure_modules():\n            build_py = self.get_finalized_command('build_py')\n            outputs = build_py.", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < disassembledValues.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[j];\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-o', log_name,\n        '-c', 'qsub.qsub',\n        '-c', 'qsub.qsub.qsub',\n        '-c', 'qsub.qsub.qsub.qsub',\n        '-c', 'qsub.qsub.qsub.qsub.qsub',\n        '-c', 'qsub.qsub.qsub.qsub.qsub.qsub',\n        '-c', 'qsub.qsub.qsub.qsub.qsub.qsub.qsub',\n        '-c', 'qsub.qsub.qsub.qsub.qsub.qsub.qsub',\n        '-c', 'qsubsub.qsub.qsub.qsub.qsub.qsubsub.qsub',\n        '-c', 'qsubsub.qsub.qsub", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate(DelegateViewModel model)\n        {\n            var errors = new List<IModelError>();\n            model.Id = 0 ; // force a new object regardless\n            var result = service.TrySave(model, errors);\n            if (result)\n            {\n                service.AddEventToDelegateForEventDelegate(model.Id);\n            }\n            return Json(new\n            {\n                Model = model,\n                Success = result,\n                Errors = errors\n            });\n        }\n        // remove a relationship (EventDelegate) between Event (parent) Delegate (child) \n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]       \n        public ActionResult UnLinkEventDelegate(int modelId , int[] items)\n        {\n            var result = true;\n            try\n            {\n                items.DefaultIfNull().AsParallel().ToList().ForEach(i => {\n\t\t\t\t\t\tservice.RemoveEventToDelegateForEventDelegate(modelId, i);\t\t\t\t\t                  \n                });\n            }\n            catch \n            {\n\t\t\t\titems.DefaultIfNull().AsParallel().ToList().ForEach(i => {                    \n\t\t\t\t\tservice.AddEventToDelegateForEventDelegate(modelId, i);  \n                });\n                result = false;  \n            }\n                                   \n            return Json(new\n            {\n                Success = result\n            });\n        }\n        // add a relationship (EventDelegate) between existing Event (parent) Delegate (child) \n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]  \n        public ActionResult LinkEventDelegate(int modelId , int[] items)\n        {\n            var result = true;\n            try\n            {\n                items.DefaultIfNull().AsParallel().ToList().ForEach(i => {\n\t\t\t\t\tservice.AddEventToDelegateForEventDelegate(modelId, i);                    \n                });\n            }\n            catch \n            {\n\t\t\titems.DefaultIfNull().AsParallel().ToList().ForEach(i => {                    \n\t\t\t\tservice.RemoveEventToDelegateForEventDelegate(modelId, i);\n                });\n                result = false;  \n            }\n                                   \n            return Json(new\n            {\n                Success = result\n            });\n        }\n                \n        // Supports the many to many relationship (", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2})\", circle.X, circle.Y, circle.Radius);\n                    }\n                    if (obj is Vector2)\n                    {\n                        var vector = (Vector2) obj;\n                        return string.Format(\"({0},{1})\", vector.X, vector.Y);\n                    }\n                    if (obj is Vector3)\n                    {\n                        var vector = (Vector3) obj;\n                        return string.Format(\"({0},{1},{2})\", vector.X, vector.Y, vector.Z);\n                    }\n                    if (obj is Vector4)\n                    {\n                        var vector = (Vector4) obj;\n                        return string.Format(\"({0},{1},{2},{3})\", vector.X, vector.Y, vector.Z, vector.W);\n                    }\n                    if (obj is Vector2Int)\n                    {\n                        var vector = (Vector2Int) obj;\n                        return string.Format(\"({0},{1})\", vector.X, vector.Y);\n                    }\n                    if (obj is Vector3Int)\n                    {\n                        var vector = (Vector3Int) obj;\n                        return string.Format(\"({0},{1},{2})\", vector.X, vector.Y, vector.Z);\n                    }\n                    if (obj is Vector4Int)\n                    {\n                        var vector = (Vector4Int) obj;\n                        return string.Format(\"({0},{1},{2},{3})\", vector.X, vector.Y, vector.Z, vector.W);\n                    }\n                    if (obj is Vector2Short)\n                    {\n                        var vector = (Vector2Short) obj;\n                        return string.Format(\"({0},{1})\", vector.X, vector.Y);\n                    }\n                    if (obj is Vector3Short)\n                    {\n                        var vector = (Vector3Short) obj;\n                        return string.Format(\"({0},{1},{2})\", vector.X, vector.Y, vector.Z);\n                    }\n                    if (obj is Vector4Short)\n                    {\n                        var vector = (Vector4Short) obj;\n                        return string.Format(\"({0},{1},{2},{3})\", vector.X, vector.Y, vector.Z, vector.W);\n                    }\n                    if (obj is Vector2IntShort)\n                    {\n                        var vector = (Vector2IntShort) obj;\n                        return string.Format(\"({0},{1})\", vector.X, vector.Y);\n                    }\n                    if (obj is Vector3IntShort)\n                    {\n                        var vector = (Vector3IntShort) obj;\n                        return string.Format(\"({0},{1},{2})\", vector.X, vector.Y, vector.Z);\n                    }\n                    if (obj is Vector4IntShort)\n                    {\n                        var vector = (Vector4IntShort) obj;\n                        return string.Format(\"({0},{1},{2},{3})\", vector.X, vector.Y, vector.Z, vector.W);\n                    }\n                    if (obj is Vector2Long)\n                    {\n                        var vector = (Vector2Long) obj;\n                        return string.Format(\"({0},{1})\", vector.X, vector.Y);\n                    }\n                    if (obj is Vector3Long)\n                    {\n                        var vector = (Vector3Long) obj;\n                        return string.Format(\"({0},{1},{2})\", vector.X, vector.Y, vector.Z);\n                    }\n                    if (obj is Vector4Long)\n                    {\n                        var vector = (Vector4Long) obj;\n                        return string.Format(\"({0},{1},{2},{3})\", vector.X, vector.Y, vector.Z, vector.W);\n                    }\n                    if (obj is Vector2LongLong)\n                    {\n                        var vector = (Vector2LongLong) obj;\n                        return string.Format(\"({0},{1})\", vector.X, vector.Y);\n                    }\n                    if (obj is Vector3LongLong)\n                    {\n                        var vector = (Vector3LongLong) obj;\n                        return string.Format(\"({0},{1},{2})\", vector.X, vector.Y, vector.Z);\n                    }\n                    if (obj is Vector4LongLong)\n                    {\n                        var vector = (Vector4LongLong) obj;\n                        return string.Format(\"({0},{1},{2},{3})\", vector.X, vector.Y, vector.Z, vector.W);\n                    }\n                    if (obj is Vector2ShortShort)\n                    {\n                        var vector = (Vector2ShortShort) obj;\n                        return string.Format(\"({0},{1})\", vector.X, vector.Y);\n                    }\n                    if (obj is Vector3ShortShort)\n                    {\n                        var vector = (Vector3ShortShort) obj;\n                        return string.Format(\"({0},{1},{2})\", vector.X, vector.Y, vector.Z);\n                    }\n                    if (obj is Vector4ShortShort)\n                    {\n                        var vector = (Vector4ShortShort) obj;\n                        return string.Format(\"({0},{1},{2},{3})\", vector.X, vector.Y, vector.Z, vector.W);\n                    }\n                    if (obj is Vector2IntShortShort)\n                    {\n                        var vector = (Vector2IntShortShort) obj;\n                        return string.Format(\"({0},{1})\", vector.X, vector.Y);\n                    }\n                    if (obj is Vector3IntShortShort)\n                    {\n                        var vector = (Vector3IntShortShort) obj;\n                        return string.Format(\"({0},{1},{2})\", vector.X, vector.Y, vector.Z);\n                    }\n                    if (obj", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "       else:\n            #try direct download\n            res = self.load(\"http://fileserve.com/file/\",\n                           post={\"username\": self.user,\n                               \"password\": self.account.getAccountData(self.user)['password'],\n                               \"shorten\": self.file_id},\n                           decode=True)\n            if res:\n                res = json_loads(res)\n                if res['error_code'] == \"302\":\n                    premium_url = res['next']\n                elif res['error_code'] in [\"305\", \"500\"]:\n                    self.tempOffline()\n                elif res['error_code'] in [\"403\", \"605\"]:\n                    self.resetAccount()\n        if premium_url:\n            self.download(premium_url)\n        else:\n            self.fail(_(\"Couldn't retrieve download url\"))\n    def correctCaptcha(self):\n        res = self.load(self.URLS[2], post={'recaptcha_challenge_field': self.challenge,\n                                           'recaptcha_response_field': self.response})\n        if res:\n            res = json_loads(res)\n            if res['success']:\n                self.logDebug(\"Correct captcha\")\n                self.doLongWait(re.search(self.LONG_WAIT_PATTERN, self.html))\n            else:\n                self.fail(_(\"Couldn't correct captcha\"))\n    def invalidCaptcha(self):\n        self.logDebug(\"Invalid captcha\")\n        self.doLongWait(re.search(self.LONG_WAIT_PATTERN, self.html))\n    def download(self, url):\n        self.logDebug(\"Downloading %s\" % url)\n        self.req.headers[\"User-Agent\"] = \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0\"\n        self.req.headers[\"Accept\"] = \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"\n        self.req.headers[\"Accept-Language\"] = \"en-US,en;q=0.5\"\n        self.req.headers[\"Accept-Encoding\"] = \"gzip, deflate\"\n        self.req.headers[\"Connection\"] = \"keep-alive\"\n        self.req.headers[\"Referer\"] = self.url\n        self.req.headers[\"Host\"] = \"fileserve.com\"\n        self.req.headers[\"Cookie\"] = \"fileserve_session=%s\" % self.session\n        self.req.headers[\"Cookie\"] = \"fileserve_user=%s\" % self.user\n        self.req.headers[\"Cookie\"] = \"fileserve_pass=%s\" % self.account.getAccountData(self.user)['password']\n        self.req.headers[\"Cookie\"] = \"fileserve_id=%s\" % self.file_id\n        self.req.headers[\"Cookie\"] = \"fileserve_lang=%s\" % self.lang\n        self.req.headers[\"Cookie\"] = \"fileserve_lang_code=%s\" % self.lang_code\n        self.req.headers[\"Cookie\"] = \"fileserve_lang_code_default=%s\" % self.lang_code_default\n        self.req.headers[\"Cookie\"] = \"fileserve_lang_code_default_fallback=%s\" % self.lang_code_default_fallback\n        self.req.headers[\"Cookie\"] = \"fileserve_lang_code_fallback=%s\" % self.lang_code_fallback\n        self.req.headers[\"Cookie\"] = \"fileserve_lang_code_fallback_default=%s\" % self.lang_code_fallback_default\n        self.req.headers[\"Cookie\"] = \"fileserve_lang_code_fallback_default_fallback=%s\" % self.lang_code_fallback_default_fallback\n        self.req.headers[\"Cookie\"] = \"fileserve_lang_code_fallback_default_fallback_fallback=%s\" % self.lang_code_fallback_default_fallback_fallback\n        self.req.headers[\"Cookie\"] = \"fileserve_lang_code_fallback_default_fallback_fallback_fallback=%s\" % self.lang_code_fallback_default_fallback_fallback_fallback\n        self.req.headers[\"Cookie\"] = \"fileserve_lang_code_fallback_default_fallback_fallback_fallback_fallback=%s\" % self.lang_code_fallback_default_fallback_fallback_fallback_fallback_fallback\n        self.req.headers[\"Cookie\"] = \"fileserve_lang_code_fallback_default_fallback_fallback_fallback_fallback_fallback_fallback=%s\" % self.lang_code_fallback_default_fallback_fallback_fallback_fallback_fallback_fallback_fallback\n        self.req.headers[\"Cookie\"] = \"fileserve_lang_code_fallback_default_fallback_fallback_fallback_fallback_fallback_fallback_fallback=%s\" % self.lang_code_fallback_default_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback\n        self.req.headers[\"Cookie\"] = \"fileserve_lang_code_fallback_default_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback=%s\" % self.lang_code_fallback_default_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback\n        self.req.headers[\"Cookie\"] = \"fileserve_lang_code_fallback_default_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fallback_fall", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count == 0)\n\t\t\t\treturn null;\n\t\t\tvar closest = path[0];\n\t\t\tif (closest.Distance(searchFromLoc) < searchRadius)\n\t\t\t\treturn closest;\n\t\t\treturn path.Last();\n\t\t}\n\t\tprivate CPos GetSearchFromLocation(Actor self)\n\t\t{\n\t\t\tvar lastproc = harv.LastLinkedProc ?? harv.LinkedProc;\n\t\t\tif (lastproc != null && !lastproc.Disposed)\n\t\t\t{\n\t\t\t\tvar deliveryLoc = lastproc.Location + lastproc.Trait<IAcceptResources>().DeliveryOffset;\n\t\t\t\tif (self.Location == deliveryLoc && harv.IsEmpty)\n\t\t\t\t\treturn deliveryLoc;\n\t\t\t}\n\t\t\treturn self.Location;\n\t\t}\n\t\tpublic override string ToString()\n\t\t{\n\t\t\treturn \"FindAndDeliverResources\";\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"dhcpd restart failed\")\n                       return False\n                else:\n                    service_restart = \"service %s restart\" % service_name\n                    rc = utils.subprocess_call(self.logger, service_restart, shell=True)\n                    if rc != 0:\n                       self.logger.error(\"dhcpd restart failed\")\n                       return False\n            else:\n                service_restart = \"service dhcpd restart\"\n                rc = utils.subprocess_call(self.logger, service_restart, shell=True)\n                if rc != 0:\n                    self.logger.error(\"dhcpd restart failed\")\n                    return False\n    def write_dhcp_file(self):\n        \"\"\"\n        Write the dhcp.conf file\n        \"\"\"\n        self.logger.info(\"writing dhcp.conf\")\n        dhcp_conf = self.api.dhcp_conf()\n        dhcp_conf.write_file(self.settings.dhcp_conf_file)\n    def write_boot_files(self):\n        \"\"\"\n        Write the boot files\n        \"\"\"\n        self.logger.info(\"writing boot files\")\n        self.pxegen.write_boot_files()\n    def write_tftpd_files(self):\n        \"\"\"\n        Write the tftpd.conf file\n        \"\"\"\n        self.logger.info(\"writing tftpd.conf\")\n        tftpd_conf = self.api.tftpd_conf()\n        tftpd_conf.write_file(self.settings.tftpd_conf_file)\n    def write_kickstart_files(self):\n        \"\"\"\n        Write the kickstart files\n        \"\"\"\n        self.logger.info(\"writing kickstart files\")\n        self.pxegen.write_kickstart_files()\n    def write_kickstart_files_sys(self):\n        \"\"\"\n        Write the kickstart files for the system\n        \"\"\"\n        self.logger.info(\"writing kickstart files for system\")\n        self.pxegen.write_kickstart_files_sys()\n    def write_kickstart_files_distro(self):\n        \"\"\"\n        Write the kickstart files for the distro\n        \"\"\"\n        self.logger.info(\"writing kickstart files for distro\")\n        self.pxegen.write_kickstart_files_distro()\n    def write_kickstart_files_repo(self):\n        \"\"\"\n        Write the kickstart files for the repo\n        \"\"\"\n        self.logger.info(\"writing kickstart files for repo\")\n        self.pxegen.write_kickstart_files_repo()\n    def write_kickstart_files_profile(self):\n        \"\"\"\n        Write the kickstart files for the profile\n        \"\"\"\n        self.logger.info(\"writing kickstart files for profile\")\n        self.pxegen.write_kickstart_files_profile()\n    def write_kickstart_files_repo_profile(self):\n        \"\"\"\n        Write the kickstart files for the repo and profile\n        \"\"\"\n        self.logger.info(\"writing kickstart files for repo and profile\")\n        self.pxegen.write_kickstart_files_repo_profile()\n    def write_kickstart_files_repo_system(self):\n        \"\"\"\n        Write the kickstart files for the repo and system\n        \"\"\"\n        self.logger.info(\"writing kickstart files for repo and system\")\n        self.pxegen.write_kickstart_files_repo_system()\n    def write_kickstart_files_repo_profile_system(self):\n        \"\"\"\n        Write the kickstart files for the repo, profile and system\n        \"\"\"\n        self.logger.info(\"writing kickstart files for repo, profile and system\")\n        self.pxegen.write_kickstart_files_repo_profile_system()\n    def write_kickstart_files_repo_profile_system_distro(self):\n        \"\"\"\n        Write the kickstart files for the repo, profile, system and distro\n        \"\"\"\n        self.logger.info(\"writing kickstart files for repo, profile, system and distro\")\n        self.pxegen.write_kickstart_files_repo_profile_system_distro()\n    def write_kickstart_files_repo_profile_system_distro_profile(self):\n        \"\"\"\n        Write the kickstart files for the repo, profile, system, distro and profile\n        \"\"\"\n        self.logger.info(\"writing kickstart files for repo, profile, system, distro and profile\")\n        self.pxegen.write_kickstart_files_repo_profile_system_distro_profile()\n    def write_kickstart_files_repo_profile_system_distro_", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.newBuilder().setSeverity(EventSeverity.ERROR);\n        return Event.new", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n                if (stateIndex >= MAXIMUM_ORDER)\n                {\n                    goto NoLoop;\n                }\n                PpmState state = states[stateIndex++];\n                if (state.Symbol == symbol)\n                {\n                ", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false, false, true, 2, true, '\\0', 2,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeSS(tag);\n                return new DicomAttributeSS(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Integer VR.\n        /// </summary>\n        public static readonly DicomVr SIvr = new DicomVr(\"SI\", false, false, true, 4, true, '\\0', 4,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeSI(tag);\n                return new DicomAttributeSI(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short Integer VR.\n        /// </summary>\n        public static readonly DicomVr SIVr = new DicomVr(\"SIV\", false, false, true, 2, true, '\\0', 2,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeSIV(tag);\n                return new DicomAttributeSIV(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Integer String VR.\n        /// </summary>\n        public static readonly DicomVr SISvr = new DicomVr(\"SIS\", false, false, true, 12, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeSIS(tag);\n                return new DicomAttributeSIS(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Long String VR.\n        /// </summary>\n        public static readonly DicomVr SLTvr = new DicomVr(\"SLT\", false, false, true, 64, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeSLT(tag);\n                return new DicomAttributeSLT(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short Text VR.\n        /// </summary>\n        public static readonly DicomVr SSTvr = new DicomVr(\"SST\", false, false, true, 10240, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeSST(tag);\n                return new DicomAttributeSST(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Text VR.\n        /// </summary>\n        public static readonly DicomVr STvr = new DicomVr(\"ST\", false, false, true, 64, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeST(tag);\n                return new DicomAttributeST(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Text String VR.\n        /// </summary>\n        public static readonly DicomVr STSvr = new DicomVr(\"STS\", false, false, true, 12, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeSTS(tag);\n                return new DicomAttributeSTS(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Text String VR.\n        /// </summary>\n        public static readonly DicomVr SUTvr = new DicomVr(\"S", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t}\n\t\tstring [] sessionValues = (string []) sessionValuesArray.ToArray(typeof (string));\n\t\t\n\t\t//if we are going to delete a test type, we need to show a", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 10)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00\\x00\\", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (Intel)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"mac-bundle\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.mac_bundle_download ?>\"><?cs var:sdk.mac_bundle_download ?></a>\n    </td>\n    <td><?cs var:sdk.mac_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.mac_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32-bit (x86)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"linux-bundle\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.linux_bundle_download ?>\"><?cs var:sdk.linux_bundle_download ?></a>\n    </td>\n    <td><?cs var:sdk.linux_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.linux_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 64-bit (x86)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"linux-bundle64\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.linux64_bundle_download ?>\"><?cs var:sdk.linux64_bundle_download ?></a>\n    </td>\n    <td><?cs var:sdk.linux64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.linux64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 64-bit (ARM)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"linux-bundlearm\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.linux64arm_bundle_download ?>\"><?cs var:sdk.linux64arm_bundle_download ?></a>\n    </td>\n    <td><?cs var:sdk.linux64arm_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.linux64arm_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 64-bit (ARM EABI)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"linux-bundlearmebi\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.linux64armebi_bundle_download ?>\"><?cs var:sdk.linux64armebi_bundle_download ?></a>\n    </td>\n    <td><?cs var:sdk.linux64armebi_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.linux64armebi_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 64-bit (ARM VFP)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"linux-bundlevfp\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.linux64vfp_bundle_download ?>\"><?cs var:sdk.linux64vfp_bundle_download ?></a>\n    </td>\n    <td><?cs var:sdk.linux64vfp_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.linux64vfp_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 64-bit (ARM NEON)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"linux-bundleneon\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.linux64neon_bundle_download ?>\"><?cs var:sdk.linux64neon_bundle_download ?></a>\n    </td>\n    <td><?cs var:sdk.linux64neon_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.linux64neon_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 64-bit (ARM EABI NEON)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"linux-bundleneoneabi\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.linux64neoneabi_bundle_download ?>\"><?cs var:sdk.linux64neoneabi_bundle_download ?></a>\n    </td>\n    <td><?cs var:sdk.linux64neoneabi_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.linux64neoneabi_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 64-bit (ARM EABI NEON VFP)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"linux-bundleneoneabifp\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.linux64neoneabifp_bundle_download ?>\"><?cs var:sdk.linux64neoneabifp_bundle_download ?></a>\n    </td>\n    <td><?cs var:sdk.linux64neoneabifp_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.linux64neoneabifp_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 64-bit (ARM EABI NEON VFP-D16)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"linux-bundleneoneabifpd16\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.linux64neoneabifpd16_bundle_download ?>\"><?cs var:sdk.linux64neoneabifpd16_bundle_download ?></a>\n    </td>\n    <td><?cs var:sdk.linux64neoneabifpd16_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.linux64neoneabifpd16_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 64-bit (ARM EABI NEON VFP-D32)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"linux-bundleneoneabifpd32\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.linux64neoneabifpd32_bundle_download ?>\"><?cs var:sdk.linux64neoneabifpd32_bundle_download ?></a>\n    </td>\n    <td><?cs var:sdk.linux64neoneabifpd32_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.linux64neoneabifpd32_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 64-bit (ARM EABI NEON VFP-D64)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"linux-bundleneoneabifpd64\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.linux64neoneabifpd64_bundle_download ?>\"><?cs var:sdk.linux64neoneabifpd64_bundle_download ?></a>\n    </td>\n    <td><?cs var:sdk.linux64neoneabifpd64_bundle", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'],\n           csi_95.x, csi_95.y, label='95% CI')\n    ax.plot(cr['combined'][app][VC]['durations'],\n           cr['combined'][app][VC]['durations'].mean(),\n           'k', label='Mean')\n    ax.legend()\n    plt.show()\ndef plot_app_vc_pivot(cr, app, test=VC, stat='mean'):\n    loc = plticker.MultipleLocator(base=1.0)\n    fig, ax = plt.subplots()\n    ax.xaxis.set_major_locator(loc)\n    plt.xlabel('Runs')\n    plt.ylabel('Time in ms')\n    plt.title('%s, %s, individual %ss vs. %d-count 95%% CI' %\n                (app, test, stat, len(cr['pivot'][app][test][stat]['values'])))\n    csi_95 = cr['pivot'][app][test][stat]['intervals'][0]['interval']\n    print csi_95\nNext line of code:\n    ax.plot(cr['pivot'][app][test][stat]['values'],\n           csi_95.x, csi_95.y, label='95% CI')\n    ax.plot(cr['pivot'][app][test][stat]['values'],\n           cr['pivot'][app][test][stat]['values'].mean(),\n           'k', label='Mean')\n    ax.legend()\n    plt.show()\ndef main():\n    parser = argparse.ArgumentParser(\n        description='Plot the performance of a single application over time.')\n    parser.add_argument('--app', '-a',\n                            help='Application to plot.')\n    parser.add_argument('--test', '-t',\n                        help='Test to plot.')\n    parser.add_argument('--stat', '-s',\n                        help='Statistic to plot.')\n    parser.add_argument('--first-repetition', '-fr',\n                        help='First repetition to plot.')\n    parser.add_argument('--last-repetition', '-lr',\n                        help='Last repetition to plot.')\n    parser.add_argument('--app-pattern', '-p',\n                        help='Regex pattern to match against the application name.')\n    parser.add_argument('--test-pattern', '-t',\n                        help='Regex pattern to match against the test name.')\n    parser.add_argument('--app-vc', '-vc',\n                        help='Plot the application vs. the 95th percentile of the '\n                             '95th percentile of the 95th percentile.')\n    parser.add_argument('--app-vc-pivot', '-vcp',\n                        help='Plot the application vs. the 95th percentile of the '\n                             '95th percentile of the 95th percentile.')\n    parser.add_argument('--app-vc-pivot-first-repetition', '-vcpfr',\n                        help='Plot the application vs. the 95th percentile of the '\n                             '95th percentile of the 95th percentile.')\n    parser.add_argument('--app-vc-pivot-last-repetition', '-vcplr',\n                        help='Plot the application vs. the 95th percentile of the '\n                             '95th percentile of the 95th percentile.')\n    args = parser.parse_args()\n    if args.app_vc:\n        plot_app_vc(load_and_crunch_result_sets(args.app_pattern,\n                                               args.test_pattern,\n                                               args.first_repetition,\n                                               args.last_repetition),\n                   args.app, args.test, args.stat)\n    if args.app_vc_pivot:\n        plot_app_vc_pivot(load_and_crunch_result_sets(args.app_pattern,\n                                                      args.test_pattern,\n                                                      args.first_repetition,\n                                                      args.last_repetition),\n                        args.app, args.test, args.stat)\n    if args.app_vc_pivot_first_repetition:\n        plot_app_vc_pivot(load_and_crunch_result_sets(args.app_pattern,\n                                                          args.test_pattern,\n                                                          args.first_repetition,\n                                                          args.last_repetition),\n                           args.app, args.test, args.stat,\n                           first_repetition=args.first_repetition)\n    if args.app_vc_pivot_last_repetition:\n        plot_app_vc_pivot(load_and_crunch_result_sets(args.app_pattern,\n                                                         args.test_pattern,\n                                                         args.first_repetition,\n                                                         args.last_repetition),\n                           args.app, args.test, args.stat,\n                           last_repetition=args.last_repetition)\nif __name__ == '__main__':\n    main()\n", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self.assertEqual(self.mockos.seteuidCalls, [])\nNext line of code:\n    self.assertEqual(self.mockos.setegidCalls, [])\nNext line of code:\n    self.mockos.seteuidC", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\t\telse if(model.isArmed()){\n\t\t\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.isPressed()){\n\t\t\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t\t}\n\t\t\t\t\telse if(model.isSelected()){\n\t\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t\t}\n\t\t\t\t\telse if(model.isEnabled()){\n\t\t\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(bDrawCheck){\n\t\t\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t\t}\n\t\t\t\t\telse if(bDrawCross){\n\t\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void paintIcon(Component c, Graphics g, int x, int y) {\n\t\t\tJCheckBox cb = (JCheckBox)c;\n\t\t\tTristateCheckModel model = (TristateCheckModel)cb.getModel();\n\t\t\t\n\t\t\tboolean bDrawCross = model.getState() == CROSSED;\n\t\t\tboolean bDrawCheck = model.getState() == CHECKED;\n\t\t\t\n\t\t\tint controlSize = getControlSize();\n\t\t\t\n\t\t\tif(model.isEnabled()){\n\t\t\t\tif(model.isPressed() && model.isArmed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.isArmed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.isPressed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.isSelected()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.isEnabled()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\telse{\n\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void paintIcon(Component c, Graphics g, int x, int y, int width, int height) {\n\t\t\tJCheckBox cb = (JCheckBox)c;\n\t\t\tTristateCheckModel model = (TristateCheckModel)cb.getModel();\n\t\t\t\n\t\t\tboolean bDrawCross = model.getState() == CROSSED;\n\t\t\tboolean bDrawCheck = model.getState() == CHECKED;\n\t\t\t\n\t\t\tint controlSize = getControlSize();\n\t\t\t\n\t\t\tif(model.isEnabled()){\n\t\t\t\tif(model.isPressed() && model.isArmed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.isArmed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.isPressed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.isSelected()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.isEnabled()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(bDrawCross){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(bDrawCheck){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[1])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[3])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[4])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[5])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[6])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[7])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[8])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[9])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[10])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[11])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[12])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[13])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[14])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[15])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[16])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[17])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[18])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[19])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[20])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[21])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[22])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[23])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[24])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[25])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[26])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[27])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[28])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[29])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[30])\n  if winner != 1:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[31])\n  if", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(kind, offset, value);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror) {\n        writeHeader(mirror, array);\n        writeElements(mirror, array);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset) {\n        writeHeader(mirror, array, offset);\n        writeElements(mirror, array, offset);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length) {\n        writeHeader(mirror, array, offset);\n        writeElements(mirror, array, offset, length);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length) {\n        writeHeader(mirror, array, offset, length);\n        writeElements(mirror, array, offset, length);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int scaleFactor) {\n        writeHeader(mirror, array, offset, length, scaleFactor);\n        writeElements(mirror, array, offset, length, scaleFactor);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int scaleFactor, int alignment) {\n        writeHeader(mirror, array, offset, length, scaleFactor, alignment);\n        writeElements(mirror, array, offset, length, scaleFactor, alignment);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int scaleFactor, int alignment) {\n        writeHeader(mirror, array, offset, length, scaleFactor, alignment);\n        writeElements(mirror, array, offset, length, scaleFactor, alignment);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int scaleFactor, int alignment, int displacement) {\n        writeHeader(mirror, array, offset, length, scaleFactor, alignment, displacement);\n        writeElements(mirror, array, offset, length, scaleFactor, alignment, displacement);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int scaleFactor, int alignment, int displacement, int scaleFactor2) {\n        writeHeader(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2);\n        writeElements(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int scaleFactor, int alignment, int displacement, int scaleFactor2, int alignment2) {\n        writeHeader(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2);\n        writeElements(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int scaleFactor, int alignment, int displacement, int scaleFactor2, int alignment2, int displacement2) {\n        writeHeader(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2);\n        writeElements(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int scaleFactor, int alignment, int displacement, int scaleFactor2, int alignment2, int displacement2, int displacement3) {\n        writeHeader(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2, displacement3);\n        writeElements(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2, displacement3);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int scaleFactor, int alignment, int displacement, int scaleFactor2, int alignment2, int displacement2, int displacement3, int displacement4) {\n        writeHeader(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2, displacement3, displacement4);\n        writeElements(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2, displacement3, displacement4);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int scaleFactor, int alignment, int displacement, int scaleFactor2, int alignment2, int displacement2, int displacement3, int displacement4, int displacement5) {\n        writeHeader(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2, displacement3, displacement4, displacement5);\n        writeElements(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2, displacement3, displacement4, displacement5);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int scaleFactor, int alignment, int displacement, int scaleFactor2, int alignment2, int displacement2, int displacement3, int displacement4, int displacement5, int displacement6) {\n        writeHeader(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2, displacement3, displacement4, displacement5, displacement6);\n        writeElements(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2, displacement3, displacement4, displacement5, displacement6);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int scaleFactor, int alignment, int displacement, int scaleFactor2, int alignment2, int displacement2, int displacement3, int displacement4, int displacement5, int displacement6, int displacement7) {\n        writeHeader(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2, displacement3, displacement4, displacement5, displacement6, displacement7);\n        writeElements(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2, displacement3, displacement4, displacement5, displacement6, displacement7);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int scaleFactor, int alignment, int displacement, int scaleFactor2, int alignment2, int displacement2, int displacement3, int displacement4, int displacement5, int displacement6, int displacement7, int displacement8) {\n        writeHeader(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2, displacement3, displacement4, displacement5, displacement6, displacement7, displacement8);\n        writeElements(mirror, array, offset, length, scaleFactor, alignment, displacement, scaleFactor2, alignment2, displacement2, displacement3, displacement4, displacement5, displacement6, displacement7, displacement8);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror, int offset, int length, int", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(ProjectDirectory, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }\n            return null;\n        }\n        /// <summary>\n        /// Resolves an assembly reference using a path relative to the project \n        /// directory.\n        /// </summary>\n        /// <param name=\"relativePath\">The relative path to the assembly.</param>\n        /// <returns>\n        /// The full path of the assembly, or <see langword=\"null\" /> if the \n        /// assembly could not be located.\n        /// </returns>\n        protected string ResolveFromRelativePath(string relativePath, string projectDirectory) {\n            if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(projectDirectory, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }\n            return null;\n        }\n        /// <summary>\n        /// Resolves an assembly reference using a path relative to the project \n        /// directory.\n        /// </summary>\n        /// <param name=\"relativePath\">The relative path to the assembly.</param>\n        /// <returns>\n        /// The full path of the assembly, or <see langword=\"null\" /> if the \n        /// assembly could not be located.\n        /// </returns>\n        protected string ResolveFromRelativePath(string relativePath) {\n            return ResolveFromRelativePath(relativePath, ProjectDirectory);\n        }\n        /// <summary>\n        /// Resolves an assembly reference using a path relative to the project \n        /// directory.\n        /// </summary>\n        /// <param name=\"relativePath\">The relative path to the assembly.</param>\n        /// <param name=\"projectDirectory\">The project directory.</param>\n        /// <returns>\n        /// The full path of the assembly, or <see langword=\"null\" /> if the \n        /// assembly could not be located.\n        /// </returns>\n        protected string ResolveFromRelativePath(string relativePath, string projectDirectory) {\n            return ResolveFromRelativePath(relativePath, projectDirectory, true);\n        }\n        /// <summary>\n        /// Resolves an assembly reference using a path relative to the project \n        /// directory.\n        /// </summary>\n        /// <param name=\"relativePath\">The relative path to the assembly.</param>\n        /// <param name=\"projectDirectory\">The project directory.</param>\n        /// <param name=\"copyLocal\">\n        /// <see langword=\"true\" /> to copy the assembly locally; otherwise, \n        /// <see langword=\"false\" />.\n        /// </param>\n        /// <returns>\n        /// The full path of the assembly, or <see langword=\"null\" /> if the \n        /// assembly could not be located.\n        /// </returns>\n        protected string ResolveFromRelativePath(string relativePath, string projectDirectory, bool copyLocal) {\n            if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(projectDirectory, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }\n            if (copyLocal) {\n                return FileUtils.CombinePaths(ProjectDirectory, relativePath);\n            }\n            return null;\n        }\n        /// <summary>\n        /// Resolves an assembly reference using a path relative to the project \n        /// directory.\n        /// </summary>\n        /// <param name=\"relativePath\">The relative path to the assembly.</param>\n        /// <returns>\n        /// The full path of the assembly, or <see langword=\"null\" /> if the \n        /// assembly could not be located.\n        /// </returns>\n        protected string ResolveFromRelativePath(string relativePath) {\n            return ResolveFromRelativePath(relativePath, ProjectDirectory, true);\n        }\n        /// <summary>\n        /// Resolves an assembly reference using a path relative to the project \n        /// directory.\n        /// </summary>\n        /// <param name=\"relativePath\">The relative path to the assembly.</param>\n        /// <param name=\"projectDirectory\">The project directory.</param>\n        /// <param name=\"copyLocal\">\n        /// <see langword=\"true\" /> to copy the assembly locally; otherwise, \n        /// <see langword=\"false\" />.\n        /// </param>\n        /// <returns>\n        /// The full path of the assembly, or <see langword=\"null\" /> if the \n        /// assembly could not be located.\n        /// </returns>\n        protected string ResolveFromRelativePath(string relativePath, string projectDirectory, bool copyLocal) {\n            if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(projectDirectory, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }\n            if (copyLocal) {\n                return FileUtils.CombinePaths(ProjectDirectory, relativePath);\n            }\n            return null;\n        }\n        /// <summary>\n        /// Resolves an assembly reference using a path relative to the project \n        /// directory.\n        /// </summary>\n        /// <param name=\"relativePath\">The relative path to the assembly.</param>\n        /// <param name=\"projectDirectory\">The project directory.</param>\n        /// <returns>\n        /// The full path of the assembly, or <see langword=\"null\" /> if the \n        /// assembly could not be located.\n        /// </returns>\n        protected string ResolveFromRelativePath(string relativePath, string projectDirectory, bool copyLocal, bool copyLocalForce) {\n            if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(projectDirectory, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }\n            if (copyLocalForce) {\n                return FileUtils.CombinePaths(ProjectDirectory, relativePath);\n            }\n            return null;\n        }\n        /// <summary>\n        /// Resolves an assembly reference using a path relative to the project \n        /// directory.\n        /// </summary>\n        /// <param name=\"relativePath\">The relative path to the assembly.</param>\n        /// <returns>\n        /// The full path of the assembly, or <see langword=\"null\" /> if the \n        /// assembly could not be located.\n        /// </returns>\n        protected string ResolveFromRelativePath(string relativePath) {\n            return ResolveFromRelativePath(relativePath, ProjectDirectory, true, true);\n        }", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   string = string.format(*args, **kwargs)\n    \"\"\"\n    \"\"\"\n    string = string.format(*args, **kwargs)\n    \"\"\"\n    \"\"\"\n    return string\ndef str_format_with_color(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using\n    colorized text instead of colorized text\n    \n    >>> str_format_with_color('{a}', a=2)\n    {a}\n    >>> str_format_with_color('{%a%}', a=2)\n    2\n    >>> str_format_with_color('{% a %}', a=2)\n    2\n    \"\"\"\n    # Accept whitespace directly inside {% ... %} tags\n    string = re.compile(r'\\{%\\s+').sub('{%', string)\n    string = re.compile(r'\\s+%\\}').sub('%}', string)\n    string = string.replace('{','{{').replace('}','}}') \\\n        .replace('{{%', '{').replace('%}}','}')\n    string = string.format(*args, **kwargs)\n    return string\ndef str_format_with_color_and_color_opts(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using\n    colorized text and color options\n    \n    >>> str_format_with_color_and_color_opts('{a}', a=2)\n    {a}\n    >>> str_format_with_color_and_color_opts('{%a%}', a=2)\n    2\n    >>> str_format_with_color_and_color_opts('{% a %}', a=2)\n    2\n    \"\"\"\n    # Accept whitespace directly inside {% ... %} tags\n    string = re.compile(r'\\{%\\s+').sub('{%', string)\n    string = re.compile(r'\\s+%\\}').sub('%}', string)\n    string = string.replace('{','{{').replace('}','}}') \\\n        .replace('{{%', '{').replace('%}}','}')\n    string = string.format(*args, **kwargs)\n    return string\ndef str_format_with_color_and_color_opts_and_color_opts(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using\n    colorized text, color options, and color options\n    \n    >>> str_format_with_color_and_color_opts_and_color_opts('{a}', a=2)\n    {a}\n    >>> str_format_with_color_and_color_opts_and_color_opts('{%a%}', a=2)\n    2\n    >>> str_format_with_color_and_color_opts_and_color_opts('{% a %}', a=2)\n    2\n    \"\"\"\n    # Accept whitespace directly inside {% ... %} tags\n    string = re.compile(r'\\{%\\s+').sub('{%', string)\n    string = re.compile(r'\\s+%\\}').sub('%}', string)\n    string = string.replace('{','{{').replace('}','}}') \\\n        .replace('{{%', '{').replace('%}}','}')\n    string = string.format(*args, **kwargs)\n    return string\ndef str_format_with_color_and_color_opts_and_color_opts_and_color_opts(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using\n    colorized text, color options, color options, and color options\n    \n    >>> str_format_with_color_and_color_opts_and_color_opts('{a}', a=2)\n    {a}\n    >>> str_format_with_color_and_color_opts_and_color_opts('{%a%}', a=2)\n    2\n    >>> str_format_with_color_and_color_opts_and_color_opts('{% a %}', a=2)\n    2\n    \"\"\"\n    # Accept whitespace directly inside {% ... %} tags\n    string = re.compile(r'\\{%\\s+').sub('{%', string)\n    string = re.compile(r'\\s+%\\}').sub('%}', string)\n    string = string.replace('{','{{').replace('}','}}') \\\n        .replace('{{%', '{').replace('%}}','}')\n    string = string.format(*args, **kwargs)\n    return string\ndef str_format_with_color_and_color_opts_and_color_opts_and_color_opts_and_color_opts(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using\n    colorized text, color options, color options, color options, and color options\n    \n    >>> str_format_with_color_and_color_opts_and_color_opts_and_color_opts('{a}', a=2)\n    {a}\n    >>> str_format_with_color_and_color_opts_and_color_opts_and_color_opts('{%a%}', a=2)\n    2\n    >>> str_format_with_color_and_color_opts_and_color_opts_and_color_opts('{% a %}', a=2)\n    2\n    \"\"\"\n    # Accept whitespace directly inside {% ... %} tags\n    string = re.compile(r'\\{%\\s+').sub('{%', string)\n    string = re.compile(r'\\s+%\\}').sub('%}', string)\n    string = string.replace('{','{{').replace('}','}}') \\\n        .replace('{{%', '{').replace('%}}','}')\n    string = string.format(*args, **kwargs)\n    return string\ndef str_format_with_color_and_color_opts_and_color_opts_and_color_opts_and_color_opts(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using\n    colorized text, color options, color options, color options, and color options\n    \n    >>> str_format_with_color_and_color_opts_and_color_opts_and_color_opts('{a}', a=2)\n    {a}\n    >>> str_format_with_color_and_color_opts_and_color_opts_and_color_opts('{%a%}', a=2)\n    2\n    >>> str_format_with_color_and_color_opts_and_color_opts_and_color_opts('{% a %}', a=2)\n    2\n    \"\"\"\n    # Accept whitespace directly inside {% ... %} tags\n    string = re.compile(r'\\{%\\s+').sub('{%', string)\n   ", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       i20 = i16 - 1 + paramInt23;\n        i21 = i19 - 1 + paramInt23;\n        i22 = i20 + i21;\n        i23 = i22 - 1 +", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t\t\tif( s.name == name ) {\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tpublic State GetStateByIndex( int index ) {\n\t\t\treturn states[index];\n\t\t}\n\t\t\n\t\tpublic State GetStateByLayerIndex( int index ) {\n\t\t\treturn states[index];\n\t\t}\n\t\t\n\t\tpublic State GetStateByLayerName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t\t\tif( s.name == name ) {\n\t\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tpublic State GetStateByLayerIndex( int index ) {\n\t\t\treturn states[index];\n\t\t}\n\t\t\n\t\tpublic State GetStateByLayerName( string name ) {\n\t\t\t\tforeach( State s in states ) {\n\t\t\t\t\tif( s.name == name ) {\n\t\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\n\t\tpublic State GetStateByLayerIndex( int index ) {\n\t\t\treturn states[index];\n\t\t}\n\t\t\n\t\tpublic State GetStateByLayerIndex( int index , string name ) {\n\t\t\treturn states[index];\n\t\t}\n\t\t\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   CollisionObjects = new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Lux\n            Spells.Add(\n                new Sp", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.password\"));\n\t}\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(\n            OSError,\n            lambda: subprocess.Popen(\n                ['/bin/sh', '-c', 'echo hello'],\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (propertiesName == null)\n\t\t\t\tthrow new InvalidOperationException(\"propertiesName must be set before calling StartCoreServices\");\n\t\t\tif (configDirectory == null)\n\t\t\t\tthrow new InvalidOperationException(\"configDirectory must be set before calling StartCoreServices\");\n\t\t\tif (dataDirectory == null)\n\t\t\t\tthrow new InvalidOperationException(\"dataDirectory must be set before calling StartCoreServices\");\n\t\t\tif (applicationName == null)\n\t\t\t\tthrow new InvalidOperationException(\"applicationName must be set before calling StartCoreServices\");\n\t\t\t\n\t\t\t// create the property service\n\t\t\tPropertyService.Initialize(propertiesName, configDirectory, dataDirectory, applicationName);\n\t\t\t\n\t\t\t// create the resource service\n\t\t\tResourceService.Initialize(dataDirectory);\n\t\t\t\n\t\t\t// create the add in tree\n\t\t\tAddInTree.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the add in manager\n\t\t\tAddInManager.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the message service\n\t\t\tMessageService.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the logging service\n\t\t\tLoggingService.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t\t// create the file service\n\t\t\tFileService.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file watcher\n\t\t\tFileWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t\t// create the file system watcher\n\t\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\t\n\t\t\t\t// create the file system watcher\n\t\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system watcher\n\t\t\tFileSystemWatcher.Initialize(configDirectory, dataDirectory);\n\t\t\t\n\t\t\t// create the file system", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tinternal void SetIndex (Index index)\n\t\t{\n\t\t\tIndex = index;\n\t\t}\n\t\tinternal void SetConstraintName (string name)\n\t\t{\n\t\t\t_constraintName = name;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints)\n\t\t{\n\t\t\tConstraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection, bool add, bool remove, bool removeAll, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool removeAllConstraints, bool remove", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout_2.addWidget(self.settings_groupbox)\n        self.verticalLayout_2.addWidget(self.settings_groupbox)\n        self.verticalLayout_2.addWidget(self.settings_groupbox)\n        self.verticalLayout_", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               Bundle args = getArguments();\n                String stationId = args.getString( NoaaService.STATION_ID );\n                View detail = findViewById( R.id.wx_detail_layout );\n                detail.setVisibility( View.GONE );\n                LinearLayout layout = (LinearLayout) findViewById( R.id.wx_status_layout );\n                layout.removeAllViews();\n                layout.setVisibility( View.GONE );\n                return false;\n            }\n            Cursor awos = result[ 1 ];\n            if ( awos == null || !awos.moveToFirst() ) {\n                // No station with TAF was found nearby\n                Bundle args = getArguments();\n                String stationId = args.getString( NoaaService.STATION_ID );\n                View detail = findViewById( R.id.wx_detail_layout );\n                detail.setVisibility( View.GONE );\n                LinearLayout layout = (LinearLayout) findViewById( R.id.wx_status_layout );\n                layout.removeAllViews();\n                layout.setVisibility( View.GONE );\n                return false;\n            }\n            mLastForecast = new Forecast( awos );\n            mLastForecast.setStationId( stationId );\n            mLastForecast.setStationName( awos.getString( awos.getColumnIndex( Awos1.STATION_NAME ) ) );\n            mLastForecast.setStationFrequency( awos.getString( awos.getColumnIndex( Awos1.STATION_FREQUENCY ) ) );\n            mLastForecast.setStationPhone( awos.getString( awos.getColumnIndex( Awos1.STATION_PHONE_NUMBER ) ) );\n            mLastForecast.setStationCity( awos.getString( awos.getColumnIndex( Airports.ASSOC_CITY ) ) );\n            mLastForecast.setStationState( awos.getString( awos.getColumnIndex( Airports.ASSOC_STATE ) ) );\n            mLastForecast.setStationIcao( awos.getString( awos.getColumnIndex( Awos1.WX_SENSOR_IDENT ) ) );\n            mLastForecast.setStationLatitude( awos.getDouble( awos.getColumnIndex( Awos1.STATION_LATITUDE_DEGREES ) ) );\n            mLastForecast.setStationLongitude( awos.getDouble( awos.getColumnIndex( Awos1.STATION_LONGITUDE_DEGREES ) ) );\n            mLastForecast.setStationTime( awos.getLong( awos.getColumnIndex( Awos1.STATION_TIME ) ) );\n            mLastForecast.setStationFrequency( awos.getString( awos.getColumnIndex( Awos1.STATION_FREQUENCY ) ) );\n            mLastForecast.setStationFrequency( awos.getString( awos.getColumnIndex( Awos1.STATION_FREQUENCY ) ) );\n            mLastForecast.setStationFrequency( awos.getString( awos.getColumnIndex( Awos1.STATION_FREQUENCY ) ) );\n            mLastForecast.setStationFrequency( awos.getString( awos.getColumnIndex( Awos1.STATION_FREQUENCY ) ) );\n            mLastForecast.setStationFrequency( awos.getString( awos.getColumnIndex( Awos1.STATION_FREQUENCY ) ) );\n            mLastForecast.setStationFrequency( awos.getString( awos.getColumnIndex( Awos1.STATION_FREQUENCY ) ) );\n            mLastForecast.setStationFrequency( awos.getString( awos.getColumnIndex( Awos1.STATION_FREQUENCY ) ) );\n            mLastForecast.setStationFrequency( awos.getString( awos.getColumnIndex( Awos1.STATION_FREQUENCY ) ) );\n            mLastForecast.setStationFrequency( awos.getString( awos.getColumnIndex( Awos1.STATION_FREQUENCY ) ) );\n            mLastForecast.setStationFrequency( awos.getString( awos.getColumnIndex( Awos1.STATION_FREQUENCY ) ) );\n            mLastForecast.setStationFrequency( awos.getString( awos.getColumnIndex( Awos1.STATION_FREQUENCY )", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t{\n\t\t\t\t\tFillDb(s);\n\t\t\t\t\ttx.Commit();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\tstats.Clear();\n\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t{\n\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t{\n\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\ttx.Commit();\n\t\t\t\t}\n\t\t\t}\n\t\t\tstats.Clear();\n\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t{\n\t\t\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\t\ttx.Commit();\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstats.Clear();\n\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\t\t\ttx.Commit();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tstats.Clear();\n\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t{\n\t\t\t\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\t\t\ttx.Commit();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstats.Clear();\n\t\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t\t{\n\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\t\ttx.Commit();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstats.Clear();\n\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\t\t\ttx.Commit();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tstats.Clear();\n\t\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\t\ttx.Commit();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstats.Clear();\n\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\t\t\ttx.Commit();\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstats.Clear();\n\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t{\n\t\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\t\ttx.Commit();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstats.Clear();\n\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t{\n\t\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\t\ttx.Commit();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstats.Clear();\n\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t{\n\t\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\ttx.Commit();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\tstats.Clear();\n\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t{\n\t\t\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\t\ttx.Commit();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstats.Clear();\n\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t{\n\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\ttx.Commit();\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstats.Clear();\n\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t{\n\t\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\t\ttx.Commit();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstats.Clear();\n\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t\t\t{\n\t\t\t\t\t\tFillDb(s);\n\t\t\t\t\t\t\ttx.Commit();\n\t\t\t", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiByteValue |= (uint)p[iBufferIndex];\nNext line of code:\n                uiCRCITTSum = (uiCRCITTSum >> 8) ^ (uiByteValue ^ (ulong)0x1021);\nNext line of code:\n            }\n            return (ushort)uiCRCITTSum;\n        }\n        /// <summary>\n        /// Reflects a byte array to the left by the given number of bits.\n        /// </summary>\n        /// <param name=\"c\">The byte array to reflect</param>\n        /// <param name=\"n\">The number of bits to reflect</param>\n        /// <returns>The reflected byte array</returns>\n        private static byte[] reflect(byte[] c, int n)\n        {\n            byte[] r = new byte[c.Length];\n            for (int i = 0; i < c.Length; i++)\n            {\n                r[i] = (byte)((c[i] >> n) | (c[i] << (8 - n)));\n            }\n            return (r);\n        }\n        /// <summary>\n        /// Reflects a byte array to the right by the given number of bits.\n        /// </summary>\n        /// <param name=\"c\">The byte array to reflect</param>\n        /// <param name=\"n\">The number of bits to reflect</param>\n        /// <returns>The reflected byte array</returns>\n        private static byte[] reflect(byte[] c, int n)\n        {\n            byte[] r = new byte[c.Length];\n            for (int i = 0; i < c.Length; i++)\n            {\n                r[i] = (byte)((c[i] << n) | (c[i] >> (8 - n)));\n            }\n            return (r);\n        }\n        /// <summary>\n        /// Generates the CRC table for the given CRC algorithm.\n        /// </summary>\n        private void generate_crc_table()\n        {\n            int i;\n            ulong crc;\n            ulong crctab[256];\n            for (i = 0; i < 256; i++)\n            {\n                crc = (ulong)i;\n                for (int j = 0; j < order; j++)\n                {\n                    crc = (crc >> 8) ^ crctab[(crc & 0xff) ^ (ulong)0x1021];\n                }\n                crctab[i] = crc;\n            }\n        }\n    }\n}\n", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getDisguiseModule().getItem().getMaxDamage() / 100;\n\t\t}\n\t/**\n\t * @return The head rotation of the sentry\n\t */\n\tpublic float getHeadRotation() {\n\t\treturn entityData.", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new ReferencesHyperlinkDetector(editor), \n                    new JavaHyperlinkDetector(editor), \n                    new CeylonJavaBackendHyperlinkDetector(editor), \n                    new CeylonJavascriptBackendHyperlinkDetector(editor), \n                    new CeylonNativeHeaderHyperlinkDetector(editor), \n                    new ReferencesHyperlinkDetector(editor), \n                    new CeylonHyperlinkDetector(editor) };\n        }\n        return new IHyperlinkDetector[] { \n                new ReferencesHyperlinkDetector(editor), \n                new JavaHyperlinkDetector(editor), \n                new CeylonJavaBackendHyperlinkDetector(editor), \n                new CeylonJavascriptBackendHyperlinkDetector(editor), \n                new CeylonNativeHeaderHyperlinkDetector(editor), \n                new ReferencesHyperlinkDetector(editor), \n                new CeylonHyperlinkDetector(editor) };\n    }\n    public IInformationControlCreator getInformationControlCreator(\n            ISourceViewer sourceViewer) {\n        return new CeylonInformationControlCreator(editor);\n    }\n    public IInformationProvider getInformationProvider(\n            ISourceViewer sourceViewer) {\n        return new CeylonInformationProvider(editor);\n    }\n    public IInformationPresenter getInformationPresenter(\n            ISourceViewer sourceViewer) {\n        return new InformationPresenter(editor);\n    }\n    public IInformationProviderExtension2 getInformationProviderExtension(\n            ISourceViewer sourceViewer) {\n        return new CeylonInformationProviderExtension(editor);\n    }\n    public IInformationControl getInformationControl(\n            ISourceViewer sourceViewer) {\n        return new CeylonInformationControl(editor);\n    }\n    public IInformationControlCreator getInformationControlCreator(\n            ISourceViewer sourceViewer) {\n        return new CeylonInformationControlCreator(editor);\n    }\n    public IInformationPresenter getInformationPresenter(\n            ISourceViewer sourceViewer) {\n        return new InformationPresenter(editor);\n    }\n    public IInformationProviderExtension2 getInformationProviderExtension(\n            ISourceViewer sourceViewer) {\n        return new CeylonInformationProviderExtension(editor);\n    }\n    public IInformationControl getInformationControl(\n            ISourceViewer sourceViewer) {\n        return new CeylonInformationControl(editor);\n    }\n    public IInformationControlCreator getInformationControlCreator(\n            ISourceViewer sourceViewer) {\n        return new CeylonInformationControlCreator(editor);\n    }\n    public IInformationPresenter getInformationPresenter(\n            ISourceViewer sourceViewer) {\n        return new InformationPresenter(editor);\n    }\n    public IInformationProviderExtension2 getInformationProviderExtension(\n            ISourceViewer sourceViewer) {\n        return new CeylonInformationProviderExtension(editor);\n    }\n    public IInformationControl getInformationControl(\n            ISourceViewer sourceViewer) {\n        return new CeylonInformationControl(editor);\n    }\n    public IInformationControlCreator getInformationControlCreator(\n", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(Object3DAspectWidget(self))\n        self.l.addWidget(Object3DScale(self))\n        self.l.addWidget(Object3DProperties(", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 4: // Cancel\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = Point2D.Zero;\n\t\t\t\t\tshouldSet = false;\n\t\t\t\t\t\tshouldSend = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t{\n\t\t\t\t\t\ttoSet = Point2D.Zero;\n\t\t\t\t\t\tshouldSet = false;\n\t\t\t\t\tshouldSend = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( shouldSet )\n\t\t\t{\n\t\t\t\tm_Mobile.SendGump( new PropertiesGump( m_Mobile, m_Object, m_Stack, m_List, m_Page ) );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tm_Mobile.SendGump( new PropertiesGump( m_Mobile, m_Object, m_Stack, m_List, m_Page ) );\n\t\t\t}\n\t\t\tif ( shouldSend )\n\t\t\t{\n\t\t\t\tm_Mobile.SendGump( new PropertiesGump( m_Mobile, m_Object, m_Stack, m_List, m_Page ) );\n\t\t\t}\n\t\t}\n\t\tpublic override void OnTick()\n\t\t{\n\t\t\tif ( m_Mobile.Target != null )\n\t\t\t{\n\t\t\t\tm_Mobile.Target.OnTarget( m_Mobile, m_Mobile.Target );\n\t\t\t}\n\t\t}\n\t}\n}", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedObj = selectConverter.convert(valueChoice);\n                        if (convertedObj.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                  }\n                  if (chosenObj != null)\n                  {\n                     result = chosenObj;\n                  }\n               }\n            }\n            else\n            {\n               Converter<Object, Object> converter = converterFactory.getConverter(sourceType, targetType);\n               result = converter.convert(value);\n            }\n         }\n      }\n      return result;\n   }\n   private static Converter<Object, String> getItemLabelConverter(final ConverterFactory converterFactory,\n            final SelectComponent<?, Object> selectComponent)\n   {\n      Converter<Object, String> itemLabelConverter = null;\n      if (selectComponent.getItemLabelConverter() != null)\n      {\n         itemLabelConverter = selectComponent.getItemLabelConverter();\n      }\n      else\n      {\n         itemLabelConverter = converterFactory.getConverter(String.class, Object.class);\n      }\n      return itemLabelConverter;\n   }\n   /**\n    * Returns the {@link UICompleter} associated to this {@link InputComponent}\n    */\n   public static UICompleter<?> getCompleter(final InputComponent<?, ?> input)\n   {\n      return (UICompleter<?>) input.getCompleter();\n   }\n   /**\n    * Returns the {@link UICompleter} associated to this {@link InputComponent}\n    */\n   public static UICompleter<?> getCompleter(final InputComponent<?, ?> input, final Object value)\n   {\n      return (UICompleter<?>) input.getCompleter(value);\n   }\n   /**\n    * Returns the {@link UICompleter} associated to this {@link InputComponent}\n    */\n   public static UICompleter<?> getCompleter(final InputComponent<?, ?> input, final String value)\n   {\n      return (UICompleter<?>) input.getCompleter(value);\n   }\n   /**\n    * Returns the {@link UICompleter} associated to this {@link InputComponent}\n    */\n   public static UICompleter<?> getCompleter(final InputComponent<?, ?> input, final Iterable<?> value)\n   {\n      return (UICompleter<?>) input.getCompleter(value);\n   }\n   /**\n    * Returns the {@link UICompleter} associated to this {@link InputComponent}\n    */\n   public static UICompleter<?> getCompleter(final InputComponent<?, ?> input, final Iterable<?> value,\n            final Object defaultValue)\n   {\n      return (UICompleter<?>) input.getCompleter(value, defaultValue);\n   }\n   /**\n    * Returns the {@link UICompleter} associated to this {@link InputComponent}\n    */\n   public static UICompleter<?> getCompleter(final InputComponent<?, ?> input, final Iterable<?> value,\n            final Object defaultValue, final boolean ignoreCase)\n   {\n      return (UICompleter<?>) input.getCompleter(value, defaultValue, ignoreCase);\n   }\n   /**\n    * Returns the {@link UICompleter} associated to this {@link InputComponent}\n    */\n   public static UICompleter<?> getCompleter(final InputComponent<?, ?> input, final Iterable<?> value,\n            final Object defaultValue, final boolean ignoreCase, final boolean caseSensitive)\n   {\n      return (UICompleter<?>) input.getCompleter(value, defaultValue, ignoreCase, caseSensitive);\n   }\n   /**\n    * Returns the {@link UICompleter} associated to this {@link InputComponent}\n    */\n   public static UICompleter<?> getCompleter(final InputComponent<?, ?> input, final Iterable<?> value,\n            final Object defaultValue, final boolean ignoreCase, final boolean caseSensitive,\n            final boolean allowEmpty)\n   {\n      return (UICompleter<?>) input.getCompleter(value, defaultValue, ignoreCase, caseSensitive, allowEmpty);\n   }\n   /**\n    * Returns the {@link UICompleter} associated to this {@link InputComponent}\n    */\n   public static UICompleter<?> getCompleter(final InputComponent<?, ?> input, final Iterable<?> value,\n            final Object defaultValue, final boolean ignoreCase, final boolean caseSensitive,\n            final boolean allowEmpty, final boolean allowEmptyString)\n   {\n      return (UICompleter<?>) input.getCompleter(value, defaultValue, ignoreCase, caseSensitive, allowEmpty,\n               allowEmptyString);\n   }\n   /**\n    * Returns the {@link UICompleter} associated to this {@link InputComponent}\n    */\n   public static UICompleter<?> getCompleter(final InputComponent<?, ?> input, final Iterable<?> value,\n            final Object defaultValue, final boolean ignoreCase, final boolean caseSensitive,\n            final boolean allowEmpty, final boolean allowEmptyString, final boolean allowNull)\n   {\n      return (UICompleter<?>) input.getCompleter(value, defaultValue, ignoreCase, caseSensitive, allowEmpty,\n               allowEmptyString, allowNull);\n   }\n   /**\n    * Returns the {@link UICompleter} associated to this {@link InputComponent}\n    */\n   public static UICompleter<?> getCompleter(final InputComponent<?, ?> input, final Iterable<?> value,\n            final Object defaultValue, final boolean ignoreCase, final boolean caseSensitive,\n            final boolean allowEmpty, final boolean allowEmptyString, final boolean allowNull,\n            final boolean allowNullString)\n   {\n      return (UICompleter<?>) input.getCompleter(value, defaultValue, ignoreCase, caseSensitive, allowEmpty,\n               allowEmptyString, allowNull, allowNullString);\n   }\n   /**\n    * Returns the {@link UICompleter} associated to this {@link InputComponent}\n    */\n   public static UICompleter<?> getCompleter(final InputComponent<?, ?> input, final Iterable<?> value,\n            final Object defaultValue, final boolean ignoreCase, final boolean caseSensitive,\n            final boolean allowEmpty, final boolean allowEmptyString, final boolean allowNull,\n            final boolean allowNullString, final boolean allowEmptyString)\n   {\n      return (UICompleter<?>) input.getCompleter(value, defaultValue, ignoreCase, caseSensitive, allowEmpty,\n               allowEmptyString, allowNull, allowNullString, allowEmptyString);\n   }\n   /**\n    * Returns the {@link UICompleter} associated to this {@link InputComponent}\n    */\n   public static UICompleter<?> getCompleter(final InputComponent<?, ?> input, final Iterable<?> value,\n            final Object defaultValue, final boolean ignoreCase, final boolean caseSensitive,\n            final boolean allowEmpty, final boolean allowEmptyString, final boolean allowNull,\n            final boolean allowNullString, final boolean allowEmptyString, final boolean allowNullString)\n   {\n      return (UICompleter<?>) input.getCompleter(value, defaultValue, ignoreCase, caseSensitive, allowEmpty,\n              ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (i!=j)\n\t\t\t\t\tsb.append(\"\"+i+\"->\"+j+\"\\t\"+fractionWithAmount[i][j][0]+\"\\t\"+fractionWithAmount[i][j][1]+\"\\t\"+fractionWithAmount[", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int lineIndex = unpricedLine.Value;\n                                //check that the order can be found that contains the problematic line\n                                if (orderIndex < orderPurchaseESD.dataRecords.Length && lineIndex < orderPurchaseESD.dataRecords[orderIndex].lines.Count)\n                                {\n                                    Console.WriteLine(\"For purchase order: \" + orderPurchaseESD.dataRecords[orderIndex].purchaseOrderCode + \" a supplier product for line number: \" + (lineIndex + 1) + \" could not be priced.\");\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTException {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTExceptionType {\nNext line of code:\n\t\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTExceptionTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTExceptionTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTExceptionTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType {\nNext line of code:\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\t\tset { throw new NotImplementedException (); }\n", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final int ownerGroupMode = 0700;\n        final int ownerOtherGroupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\nNext line of code:\n        final int ownerOtherGroupMode = 0700;\n        final", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale)\n\t\t{\nNext line of code:\n\t\t\treturn v * viewport.ScaleFactor * scale;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale, Vector2 offset)\n\t\t{\nNext line of code:\n\t\t\treturn v * viewport.ScaleFactor * scale + offset;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale, Vector2 offset, Vector2 rotation)\n\t\t{\nNext line of code:\n\t\t\treturn v * viewport.ScaleFactor * scale + offset * rotation;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale, Vector2 offset, Vector2 rotation, Vector2 translation)\n\t\t{\nNext line of code:\n\t\t\treturn v * viewport.ScaleFactor * scale + offset * rotation + translation;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale, Vector2 offset, Vector2 rotation, Vector2 translation, Vector2 min, Vector2 max)\n\t\t{\nNext line of code:\n\t\t\treturn v * viewport.ScaleFactor * scale + offset * rotation + translation;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale, Vector2 offset, Vector2 rotation, Vector2 translation, Vector2 min, Vector2 max, Vector2 min2, Vector2 max2)\n\t\t{\nNext line of code:\n\t\t\treturn v * viewport.ScaleFactor * scale + offset * rotation + translation;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale, Vector2 offset, Vector2 rotation, Vector2 translation, Vector2 min, Vector2 max, Vector2 min2, Vector2 max2, Vector2 min3, Vector2 max3)\n\t\t{\nNext line of code:\n\t\t\treturn v * viewport.ScaleFactor * scale + offset * rotation + translation;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale, Vector2 offset, Vector2 rotation, Vector2 translation, Vector2 min, Vector2 max, Vector2 min2, Vector2 max2, Vector2 min3, Vector2 max3, Vector2 min4, Vector2 max4)\n\t\t{\nNext line of code:\n\t\t\treturn v * viewport.ScaleFactor * scale + offset * rotation + translation;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale, Vector2 offset, Vector2 rotation, Vector2 translation, Vector2 min, Vector2 max, Vector2 min2, Vector2 max2, Vector2 min3, Vector2 max3, Vector2 min4, Vector2 max4, Vector2 min5, Vector2 max5)\n\t\t{\nNext line of code:\n\t\t\treturn v * viewport.ScaleFactor * scale + offset * rotation + translation;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale, Vector2 offset, Vector2 rotation, Vector2 translation, Vector2 min, Vector2 max, Vector2 min2, Vector2 max2, Vector2 min3, Vector2 max3, Vector2 min4, Vector2 max4, Vector2 min5, Vector2 max5, Vector2 min6, Vector2 max6)\n\t\t{\nNext line of code:\n\t\t\treturn v * viewport.ScaleFactor * scale + offset * rotation + translation;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale, Vector2 offset, Vector2 rotation, Vector2 translation, Vector2 min, Vector2 max, Vector2 min2, Vector2 max2, Vector2 min3, Vector2 max3, Vector2 min4, Vector2 max4, Vector2 min5, Vector2 max5, Vector2 min6, Vector2 max6, Vector2 min7, Vector2 max7)\n\t\t{\nNext line of code:\n\t\t\treturn v * viewport.ScaleFactor * scale + offset * rotation + translation;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale, Vector2 offset, Vector2 rotation, Vector2 translation, Vector2 min, Vector2 max, Vector2 min2, Vector2 max2, Vector2 min3, Vector2 max3, Vector2 min4, Vector2 max4, Vector2 min5, Vector2 max5, Vector2 min6, Vector2 max6, Vector2 min7, Vector2 max7, Vector2 min8, Vector2 max8)\n\t\t{\nNext line of code:\n\t\t\treturn v * viewport.ScaleFactor * scale + offset * rotation + translation;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale, Vector2 offset, Vector2 rotation, Vector2 translation, Vector2 min, Vector2 max, Vector2 min2, Vector2 max2, Vector2 min3, Vector2 max3, Vector2 min4, Vector2 max4, Vector2 min5, Vector2 max5, Vector2 min6, Vector2 max6, Vector2 min7, Vector2 max7, Vector2 min8, Vector2 max8, Vector2 min9, Vector2 max9)\n\t\t{\nNext line of code:\n\t\t\treturn v * viewport.ScaleFactor * scale + offset * rotation + translation;\n\t\t}\n\t\tpublic static Vector2 RelativeTo", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "   def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.packets != other.packets:\n            return False\n        if self.bytes != other.bytes:\n            return False\n        return True\n    def __repr__(self):\n        parts = []\n        parts.append('endpoint_stats(')\n        parts.append('packets=')\n        parts.append(repr(self.packets))\n        parts.append(\", \")\n        parts.append('bytes=')\n        parts.append(repr(self.bytes))\n        parts.append(')')\n        return ''.join(parts)\nclass endpoint_stats_key(XDRStruct):\n    __slots__ = ['endpoint', 'stats']\n    def __init__(self, endpoint=None, stats=None):\n        self.endpoint = endpoint\n        self.stats = stats\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack_uint(obj.endpoint)\n        packer.pack_into(obj.stats, packer)\n    @classmethod\n    def unpack_from(cls, unpacker):\n        obj = endpoint_stats_key()\n        obj.endpoint = unpacker.unpack_uint()\n        obj.stats = unpacker.unpack_into(obj.stats)\n        return obj\n    def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.endpoint != other.endpoint:\n            return False\n        if self.stats != other.stats:\n            return False\n        return True\n    def __repr__(self):\n        parts = []\n        parts.append('endpoint_stats_key(')\n        parts.append('endpoint=')\n        parts.append(repr(self.endpoint))\n        parts.append(\", \")\n        parts.append('stats=')\n        parts.append(repr(self.stats))\n        parts.append(')')\n        return ''.join(parts)\nclass endpoint_stats_value(XDRStruct):\n    __slots__ = ['endpoint', 'stats']\n    def __init__(self, endpoint=None, stats=None):\n        self.endpoint = endpoint\n        self.stats = stats\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack_uint(obj.endpoint)\n        packer.pack_into(obj.stats, packer)\n    @classmethod\n    def unpack_from(cls, unpacker):\n        obj = endpoint_stats_value()\n        obj.endpoint = unpacker.unpack_uint()\n        obj.stats = unpacker.unpack_into(obj.stats)\n        return obj\n    def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.endpoint != other.endpoint:\n            return False\n        if self.stats != other.stats:\n            return False\n        return True\n    def __repr__(self):\n        parts = []\n        parts.append('endpoint_stats_value(')\n        parts.append('endpoint=')\n        parts.append(repr(self.endpoint))\n        parts.append(\", \")\n        parts.append('stats=')\n        parts.append(repr(self.stats))\n        parts.append(')')\n        return ''.join(parts)\nclass endpoint_stats_key_value(XDRStruct):\n    __slots__ = ['endpoint', 'stats']\n    def __init__(self, endpoint=None, stats=None):\n        self.endpoint = endpoint\n        self.stats = stats\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack_uint(obj.endpoint)\n        packer.pack_into(obj.stats, packer)\n    @classmethod\n    def unpack_from(cls, unpacker):\n        obj = endpoint_stats_key_value()\n        obj.endpoint = unpacker.unpack_uint()\n        obj.stats = unpacker.unpack_into(obj.stats)\n        return obj\n    def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.endpoint != other.endpoint:\n            return False\n        if self.stats != other.stats:\n            return False\n        return True\n    def __repr__(self):\n        parts = []\n        parts.append('endpoint_stats_key_value(')\n        parts.append('endpoint=')\n        parts.append(repr(self.endpoint))\n        parts.append(\", \")\n        parts.append('stats=')\n        parts.append(repr(self.stats))\n        parts.append(')')\n        return ''.join(parts)\nclass endpoint_stats_key_value_key(XDRStruct):\n    __slots__ = ['endpoint', 'stats']\n    def __init__(self, endpoint=None, stats=None):\n        self.endpoint = endpoint\n        self.stats = stats\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack_uint(obj.endpoint)\n        packer.pack_into(obj.stats, packer)\n    @classmethod\n    def unpack_from(cls, unpacker):\n        obj = endpoint_stats_key_value_key()\n        obj.endpoint = unpacker.unpack_uint()\n        obj.stats = unpacker.unpack_into(obj.stats)\n        return obj\n    def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.endpoint != other.endpoint:\n            return False\n        if self.stats != other.stats:\n            return False\n        return True\n    def __repr__(self):\n        parts = []\n        parts.append('endpoint_stats_key_value_key(')\n        parts.append('endpoint=')\n        parts.append(repr(self.endpoint))\n        parts.append(\", \")\n        parts.append('stats=')\n        parts.append(repr(self.stats))\n        parts.append(')')\n        return ''.join(parts)\nclass endpoint_stats_key_value_value(XDRStruct):\n    __slots__ = ['endpoint', 'stats']\n    def __init__(self, endpoint=None, stats=None):\n        self.endpoint = endpoint\n        self.stats = stats\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack_uint(obj.endpoint)\n        packer.pack_into(obj.stats, packer)\n    @classmethod\n    def unpack_from(cls, unpacker):\n        obj = endpoint_stats_key_value_value()\n        obj.endpoint = unpacker.unpack_uint()\n        obj.stats = unpacker.unpack_into(obj.stats)\n        return obj\n    def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.endpoint != other.endpoint:\n            return False\n        if self.stats != other.stats:\n            return False\n        return True\n    def __repr__(self):\n        parts = []\n        parts.append('endpoint_stats_key_value_value(')\n        parts.append('endpoint=')\n        parts.append(repr(self.endpoint))\n        parts.append(\", \")\n        parts.append('stats=')\n        parts.append(repr(self.stats))\n        parts.append(')')\n        return ''.join(parts)\nclass endpoint_stats_key_value_value_key(XDRStruct):\n    __slots__ = ['endpoint', 'stats']\n    def __init__(self, endpoint=None, stats=None):\n        self.endpoint = endpoint\n        self.stats = stats\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack_uint(obj.endpoint)\n        packer.pack_into(obj.stats, packer)\n    @classmethod\n    def unpack_from(cls, unpacker):\n        obj = endpoint_stats_key_value_value_key()\n        obj.endpoint = unpacker.unpack_uint()\n        obj.stats = unpacker.unpack_into(obj.stats)\n        return obj\n    def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.endpoint != other.endpoint:\n            return False\n        if self.stats != other.stats:\n            return False\n        return True\n    def __repr__(self):\n        parts = []\n        parts.append('endpoint_stats_key_value_value_key(')\n        parts.append('endpoint=')\n        parts.append(repr(self.endpoint))\n        parts.append(\", \")\n        parts.append('stats=')\n        parts.append(repr(self.stats))\n        parts.append(')')\n        return ''.join(parts)\nclass endpoint_stats_key_value_value_value(XDRStruct):\n    __slots__ = ['endpoint', 'stats']\n    def __init__(self, endpoint=None, stats=None):\n        self.endpoint = endpoint\n        self.stats = stats\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack_uint(obj.endpoint)\n        packer.pack_into(obj.stats, packer)\n    @classmethod\n    def unpack_from(cls, unpacker):\n        obj = endpoint_stats_key_value_value_value()\n        obj.endpoint = unpacker.unpack_uint()\n        obj.stats = unpacker.unpack_into(obj.stats)\n        return obj\n    def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.endpoint != other.endpoint:\n            return False\n        if self.stats != other.stats:\n            return False\n        return True\n    def __repr__(self):\n        parts = []\n        parts.append('endpoint_stats_key_value_value_value(')\n        parts.append('endpoint=')\n        parts.append(repr(", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\tRemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t/// <summary>\n\t/// This is the main entry point for the application\n\t/// </summary>\n\t///", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Step:\n                    convertToStepBucketList(list);\n                    break;\n                case Activity:\n                    convertToActivityBucketList(list);\n                    break;\n            }\n            mRequestMap.remove(requestId);\n        }\n    }\n    @Override\n    public void onError(int requestId, int errorCode, String errorMessage) {\n        if(mRequestMap != null && mRequestMap.containsKey(requestId)) {\n            Portal.RequestType type = mRequestMap.get(requestId);\n            switch (type) {\n                case Step:\n                    notifyStepsReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Error, requestId, new ArrayList<StepBucket>());\n                    break;\n                case Activity:\n                    notifyActivitiesReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Error, requestId, new ArrayList<ActivityBucket>());\n                    break;\n            }\n            mRequestMap.remove(requestId);\n        }\n    }\n}\n", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " if is_method:\n    print '                               %s%d%s)' % (signature, exec_count,\n                                               function_name)\n  else:\n    print '                               %s%d%s)' % (signature, exec_count,\n                                               function_name)\n  if bind_count:\n    print '}'\n  else:\n    print '}'\n  print ''\n  # the void specialization\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @brief A helper function to create a new %s with %d\n   * create-time arguments and %d execution time arguments.\"\"\" %\n   (parent_class, bind_count, exec_count))\n  if is_method:\n    print \" * @tparam Class the class with the member function.\"\n  print \" * @tparam ReturnType the return type of the callback.\"\n  for i in xrange(bind_count):\n    print \" * @tparam A%d a create-time argument type.\" % i\n  for i in xrange(exec_count):\n    print \" * @tparam Arg%d an exec-time argument type.\" % i\n  if is_method:\n    print \" * @param object the object to call the member function on.\"\n    print (\" * @param method the member function pointer to use when \"\n           \"executing the callback.\");\n  else:\n    print \" * @param callback the function pointer to use when executing the \"\n           \"callback.\"\n  for i in xrange(bind_count):\n    print \" * @param a%d a create-time argument.\" % i\n  if is_method:\n    print \" *", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return range_json(filename, items)\n    \"\"\"\n    response = HttpResponse(mimetype='application/json')\n    response['Content-Disposition'] = (\n        u'attachment; filename=\"{0}.json\"'.format(filename)\n    )\n    json_data = []\n    for item in items:\n        json_data.append(\n            {\n                'id': item.pk,\n                'title': range_item_title(item),\n                'start': item.range_start_unix(),\n                'end': item.range_end_unix(),\n            }\n        )\n    return response.render(\n        'laconia/range-json.html',\n        {'json_data': json_data}\n    )\n", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                serviceGraphPattern.addChild(new StatementPatternNode(\n                        new VarNode(\"lit\"), new ConstantNode(searchIV),\n                        new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                serviceGraphPattern.addChild(new StatementPatternNode(\n                        new VarNode(\"lit\"), new ConstantNode(\n                                relevanceIV), new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        final ASTContainer ast = new ASTContainer(given);\n        final ASTSearchOptimizer optimizer = new ASTSearchOptimizer(ast);\n        final ASTContainer optimized = optimizer.optimize();\n        assertEquals(expected, optimized);\n    }\n}", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n\n\nclass UserChangePasswordView(CreateOrUpdateView):\n    template_name = \"shoop/admin/users/change-password.jinja\"\n    context_object_name = \"user\"\n    fields = (\"password\", \"password_confirmation\")\n    def get_form_class(self):\n        return modelform_factory(self.model, form=BaseUserForm, fields=self.fields)\n    def get_initial(self):\n        initial = super(UserChangePasswordView, self).get_initial()\n        initial.update(\n            password=self.request.POST.get(\"password\", \"\"),\n            password_confirmation=self.request.POST.get(\"password_confirmation\", \"\"),\n        )\n        return initial\n    def get_toolbar(self):\n        return UserDetailToolbar(view=self)\n    def save_form(self, form):\n        self.object = form.save()\n        messages.success(self.request, _(\"Password changed.\"))\n        return HttpResponseRedirect(self.request.path)\n    def get_success_url(self):\n        return get_model_url(self.object)\n    def post(self, request, *args, **kwargs):\n        return super(UserChangePasswordView, self).post(request, *args, **kwargs)\n\n\nclass UserResetPasswordView(CreateOrUpdateView):\n    template_name = \"shoop/admin/users/reset-password.jinja\"\n    context_object_name = \"user\"\n    fields = (\"password\", \"password_confirmation\")\n    def get_form_class(self):\n        return modelform_factory(self.model, form=BaseUserForm, fields=self.fields)\n    def get_initial(self):\n        initial = super(UserResetPasswordView, self).get_initial()\n        initial.update(\n            password=self.request.POST.get(\"password\", \"\"),\n            password_confirmation=self.request.POST.get(\"password_confirmation\", \"\"),\n        )\n        return initial\n    def get_toolbar(self):\n        return UserDetailToolbar(view=self)\n    def save_form(self, form):\n        self.object = form.save()\n        messages.success(self.request, _(\"Password reset.\"))\n        return HttpResponseRedirect(self.request.path)\n    def get_success_url(self):\n        return get_model_url(self.object)\n    def post(self, request, *args, **kwargs):\n        return super(UserResetPasswordView, self).post(request, *args, **kwargs)\n\n\nclass UserChangePermissionsView(CreateOrUpdateView):\n    template_name = \"shoop/admin/users/change-permissions.jinja\"\n    context_object_name = \"user\"\n    fields = (\"permission_info\")\n    def get_form_class(self):\n        return modelform_factory(self.model, form=BaseUserForm, fields=self.fields)\n    def get_initial(self):\n        initial = super(UserChangePermissionsView, self).get_initial()\n        initial.update(\n            permission_info=self.request.POST.get(\"permission_info\", \"\"),\n        )\n        return initial\n    def get_toolbar(self):\n        return UserDetailToolbar(view=self)\n    def save_form(self, form):\n        self.object = form.save()\n        messages.success(self.request, _(\"Permissions changed.\"))\n        return HttpResponseRedirect(self.request.path)\n    def get_success_url(self):\n        return get_model_url(self.object)\n    def post(self, request, *args, **kwargs):\n        return super(UserChangePermissionsView, self).post(request, *args, **kwargs)\n\n\nclass UserContactView(CreateOrUpdateView):\n    template_name = \"shoop/admin/users/contact.jinja\"\n    context_object_name = \"user\"\n    fields = (\"contact_info\")\n    def get_form_class(self):\n        return modelform_factory(self.model, form=BaseUserForm, fields=self.fields)\n    def get_initial(self):\n        initial = super(UserContactView, self).get_initial()\n        initial.update(\n            contact_info=self.request.POST.get(\"contact_info\", \"\"),\n        )\n        return initial\n    def get_toolbar(self):\n        return UserDetailToolbar(view=self)\n    def save_form(self, form):\n        self.object = form.save()\n        messages.success(self.request, _(\"Contact details changed.\"))\n        return HttpResponseRedirect(self.request.path)\n    def get_success_url(self):\n        return get_model_url(self.object)\n    def post(self, request, *args, **kwargs):\n        return super(UserContactView, self).post(request, *args, **kwargs)\n\n\nclass UserContactDeleteView(CreateOrUpdateView):\n    template_name = \"shoop/admin/users/contact-delete.jinja\"\n    context_object_name = \"user\"\n    fields = (\"contact_info\")\n    def get_form_class(self):\n        return modelform_factory(self.model, form=BaseUserForm, fields=self.fields)\n    def get_initial(self):\n        initial = super(UserContactDeleteView, self).get_initial()\n        initial.update(\n            contact_info=self.request.POST.get(\"contact_info\", \"\"),\n        )\n        return initial\n    def get_toolbar(self):\n        return UserDetailToolbar(view=self)\n    def save_form(self, form):\n        self.object = form.save()\n        messages.success(self.request, _(\"Contact details deleted.\"))\n        return HttpResponseRedirect(self.request.path)\n    def get_success_url(self):\n        return get_model_url(self.object)\n    def post(self, request, *args, **kwargs):\n        return super(UserContactDeleteView, self).post(request, *args, **kwargs)\n\n\nclass UserContactAddView(CreateOrUpdateView):\n    template_name = \"shoop/admin/users/contact-add.jinja\"\n    context_object_name = \"user\"\n    fields = (\"contact_info\")\n    def get_form_class(self):\n        return modelform_factory(self.model, form=BaseUserForm, fields=self.fields)\n    def get_initial(self):\n        initial = super(UserContactAddView, self).get_initial()\n        initial.update(\n            contact_info=self.request.POST.get(\"contact_info\", \"\"),\n        )\n        return initial\n    def get_toolbar(self):\n        return UserDetailToolbar(view=self)\n    def save_form(self, form):\n        self.object = form.save()\n        messages.success(self.request, _(\"Contact details added.\"))\n        return HttpResponseRedirect(self.request.path)\n    def get_success_url(self):\n        return get_model_url(self.object)\n    def post(self, request, *args, **kwargs):\n        return super(UserContactAddView, self).post(request, *args, **kwargs)\n\n\nclass UserContactEditView(CreateOrUpdateView):\n    template_name = \"shoop/admin/users/contact-edit.jinja\"\n    context_object_name = \"user\"\n    fields = (\"contact_info\")\n    def get_form_class(self):\n        return modelform_factory(self.model, form=BaseUserForm, fields=self.fields)\n    def get_initial(self):\n        initial = super(UserContactEditView, self).get_initial()\n        initial.update(\n            contact_info=self.request.POST.get(\"contact_info\", \"\"),\n        )\n        return initial\n    def get_toolbar(self):\n        return UserDetailTool", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of named byte sequences persisted with the assembly and used during execution, typically via .NET Framework helper classes.\n    /// </summary>\n    public IEnumerable<IResourceReference> Resources {\n      get { return this.ResolvedAssembly.Resources; }\n    }\n    /// <summary>\n    /// A list of objects representing persisted instances of pairs of security actions and sets of security permissions.\n    /// These apply by default to every method reachable from the module.\n    /// </summary>\n    public IEnumerable<ISecurityAttribute> SecurityAttributes {\n      get { return this.ResolvedAssembly.SecurityAttributes; }\n    }\n    /// <summary>\n    /// The version of the assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }\n    #region IAssemblyReference Members\n    IAssembly IAssemblyReference.ResolvedAssembly {\n      get { return this.ResolvedAssembly; }\n    }\n    AssemblyIdentity IAssemblyReference.UnifiedAssemblyIdentity {\n      get { return this.ResolvedAssembly.AssemblyIdentity; }\n    }\n    bool IAssemblyReference.ContainsForeignTypes {\n      get { return this.ResolvedAssembly.ContainsForeignTypes; }\n    }\n    #endregion\n  }\n  /// <summary>\n  /// A reference to a .NET module.\n  /// </summary>\n  public class ResolvedModuleReference : ResolvedModuleReference, IModuleReference {\n    /// <summary>\n    /// Allocates a reference to a .NET module.\n    /// </summary>\n    /// <param name=\"referencedModule\">The module to reference.</param>\n    public ResolvedModuleReference(IModule referencedModule)\n      : base(referencedModule) {\n      this.aliases = Enumerable<IName>.Empty;\n    }\n    /// <summary>\n    /// A list of aliases for the root namespace of the referenced module.\n    /// </summary>\n    public IEnumerable<IName> Aliases {\n      get { return this.aliases; }\n    }\n    IEnumerable<IName> aliases;\n    /// <summary>\n    /// The identity of the module reference.\n    /// </summary>\n    public ModuleIdentity ModuleIdentity {\n      get { return this.ResolvedModule.ModuleIdentity; }\n    }\n    /// <summary>\n    /// Calls the visitor.Visit(IModuleReference) method.\n    /// </summary>\n    public override void Dispatch(IMetadataVisitor visitor) {\n      visitor.Visit(this);\n    }\n    /// <summary>\n    /// Calls the visitor.Visit(IModuleReference) method.\n    /// </summary>\n    public override void DispatchAsReference(IMetadataVisitor visitor) {\n      visitor.Visit(this);\n    }\n    /// <summary>\n    /// The encrypted SHA1 hash of the persisted form of the referenced module.\n    /// </summary>\n    public IEnumerable<byte> HashValue {\n      get {", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           var w = new DenseVector(input.Count);\n            var x = new DenseVector(input.Count);\n            var y = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var z1 = new DenseVector(input.Count);\n            var z2 = new DenseVector(input.Count);\n            var z3 = new DenseVector(input.Count);\n            var z4 = new DenseVector(input.Count);\n            var z5 = new DenseVector(input.Count);\n            var z6 = new DenseVector(input.Count);\n            var z7 = new DenseVector(input.Count);\n            var z8 = new DenseVector(input.Count);\n            var z9 = new DenseVector(input.Count);\n            var z10 = new DenseVector(input.Count);\n            var z11 = new DenseVector(input.Count);\n            var z12 = new DenseVector(input.Count);\n            var z13 = new DenseVector(input.Count);\n            var z14 = new DenseVector(input.Count);\n            var z15 = new DenseVector(input.Count);\n            var z16 = new DenseVector(input.Count);\n            var z17 = new DenseVector(input.Count);\n            var z18 = new DenseVector(input.Count);\n            var z19 = new DenseVector(input.Count);\n            var z20 = new DenseVector(input.Count);\n            var z21 = new DenseVector(input.Count);\n            var z22 = new DenseVector(input.Count);\n            var z23 = new DenseVector(input.Count);\n            var z24 = new DenseVector(input.Count);\n            var z25 = new DenseVector(input.Count);\n            var z26 = new DenseVector(input.Count);\n            var z27 = new DenseVector(input.Count);\n            var z28 = new DenseVector(input.Count);\n            var z29 = new DenseVector(input.Count);\n            var z30 = new DenseVector(input.Count);\n            var z31 = new DenseVector(input.Count);\n            var z32 = new DenseVector(input.Count);\n            var z33 = new DenseVector(input.Count);\n            var z34 = new DenseVector(input.Count);\n            var z35 = new DenseVector(input.Count);\n            var z36 = new DenseVector(input.Count);\n            var z37 = new DenseVector(input.Count);\n            var z38 = new DenseVector(input.Count);\n            var z39 = new DenseVector(input.Count);\n            var z40 = new DenseVector(input.Count);\n            var z41 = new DenseVector(input.Count);\n            var z42 = new DenseVector(input.Count);\n            var z43 = new DenseVector(input.Count);\n            var z44 = new DenseVector(input.Count);\n            var z45 = new DenseVector(input.Count);\n            var z46 = new DenseVector(input.Count);\n            var z47 = new DenseVector(input.Count);\n            var z48 = new DenseVector(input.Count);\n            var z49 = new DenseVector(input.Count);\n            var z50 = new DenseVector(input.Count);\n            var z51 = new DenseVector(input.Count);\n            var z52 = new DenseVector(input.Count);\n            var z53 = new DenseVector(input.Count);\n            var z54 = new DenseVector(input.Count);\n            var z55 = new DenseVector(input.Count);\n            var z56 = new DenseVector(input.Count);\n            var z57 = new DenseVector(input.Count);\n            var z58 = new DenseVector(input.Count);\n            var z59 = new DenseVector(input.Count);\n            var z60 = new DenseVector(input.Count);\n            var z61 = new DenseVector(input.Count);\n            var z62 = new DenseVector(input.Count);\n            var z63 = new DenseVector(input.Count);\n            var z64 = new DenseVector(input.Count);\n            var z65 = new DenseVector(input.Count);\n            var z66 = new DenseVector(input.Count);\n            var z67 = new DenseVector(input.Count);\n            var z68 = new DenseVector(input.Count);\n            var z69 = new DenseVector(input.Count);\n            var z70 = new DenseVector(input.Count);\n            var z71 = new DenseVector(input.Count);\n            var z72 = new DenseVector(input.Count);\n            var z73 = new DenseVector(input.Count);\n            var z74 = new DenseVector(input.Count);\n            var z75 = new DenseVector(input.Count);\n            var z76 = new DenseVector(input.Count);\n            var z77 = new DenseVector(input.Count);\n            var z78 = new DenseVector(input.Count);\n            var z79 = new DenseVector(input.Count);\n            var z80 = new DenseVector(input.Count);\n            var z81 = new DenseVector(input.Count);\n            var z82 = new DenseVector(input.Count);\n            var z83 = new DenseVector", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\t\t\t\treturn new Apfloat[] {median};\n\t\t} else {\n\t\t\tApfloat median = sortedNumbers[left];\n\t\t\tApfloat median2 = sortedNumbers[right];\n\t\t\t\n\t\t\tApfloat temp = median.subtract(median2);\n\t\t\t\n\t\t\tApfloat[] tempArray = new Apfloat[2];\n\t\t\t\t\n\t\t\t\ttempArray[0] = median;\n\t\t\t\ttempArray[1] = median2;\n\t\t\t\t\n\t\t\t\t\tApfloat[] medianArray = getMedians(tempArray);\n\t\t\t\t\t\n\t\t\t\treturn medianArray;\n\t\t\t}\n\t}\n\t\n\t/**\n\t * Get the medians of an array of sorted numbers\n\t * @param sortedNumbers Array of sorted numbers\n\t * @return An array of medians, either size 1 or 2\n\t */\n\tpublic static Apfloat[] getMedians(Apfloat[] sortedNumbers) {\n\t\tint left = 0;\n\t\tint right = sortedNumbers.length - 1;\n\t\t\n\t\twhile (right - left >= 2) {\n\t\t\tleft++;\n\t\t\tright--;\n\t\t}\n\t\t\n\t\tif (left == right) {\n\t\t\tApfloat median = sortedNumbers[left];\n\t\t\treturn new Apfloat[] {median};\n\t\t} else {\n\t\t\tApfloat median = sortedNumbers[left];\n\t\t\tApfloat median2 = sortedNumbers[right];\n\t\t\t\n\t\t\tApfloat temp = median.subtract(median2);\n\t\t\t\n\t\t\tApfloat[] tempArray = new Apfloat[2];\n\t\t\t\n\t\t\ttempArray[0] = median;\n\t\t\ttempArray[1] = median2;\n\t\t\t\n\t\t\tApfloat[] medianArray = getMedians(tempArray);\n\t\t\t\n\t\t\treturn medianArray;\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the mode of an array of sorted numbers\n\t * @param sortedNumbers Array of sorted numbers\n\t * @return An array of modes, blank if there are no modes\n\t */\n\tpublic static Apfloat[] getModes(Apfloat[] sortedNumbers) {\n\t\tint modeOccurrences = 1;\n\t\tint maxModeOccurrences = 1;\n\t\tApfloat temp;\n\t\tArrayList<Apfloat> modes = new ArrayList<>();\n\t\t\n\t\tfor (int i = 1; i < sortedNumbers.length; i++) {\n\t\t\tif (sortedNumbers[i].compareTo(sortedNumbers[i - 1]) == 0) {\n\t\t\t\ttemp = sortedNumbers[i];\n\t\t\t\tmodeOccurrences++;\n\t\t\t\tif (modeOccurrences > maxModeOccurrences) {\n\t\t\t\t\tmodes.clear();\n\t\t\t\tmodes.add(temp);\n\t\t\t\tmaxModeOccurrences = modeOccurrences;\n\t\t\t\t\ti = 0;\n\t\t\t\t} else if (modeOccurrences == maxModeOccurrences) {\n\t\t\t\tmodes.add(temp);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmodeOccurrences = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tApfloat[] modesArray = new Apfloat[modes.size()];\n\t\tmodes.toArray(modesArray);\n\t\t\n\t\treturn modesArray;\n\t}\n\t\n\t/**\n\t * Get the medians of an array of sorted numbers\n\t * @param sortedNumbers Array of sorted numbers\n\t * @return An array of medians, either size 1 or 2\n\t */\n\tpublic static Apfloat[] getMedians(Apfloat[] sortedNumbers) {\n\t\tint left = 0;\n\t\tint right = sortedNumbers.length - 1;\n\t\t\n\t\twhile (right - left >= 2) {\n\t\t\tleft++;\n\t\t\tright--;\n\t\t}\n\t\t\n\t\tif (left == right) {\n\t\t\tApfloat median = sortedNumbers[left];\n\t\t\treturn new Apfloat[] {median};\n\t\t} else {\n\t\t\tApfloat median = sortedNumbers[left];\n\t\t\tApfloat median2 = sortedNumbers[right];\n\t\t\t\n\t\t\tApfloat temp = median.subtract(median2);\n\t\t\t\n\t\t\tApfloat[] tempArray = new Apfloat[2];\n\t\t\t\n\t\t\ttempArray[0] = median;\n\t\t\ttempArray[1] = median2;\n\t\t\t\n\t\t\tApfloat[] medianArray = getMedians(tempArray);\n\t\t\t\n\t\t\treturn medianArray;\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the mode of an array of sorted numbers\n\t * @param sortedNumbers Array of sorted numbers\n\t * @return An array of modes, blank if there are no modes\n\t */\n\tpublic static Apfloat[] getModes(Apfloat[] sortedNumbers) {\n\t\tint modeOccurrences = 1;\n\t\tint maxModeOccurrences = 1;\n\t\tApfloat temp;\n\t\tArrayList<Apfloat> modes = new ArrayList<>();\n\t\t\n\t\tfor (int i = 1; i < sortedNumbers.length; i++) {\n\t\t\tif (sortedNumbers[i].compareTo(sortedNumbers[i - 1]) == 0) {\n\t\t\t\ttemp = sortedNumbers[i];\n\t\t\t\tmodeOccurrences++;\n\t\t\t\tif (modeOccurrences > maxModeOccurrences) {\n\t\t\t\t\tmodes.clear();\n\t\t\t\t\tmodes.add(temp);\n\t\t\t\t\tmaxModeOccurrences = modeOccurrences;\n\t\t\t\t\ti = 0;\n\t\t\t\t} else if (modeOccurrences == maxModeOccurrences) {\n\t\t\t\t\tmodes.add(temp);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmodeOccurrences = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tApfloat[] modesArray = new Apfloat[modes.size()];\n\t\tmodes.toArray(modesArray);\n\t\t\n\t\treturn modesArray;\n\t}\n\t\n\t/**\n\t * Get the medians of", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               if reference_set_map[v] != -1:\n                    A[focal.index(v), reference_set_map[v]] += 1\n                v = parent[v]\n        for edge in edges_in:\n            parent[edge.child] =", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for mapping in mapping_json['mappings']:\n            if mapping['type'] == 'csv':\n                result[mapping['type']] = csv_mapping.get_mapping(mapping['_source'])\n        return result\n    def _test_enrich_to_raw(self):\n        \"\"\"Test whether enriched items are properly loaded to raw index\"\"\"\n        clean = True\n        perceval_backend = None\n        self.enrich_backend = self.connectors[self.connector][2]()\n        elastic_enrich = get_elastic(self.es_con, self.enrich_index, clean, self.enrich_backend)\n        self.enrich_backend.set_elastic(elastic_enrich)\n        raw_items = data2es(self.items, self.enrich_backend)\n        return {'items': len(self.items), 'raw': raw_items}\n    def _test_raw_to_enrich(self):\n        \"\"\"Test whether raw indexes are properly enriched\"\"\"\n        clean = True\n        perceval_backend = None\n        self.ocean_backend = self.connectors[self.connector][1](perceval_backend)\n        elastic_ocean = get_elastic(self.es_con, self.ocean_index, clean, self.ocean_backend)\n        self.ocean_backend.set_elastic(elastic_ocean)\n        raw_items = data2es(self.items, self.ocean_backend)\n        return {'items': len(self.items), 'raw': raw_items}\n    def _test_enrich_to_ocean(self):\n        \"\"\"Test whether enriched items are properly loaded to ocean index\"\"\"\n        clean = True\n        perceval_backend = None\n        self.enrich_backend = self.connectors[self.connector][2]()\n        elastic_enrich = get_elastic(self.es_con, self.enrich_index, clean, self.enrich_backend)\n        self.enrich_backend.set_elastic(elastic_enrich)\n        ocean_items = data2es(self.items, self.enrich_backend)\n        return {'items': len(self.items), 'ocean': ocean_items}\n    def _test_raw_to_ocean(self):\n        \"\"\"Test whether raw indexes are properly enriched\"\"\"\n        clean = True\n        perceval_backend = None\n        self.ocean_backend = self.connectors[self.connector][1](perceval_backend)\n        elastic_ocean = get_elastic(self.es_con, self.ocean_index, clean, self.ocean_backend)\n        self.ocean_backend.set_elastic(elastic_ocean)\n        raw_items = data2es(self.items, self.ocean_backend)\n        return {'items': len(self.items), 'ocean': raw_items}\n    def _test_enrich_to_raw(self):\n        \"\"\"Test whether enriched items are properly loaded to raw index\"\"\"\n        clean = True\n        perceval_backend = None\n        self.enrich_backend = self.connectors[self.connector][2]()\n        elastic_enrich = get_elastic(self.es_con, self.enrich_index, clean, self.enrich_backend)\n        self.enrich_backend.set_elastic(elastic_enrich)\n        raw_items = data2es(self.items, self.enrich_backend)\n        return {'items': len(self.items), 'raw': raw_items}\n    def _test_raw_to_enrich(self):\n        \"\"\"Test whether raw indexes are properly enriched\"\"\"\n        clean = True\n        perceval_backend = None\n        self.ocean_backend = self.connectors[self.connector][1](perceval_backend)\n        elastic_ocean = get_elastic(self.es_con, self.ocean_index, clean, self.ocean_backend)\n        self.ocean_backend.set_elastic(elastic_ocean)\n        raw_items = data2es(self.items, self.ocean_backend)\n        return {'items': len(self.items), 'raw': raw_items}\n    def _test_enrich_to_ocean(self):\n        \"\"\"Test whether enriched items are properly loaded to ocean index\"\"\"\n        clean = True\n        perceval_backend = None\n        self.enrich_backend = self.connectors[self.connector][2]()\n        elastic_enrich = get_elastic(self.es_con, self.enrich_index, clean, self.enrich_backend)\n        self.enrich_backend.set_elastic(elastic_enrich)\n        ocean_items = data2es(self.items, self.enrich_backend)\n        return {'items': len(self.items), 'ocean': ocean_items}\n    def _test_raw_to_ocean(self):\n        \"\"\"Test whether raw indexes are properly enriched\"\"\"\n        clean = True\n        perceval_backend = None\n        self.ocean_backend = self.connectors[self.connector][1](perceval_backend)\n        elastic_ocean = get_elastic(self.es_con, self.ocean_index, clean, self.ocean_backend)\n        self.ocean_backend.set_elastic(elastic_ocean)\n        raw_items = data2es(self.items, self.ocean_backend)\n        return {'items': len(self.items), 'ocean': raw_items}\n    def _test_enrich_to_raw(self):\n        \"\"\"Test whether enriched items are properly loaded to raw index\"\"\"\n        clean = True\n        perceval_backend = None\n        self.enrich_backend = self.connectors[self.connector][2]()\n        elastic_enrich = get_elastic(self.es_con, self.enrich_index, clean, self.enrich_backend)\n        self.enrich_backend.set_elastic(elastic_enrich)\n        raw_items = data2es(self.items, self.enrich_backend)\n        return {'items': len(self.items), 'raw': raw_items}\n    def _test_raw_to_enrich(self):\n        \"\"\"Test whether raw indexes are properly enriched\"\"\"\n        clean = True\n        perceval_backend = None\n        self.ocean_backend = self.connectors[self.connector][1](perceval_backend)\n        elastic_ocean = get_elastic(self.es_con, self.ocean_index, clean, self.ocean_backend)\n        self.ocean_backend.set_elastic(elastic_ocean)\n        raw_items = data2es(self.items, self.ocean_backend)\n        return {'items': len(self.items), 'raw': raw_items}\n    def _test_enrich_to_ocean(self):\n        \"\"\"Test whether enriched items are properly loaded to ocean index\"\"\"\n        clean = True\n        perceval_backend = None\n        self.enrich_backend = self.connectors[self.connector][2]()\n        elastic_enrich = get_elastic(self.es_con, self.enrich_index, clean, self.enrich_backend)\n        self.enrich_backend.set_elastic(elastic_enrich)\n        ocean_items = data2es(self.items, self.enrich_backend)\n        return {'items': len(self.items), 'ocean': ocean_items}\n    def _test_raw_to_ocean(self):\n        \"\"\"Test whether raw indexes are properly enriched\"\"\"\n       ", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots && slot.Value.LockTeam == false && slot.Key == orderManager.LobbyInfo.ClientInSlot(slot.Key))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(Order.Command(\"addbot \" + slot.Key));\n\t\t\t\t\t\t\t\t\t\t\torderManager.LobbyInfo.ClientInSlot(slot.Key) = null;\n\t\t\t\t\t\t\t\t\t\t\torderManager.LobbyInfo.Slots[slot.Key] = new LobbySlotInfo { Value = null };\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\toptions.Add(new Dictionary<string, DropDownOption>()\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t{ \"Add\", botOptions },\n\t\t\t\t\t\t\t\t{ \"Remove\", new List<DropDownOption>()\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tnew DropDownOption()\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tTitle = \"Remove\",\n\t\t\t\t\t\t\t\t\t\tIsSelected = () => false,\n\t\t\t\t\t\t\t\t\tOnClick = () =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tforeach (var slot in orderManager.LobbyInfo.Slots)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots && slot.Value.LockTeam == false && slot.Key == orderManager.LobbyInfo.ClientInSlot(slot.Key))\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(Order.Command(\"removebot \" + slot.Key));\n\t\t\t\t\t\t\t\t\t\t\t\torderManager.LobbyInfo.ClientInSlot(slot.Key) = null;\n\t\t\t\t\t\t\t\t\t\t\torderManager.LobbyInfo.Slots[slot.Key] = new LobbySlotInfo { Value = null };\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\toptions.Add(new Dictionary<string, DropDownOption>()\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t{ \"Add\", new List<DropDownOption>()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tnew DropDownOption()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tTitle = \"Add\",\n\t\t\t\t\t\t\t\t\t\t\tIsSelected = () => false,\n\t\t\t\t\t\t\t\t\t\t\tOnClick = () =>\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(Order.Command(\"add \" + orderManager.LobbyInfo.Slots.Keys.First()));\n\t\t\t\t\t\t\t\t\t\t\t\torderManager.LobbyInfo.Slots[orderManager.LobbyInfo.Slots.Keys.First()] = new LobbySlotInfo { Value = null };\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\toptions.Add(new Dictionary<string, DropDownOption>()\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t{ \"Remove\", new List<DropDownOption>()\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnew DropDownOption()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tTitle = \"Remove\",\n\t\t\t\t\t\t\t\t\t\t\tIsSelected = () => false,\n\t\t\t\t\t\t\t\t\t\tOnClick = () =>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tforeach (var slot in orderManager.LobbyInfo.Slots)\n\t\t\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots && slot.Value.LockTeam == false && slot.Key == orderManager.LobbyInfo.ClientInSlot(slot.Key))\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\n    def __repr__(self):\n        return '<DataFrame length: {}, data: {}, pad_high: {}, pad_low: {}, total_padding: {}>'.format(\n            len(self),\n            self.data,\n            self.pad_high,\n            self.pad_low,\n            self.total_padding,\n        )\nclass PingFrame(DataFrame):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                                                                   |\n    |                                                                   |\n    |                                                   ...\n    |                                                                   |\n    |                                                                   |\n    |                                                                   |\n    |                                                                   |\n    |                                                                   |\n    |                                                                   |\n    |                                                                   |\n    |                                                                   |\n    |                                                                   ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \"\"\"\n    frame_type = FrameType.PING\n    defined_flags = FrameFlag.create_flag_set('END_STREAM')\n    def __init__(self, stream_id, **kwargs):\n        super().__init__(stream_id, **kwargs)\n        self.data = b''\n    def __len__(self):\n        return 1\n    def deserialize(self, frame_payload):\n        self.data = frame_payload\n    def serialize(self):\n        return b''\n    def __repr__(self):\n        return '<PingFrame length: {}, data: {}>'.format(len(self), self.data)\nclass GoAwayFrame(DataFrame):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                                                                   |\n    |                                                                   ...\n    |                                                                   |\n    |                                                                   |\n    |                                                                   |\n    |                                                                   ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \"\"\"\n    frame_type = FrameType.GOAWAY\n    defined_flags = FrameFlag.create_flag_set('END_STREAM')\n    def __init__(self, stream_id, **kwargs):\n        super().__init__(stream_id, **kwargs)\n        self.data = b''\n    def __len__(self):\n        return 1\n    def deserialize(self, frame_payload):\n        self.data = frame_payload\n    def serialize(self):\n        return b''\n    def __repr__(self):\n        return '<GoAwayFrame length: {}, data: {}>'.format(len(self), self.data)\nclass SettingsFrame(DataFrame):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                                                                   |\n    |                                                                   ...\n    |                                                                   |\n    |                                                                   |\n    |                                                                   |\n    |                                                                   |\n    |                                                                   ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \"\"\"\n    frame_type = FrameType.SETTINGS\n    defined_flags = FrameFlag.create_flag_set('END_STREAM')\n    def __init__(self, stream_id, **kwargs):\n        super().__init__(stream_id, **kwargs)\n        self.data = b''\n    def __len__(self):\n        return 1\n    def deserialize(self, frame_payload):\n        self.data = frame_payload\n    def serialize(self):\n        return b''\n    def __repr__(self):\n        return '<SettingsFrame length: {}, data: {}>'.format(len(self), self.data)\nclass RSTStreamFrame(DataFrame):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                                                                   |\n    |                                                                   ...\n    |                                                                   |\n    |                                                                   |\n    |                                                                   ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \"\"\"\n    frame_type = FrameType.RST_STREAM\n    defined_flags = FrameFlag.create_flag_set('END_STREAM')\n    def __init__(self, stream_id, **kwargs):\n        super().__init__(stream_id, **kwargs)\n        self.data = b''\n    def __len__(self):\n        return 1\n    def deserialize(self, frame_payload):\n        self.data = frame_payload\n    def serialize(self):\n        return b''\n    def __repr__(self):\n        return '<RSTStreamFrame length: {}, data: {}>'.format(len(self), self.data)\nclass PriorityFrame(DataFrame):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 ", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.RectangularBoundary == null)\n                return;\n            if (cluster.RectangularBoundary.BoundingBox.Width != cluster.BoundaryCurve.BoundingBox.Width)\n                throw new Exception(\"RectangularBoundary.BoundingBox.Width != BoundaryCurve.BoundingBox.Width\");\n            if (cluster.RectangularBoundary.BoundingBox.Height != cluster.BoundaryCurve.BoundingBox.Height)\n                throw new Exception(\"RectangularBoundary.BoundingBox.Height != BoundaryCurve.BoundingBox.Height\");\n        }\n#endif\n        /// <summary>\n        /// Returns the number of nodes in the graph.\n        /// </summary>\n        public int Count {\n            get { return Nodes.Count; }\n        }\n        /// <summary>\n        /// Returns the number of edges in the graph.\n        /// </summary>\n        public int CountEdges {\n            get { return Edges.Count; }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph.\n        /// </summary>\n        public int CountClusters {\n            get { return RootCluster.Count; }\n        }\n        /// <summary>\n        /// Returns the number of nodes in the graph that are not in any cluster.\n        /// </summary>\n        public int CountUnclusteredNodes {\n            get { return Nodes.Count - RootCluster.Count; }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph that are not collapsed.\n        /// </summary>\n        public int CountUncollapsedClusters {\n            get { return RootCluster.CountUncollapsedClusters(); }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph that are collapsed.\n        /// </summary>\n        public int CountCollapsedClusters {\n            get { return RootCluster.CountCollapsedClusters(); }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph that are collapsed and have no nodes.\n        /// </summary>\n        public int CountEmptyCollapsedClusters {\n            get { return RootCluster.CountEmptyCollapsedClusters(); }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph that are collapsed and have at least one node.\n        /// </summary>\n        public int CountNonEmptyCollapsedClusters {\n            get { return RootCluster.CountNonEmptyCollapsedClusters(); }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph that are collapsed and have at least one node.\n        /// </summary>\n        public int CountNonEmptyCollapsedClustersWithNodes {\n            get { return RootCluster.CountNonEmptyCollapsedClustersWithNodes(); }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph that are collapsed and have at least one node.\n        /// </summary>\n        public int CountNonEmptyCollapsedClustersWithNodesAndLabels {\n            get { return RootCluster.CountNonEmptyCollapsedClustersWithNodesAndLabels(); }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph that are collapsed and have at least one node.\n        /// </summary>\n        public int CountNonEmptyCollapsedClustersWithNodesAndLabelsAndEdges {\n            get { return RootCluster.CountNonEmptyCollapsedClustersWithNodesAndLabelsAndEdges(); }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph that are collapsed and have at least one node.\n        /// </summary>\n        public int CountNonEmptyCollapsedClustersWithNodesAndLabelsAndEdgesAndCurves {\n            get { return RootCluster.CountNonEmptyCollapsedClustersWithNodesAndLabelsAndEdgesAndCurves(); }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph that are collapsed and have at least one node.\n        /// </summary>\n        public int CountNonEmptyCollapsedClustersWithNodesAndLabelsAndEdgesAndCurvesAndBoundingBoxes {\n            get { return RootCluster.CountNonEmptyCollapsedClustersWithNodesAndLabelsAndEdgesAndCurvesAndBoundingBoxes(); }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph that are collapsed and have at least one node.\n        /// </summary>\n        public int CountNonEmptyCollapsedClustersWithNodesAndLabelsAndEdgesAndCurvesAndBoundingBoxesAndMargins {\n            get { return RootCluster.CountNonEmptyCollapsedClustersWithNodesAndLabelsAndEdgesAndCurvesAndBoundingBoxesAndMargins(); }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph that are collapsed and have at least one node.\n        /// </summary>\n        public int CountNonEmptyCollapsedClustersWithNodesAndLabelsAndEdgesAndCurvesAndBoundingBoxesAndMarginsAndMargins {\n            get { return RootCluster.CountNonEmptyCollapsedClustersWithNodesAndLabelsAndEdgesAndCurvesAndBoundingBoxesAndMarginsAndMargins(); }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph that are collapsed and have at least one node.\n        /// </summary>\n        public int CountNonEmptyCollapsedClustersWithNodesAndLabelsAndEdgesAndCurvesAndBoundingBoxesAndMarginsAndMarginsAndMargins {\n            get { return RootCluster.CountNonEmptyCollapsedClustersWithNodesAndLabelsAndEdgesAndCurvesAndBoundingBoxesAndMarginsAndMarginsAndMargins(); }\n        }\n        /// <summary>\n        /// Returns the number of clusters in the graph that are collapsed and have at least one node.\n        /// </summary>\n        public int CountNonEmptyCollapsedClustersWithNodesAndLabelsAndEdgesAndCur", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos(slopeRadians);\n}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn m_maxSlopeRadians;\n}\nvoid btKinematicCharacterController::", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       if (initializers.size() == 1) {\n            ExpressionTree init = initializers.get(0);\n            if (canBeLeaked(init)) {\n                checker.report(Result.failure(\"unique.leaked\"), init);\n            }\n        }\n        return super.visitNewArray(node, p);\n    }\n    @Override\n    public Void visitMethodInvocation(MethodInvocationTree node, Void p) {\n        // If the method is a constructor, it must not leak a reference to\n        // \"this\".\n        if (TreeUtils.isSuperCall(node)) {\n            AnnotatedTypeMirror superResult = atypeFactory.\n                    getAnnotatedType(node);\n            if (!superResult.hasAnnotation(Unique.class)) {\n                checker.report(Result.failure(\"unique.leaked\"), node);\n            }\n        } else {\n            // If the method is not a constructor, it must not leak a reference to\n            // \"this\".\n            AnnotatedExecutableType annotatedType = atypeFactory.\n                    getAnnotatedType(node);\n            if (annotatedType.hasAnnotation(Unique.class)) {\n                checker.report(Result.failure(\"unique.leaked\"), node);\n            }\n        }\n        return super.visitMethodInvocation(node, p);\n    }\n    @Override\n    public Void visitMethodDeclaration(MethodDeclarationTree node, Void p) {\n        // If the method is a constructor, it must not leak a reference to \"this\".\n        if (TreeUtils.isConstructor(node)) {\n            AnnotatedTypeMirror resultType = atypeFactory.\n                    getAnnotatedType(node);\n            if (resultType.hasAnnotation(Unique.class)) {\n                checker.report(Result.failure(\"unique.leaked\"), node);\n            }\n        }\n        return super.visitMethodDeclaration(node, p);\n    }\n    @Override\n    public Void visitNewClass(NewClassTree node, Void p) {\n        // If the class is a constructor, it must not leak a reference to \"this\".\n        if (TreeUtils.isConstructor(node)) {\n            AnnotatedTypeMirror resultType = atypeFactory.\n                    getAnnotatedType(node);\n            if (resultType.hasAnnotation(Unique.class)) {\n                checker.report(Result.failure(\"unique.leaked\"), node);\n            }\n        }\n        return super.visitNewClass(node, p);\n    }\n    @Override\n    public Void visitNewArray(NewArrayTree node, Void p) {\n        // If the array is a constructor, it must not leak a reference to \"this\".\n        if (TreeUtils.isConstructor(node)) {\n            AnnotatedTypeMirror resultType = atypeFactory.\n                    getAnnotatedType(node);\n            if (resultType.hasAnnotation(Unique.class)) {\n                checker.report(Result.failure(\"unique.leaked\"), node);\n            }\n        }\n        return super.visitNewArray(node, p);\n    }\n    @Override\n    public Void visitNewClass(NewClassTree node, Void p) {\n        // If the class is a constructor, it must not leak a reference to \"this\".\n        if (TreeUtils.isConstructor(node)) {\n            AnnotatedTypeMirror resultType = atypeFactory.\n                    getAnnotatedType(node);\n            if (resultType.hasAnnotation(Unique.class)) {\n                checker.report(Result.failure(\"unique.leaked\"), node);\n            }\n        }\n        return super.visitNewClass(node, p);\n    }\n    @Override\n    public Void visitNewClass(NewClassTree node, Void p) {\n        // If the class is a constructor, it must not leak a reference to \"this\".\n        if (TreeUtils.isConstructor(node)) {\n            AnnotatedTypeMirror resultType = atypeFactory.\n                    getAnnotatedType(", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound1 == null)\n\t\t\t{\n\t\t\t\tnbttagcompound1 = new NBTTagCompound();\n\t\t\t\tnbttagcompound.setTag(\"display\", nbttagcompound1);\n\t\t\t}\n\t\t\tnbttagcompound1.setInteger(\"color\", color);\n\t\t}\n\t}\n\t@Override\n\tpublic void addInformation(ItemStack stack, EntityPlayer player, List<String> tooltip, boolean advanced)\n\t{\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\ttooltip.add(\"\");\n\t\t", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(typeAttribute.Value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the methods.\n\t\t/// </summary>\n\t\tprivate void CreateMethods()\n\t\t{\n\t\t\tif (_params.OverloadingCount == 0)\n\t\t\t{\n\t\t\t\t_params.CreateMethod(MethodHeaderBegin, _codeExpression);\n\t\t\t}\n\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t_params.CreateOverloadedMethods(MethodHeaderBegin, _codeExpression);\n\t\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturnType()\n\t\t{\n\t\t\tif (_returnType == null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(CommentXmlDocument.SelectSingleNode(RETURNS_NODE).Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n\t\t\t\t\tmyTrackBar.Width = 100;\n\t\t\t\t\t\n\t\t\t\tAssert.AreEqual(50, myTrackBar.Height, \"#SIZE2_5\");\n\t\t\t\t\tAssert.AreEqual(100, myTrackBar.Width, \"#SIZE2_6\");\n\t\t\t\t\t\n\t\t\t\t\tusing (Form myForm = new Form()) {\n\t\t\t\t\t\tmyForm.Controls.Add(myTrackBar);\n\t\t\t\t\t\tmyForm.Show();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tAssert.AreEqual(50, myTrackBar.Height, \"#SIZE2_7\");\n\t\t\t\t\t\tAssert.AreEqual(100, myTrackBar.Width, \"#SIZE2_8\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n\t\t\t\tmyTrackBar.Width = 100;\n\t\t\t\t\n\t\t\t\tAssert.AreEqual(50, myTrackBar.Height, \"#SIZE2_9\");\n\t\t\t\tAssert.AreEqual(100, myTrackBar.Width, \"#SIZE2_10\");\n\t\t\t\t\t\n\t\t\t\tusing (Form myForm = new Form()) {\n\t\t\t\t\t\tmyForm.Controls.Add(myTrackBar);\n\t\t\t\t\t\tmyForm.Show();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\tAssert.AreEqual(50, myTrackBar.Height, \"#SIZE2_11\");\n\t\t\t\t\t\tAssert.AreEqual(100, myTrackBar.Width, \"#SIZE2_12\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n\t\t\t\tmyTrackBar.Width = 100;\n\t\t\t\t\n\t\t\t\tAssert.AreEqual(50, myTrackBar.Height, \"#SIZE2_13\");\n\t\t\t\tAssert.AreEqual(100, myTrackBar.Width, \"#SIZE2_14\");\n\t\t\t\t\n\t\t\t\tusing (Form myForm = new Form()) {\n\t\t\t\t\t\tmyForm.Controls.Add(myTrackBar);\n\t\t\t\t\t\tmyForm.Show();\n\t\t\t\t\t\t\n\t\t\t\t\t\tAssert.AreEqual(50, myTrackBar.Height, \"#SIZE2_15\");\n\t\t\t\t\t\tAssert.AreEqual(100, myTrackBar.Width, \"#SIZE2_16\");\n\t\t\t\t\t}\n\t\t\t}\n\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n\t\t\t\tmyTrackBar.Width = 100;\n\t\t\t\t\n\t\t\t\tAssert.AreEqual(50, myTrackBar.Height, \"#SIZE2_17\");\n\t\t\t\tAssert.AreEqual(100, myTrackBar.Width, \"#SIZE2_18\");\n\t\t\t\t\n\t\t\t\tusing (Form myForm = new Form()) {\n\t\t\t\t\tmyForm.Controls.Add(myTrackBar);\n\t\t\t\t\tmyForm.Show();\n\t\t\t\t\t\n\t\t\t\t\tAssert.AreEqual(50, myTrackBar.Height, \"#SIZE2_19\");\n\t\t\t\t\tAssert.AreEqual(100, myTrackBar.Width, \"#SIZE2_20\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n\t\t\t\tmyTrackBar.Width = 100;\n\t\t\t\t\n\t\t\t\tAssert.AreEqual(50, myTrackBar.Height, \"#SIZE2_21\");\n\t\t\t\tAssert.AreEqual(100, myTrackBar.Width, \"#SIZE2_22\");\n\t\t\t\t\n\t\t\t\tusing (Form myForm = new Form()) {", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tdoReturn(annotationType).when(lookup).findAll();\n\t\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(annotationType), Collections.singleton(instrumentationApplier", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit != other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.postdominators == null) {\n\t\t\tif (other.postdominators != null)\n\t\t\t\treturn false;\n\t\t", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideRExtent[end][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue;\n            }\n            int max1 = wideLExtent[end][r.leftChild];\n            int max2 = narrowL;\n            int max = (max1 < max2 ? max1 : max2);\n            if (min > max) { // can this left constituent stretch far enough to reach the right constituent?\n              continue;\n            }\n            float pS = r.score;\n            int parentState = r.parent;\n            float oldIScore = iScore[start][end][parentState];\n            float bestIScore = oldIScore;\n            boolean foundBetter;  // always set below for this rule\n            //System.out.println(\"Min \"+min+\" max \"+max+\" start \"+start+\" end \"+end);\n            if (!Test.lengthNormalization) {\n              // find the split that can use this rule to make the max score\n              for (int split = min; split <= max; split++) {\n                if (Test.constraints != null) {\n                  boolean skip = false;\n                  for (Test.Constraint c : Test.constraints) {\n                    if (((start < c.start && end >= c.end) || (start <= c.start && end > c.end)) && split > c.start && split < c.end) {\n                      skip = true;\n                      break;\n                    }\n                    if ((split == c.start && end == c.end)) {\n                      String tag = (String) stateNumberer.object(rightState);\n                      Matcher m = c.state.matcher(tag);\n                      if (!m.matches()) {\n                        skip = true;\n                        break;\n                      }\n                    }\n                    if ((split == c.start && end == c.end)) {\n                      String tag = (String) stateNumberer.object(r.leftChild);\n                      Matcher m = c.state.matcher(tag);\n                      if (!m.matches()) {\n                        skip = true;\n                        break;\n                      }\n                    }\n                  }\n                  if (skip) {\n                    continue;\n                  }\n                }\n                float lS = iScore[start][split][rightState];\n                if (lS == Float.NEGATIVE_INFINITY) {\n                  continue;\n                }\n                float rS = iScore[split][end][r.leftChild];\n                if (rS == Float.NEGATIVE_INFINITY) {\n                  continue;\n                }\n                float tot = pS + lS + rS;\n                if (tot > bestIScore) {\n                  bestIScore = tot;\n                }\n              } // for split point\n              foundBetter = bestIScore > oldIScore;\n              if (foundBetter && bestIScore > threshold) {\n                iScore[start][end][parentState] = bestIScore;\n                //              if (spillGuts) System.out.println(\"Could build \" + stateNumberer.object(parentState) + \" from \" + start + \" to \" + end);\n                if (oldIScore == Float.NEGATIVE_INFINITY) {\n                  if (start > narrowRExtent[end][parentState]) {\n                    narrowRExtent[end][parentState] = start;\n                    wideRExtent[end][parentState] = start;\n                  } else {\n                    if (start < wideRExtent[end][parentState]) {\n                      wideRExtent[end][parentState] = start;\n                    }\n                  }\n                  if (end < narrowLExtent[start][parentState]) {\n                    narrowLExtent[start][parentState] = end;\n                    wideLExtent[start][parentState] = end;\n                  } else {\n                    if (end > wideLExtent[start][parentState]) {\n                      wideLExtent[start][parentState] = end;\n                    }\n                  }\n                }\n              } else {\n                prunedSomething = true;\n              }\n            } // end if Test.lengthNormalization\n            if (foundBetter) {\n              if (bestIScore > threshold) {\n                // this way of making \"parentState\" is better than previous\n                // and sufficiently good to be stored on this iteration\n                iScore[start][end][parentState] = bestIScore;\n                //              if (spillGuts) System.out.println(\"Could build \" + stateNumberer.object(parentState) + \" from \" + start + \" to \" + end);\n                if (oldIScore == Float.NEGATIVE_INFINITY) {\n                  if (start > narrowRExtent[end][parentState]) {\n                    narrowRExtent[end][parentState] = start;\n                    wideRExtent[end][parentState] = start;\n                  } else {\n                    if (start < wideRExtent[end][parentState]) {\n                      wideRExtent[end][parentState] = start;\n                    }\n                  }\n                  if (end < narrowLExtent[start][parentState]) {\n                    narrowLExtent[start][parentState] = end;\n                    wideLExtent[start][parentState] = end;\n                  } else {\n                    if (end > wideLExtent[start][parentState]) {\n                      wideLExtent[start][parentState] = end;\n                    }\n                  }\n                }\n              } else {\n                prunedSomething = true;\n              }\n            } // end if foundBetter\n          } // end for rightRules\n        } // end for rightState\n      } // end for", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "               'rsync', '--archive', '--delete', '--dry-run',\n                '--exclude', 'pg_data', '--exclude', 'pg_xlog',\n                '--exclude', 'pg_xlog', '--exclude', 'pg", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tvar state = process.GetOrCreateData<ProcessState>();\n\t\t\tstate.IgnoreThreadsChangedEvent = false;\n\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\t\tprocess.DelayedIsRunningChanged -= Dbg", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact) proxyThat;\n\t\t\t\tif ( this.getId() == null ||\n\t\t\t\t\t\tthis.getId().equals(that.getId()) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\treturn false;\n\t}\n\t/** HashCode implementation.\n\t * @see java.lang.Object#hashCode()\n\t * @return int\n\t */\n\t@Override\n\tpublic int hashCode() {\n\t\tif ( this.hashCode == null ) {\n\t\t\tif ( this.getId() != null ) {\n\t\t\t\tthis.hashCode = this.getId().hashCode();\n\t\t\t}\n\t\t}\n\t\treturn this.hashCode;\n\t}\n\t/** Increment the version number.\n\t * @see java.lang.Object#incrementVersion()\n\t */\n\t@Override\n\tpublic void incrementVersion() {\n\t\tthis.setVersion(this.getVersion() + 1);\n\t}\n\t/** Increment the version number.\n\t * @see java.lang.Object#incrementVersion()\n\t */\n\t@Override\n\tpublic void incrementVersion(final int increment) {\n\t\tthis.setVersion(this.getVersion() + increment);\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersion() {\n\t\treturn this.version;\n\t}\n\t/** Set the version number.\n\t * @see java.lang.Object#setVersion(int)\n\t * @param version the version number\n\t */\n\t@Override\n\tpublic void setVersion(final int version) {\n\t\tthis.version = version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck() {\n\t\treturn this.version;\n\t}\n\t/** Set the version number.\n\t * @see java.lang.Object#setVersion(int)\n\t * @param version the version number\n\t */\n\t@Override\n\tpublic void setVersionNoCheck(final int version) {\n\t\tthis.version = version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck(final int defaultVersion) {\n\t\treturn this.version;\n\t}\n\t/** Set the version number.\n\t * @see java.lang.Object#setVersion(int)\n\t * @param version the version number\n\t */\n\t@Override\n\tpublic void setVersionNoCheck(final int version, final int defaultVersion) {\n\t\tthis.version = version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck(final int defaultVersion) {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck() {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersion() {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck(final int defaultVersion) {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck() {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck(final int defaultVersion) {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck() {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck(final int defaultVersion) {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck() {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck(final int defaultVersion) {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck() {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck(final int defaultVersion) {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck() {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck(final int defaultVersion) {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.lang.Object#getVersion()\n\t * @return int\n\t */\n\t@Override\n\tpublic int getVersionNoCheck() {\n\t\treturn this.version;\n\t}\n\t/** Return the version number.\n\t * @see java.", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t  with open(name, 'w') as f_ID:\n\t    f_ID.write(str(body_types[i]) + '\\n')\n\t    for j in range(body_types[i]):\n\t      f_ID.write('%s %s %s %s %s %s %s\\n' % (bodies[body_offset + j].location[0], \n\t\t\t\t\t\t\t\t\tbodies[body_offset + j].location[1], \n\t\t\t\t\t\t\t\tbodies[body_offset + j].location[2], \n\t\t\t\t\t\t\t\tbodies[body_offset + j].orientation.entries[0], \n\t\t\t\t\t\t\t\tbodies[body_offset + j].orientation.entries[1], \n\t\t\t\t\t\t\t\t\tbodies[body_offset + j].orientation.entries[2], \n\t\t\t\t\t\t\t\t\tbodies[body_offset + j].orientation.entries[3]))\n\t      body_offset += body_types[i]\n\t    \n\t  #########################\n\t  if Output_Vel:\n\t    body_offset = 0\n\t    for i, ID in enumerate(structures_ID):\n\t      name = output_name + '.' + ID + '.Torque'\n\t      if n == 0:\n\t\tstatus = 'w'\n\t      else:\n\t\tstatus = 'a'\n\t      with open(name, status) as f_ID:\n\t\tf_ID.write(str(body_types[i]) + '\\n')\n\t\tfor j in range(body_types[i]):\n\t\t  t = Trap_vel_t[3*(body_offset+j):3*(body_offset+j)+3]\n\t\t  f_ID.write('%s %s %s\\n' % (t[0], \n\t\t\t\t\t      t[1], \n\t\t\t\t\t      t[2]))\n\t      body_offset += body_types[i]\n\t      \n\telse:\n\t  total_rej += 1\n\t  body_offset = 0\n\t  for i, ID in enumerate(structures_ID):\n\t    name = output_name + '.' + ID + '.rejected_Torque'\n\t    with open(name, 'w') as f_ID:\n\t      f_ID.write(str(body_types[i]) + '\\n')\n\t      for j in range(body_types[i]):\n\t\tt = Trap_vel_t[3*(body_offset+j):3*(body_offset+j)+3]\n\t\tf_ID.write('%s %s %s\\n' % (t[0], \n\t\t\t\t\t      t[1], \n\t\t\t\t\t      t[2]))\n\t      body_offset += body_types[i]\n\t    \n\t  #########################\n\t  if n % n_save == 0:\n\t    print((\"SAVING CONFIGURATION : %s\" %n))\n\t    if (reject_wall+reject_jump) == 0:\n\t      status = 'w'\n\t    else:\n\t      status = 'a'\n\t    with open(output_name + '.config', status) as f_ID:\n\t      f_ID.write(str(body_types[i]) + '\\n')\n\t      for j in range(body_types[i]):\n\t\tt = Trap_vel_t[3*(body_offset+j):3*(body_offset+j)+3]\n\t\tf_ID.write('%s %s %s\\n' % (t[0], \n\t\t\t\t\t      t[1], \n\t\t\t\t\t      t[2]))\n\t      body_offset += body_types[i]\n\t    \n\t    if Output_Vel:\n\t      status = 'w'\n\t    else:\n\t      status = 'a'\n\t    with open(output_name + '.Torque', status) as f_ID:\n\t      f_ID.write(str(body_types[i]) + '\\n')\n\t      for j in range(body_types[i]):\n\t\tt = Trap_vel_t[3*(body_offset+j):3*(body_offset+j)+3]\n\t\tf_ID.write('%s %s %s\\n' % (t[0], \n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata is not None:\n            if cdata.shape == shape_of:\n                # We can remove this Subtensor\n                return [node.inputs[0]]]\n    elif isinstance(node.op, AdvancedSubtensor1):\n        cdata = node.", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].required = True\n\nclass AddCommunityPageForm(ModelFormWithHelper):\n    \"\"\"Form to create new CommunityPage. The author and the community of the\n    page are expected to be provided when initializing the form:\n    * author - currently logged in user, aka the author of the page\n    * community - to which Community the CommunityPage belongs\n    \"\"\"\n    class Meta:\n        model = CommunityPage\n        fields = ('title', 'slug', 'order', 'content')\n        helper_class = SubmitCancelFormHelper\n        helper_cancel_href = \"{% url 'view_community_landing' \" \\\n                             \"community.slug %}\"\n    def __init__(self, *args, **kwargs):\n        self.author = kwargs.pop('author')\n        self.community = kwargs.pop('community')\n        super(AddCommunityPageForm, self).__init__(*args, **kwargs)\n    def save(self, commit=True):\n        \"\"\"Override save to add author and community to the instance\"\"\"\n        instance = super(AddCommunityPageForm, self).save(commit=False)\n        instance.author = SystersUser.objects.get(user=self.author)\n        instance.community = self.community\n        if commit:\n            instance.save()\n        return instance\nclass EditCommunityPageForm(ModelFormWithHelper):\n    \"\"\"Form to edit a CommunityPage.\"\"\"\n    class Meta:\n        model = CommunityPage\n        fields = ('title', 'slug', 'order', 'content')\n        helper_class = SubmitCancelFormHelper\n        helper_cancel_href = \"{% url 'view_community_page' community.slug \" \\\n                         \"object.slug %}\"\nclass AddCommunityRequestForm(ModelFormWithHelper):\n    \"\"\"Form to create new CommunityRequest. The author and the community of\n    the request are expected to be provided when initializing the form:\n    * author - currently logged in user, aka the author of the request\n    * community - to which Community the CommunityRequest belongs\n    \"\"\"\n    class Meta:\n        model = RequestCommunity\n        fields = ('is_member', 'email_id', 'email', 'name', 'slug', 'order',\n                    'location', 'type_community', 'other_community_type',\n                    'parent_community', 'community_channel', 'mailing_list',\n                    'website', 'facebook', 'googleplus', 'twitter', 'social_presence',\n                    'other_account', 'demographic_target_count',\n                    'purpose', 'is_avail_volunteer', 'count_avail_volunteer',\n                    'content_developer', 'selection_criteria', 'is_real_time')\n        helper_class = SubmitCancelFormHelper\n        helper_cancel_href = \"{% url 'view_community_request' community.slug \" \\\n                             \"object.slug %}\"\n    def __init__(self, *args, **kwargs):\n        self.author = kwargs.pop('author')\n        self.community = kwargs.pop('community')\n        super(AddCommunityRequestForm, self).__init__(*args, **kwargs)\n    def save(self, commit=True):\n        \"\"\"Override save to add author and community to the instance\"\"\"\n        instance = super(AddCommunityRequestForm, self).save(commit=False)\n        instance.author = SystersUser.objects.get(user=self.author)\n        instance.community = self.community\n        if commit:\n            instance.save()\n        return instance\nclass EditCommunityRequestForm(ModelFormWithHelper):\n    \"\"\"Form to edit a CommunityRequest.\"\"\"\n    class Meta:\n        model = RequestCommunity\n        fields = ('is_member', 'email_id', 'email', 'name', 'slug', 'order',\n                  'location', 'type_community', 'other_community_type',\n                  'parent_community', 'community_channel',\n                  'mailing_list', 'website', 'facebook', 'googleplus',\n                  'twitter', 'social_presence', 'other_account',\n                  'demographic_target_count', 'purpose', 'is_avail_volunteer',\n                  'count_avail_volunteer', 'content_developer',\n                  'selection_criteria', 'is_real_time')\n        helper_class = SubmitCancelFormHelper\n        helper_cancel_href = \"{% url 'view_community_request' community.slug \" \\\n                           \"object.slug %}\"\n    def save(self, commit=True):\n        \"\"\"Override save to add author and community to the instance\"\"\"\n        instance = super(EditCommunityRequestForm, self).save(commit=False)\n        instance.author = SystersUser.objects.get(user=self.author)\n        instance.community = self.community\n        if commit:\n            instance.save()\n        return instance\nclass AddCommunityPageRequestForm(ModelFormWithHelper):\n    \"\"\"Form to create new CommunityPageRequest. The author and the community of\n    the request are expected to be provided when initializing the form:\n    * author - currently logged in user, aka the author of the request\n    * community - to which Community the CommunityPageRequest belongs\n    \"\"\"\n    class Meta:\n        model = RequestCommunityPage\n        fields = ('is_member', 'email_id', 'email', 'name', 'slug', 'order',\n                  'location', 'type_community', 'other_community_type',\n                  'parent_community', 'community_channel', 'mailing_list',\n                  'website', 'facebook', 'googleplus', 'twitter',\n                  'social_presence', 'other_account', 'demographic_target_count',\n                  'purpose', 'is_avail_volunteer', 'count_avail_volunteer',\n                  'content_developer', 'selection_criteria', 'is_real_time')\n        helper_class = SubmitCancelFormHelper\n        helper_cancel_href = \"{% url 'view_community_request' community.slug \" \\\n                           \"object.slug %}\"\n    def __init__(self, *args, **kwargs):\n        self.author = kwargs.pop('author')\n        self.community = kwargs.pop('community')\n        super(AddCommunityPageRequestForm, self).__init__(*args, **kwargs)\n    def save(self, commit=True):\n        \"\"\"Override save to add author and community to the instance\"\"\"\n        instance = super(AddCommunityPageRequestForm, self).save(commit=False)\n        instance.author = SystersUser.objects.get(user=self.author)\n        instance.community = self.community\n        if commit:\n           ", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return fn(*arg, **kw)\n        else:\n            def wrap(*arg, **kw):\n                if not retval:\n                    query = arg[0]\n                    fn(*arg, **kw)\n                    return query\n                else:\n                    return", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           for location in self.show_tag_list:\n                self.runtime.add_block_as_child_node(location, xml_object)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for key, (old_value, new_value) in data_model_changes.items()]\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.update_filtered_data()\n        self.update_filtered_data()\n        self.update_filter()\n        self.current_filter = data_model_changes\n        self.", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class == null && Method != null && Field != null)\n\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'method' or 'field' attribute with 'type' attribute for", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 18;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t// \n\t\t\t// objYText\n\t\t\t// \n\t\t\tthis.objYText.Location = new System.Drawing.Point(104, 224);\n\t\t\tthis.objYText.MaxLength = 40;\n\t\t\tthis.objYText.Name = \"objYText\";\n\t\t\tthis.objYText.Size = new System.Drawing.Size(104, 20);\n\t\t\tthis.objYText.TabIndex = 19;\n\t\t\tthis.objYText.Text = \"\";\n\t\t\t// \n\t\t\t// objZLabel\n\t\t\t// \n\t\t\tthis.objZLabel.Font = new System.Drawing.Font(\"Microsoft Sans Serif\", 8.25F, System.Drawing.FontStyle.Italic, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));\n\t\t\tthis.objZLabel.Location = new System.Drawing.Point(16, 264);\n\t\t\tthis.objZLabel.Name = \"objZLabel\";\n\t\t\tthis.objZLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objZLabel.TabIndex = 21;\n\t\t\tthis.objZLabel.Text = \"Description...\";\n\t\t\t// \n\t\t\t// objZText\n\t\t\t// \n\t\t\tthis.objZText.Location = new System.Drawing.Point(104, 264);\n\t\t\tthis.objZText.MaxLength = 40;\n\t\t\tthis.objZText.Name = \"objZText\";\n\t\t\tthis.objZText.Size = new System.Drawing.Size(104, 20);\n\t\t\tthis.objZText.TabIndex = 22;\n\t\t\tthis.objZText.Text = \"\";\n\t\t\t// \n\t\t\t// objWidthText\n\t\t\t// \n\t\t\tthis.objWidthText.Location = new System.Drawing.Point(104, 200);\n\t\t\t\tthis.objWidthText.MaxLength = 40;\n\t\t\t\tthis.objWidthText.Name = \"objWidthText\";\n\t\t\t\tthis.objWidthText.Size = new System.Drawing.Size(104, 20);\n\t\t\t\tthis.objWidthText.TabIndex = 23;\n\t\t\t\tthis.objWidthText.Text = \"\";\n\t\t\t// \n\t\t\t// label8\n\t\t\t// \n\t\t\tthis.label8.Location = new System.Drawing.Point(16, 200);\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.Size = new System.Drawing.Size(48, 16);\n\t\t\t\tthis.label8.TabIndex = 24;\n\t\t\t\tthis.label8.Text = \"Width:\";\n\t\t\t// \n\t\t\t// objHeightText\n\t\t\t// \n\t\t\t\tthis.objHeightText.Location = new System.Drawing.Point(104, 200);\n\t\t\t\tthis.objHeightText.MaxLength = 40;\n\t\t\t\tthis.objHeightText.Name = \"objHeightText\";\n\t\t\t\tthis.objHeightText.Size = new System.Drawing.Size(104, 20);\n\t\t\t\tthis.objHeightText.TabIndex = 25;\n\t\t\t\tthis.objHeightText.Text = \"\";\n\t\t\t// \n\t\t\t\t// frmPropertiesArea\n\t\t\t// \n\t\t\tthis.AutoScaleBaseSize = new System.Drawing.Size(5, 13);\n\t\t\tthis.ClientSize = new System.Drawing.Size(400, 464);", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assertEqual(c.comments,\n                             \"remove leftover code, leave a temporary compatibility import. Note! Start\\nimporting FCMaildirSource from changes.mail instead of changes.freshcvsmail\\n\")\n        self.assertEqual(c.isdir, 0)\n    def testMsgS6(self):\n        c = self.get(\"mail/syncmail.6\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assertEqual(c.comments,\n                         \"remove leftover code, leave a temporary compatibility import. Note! Start\\nimporting FCMaildirSource from changes.mail instead of changes.freshcvsmail\\n\")\n        self.assertEqual(c.isdir, 0)\n    def testMsgS7(self):\n        c = self.get(\"mail/syncmail.7\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assertEqual(c.comments,\n                         \"remove leftover code, leave a temporary compatibility import. Note! Start\\nimporting FCMaildirSource from changes.mail instead of changes.freshcvsmail\\n\")\n        self.assertEqual(c.isdir, 0)\n    def testMsgS8(self):\n        c = self.get(\"mail/syncmail.8\")\n        self.assertEqual(c.who, \"warner\")\n", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n            termData.add(entry.getKey(), entry.getValue());\n        }\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }\n    /**\n     * Returns the IDs of the vocabularies that are supported by this extension.\n     *\n     * @return the IDs of the vocabularies that are supported by this extension\n     */\n    protected Collection<String> getTargetVocabularyIds()\n    {\n        return Collections.emptyList();\n    }", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower() && wand.getItem() == Botania.itemSubtileGenerating) {\n\t\t\tif(ticksExisted > 0 && BotaniaAPI.internalHandler.getPassiveFlowerDecay() > 0) {\n\t\t\t\t\tif(supertile.getWorld().isRemote) {\n\t\t\t\t\t\tif(supertile.getWorld().getTotalWorldTime() % 10 == 0) {\n\t\t\t\t\t\t\tint decay = Math.min(BotaniaAPI.internalHandler.getPassiveFlowerDecay(), 10);\n\t\t\t\t\t\t\t\tif(decay > 0) {\n\t\t\t\t\t\t\t\t\t\tint decayTicks = decay / 20;\n\t\t\t\t\t\t\t\t\tif(decayTicks > 0) {\n\t\t\t\t\t\t\t\t\t\tint decayTicksLeft = decayTicks;\n\t\t\t\t\t\t\t\t\tfor(int i = 0; i < decayTicks; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(supertile.getWorld().isRemote) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(supertile.getWorld().getTotalWorldTime() % 10 == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tint decay = Math.min(BotaniaAPI.internalHandler.getPassiveFlowerDecay(), 10);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(decay > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint decayTicks = decay / 20;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(decayTicks > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint decayTicksLeft = decayTicks;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0; i < decayTicks; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(supertile.getWorld().isRemote) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(supertile.getWorld().getTotalWorldTime() % 10 == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint decay = Math.min(BotaniaAPI.internalHandler.getPassiveFlowerDecay(), 10);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(decay > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint decayTicks = decay / 20;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(decayTicks > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint decayTicksLeft = decayTicks;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0; i < decayTicks; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(supertile.getWorld().isRemote) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(supertile.getWorld().getTotalWorldTime() % 10 == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint decay = Math.min(BotaniaAPI.internalHandler.getPassiveFlowerDecay(), 10);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(decay > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint decayTicks = decay / 20;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(decayTicks > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint decayTicksLeft = decayTicks;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0; i < decayTicks; i++) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(supertile.getWorld().isRemote) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(supertile.getWorld().getTotalWorldTime() % 10 == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint decay = Math.min(BotaniaAPI.internalHandler.getPassiveFlowerDecay(), 10);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(decay > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint decayTicks = decay / 20;\n\t\t", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private float getIntrinsicCohesion(Node n) {\n        float intrinsicCohesion = 0;\n        for (Node component : n.getNeighbors()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        return intrinsicCohesion;\n    }\n    private float getIntrinsicCohesion(Community c1, Community c2) {\n        float intrinsicCohesion = 0;\n        for (Node component : c1.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c2.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        return intrinsicCohesion;\n    }\n    private float getIntrinsicCohesion(Community c1, Community c2, Community c3) {\n        float intrinsicCohesion = 0;\n        for (Node component : c1.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c2.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c3.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        return intrinsicCohesion;\n    }\n    private float getIntrinsicCohesion(Community c1, Community c2, Community c3, Community c4) {\n        float intrinsicCohesion = 0;\n        for (Node component : c1.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c2.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c3.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c4.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        return intrinsicCohesion;\n    }\n    private float getIntrinsicCohesion(Community c1, Community c2, Community c3, Community c4, Community c5) {\n        float intrinsicCohesion = 0;\n        for (Node component : c1.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c2.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c3.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c4.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c5.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        return intrinsicCohesion;\n    }\n    private float getIntrinsicCohesion(Community c1, Community c2, Community c3, Community c4, Community c5, Community c6) {\n        float intrinsicCohesion = 0;\n        for (Node component : c1.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c2.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c3.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c4.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c5.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c6.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        return intrinsicCohesion;\n    }\n    private float getIntrinsicCohesion(Community c1, Community c2, Community c3, Community c4, Community c5, Community c6, Community c7) {\n        float intrinsicCohesion = 0;\n        for (Node component : c1.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c2.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c3.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c4.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c5.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c6.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c7.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        return intrinsicCohesion;\n    }\n    private float getIntrinsicCohesion(Community c1, Community c2, Community c3, Community c4, Community c5, Community c6, Community c7, Community c8) {\n        float intrinsicCohesion = 0;\n        for (Node component : c1.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c2.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c3.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c4.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c5.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c6.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c7.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        for (Node component : c8.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        return intrinsicCohesion;\n    }\n    private float getIntrinsicCohesion(Community c1, Community c2, Community c3, Community c4, Community c5, Community c6, Community c7, Community c8, Community c9) {\n        float intrinsicCohesion = 0;\n        for (Node component : c1.getComponents()) {\n            intrinsicCohesion += this.getIntrinsicCoh", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if not are_equal:\n        raise Exception(\"ERROR: Document %s: Expected moreinfo %s and got %s\" % (str(docid), str(minfo), str(flags)))\n    return are_equal\ndef _retrieve_fulltext_recids():\n    \"\"\"Returns the list of all the recid number linked with at least a fulltext\n    file.\"\"\"\n    res = run_sql('SELECT DISTINCT id_bibdoc FROM bibdoc')\n    return [int(x[0]) for x in res]\ndef _fix_recid(recid, logger):\n    \"\"\"Fix a given recid.\"\"\"\n    #logger.info(\"Upgrading record %s:\" % recid)\n    # 1) moving docname and type to the relation with bibdoc\n    bibdoc_docs = run_sql(\"select id_bibdoc, type from bibdoc where id=%s\", (recid,))\n    are_equal = True\n    for docid_str in bibdoc_docs:\n        docid = str(docid_str[0])\n        doctype = str(docid_str[1])\n        #logger.info(\"Upgrading document %s:\" % (docid, ))\n        res2 = run_sql(\"select docname, more_info from bibdoc where id=%s\", (docid,))\n        if not res2:\n            logger.error(\"Error when migrating document %s attached to the record %s: can not retrieve from the bibdoc table \" % (docid, recid))\n        else:\n            docname = str(res2[0][0])\n            run_sql(\"update bibdoc set docname=%%s where id=%s\", (docname,))\n            run_sql(\"update bibdoc set doctype=%%s where id=%s\", (doctype,))\n        # 2) moving moreinfo to the new moreinfo structures (default namespace)\n        if res2[0][1]:\n            minfo = cPickle.loads(res2[0][1])\n            # 2a migrating descriptions->version->format\n            new_value = cPickle.dumps(minfo['descriptions'])\n            run_sql(\"INSERT INTO bibdocmoreinfo (id_bibdoc, namespace, data_key, data_value) VALUES (%s, %s, %s, %s)\", (str(docid), \"\", \"descriptions\", new_value))\n            # 2b migrating comments->version->format\n            new_value = cPickle.dumps(minfo['comments'])\n            run_sql(\"INSERT INTO bibdocmoreinfo (id_bibdoc, namespace, data_key, data_value) VALUES (%s, %s, %s, %s)\", (str(docid), \"\", \"comments\", new_value))\n            # 2c migrating flags->flagname->version->format\n            new_value = cPickle.dumps(minfo['flags'])\n            run_sql(\"INSERT INTO bibdocmoreinfo (id_bibdoc, namespace, data_key, data_value) VALUES (%s, %s, %s, %s)\", (str(docid), \"\", \"flags\", new_value))\n            # 3) Verify the correctness of moreinfo transformations\n            try:\n                descriptions = cPickle.loads(run_sql(\"SELECT data_value FROM bibdocmoreinfo WHERE id_bibdoc=%s AND namespace=%s AND data_key=%s\", (str(docid), '', 'descriptions'))[0][0])\n                for version in minfo['descriptions']:\n                    for docformat in minfo['descriptions'][version]:\n                        v1 = descriptions[version][docformat]\n                        v2 = minfo['descriptions'][version][docformat]\n                        if v1 != v2:\n                            are_equal = False\n                            logger.info(\"ERROR: Document %s: Expected description %s and got %s\" % (str(docid), str(v2), str(v1)))\n            except Exception as e:\n                logger.info(\"ERROR: Document %s: Problem with retrieving descriptions: %s  MoreInfo: %s Descriptions: %s\" % (str(docid), str(e), str(minfo), str(descriptions", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tif(tvComputerCluster.SelectedNode!=null) \n\t\t\t{\n\t\t\t\tif(tvComputerCluster.SelectedNode.Text.ToString().Equals(\"Computer\"))\n\t\t\t\tupdateListViews(\"Computer\");\n\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(date);\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Generates the occurrences of the specified event that occur in the specified period.\n   * @param event the event for which the occurrences has to be generated.\n   * @param startingAt the date at which the occurrences has to start.\n   * @param endingAt the date at which the occurrences has to end.\n   * @return an EventOccurrence that occurs in the specified period.\n   */\n  private EventOccurrence anOccurrenceOf(final EventDetail event,\n          final Datable<?> startingAt, final Datable<?> endingAt) {\n    Period period = new Period(new DateTime(startingAt.getTime()), new DateTime(endingAt.getTime()));\n    return new EventOccurrence(event, period);\n  }\n  /**\n   * Generates the occurrences of the specified event that occur in the specified period.\n   * @param event the event for which the occurrences has to be generated.\n   * @param startingAt the date at which the occurrences has to start.\n   * @param endingAt the date at which the occurrences has to end.\n   * @return an EventOccurrence that occurs in the specified period.\n   */\n  private EventOccurrence anOccurrenceOf(final EventDetail event,\n          final DateTime startingAt, final DateTime endingAt) {\n    Period period = new Period(startingAt, endingAt);\n    return new EventOccurrence(event, period);\n  }\n  /**\n   * Generates the occurrences of the specified event that occur in the specified period.\n   * @param event the event for which the occurrences has to be generated.\n   * @param startingAt the date at which the occurrences has to start.\n   * @param endingAt the date at which the occurrences has to end.\n   * @return an EventOccurrence that occurs in the specified period.\n   */\n  private EventOccurrence anOccurrenceOf(final EventDetail event,\n          final Datable<?> startingAt, final Datable<?> endingAt) {\n    Period period = new Period(new DateTime(startingAt.getTime()), new DateTime(endingAt.getTime()));\n    return new EventOccurrence(event, period);\n  }\n  /**\n   * Generates the occurrences of the specified event that occur in the specified period.\n   * @param event the event for which the occurrences has to be generated.\n   * @param startingAt the date at which the occurrences has to start.\n   * @param endingAt the date at which the occurrences has to end.\n   * @return an EventOccurrence that occurs in the specified period.\n   */\n  private EventOccurrence anOccurrenceOf(final EventDetail event,\n          final DateTime startingAt, final DateTime endingAt) {\n    Period period = new Period(startingAt, endingAt);\n    return new EventOccurrence(event, period);\n  }\n  /**\n   * Generates the occurrences of the specified event that occur in the specified period.\n   * @param event the event for which the occurrences has to be generated.\n   * @param startingAt the date at which the occurrences has to start.\n   * @param endingAt the date at which the occurrences has to end.\n   * @return an EventOccurrence that occurs in the specified period.\n   */\n  private EventOccurrence anOccurrenceOf(final EventDetail event,\n          final Datable<?> startingAt, final Datable<?> endingAt) {\n    Period period = new Period(new DateTime(startingAt.get", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo() { Component = sourceComponent, MemberName = sourceProperty };\n\t\tsourceEventBinding.DataTarget = new dfComponentMemberInfo() { Component = this, MemberName = \"Target\" };\n\t\tsourceEventBinding.EventName = SourceEventName;\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAndDontSave | HideFlags.HideInInspector;\nNext line of code:\n\t\ttargetEventBinding.DataSource = new dfComponentMemberInfo() { Component = this, MemberName = targetProperty };\n\t\ttargetEventBinding.DataTarget = new dfComponentMemberInfo() { Component = targetComponent, MemberName = targetProperty };\n\t\ttargetEventBinding.EventName = TargetEventName;\n\t\ttargetEventBinding.Bind();\n\t}\n\t#endregion\n}\n", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class,\n                    containerName, this);\n            Status result = switchManager.addSpanPort(jsonData);\n            if (result.isSuccess()) {\n                resultBean.", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n        }\n    public int randomChoice(List l) {\nNext line of code:\n        return rnd.nextInt(l.size());\n        }\n    public int randomChoice(List l, int minimum, int maximum) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6, int seed7) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + seed7 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6, int seed7, int seed8) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + seed7 + seed8 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6, int seed7, int seed8, int seed9) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + seed7 + seed8 + seed9 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6, int seed7, int seed8, int seed9, int seed10) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + seed7 + seed8 + seed9 + seed10 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6, int seed7, int seed8, int seed9, int seed10,\n            int seed11) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + seed7 + seed8 + seed9 + seed10 + seed11 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6, int seed7, int seed8, int seed9, int seed10,\n            int seed11, int seed12) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + seed7 + seed8 + seed9 + seed10 + seed11 + seed12 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6, int seed7, int seed8, int seed9, int seed10,\n            int seed11, int seed12, int seed13) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + seed7 + seed8 + seed9 + seed10 + seed11 + seed12 + seed13 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6, int seed7, int seed8, int seed9, int seed10,\n            int seed11, int seed12, int seed13, int seed14) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + seed7 + seed8 + seed9 + seed10 + seed11 + seed12 + seed13 + seed14 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6, int seed7, int seed8, int seed9, int seed10,\n            int seed11, int seed12, int seed13, int seed14, int seed15) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + seed7 + seed8 + seed9 + seed10 + seed11 + seed12 + seed13 + seed14 + seed15 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6, int seed7, int seed8, int seed9, int seed10,\n            int seed11, int seed12, int seed13, int seed14, int seed15,\n            int seed16) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + seed7 + seed8 + seed9 + seed10 + seed11 + seed12 + seed13 + seed14 + seed15 + seed16 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6, int seed7, int seed8, int seed9, int seed10,\n            int seed11, int seed12, int seed13, int seed14, int seed15,\n            int seed16, int seed17) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + seed7 + seed8 + seed9 + seed10 + seed11 + seed12 + seed13 + seed14 + seed15 + seed16 + seed17 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6, int seed7, int seed8, int seed9, int seed10,\n            int seed11, int seed12, int seed13, int seed14, int seed15,\n            int seed16, int seed17, int seed18) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + seed7 + seed8 + seed9 + seed10 + seed11 + seed12 + seed13 + seed14 + seed15 + seed16 + seed17 + seed18 + minimum;\n        }\n    public int randomChoice(List l, int minimum, int maximum,\n            int seed, int seed2, int seed3, int seed4, int seed5,\n            int seed6, int seed7, int seed8, int seed9, int seed10,\n            int seed11, int seed12, int seed13, int seed14, int seed15,\n            int seed16, int seed17, int seed18, int seed19) {\nNext line of code:\n        return rnd.nextInt(maximum - minimum + 1) + seed + seed2 + seed3 + seed4 + seed5 + seed6 + seed7 + seed8 + seed9 + seed", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "   la = LinkAnnotation()\n    la.subject = man_obj.uuid  # the subordinate is the subject\n    la.subject_type = man_obj.item_type\n    la.project_uuid = man_obj.project_uuid\n    la.source_id", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktofit = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergecells = \")\n                .Append(StringUtil.ToHexString", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (extraToJis [value])) |\n\t\t\t\t\t\t(((int) (extraToJis [value + 1])) << 8);\n\t\t\t}\n\t\t\t// Write the byte to the output buffer.\n\t\t\tbytes [posn++] = (byte)value;\n\t\t}\n\t\t// Return the length to the caller.\n\t\treturn byteIndex - posn;\n\t}\n#endif // !DISABLE_UNSAFE\n} // CP51932Encoder\n#endif // !ECMA_COMPAT", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   src1 = env.A[b]\n    obj.operands = [dst, src1]\n    obj.type = type_data_processing\n@ispec(\"32<[ ~off2(4) ~off3(6) ~off1(6) b(", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tpropertiesMap(stream, propertiesMap, close);\n\t\t\treturn propertiesMap;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new JasperReportsException(e);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif (stream != null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\tstream.close();\n\t\t\t\t}\n\t\t\t\tcatch (IOException e)\n\t\t\t\t{\n\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t}\n\t\n\t/**\n\t * Loads a properties file from a location.\n\t * \n\t * @param location the properties file URL\n\t * @return the properties file loaded as a in-memory properties map\n\t */\n\tpublic static JRPropertiesMap loadProperties(String location)\n\t{\n\t\treturn loadProperties(new IURL(location));\n\t}\n\t\n\t/**\n\t * Loads a properties file from a location.\n\t * \n\t * @param location the properties file URL\n\t * @return the properties file loaded as a in-memory properties map\n\t */\n\tpublic static JRPropertiesMap loadProperties(InputStream stream)\n\t{\n\t\tboolean close = true;\n\t\ttry\n\t\t{\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\t\tpropertiesMap(stream, propertiesMap, close);\n\t\t\treturn propertiesMap;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new JasperReportsException(e);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif (stream != null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tstream.close();\n\t\t\t\t}\n\t\t\t\tcatch (IOException e)\n\t\t\t\t{\n\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t}\n\t\n\t/**\n\t * Loads a properties file from a location.\n\t * \n\t * @param location the properties file URL\n\t * @return the properties file loaded as a in-memory properties map\n\t */\n\tpublic static JRPropertiesMap loadProperties(String location, Properties properties)\n\t{\n\t\treturn loadProperties(new IURL(location), properties);\n\t}\n\t\n\t/**\n\t * Loads a properties file from a location.\n\t * \n\t * @param location the properties file URL\n\t * @param properties the properties to use\n\t * @return the properties file loaded as a in-memory properties map\n\t */\n\tpublic static JRPropertiesMap loadProperties(InputStream stream, Properties properties)\n\t{\n\t\tboolean close = true;\n\t\ttry\n\t\t{\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tpropertiesMap(stream, propertiesMap, close);\n\t\t\treturn propertiesMap;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new JasperReportsException(e);\n\t\t}\n\t\t\tfinally\n\t\t{\n\t\t\t\tif (stream != null)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tstream.close();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException e)\n\t\t\t\t{\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Loads a properties file from a location.\n\t * \n\t * @param location the properties file URL\n\t * @param properties the properties to use\n\t * @return the properties file loaded as a in-memory properties map\n\t */\n\tpublic static JRPropertiesMap loadProperties(String location, Properties properties, boolean close)\n\t{\n\t\treturn loadProperties(new IURL(location), properties, close);\n\t}\n\t\n\t/**\n\t * Loads a properties file from a location.\n\t * \n\t * @param location the properties file URL\n\t * @param properties the properties to use\n\t * @return the properties file loaded as a in-memory properties map\n\t */\n\tpublic static JRPropertiesMap loadProperties(InputStream stream, Properties properties, boolean close)\n\t{\n\t\tboolean close = close;\n\t\ttry\n\t\t{\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tpropertiesMap(stream, propertiesMap, close);\n\t\t\treturn propertiesMap;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new JasperReportsException(e);\n\t\t}\n\t\t\tfinally\n\t\t{\n\t\t\tif (stream != null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tstream.close();\n\t\t\t\t}\n", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator()\n        {\n            return this == SPECTATOR;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n         * Returns true if this is the NOT_SET game type\n         */\n        public boolean isNotSet()\n        {\n            return this == NOT_SET;\n        }\n        /**\n         * Returns true if this is the CREATIVE game type\n         */\n        public boolean isCreative(WorldSettings worldSettings)\n        {\n            return this == CREATIVE && worldSettings.getGameType() == worldSettings.getGameType();\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator(WorldSettings worldSettings)\n        {\n            return this == SPECTATOR && worldSettings.getGameType() == worldSettings.getGameType();\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival(WorldSettings worldSettings)\n        {\n            return this == SURVIVAL && worldSettings.getGameType() == worldSettings.getGameType();\n        }\n        /**\n         * Returns true if this is the NOT_SET game type\n         */\n        public boolean isNotSet(WorldSettings worldSettings)\n        {\n            return this == NOT_SET && worldSettings.getGameType() == worldSettings.getGameType();\n        }\n        /**\n         * Returns true if this is the CREATIVE game type\n         */\n        public boolean isCreative(WorldSettings worldSettings, boolean isCreative)\n        {\n            return this == CREATIVE && worldSettings.getGameType() == worldSettings.getGameType() && isCreative;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator(WorldSettings worldSettings, boolean isSpectator)\n        {\n            return this == SPECTATOR && worldSettings.getGameType() == worldSettings.getGameType() && isSpectator;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival(WorldSettings worldSettings, boolean isSurvival)\n        {\n            return this == SURVIVAL && worldSettings.getGameType() == worldSettings.getGameType() && isSurvival;\n        }\n        /**\n         * Returns true if this is the NOT_SET game type\n         */\n        public boolean isNotSet(WorldSettings worldSettings, boolean isNotSet)\n        {\n            return this == NOT_SET && worldSettings.getGameType() == worldSettings.getGameType() && isNotSet;\n        }\n    }\n}\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (\"BA\");\n\t\t\tSecurityIdentifier everyoneSid = new SecurityIdentifier (\"WD\");\n\t\t\tCommonSecurityDescriptor csd; DiscretionaryAcl dacl; CommonAce ace;\n\t\t\tcsd = new CommonSecurityDescriptor (false, false, ControlFlags.None, userSid, groupSid, null, null);\n\t\t\tdacl = csd.DiscretionaryAcl;\n\t\t\tAssert.AreEqual (1, dacl.Count);\n\t\t\tace = (CommonAce)dacl [0];\n\t\t\tAssert.AreEqual (-1, ace.AccessMask);\n\t\t\tAssert.AreEqual (AceFlags.None, ace.AceFlags);\n\t\t\tAssert.AreEqual (AceType.AccessAllowed, ace.AceType);\n\t\t\tAssert.AreEqual (20, ace.BinaryLength);\n\t\t\tAssert.IsFalse (ace.IsCallback);\n\t\t\tAssert.IsFalse (ace.IsInherited);\n\t\t\tAssert.AreEqual (0, ace.OpaqueLength);\n\t\t\tAssert.AreEqual (ace.SecurityIdentifier, everyoneSid);\n\t\t\tcsd = new CommonSecurityDescriptor (true, false, ControlFlags.None, userSid, groupSid, null, null);\n\t\t\tdacl = csd.DiscretionaryAcl;\n\t\t\tAssert.AreEqual (1, dacl.Count);\n\t\t\tace = (CommonAce)dacl [0];\n\t\t\t\tAssert.AreEqual (-1, ace.AccessMask);\n\t\t\t\tAssert.AreEqual (AceFlags.None, ace.AceFlags);\n\t\t\tAssert.AreEqual (AceType.AccessAllowed, ace.AceType);\n\t\t\tAssert.AreEqual (20, ace.BinaryLength);\n\t\t\tAssert.IsFalse (ace.IsCallback);\n\t\t\tAssert.IsFalse (ace.IsInherited);\n\t\t\tAssert.AreEqual (0, ace.OpaqueLength);\n\t\t\tAssert.AreEqual (ace.SecurityIdentifier, everyoneSid);\n\t\t}\n\t\t[Test]\n\t\tpublic void SetDefaultDacl ()\n\t\t{\n\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (\"BA\");\n\t\t\tSecurityIdentifier everyoneSid = new SecurityIdentifier (\"WD\");\n\t\t\tCommonSecurityDescriptor csd; DiscretionaryAcl dacl; CommonAce ace;\n\t\t\tcsd = new CommonSecurityDescriptor (false, false, ControlFlags.None, userSid, groupSid, null, null);\n\t\t\tdacl = csd.DiscretionaryAcl;\n\t\t\tAssert.AreEqual (1, dacl.Count);\n\t\t\tace = (CommonAce)dacl [0];\n\t\t\tAssert.AreEqual (-1, ace.AccessMask);\n\t\t\tAssert.AreEqual (AceFlags.None, ace.AceFlags);\n\t\t\tAssert.AreEqual (AceType.AccessAllowed, ace.AceType);\n\t\t\tAssert.AreEqual (20, ace.BinaryLength);\n\t\t\tAssert.IsFalse (ace.IsCallback);\n\t\t\tAssert.IsFalse (ace.IsInherited);\n\t\t\tAssert.AreEqual (0, ace.OpaqueLength);\n\t\t\tAssert.AreEqual (ace.SecurityIdentifier, everyoneSid);\n\t\t\tcsd = new CommonSecurityDescriptor (true, false, ControlFlags.None, userSid, groupSid, null, null);\n\t\t\tdacl = csd.DiscretionaryAcl;\n\t\t\tAssert.AreEqual (1, dacl.Count);\n\t\t\tace = (CommonAce)dacl [0];\n\t\t\tAssert.AreEqual (-1, ace.AccessMask);\n\t\t\tAssert.Are", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n        self.__idle(self.__process, self.__queue.get", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       if (PhotonNetwork.isMasterClient)\n        {\n            additionalRpcs.Add(PhotonNetwork.masterClientRpcName);\n        }\n        else\n        {\n            additionalRpcs.Add(PhotonNetwork.clientRpcName);", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       Button full_back = rootLayout.findViewById(R.id.full_back);\n        full_back.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (parentContext != null) {\n                    parentContext.onBackPressed();\n                }\n            }\n        });\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(20).color(secondaryColor), null, null);\n        full_back.setCompoundDrawablePadding(30);\n        full_back.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (parentContext != null) {\n                    parentContext.onBackPressed();\n                }\n            }\n        });\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(20).color(secondaryColor), null, null);\n        full_back.setCompoundDrawablePadding(30);\n        full_back.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (parentContext != null) {\n                    parentContext.onBackPressed();\n                }\n            }\n        });\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(20).color(secondaryColor), null, null);\n        full_back.setCompoundDrawablePadding(30);\n        full_back.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (parentContext != null) {\n                    parentContext.onBackPressed();\n                }\n            }\n        });\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(20).color(secondaryColor), null, null);\n        full_back.setCompoundDrawablePadding(30);\n        full_back.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (parentContext != null) {\n                    parentContext.onBackPressed();\n                }\n            }\n        });\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(20).color(secondaryColor), null, null);\n        full_back.setCompoundDrawablePadding(30);\n        full_back.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (parentContext != null) {\n                    parentContext.onBackPressed();\n                }\n            }\n        });\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(20).color(secondaryColor), null, null);\n        full_back.setCompoundDrawablePadding(30);\n        full_back.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (parentContext != null) {\n                    parentContext.onBackPressed();\n                }\n            }\n        });\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(20).color(secondaryColor), null, null);\n        full_back.setCompoundDrawablePadding(30);\n        full_back.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (parentContext != null) {\n                    parentContext.onBackPressed();\n                }\n            }\n        });\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(20).color(secondaryColor), null, null);\n        full_back.setCompoundDrawablePadding(30);\n        full_back.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (parentContext != null) {\n                    parentContext.onBackPressed();\n                }\n            }\n        });\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(20).color(secondaryColor), null, null);\n        full_back.setCompoundDrawablePadding(30);\n        full_back.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (parentContext != null) {\n                    parentContext.onBackPressed();\n                }\n            }\n        });\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(20).color(secondaryColor), null, null);\n        full_back.setCompoundDrawablePadding(30);\n        full_back.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (parentContext != null) {\n                    parentContext.onBackPressed();\n                }\n            }\n        });\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(20).color(secondaryColor), null, null);\n        full_back.setCompoundDrawablePadding(30);\n        full_back.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (parentContext != null) {\n                    parentContext.onBackPressed();\n                }\n            }\n        });\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(20).color(secondaryColor), null, null);\n        full_back.setCompoundDrawablePadding(30);\n        full_back.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (parentContext != null) {\n                    parentContext.onBackPressed();\n                }\n            }\n        });\n        full_back.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_arrow_back).sizeDp(20).color(secondaryColor), null, null);\n       ", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           if time_reversal:\n                return psit_G.conj()\n            else:\n                return psit_G\n        # Time-reversal symmetry\n        if time_reversal:\n            return psit_G.conj()\n        else:\n            return psit_G\n    def transform_wave_function_k(self, psit_G, k):\n        \"\"\"Transform wave function from IBZ to BZ.\n        k is the index of the desired k-point in the full BZ.\n        \"\"\"\n        s = self.sym_k[k]\n        time_reversal = self.time_reversal_k[k]\n        op_cc = np.linalg.inv(self.symmetry.op_scc[s]).round().astype(int)\n        # Identity\n        if (np.abs(op_cc - np.eye(3, dtype=int)) < 1e-10).all():\n            if time_reversal:\n                return psit_G\n            else:\n                return psit_G\n        # General point group symmetry\n        else:\n            if time_reversal:\n                return psit_G.conj()\n            else:\n                return psit_G\n        # Time-reversal symmetry\n        if time_reversal:\n            return psit_G.conj()\n        else:\n            return psit_G\n    def transform_wave_function_k_q(self, psit_G, k, q):\n        \"\"\"Transform wave function from IBZ to BZ.\n        k is the index of the desired k-point in the full BZ.\n        q is the index of the desired k-point in the full BZ.\n        \"\"\"\n        s = self.sym_k[k]\n        time_reversal = self.time_reversal_k[k]\n        op_cc = np.linalg.inv(self.symmetry.op_scc[s]).round().astype(int)\n        # Identity\n        if (np.abs(op_cc - np.eye(3, dtype=int)) < 1e-10).all():\n            if time_reversal:\n                return psit_G\n            else:\n                return psit_G\n        # General point group symmetry\n        else:\n            if time_reversal:\n                return psit_G.conj()\n            else:\n                return psit_G\n        # Time-reversal symmetry\n        if time_reversal:\n            return psit_G.conj()\n        else:\n            return psit_G\n    def transform_wave_function_k_q_k(self, psit_G, k, q, k_):\n        \"\"\"Transform wave function from IBZ to BZ.\n        k is the index of the desired k-point in the full BZ.\n        q is the index of the desired k-point in the full BZ.\n        k_ is the index of the desired k-point in the full BZ.\n        \"\"\"\n        s = self.sym_k[k]\n        time_reversal = self.time_reversal_k[k]\n        op_cc = np.linalg.inv(self.symmetry.op_scc[s]).round().astype(int)\n        # Identity\n        if (np.abs(op_cc - np.eye(3, dtype=int)) < 1e-10).", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\nNext line of code:\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\nNext line of code:\n        Response response = ut", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\t\t\tif (child is ILBasicBlock) {\n\t\t\t\t\t\t\tflatBody.Add(child);\n\t\t\t\t\t\tprevChildAsBB = child as ILBasic", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll)\n\t\treturn;\n\t    //if we're not a ragdoll, set the position to the owner's position\n\t    if (Owner != null) {\n\t\tif (Owner.IsRagdoll) {\n", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        self.name =  \"\"\n        self.top =  ClassFactory( [InterfaceNodeSet, InterpolatedNodeSet] )\n        self.polygon_region_ids = [ int ]\n        self.segment_region_ids = [ int ]\n        self.node_region_ids = [ int ]\n        self.fix_region_id()\n        super().__init__(config)\nclass BulkLayer(GeoLayer):\nNext line of code:\n    def __init__(self, config={}):\n        self.name =  \"\"\n        self.top =  ClassFactory( [InterfaceNodeSet, InterpolatedNodeSet] )\n        self.polygon_region_ids = [ int ]\n        self.segment_region_ids = [ int ]\n        self.node_region_ids = [ int ]\n        self.fix_region_id()\n        super().__init__(config)\nclass WellLayer(GeoLayer):\nNext line of code:\n    def __init__(self, config={}):\n        self.name =  \"\"\n        self.top =  ClassFactory( [InterfaceNodeSet, InterpolatedNodeSet] )\n        self.polygon_region_ids = [ int ]\n        self.segment_region_ids = [ int ]\n        self.node_region_ids = [ int ]\n        self.fix_region_id()\n        super().__init__(config)\nclass Geo(JsonData):\n    \"\"\"Geological model\"\"\"\n    _not_serialized_attrs_ = ['topo_type']\n    def __init__(self, config={}):\n        self.name = \"\"\n        self.topo_type = TopologyType.given\n        self.topo_dim = TopologyDim.invalid\n        self.topo_dim_extruded = False\n        self.topo_dim_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded_extruded = False\n        self.topo_dim_extruded_extruded_extruded_ext", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff] = (byte)(num);\n    }\n}\n", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( new SimpleRegexValueGetter( objectVariables, source,\n                new FilterExpression[] {\n                    new FilterBinaryNode(\n                        new FilterExpression[] {\n                            new AbstractFilterExpression(\n                                new Predicate<Node>() {\n                                    public boolean apply( Node node ) {\n                                        return node.getLabel().equals(\n                                            \"foo\" );\n                                    }\n                                }\n                            ),\n                            new AbstractFilterExpression(\n                                new Predicate<Node>() {\n                                    public boolean apply( Node node ) {\n                                        return node.getLabel().equals(\n                                            \"bar\" );\n                                    }\n                                }\n                            )\n                        }\n                    )\n                }\n            )\n            );\n        }\n\t}\n\tprivate static class PatternFinder\n\t    extends FilteringIterable<PatternMatch>\n\t{\n        public PatternFinder( PatternMatcher matcher,\n            PatternNode start, Node startNode, boolean recursive,\n            Collection<PatternNode> optional )\n        {\nNext line of code:\n            super( new SimpleRegexValueGetter(\n                new HashMap<String, PatternNode>(),\n                new PatternMatcher.PatternMatch( start, startNode,\n                    recursive, optional ),\n                new FilterExpression[] {\n                    new FilterBinaryNode(\n                        new FilterExpression[] {\n                            new AbstractFilterExpression(\n                                new Predicate<Node>() {\n                                    public boolean apply( Node node ) {\n                                        return node.getLabel().equals(\n                                            \"foo\" );\n                                    }\n                                }\n                            ),\n                            new AbstractFilterExpression(\n                                new Predicate<Node>() {\n                                    public boolean apply( Node node ) {\n                                        return node.getLabel().equals(\n                                            \"bar\" );\n                                    }\n                                }\n                            )\n                        }\n                    )\n                }\n            )\n            );\n        }\n\t}\n\tprivate static class PatternMatch\n\t{\n\t    private final Node node;\n\t    private final PatternNode pattern;\n\t    private final Node startNode;\n\t    private final boolean recursive;\n\t    private final Collection<PatternNode> optional;\n\t    private final Set<String> visited = new HashSet<String>();\n\t    private final Set<String> visitedLabels = new HashSet<String>();\n\t    private final Set<String> visitedProperties = new HashSet<String>();\n\t    private final Set<String> visitedPropertiesLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValues =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValues =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabels =\n\t        new HashSet<String>();\n\t    private final Set<String> visitedPropertiesValuesLabelsValuesLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabelsLabels", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "       elif key == 'VALEUR':\n            slice_json['valeur'] = transform_values_holder_xml_json_to_json(value[0])\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment'] = u'\\n\\n'.join(comments)\n    return slice_json\ndef transform_values_holder_xml_json_to_json(values_holder_xml_json, format = 'date'):\n    comments = []\n    values_holder_json = collections.OrderedDict()\n    for key, value in values_holder_xml_json.iteritems():\n        if key == 'code':\n            pass\n        elif key == 'format':\n            if format == 'date':\n                format = 'date'\n            elif format == 'integer':\n                format = int\n            elif format == 'percent':\n                format = float\n            else:\n                format = eval(format)\n        elif key == 'type':\n            values_holder_json['unit'] = json_unit_by_xml_json_type.get(value, value)\n        elif key == 'tail':\n            comments.append(value)\n        elif key == 'text':\n            comments.append(value)\n        elif key == 'VALEUR':\n            values_holder_json['values'] = [ transform_value_xml_json_to_json(item, format)\n                for item in value\n                ]\n        else:\n            values_holder_json[key] = value\n    if comments:\n        values_holder_json['comment'] = u'\\n\\n'.join(comments)\n    return values_holder_json\ndef transform_value_xml_json_to_json(value_xml_json, format = 'date'):\n    comments = []\n    value_json = collections.OrderedDict()\n    for key, value in value_xml_json.iteritems():\n        if key == 'code':\n            pass\n        elif key == 'format':\n            if format == 'date':\n                format = 'date'\n            elif format == 'integer':\n                format = int\n            elif format == 'percent':\n                format = float\n            else:\n                format = eval(format)\n        elif key == 'tail':\n            comments.append(value)\n        elif key == 'text':\n            comments.append(value)\n        elif key == 'type':\n            value_json['unit'] = json_unit_by_xml_json_type.get(value, value)\n        elif key == 'VALEUR':\n            value_json['value'] = transform_value_xml_json_to_json(value[0], format)\n        else:\n            value_json[key] = value\n    if comments:\n        value_json['comment'] = u'\\n\\n'.join(comments)\n    return value_json\ndef transform_value_xml_json_to_json(value_xml_json, format = 'date'):\n    comments = []\n    value_json = collections.OrderedDict()\n    for key, value in value_xml_json.iteritems():\n        if key == 'code':\n            pass\n        elif key == 'format':\n            if format == 'date':\n                format = 'date'\n            elif format == 'integer':\n                format = int\n            elif format == 'percent':\n                format = float\n            else:\n                format = eval(format)\n        elif key == 'tail':\n            comments.append(value)\n        elif key == 'text':\n            comments.append(value)\n        elif key == 'type':\n            value_json['unit'] = json_unit_by_xml_json_type.get(value, value)\n        elif key == 'VALEUR':\n            value_json['value'] = transform_value_xml_json_to_json(", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           if (ClientSettings.ICON_CLOSE_FRAME_SELECTED!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_CLOSE_FRAME_SELECTED)));\n           }\n        }\n      });\n    }\n  }\n  /**\n   * Remove an internal frame icon from the panel.\n   * Remove an internal frame listener.\n   * @param frame internal frame to remove\n   */\n  public final void remove(final InternalFrame frame) {\n    try {\n      Integer n = (Integer)buttonsNr.get(frame.getTitle());\n      if (n!=null) {\n        n.set(n.intValue()-1);\n        if (n.intValue()==0) {\n          buttonsNr.remove(frame.getTitle());\n          buttons.remove(frame);\n        }\n      }\n      this.remove(frame);\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n  /**\n   * Remove an internal frame icon from the panel.\n   * Remove an internal frame listener.\n   * @param frame internal frame to remove\n   */\n  public final void remove(final InternalFrame frame, final boolean close) {\n    try {\n      Integer n = (Integer)buttonsNr.get(frame.getTitle());\n      if (n!=null) {\n        n.set(n.intValue()-1);\n        if (n.intValue()==0) {\n          buttonsNr.remove(frame.getTitle());\n          buttons.remove(frame);\n        }\n      }\n      this.remove(frame,close);\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n  /**\n   * Remove an internal frame icon from the panel.\n   * Remove an internal frame listener.\n   * @param frame internal frame to remove\n   */\n  public final void remove(final InternalFrame frame) {\n    try {\n      Integer n = (Integer)buttonsNr.get(frame.getTitle());\n      if (n!=null) {\n        n.set(n.intValue()-1);\n        if (n.intValue()==0) {\n          buttonsNr.remove(frame.getTitle());\n          buttons.remove(frame);\n        }\n      }\n      this.remove(frame);\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n  /**\n   * Remove an internal frame icon from the panel.\n   * Remove an internal frame listener.\n   * @param frame internal frame to remove\n   */\n  public final void remove(final InternalFrame frame, final boolean close) {\n    try {\n      Integer n = (Integer)buttonsNr.get(frame.getTitle());\n      if (n!=null) {\n        n.set(n.intValue()-1);\n        if (n.intValue()==0) {\n          buttonsNr.remove(frame.getTitle());\n          buttons.remove(frame);\n        }\n      }\n      this.remove(frame,close);\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n  /**\n   * Remove an internal frame icon from the panel.\n   * Remove an internal frame listener.\n   * @param frame internal frame to remove\n   */\n  public final void remove(final InternalFrame frame) {\n    try {\n      Integer n = (Integer)buttonsNr.get(frame.getTitle());\n      if (n!=null) {\n        n.set(n.intValue()-1);\n        if (n.intValue()==0) {\n          buttonsNr.remove(frame.getTitle());\n          buttons.remove(frame);\n        }\n      }\n      this.remove(frame);\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n  /**\n   * Remove an internal frame icon from the panel.\n   * Remove an internal frame listener.\n   * @param frame internal frame to remove\n   */\n  public final void remove(final InternalFrame frame, final boolean close) {\n    try {\n      Integer n = (Integer)buttonsNr.get(frame.getTitle());\n      if (n!=null) {\n        n.set(n.intValue()-1);\n        if (n.intValue()==0) {\n          buttonsNr.remove(frame.getTitle());\n          buttons.remove(frame);\n        }\n      }\n      this.remove(frame,close);\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n  /**\n   * Remove an internal frame icon from the panel.\n   * Remove an internal frame listener.\n   * @param frame internal frame to remove\n   */\n  public final void remove(final InternalFrame frame) {\n    try {\n      Integer n = (Integer)buttonsNr.get(frame.getTitle());\n      if (n!=null) {\n        n.set(n.intValue()-1);\n        if (n.intValue()==0) {\n          buttonsNr.remove(frame.getTitle());\n          buttons.remove(frame);\n        }\n      }\n      this.remove(frame);\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n  /**\n   * Remove an internal frame icon from the panel.\n   * Remove an internal frame listener.\n   * @param frame internal frame to remove\n   */\n  public final void remove(final InternalFrame frame, final boolean close) {\n    try {\n      Integer n = (Integer)buttonsNr.get(frame.getTitle());\n      if (n!=null) {\n        n.set(n.intValue()-1);\n        if (n.intValue()==0) {\n          buttonsNr.remove(frame.getTitle());\n          buttons.remove(frame);\n        }\n      }\n      this.remove(frame,close);\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n  /**\n   * Remove an internal frame icon from the panel.\n   * Remove", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   print getLC()\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n    {\n      for (int x = leftToRight ? 0 : p.getRasterWidth() - 1; \n        (leftToRight && x < p.getRasterWidth()) || (!leftToRight && x >= 0); \n        x += leftToRight ? 1 : -1)\n      {\n        if (getAverageGrey(p, x, y, toolDiameterInPx)<treshold)\n        {\n          //skip intermediate move commands\n          while((leftToRight && x+1 < p.getRasterWidth()) || (!leftToRight && x-1 >= 0) && getAverageGrey(p, leftToRight ? x+1 : x-1, y, toolDiameterInPx) < treshold)\n          {\n            x+= leftToRight ? 1 : -1;\n          }\n          move(out, Util.px2mm(offset.x+x, dpi), Util.px2mm(offset.y+y, dpi));\n        }\n        else\n        {\n          //skip intermediate line commands\n          while((leftToRight && x+1 < p.getRasterWidth()) || (!leftToRight && x-1 >= 0) && getAverageGrey(p, leftToRight ? x+1 : x-1, y, toolDiameterInPx) >= treshold)\n          {\n            x+= leftToRight ? 1 : -1;\n          }\n          line(out, Util.px2mm(offset.x+x, dpi), Util.px2mm(offset.y+y, dpi));\n        }\n      }\n      //invert direction\n      leftToRight = !leftToRight;\n    }\n  }\n  \n  private void writeVectorCode(VectorPart p, PrintStream out)\n  {\n    double dpi = p.getDPI();\n    IModelaProperty prop = (IModelaProperty) p.getLaserProperty();\n    int toolDiameterInPx = (int) Util.mm2px(prop.getToolDiameter(), dpi);\n    applyProperty(out, prop);\n    boolean leftToRight = true;\n    Point offset = p.getRasterStart();\n    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n    {\n      for (int x = leftToRight ? 0 : p.getRasterWidth() - 1; \n        (leftToRight && x < p.getRasterWidth()) || (!leftToRight && x >= ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, new ContentValues(), \"ID_GROUP = \" + deleteId, \"ID_GROUP = \" + newId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, new ContentValues(), \"ID_GROUP = \" + deleteId, \"ID_GROUP = \" + newId, null);\n                }\n\t\t\t\t\n\t\t\t\ttoastString = act.getString(R.string.editgroups_c5);\n\t\t\t\tToast.makeText(act, toastString, Toast.LENGTH_SHORT).show();\n\t\t\t\t\n\t\t\t\tdb.close();\n\t\t\t\tact.finish();\n\t\t\t}\n\t\t\telse {\n\t\t\ttoastString = act.getString(R.string.editgroups_c6);\n\t\t\t\tToast.makeText(act, toastString, Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\t}\n}\n", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n                m_ptr = IntPtr.Zero;\n            }\n        }\n        #endregion\n    }\n}\n", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "\n# LOGIN_REDIRECT_URL = '/'\n# LOGIN_REDIRECT_URL = '/accounts/login/'\n# LOGIN_REDIRECT_URL = '/accounts/login/'\n# LOGIN_REDIRECT_URL = '/accounts/", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tif (numberToCancel > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ps = queue[0];\n\t\t\t\t\tps.Done = true;\n\t\t\t\t\tps", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       infoText += \" file\" if numberOfFiles==1 else \"files\"\n        infoText += \"<br>\"\n        infoText +=  str(numberOfHiddenFiles) \n        infoText += \" hidden \" \n        infoText += \"file\" if numberOfHiddenFiles==1", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = code.replace('%', '%%%')\n        # replace all variables by their values\n        for x in self.vars:\n            code = code.replace(x, self.vars[x])\n        # write the file\n        self.outputs[0].write", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n    def __del__(self):\n        rospy.loginfo(\"Destroying PlanningServer ...\")\n        self._planningSolverClient.cancel_goal()\n        self._knowledgeParserClient.cancel_goal()\n        self._planningExecutorClient.cancel_goal()\n        self._as.cancel_goal()\n        self._as.shutdown()\n        rospy.loginfo(\"PlanningServer destroyed!\")\n\nif __name__ == \"__main__\":\n    rospy.init_node(\"planning_server\")\n    server = PlanningServer()\n    rospy.spin()\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent - 2 ]\n\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent - 1 ]\n\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + reactorExtent + 1 ]\n\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + reactorExtent + 2 ]\n\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent + 3 ]\n\t\t\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent + 4 ]\n\t\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + reactorExtent + 5 ]\n\t\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + reactorExtent + 6 ]\n\t\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent + 7 ]\n\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + reactorExtent + 8 ]\n\t\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent + 9 ]\n\t\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + reactorExtent + 10 ]\n\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent + 11 ]\n\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + reactorExtent + 12 ]\n\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent + 13 ]\n\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + reactorExtent + 14 ]\n\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent + 15 ]\n\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + reactorExtent + 16 ]\n\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent + 17 ]\n\t\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + reactorExtent + 18 ]\n\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent + 19 ]\n\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + reactorExtent + 20 ]\n\t\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent + 21 ]\n\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + reactorExtent + 22 ]\n\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent + 23 ]\n\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + reactorExtent + 24 ]\n\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx + reactorExtent + 25 ]", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            default:\n                columnTypes.add(typeManager.next(type));\n                break;\n        }\n    }\n    @Override\n    public void onEvent(int code, CharSequence tag, int position) throws JsonException {\n        switch (code) {\n            case JsonLexer.EVT_ARRAY_END:\n                if (state != S_NEED_ARRAY) {\n                    throw JsonException.$(position, \"Unexpected array\");\n                }\n                state = S_NEED_OBJECT;\n                break;\n            case JsonLexer.EVT_OBJ_END:\n                if (state != S_NEED_OBJECT) {\n                    throw JsonException.$(position, \"Unexpected object\");\n                }\n                state = S_NEED_PROPERTY;\n                break;\n            case JsonLexer.EVT_NAME:\n                this.propertyIndex = propertyNameMap.get(tag);\n                if (this.propertyIndex == -1) {\n                    throw JsonException.$(position, \"Unknown property\");\n                }\n                break;\n            case JsonLexer.EVT_VALUE:\n                switch (propertyIndex) {\n                    case P_NAME:\n                        name = copy(tag);\n                        break;\n                    case P_TYPE:\n                        type = ColumnType.tagOf(tag);\n                        if (type == -1) {\n                            throw JsonException.$(position, \"Invalid type\");\n                        }\n                        break;\n                    case P_PATTERN:\n                        pattern = copy(tag);\n                        break;\n                    case P_LOCALE:\n                        locale = copy(tag);\n                        localePosition = position;\n                        break;\n                    case P_UTF8:\n                        utf8 = SqlKeywords.isTrueKeyword(tag);\n                        break;\n                    case P_INDEX:\n                        index = SqlKeywords.isTrueKeyword(tag);\n                        break;\n                    default:\n                        throw JsonException.$(position, \"Unknown property\");\n                }\n                break;\n            case JsonLexer.EVT_OBJ_END:\n                state = S_NEED_OBJECT;\n                createImportedType(position);\n                break;\n            case JsonLexer.EVT_ARRAY_VALUE:\n                throw JsonException.$(position, \"Must be an object\");\n            default:\n                break;\n        }\n    }\n    @Override\n    public void onEvent(int code, CharSequence tag, int position) throws JsonException {\n        switch (code) {\n            case JsonLexer.EVT_ARRAY_START:\n                if (state != S_NEED_ARRAY) {\n                    throw JsonException.$(position, \"Unexpected array\");\n                }\n                state = S_NEED_OBJECT;\n                break;\n            case JsonLexer.EVT_OBJ_START:\n                if (state != S_NEED_OBJECT) {\n                    throw JsonException.$(position, \"Unexpected object\");\n                }\n                state = S_NEED_PROPERTY;\n                break;\n            case JsonLexer.EVT_NAME:\n                this.propertyIndex = propertyNameMap.get(tag);\n                if (this.propertyIndex == -1) {\n                    throw JsonException.$(position, \"Unknown property\");\n                }\n                break;\n            case JsonLexer.EVT_VALUE:\n                switch (propertyIndex) {\n                    case P_NAME:\n                        name = copy(tag);\n                        break;\n                    case P_TYPE:\n                        type = ColumnType.tagOf(tag);\n                        if (type == -1) {\n                            throw JsonException.$(position, \"Invalid type\");\n                        }\n                        break;\n                    case P_PATTERN:\n                        pattern = copy(tag);\n                        break;\n                    case P_LOCALE:\n                        locale = copy(tag);\n                        localePosition = position;\n                        break;\n                    case P_UTF8:\n                        utf8 = SqlKeywords.isTrueKeyword(tag);\n                        break;\n                    case P_INDEX:\n                        index = SqlKeywords.isTrueKeyword(tag);\n                        break;\n                    default:\n                        throw JsonException.$(position, \"Unknown property\");\n                }\n                break;\n            case JsonLexer.EVT_OBJ_END:\n                state = S_NEED_OBJECT;\n                createImportedType(position);\n                break;\n            case JsonLexer.EVT_ARRAY_VALUE:\n                throw JsonException.$(position, \"Must be an object\");\n            default:\n                break;\n        }\n    }\n    @Override\n    public void onEvent(int code, CharSequence tag, int position) throws JsonException {\n        switch (code) {\n            case JsonLexer.EVT_ARRAY_START:\n                if (state != S_NEED_ARRAY) {\n                    throw JsonException.$(position, \"Unexpected array\");\n                }\n                state = S_NEED_OBJECT;\n                break;\n            case JsonLexer.EVT_OBJ_START:\n                if (state != S_NEED_OBJECT) {\n                    throw JsonException.$(position, \"Unexpected object\");\n                }\n                state = S_NEED_PROPERTY;\n                break;\n            case JsonLexer.EVT_NAME:\n                this.propertyIndex = propertyNameMap.get(tag);\n                if (this.propertyIndex == -1) {\n                    throw JsonException.$(position, \"Unknown property\");\n                }\n                break;\n            case JsonLexer.EVT_VALUE:\n                switch (propertyIndex) {\n                    case P_NAME:\n                        name = copy(tag);\n                        break;\n                ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n\t\tprotected override bool ReceberAutoIncremento(QueryStoredProcedure qs, ORC_ConteudoItem entity)\n\t\t{\nNext line of code:\n\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n\t\tprotected override bool ReceberAutoIncremento(QueryInsertStoredProcedure qs, ORC_ConteudoItem entity)\n\t\t{\nNext line of code:\n\t\t\tParam = qs.NewParameter();\n\t\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n\t\tprotected override bool ReceberAutoIncremento(QueryUpdateStoredProcedure qs, ORC_ConteudoItem entity)\n\t\t{\nNext line of code:\n\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n\t\tprotected override bool ReceberAutoIncremento(QueryDeleteStoredProcedure qs, ORC_ConteudoItem entity)\n\t\t{\nNext line of code:\n\t\t\tParam = qs.NewParameter();\n\t\t\t\tParam.DbType = DbType.Int32;\n\t\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\t\tParam.Size = 4;\n\t\t\t\tParam.Value = entity.obj_id;\n\t\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n\t\tprotected override bool ReceberAutoIncremento(QuerySelectStoredProcedure qs, ORC_ConteudoItem entity)\n\t\t{\nNext line of code:\n\t\t\tParam = qs.NewParameter();\n\t\t\t\tParam.DbType = DbType.Int32;\n\t\t\t\tParam.ParameterName = \"@ctd_id\";\n\t\t\t\tParam.Size = 4;\n\t\t\t\tParam.Value = entity.ctd_id;\n\t\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n\t\tprotected override bool ReceberAutoIncremento(QueryStoredProcedure qs, ORC_ConteudoItem entity)\n\t\t{\nNext line of code:\n\t\t\tParam = qs.NewParameter();\n\t\t\t\tParam.DbType = DbType.Int32;\n\t\t\t\tParam.ParameterName = \"@ctd_id\";\n\t\t\t\tParam.Size = 4;\n\t\t\t\tParam.Value = entity.ctd_id;\n\t\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n\t\tprotected override bool ReceberAutoIncremento(QueryInsertStoredProcedure qs, ORC_ConteudoItem entity)\n\t\t{\nNext line of code:\n\t\t\tParam = qs.NewParameter();\n\t\t\t\tParam.DbType = DbType.Int32;\n\t\t\t\tParam.ParameterName = \"@ctd_id\";\n\t\t\t\tParam.Size = 4;\n\t\t\t\tParam.Value = entity.ctd_id;\n\t\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n\t\tprotected override bool ReceberAutoIncremento(QueryUpdateStoredProcedure qs, ORC_ConteudoItem entity)\n\t\t{\nNext line of code:\n\t\t\tParam = qs.NewParameter();\n\t\t\t\tParam.DbType = DbType.Int32;\n\t\t\t\tParam.ParameterName = \"@ctd_id\";\n\t\t\t\tParam.Size = 4;\n\t\t\t\tParam.Value = entity.ctd_id;\n\t\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n\t\tprotected override bool ReceberAutoIncremento(QueryDelete", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\tthrow new NotImplementedException();\n\t\t}\n\t\t\tpublic SqlType[] SqlTypes\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic System.Type ReturnedType\n\t\t{\n\t", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.cli_load_config([\"ntp authentication-keyid %s\" % self.key_id])\n    def config_ntp_auth_enable_by_cli(self):\n        \"\"\"Config ntp authentication enable bye the way of CLI\"\"\"\nNext", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.assertEqual(self.store.get_item(component.location).edited_by, editing_user)\n        # Verify that the component was last edited by the editing_user\n        check_node(component.location, editing_user, after_create, editing_", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        addToCharBuff(ch, start, length);\n        updateWithCharBuf();\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {\n    }\n    public void processingInstruction(String target, String data) throws SAXException {\n        digest.update((byte) ((PROCESSING_INSTRUCTION_CODE >> 24) & 0xff));\n        digest.update((byte) ((PROCESSING_INSTRUCTION_CODE >> 16) & 0xff));\n        digest.update((byte) ((PROCESSING_INSTRUCTION_CODE >> 8) & 0xff));\nNext line of code:\n        digest.update((byte) (PROCESSING_INSTRUCTION_CODE & 0xff));\n        addToCharBuff(target);\n        addToCharBuff(':');\n        addToCharBuff(data);\n        updateWithCharBuf();\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n    }\n    public void skippedEntity(String name) throws SAXException {\n    }\n    public void ignorableWhitespace(String data) throws SAXException {\n    }\n    public void startCDATA() throws SAXException {\n    }\n    public void endCDATA() throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startDTD(String name, String publicId, String systemId) throws SAXException {\n    }\n    public void endDTD() throws SAXException {\n    }\n    public void startEntityReference(String name) throws SAXException {\n    }\n    public void endEntityReference(String name) throws SAXException {\n    }\n    public void startNotation(String name) throws SAXException {\n    }\n    public void endNotation(String name) throws SAXException {\n    }\n    public void startNotationDecl(String name, String publicId, String systemId) throws SAXException {\n    }\n    public void endNotationDecl(String name) throws SAXException {\n    }\n    public void startEntityDecl(String name, String publicId, String systemId) throws SAXException {\n    }\n    public void endEntityDecl(String name) throws SAXException {\n    }\n    public void startDocumentType(String name, String publicId, String systemId) throws SAXException {\n    }\n    public void endDocumentType(String name) throws SAXException {\n    }\n    public void startDocument(String name, String publicId, String systemId) throws SAXException {\n    }\n    public void endDocument() throws SAXException {\n    }\n    public void startDocumentFragment(String name, String publicId, String systemId) throws SAXException {\n    }\n    public void endDocumentFragment() throws SAXException {\n    }\n    public void startDocumentTypeDecl(String name, String publicId, String systemId) throws SAXException {\n    }\n    public void endDocumentTypeDecl(String name) throws SAXException {\n    }\n    public void startEntityDecl(String name, String publicId, String systemId) throws SAXException {\n    }\n    public void endEntityDecl(String name) throws SAXException {\n    }\n    public void startNotationDecl(String name, String publicId, String systemId) throws SAXException {\n    }\n    public void endNotationDecl(String name) throws SAXException {\n    }\n    public void startNotation(String name, String publicId, String systemId) throws SAXException {\n    }\n    public void endNotation(String name) throws SAXException {\n    }\n    public void startNotation(String name) throws SAXException {\n    }\n    public void endNotation(String name) throws SAXException {\n    }\n    public void startEntity(String name, String publicId, String systemId) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException {\n    }\n    public void endEntity(String name) throws SAXException {\n    }\n    public void startEntity(String name) throws SAXException", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mkcomparison(dict):\nNext line of code:\n    return aetypes.Comparison(dict)\ndef mklogical(dict):\nNext line of code:\n    return aetypes.Logical(dict)\ndef mktype(dict):\nNext line of code:\n    return aetypes.Type(dict)\ndef mkobject(dict):\nNext line of code:\n    return aetypes.Object(dict)\ndef mkobjectfrommodule(dict, module):\nNext line of code:\n    return aetypes.ObjectFromModule(dict, module)\ndef mkobjectfrommodule(dict, module):\nNext line of code:\n    return aetypes.ObjectFromModule(dict, module)\ndef mkint(dict):\nNext line of code:\n    return aetypes.Integer(dict)\ndef mkfloat(dict):\nNext line of code:\n    return aetypes.Float(dict)\ndef mkstring(dict):\nNext line of code:\n    return aetypes.String(dict)\ndef mkbool(dict):\nNext line of code:\n    return aetypes.Boolean(dict)\ndef mknull(dict):\nNext line of code:\n    return aetypes.Null(dict)\ndef mkunknown(dict):\nNext line of code:\n    return aetypes.Unknown(dict)\ndef mkkeyword(dict):\nNext line of code:\n    return aetypes.Keyword(dict)\ndef mkrange(dict):\nNext line of code:\n    return aetypes.Range(dict)\ndef mkcomparison(dict):\nNext line of code:\n    return aetypes.Comparison(dict)\ndef mklogical(dict):\nNext line of code:\n    return aetypes.Logical(dict)\ndef mktype(dict):\nNext line of code:\n    return aetypes.Type(dict)\ndef mkobject(dict):\nNext line of code:\n    return aetypes.Object(dict)\ndef mkobjectfrommodule(dict, module):\nNext line of code:\n    return aetypes.ObjectFromModule(dict, module)\ndef mkobjectfrommodule(dict, module):\nNext line of code:\n    return aetypes.ObjectFromModule(dict, module)\ndef mkint(dict):\nNext line of code:\n    return aetypes.Integer(dict)\ndef mkfloat(dict):\nNext line of code:\n    return aetypes.Float(dict)\ndef mkstring(dict):\nNext line of code:\n    return aetypes.String(dict)\ndef mkbool(dict):\nNext line of code:\n    return aetypes.Boolean(dict)\ndef mknull(dict):\nNext line of code:\n    return aetypes.Null(dict)\ndef mkunknown(dict):\nNext line of code:\n    return aetypes.Unknown(dict)\ndef mkkeyword(dict):\nNext line of code:\n    return aetypes.Keyword(dict)\ndef mkrange(dict):\nNext line of code:\n    return aetypes.Range(dict)\ndef mkcomparison(dict):\nNext line of code:\n    return aetypes.Comparison(dict)\ndef mklogical(dict):\nNext line of code:\n    return aetypes.Logical(dict)\ndef mk", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = null;\n            if (api == null)\n            {\n                throw new ArgumentNullException(\"api\");\n            }\n            if (controllerName == null)\n            {\n                throw new ArgumentNullException(\"controllerName\");\n            }\n            if (actionName == null)\n            {\n                throw new ArgumentNullException(\"actionName\");\n            }\n            if (parameterNames == null)\n            {\n                throw new ArgumentNullException(\"parameterNames\");\n            }\n            if (formatters == null)\n            {\n                throw new ArgumentNullException(\"formatters\");\n            }\n            if (SampleObjects.Count == 0)\n            {\n                throw new InvalidOperationException(\"No sample objects are available.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpResponseMessage)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpResponseMessage.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpRequestMessage)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpRequestMessage.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(object)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for object.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContent)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContent.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentBase)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentBase.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpResponseMessageContent)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpResponseMessageContent.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeaders)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeaders.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersBase)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersBase.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollection)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollection.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollectionBase)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollectionBase.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollection)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollection.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollectionBase)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollectionBase.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeaders)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeaders.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersBase)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersBase.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollection)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollection.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollectionBase)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollectionBase.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollection)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollection.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollectionBase)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollectionBase.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollectionBase)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollectionBase.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollection)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollection.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollectionBase)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollectionBase.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollectionBase)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollectionBase.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollection)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollection.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollectionBase)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollectionBase.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollectionBase)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollectionBase.\");\n            }\n            if (SampleObjects.ContainsKey(typeof(HttpContentHeadersCollectionBase)))\n            {\n                throw new InvalidOperationException(\"Sample objects are not allowed for HttpContentHeadersCollectionBase.\");", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Delete:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.BackSpace:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Return:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Tab:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Escape:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Up:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Down:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Delete:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.BackSpace:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Return:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Tab:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Escape:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Up:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Down:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Delete:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.BackSpace:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Return:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Tab:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysyms.Escape:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        elif event.keyval == gtk.keysym", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n}", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           f.readline()\n        except IOError:\n            f.close()\n            f = None\n    if f is None:\n        module.fail_json(msg=\"Unable to open %s\" % path)\n    else:\n        f.close()\n    if state == \"present\":\n        if create:\n            changed, msg = present(path, username, password, crypt_scheme, create, check_mode)\n        else:\n            changed, msg = absent(path, username, check_mode)\n    elif state == \"absent\":\n        if create:\n            changed, msg = absent(path, username, check_mode)\n        else:\n            changed, msg = present(path, username, password, crypt_scheme, create, check_mode)\n    else:\n        module.fail_json(msg=\"Invalid state: %s\" % state)\n    if changed:\n        changed, msg = check_file_attrs(module, changed, msg)\n    module.exit_json(changed=changed, msg=msg)\n\nif __name__ == '__main__':\n    main()\n", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       spm.addPrincipal( directedAclKeys.getPrincipal() );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody DirectedAclKeys directedAclKeys ) {\nNext line of code:\n        spm.removePrincipal( directedAclKeys.getPrincipal() );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody DirectedAclKeys directedAclKeys ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2 ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2, @RequestBody DirectedAclKeys directedAclKeys ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2, @RequestBody DirectedAclKeys directedAclKeys ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2, @RequestBody Principal principal3 ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2, @RequestBody Principal principal3, @RequestBody DirectedAclKeys directedAclKeys ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2, @RequestBody Principal principal3, @RequestBody Principal principal4 ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2, @RequestBody Principal principal3, @RequestBody Principal principal4, @RequestBody DirectedAclKeys directedAclKeys ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2, @RequestBody Principal principal3, @RequestBody Principal principal4, @RequestBody Principal principal5 ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2, @RequestBody Principal principal3, @RequestBody Principal principal4, @RequestBody Principal principal5, @RequestBody DirectedAclKeys directedAclKeys ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2, @RequestBody Principal principal3, @RequestBody Principal principal4, @RequestBody Principal principal5, @RequestBody Principal principal6 ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2, @RequestBody Principal principal3, @RequestBody Principal principal4, @RequestBody Principal principal5, @RequestBody Principal principal6, @RequestBody DirectedAclKeys directedAclKeys ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2, @RequestBody Principal principal3, @RequestBody Principal principal4, @RequestBody Principal principal5, @RequestBody Principal principal6, @RequestBody Principal principal7 ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2, @RequestBody Principal principal3, @RequestBody Principal principal4, @RequestBody Principal principal5, @RequestBody Principal principal6, @RequestBody Principal principal7, @RequestBody DirectedAclKeys directedAclKeys ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = DELETE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody Principal principal, @RequestBody Principal principal2, @RequestBody Principal principal3, @RequestBody Principal principal4, @RequestBody Principal principal5, @RequestBody Principal principal6, @RequestBody Principal principal7, @RequestBody Principal principal8 ) {\n        spm.removePrincipal( principal );\n        return null;\n    }\n    @Timed\n    @", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element.\n        This verifies the tag of an element. If the tag is not found then this\n        will fail the test.\n        Arguments:\n        element Element object.\n        Returns:\n        True if the tag is found. False otherwise.\n        \"\"\"\n        if element.tag not in self.expected_data:\n            msg = \"Element tag '{0}' not found.\"\n            self.fail_test(msg.format(element.tag))\n            return False\n        return True\n    def verify_attributes(self, element):\n        \"\"\"Verify the attributes of an element.\n        This verifies the attributes of an element. If the attributes\n        are not found then this will fail the test.\n        Arguments:\n        element Element object.\n        Returns:\n        True if the attributes are found. False otherwise.\n        \"\"\"\n        for attrib in self.expected_data[element.tag]:\n            if attrib not in element.attrib:\n                msg = \"Element '{0}' does not have attribute '{1}'.\"\n                self.fail_test(msg.format(element.tag, attrib))\n                return False\n        return True\n    def verify_text(self, element):\n        \"\"\"Verify the text of an element.\n        This verifies the text of an element. If the text is not found then\n        this will fail the test.\n        Arguments:\n        element Element object.\n        Returns:\n        True if the text is found. False otherwise.\n        \"\"\"\n        if element.text is None:\n            msg = \"Element '{0}' does not have text.\"\n            self.fail_test(msg.format(element.tag))\n            return False\n        return True\n    def verify_extra_text(self, element):\n        \"\"\"Verify the extra text of an element.\n        This verifies the extra text of an element. If the extra text is not\n        found then this will fail the test.\n        Arguments:\n        element Element object.\n        Returns:\n        True if the extra text is found. False otherwise.\n        \"\"\"\n        if element.text is None:\n            msg = \"Element '{0}' does not have extra text.\"\n            self.fail_test(msg.format(element.tag))\n            return False\n        return True\n    def fail_test(self, msg):\n        \"\"\"Fail the test.\n        This will fail the test and stop the reactor.\n        Arguments:\n        msg The message to display when the test fails.\n        \"\"\"\n        self.test_object.fail_test(msg)\n        self.test_object.stop_reactor()\n    def set_pcap_defaults(self, module_config):\n        \"\"\"Set default PcapListener config that isn't explicitly overridden.\n        Arguments:\n        module_config Dict of module configuration\n        \"\"\"\n        pcap_defaults = {'device': 'lo', 'snaplen': 2000,\n                         'bpf-filter': 'udp port 5061', 'debug-packets': False,\n                         'buffer-size': 4194304, 'register-observer': True}\n        for name, value in pcap_defaults.items():\n            module_config[name] = module_config.get(name, value)\n\nclass Validator(object):\n    \"\"\"Validate a PIDF/XPIDF body against a set of expected data.\n    This is a subclass of Validator that is used to validate a PIDF/XPIDF body\n    against a set of expected data.\n    \"\"\"\n    def __init__(self, test_object, packet, expected_data):\n        \"\"\"Constructor\n        Arguments:\n        test_object The test object for the running test.\n        packet A packet containing a SIP NOTIFY with a pidf or xpidf body.\n        expected_data A dict of expected data.\n        \"\"\"\n        super(Validator, self).__init__()\n        self.test_object = test_object\n        self.packet = packet\n        self.expected_data = expected_data\n    def verify_body(self):\n        \"\"\"Verify a PIDF/XPIDF body.\n        This uses XML ElementTree to parse the PIDF/XPIDF body. It verifies\n        that the XML is not malformed and verifies the elements match what is\n        expected. This will fail the test and stop the reactor if the body\n        type is not recognized or if the body could not be parsed.\n        Returns:\n        True if body type is supported, body is successfully parsed, and\n        body matches what is expected. False otherwise.\n        \"\"\"\n        if self.packet.body.packet_type not in self.body_types:\n            msg = \"Unrecognized body type of '{0}'\"\n            self.fail_test(msg.format(self.packet.body.packet_type))\n            return False\n        # Attempt to parse the body\n        try:\n            root = ET.fromstring(self.packet.body.xml)\n        except Exception as ex:\n            self.fail_test(\"Exception when parsing body XML: %s\" % ex)\n            return False\n        # Verify top-level elements and their children\n        for element in root.findall('.'):\n            if not self.verify_element(element):\n                return False\n        return True\n    def verify_element(self, element):\n        \"\"\"Verify the element matches what is expected.\n        This verifies the tag, attributes, text, and extra text of an element.\n        If child elements are found this will call back into itself to verify\n        them.\n        Arguments:\n        element Element object.\n        Returns:\n        True if the element matches what is expected. False otherwise.\n        \"\"\"\n        if not self.verify_tag(element):\n            return False\n        if not self.verify_attributes(element):\n            return False\n        if not self.verify_text(element):\n            return False\n        if not self.verify_extra_text(element):\n            return False\n        # Find child elements\n        for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element.\n        This verifies the tag of an element. If the tag is not found then\n        this will fail the test.\n        Arguments:\n        element Element object.\n        Returns:\n        True if the tag is found. False otherwise.\n        \"\"\"\n        if element.tag not in self.expected_data:\n            msg = \"Element tag '{0}' not found.\"\n            self.fail_test(msg.format(element.tag))\n            return False\n        return True\n    def verify_attributes(self, element):\n        \"\"\"Verify the attributes of an element.\n        This verifies the attributes of an element. If the attributes are\n        not found then this will fail the test.\n        Arguments:\n        element Element object.\n        Returns:\n        True if the attributes are found. False otherwise.\n        \"\"\"\n        for attrib in self.expected_data[element.tag]:\n            if attrib not in element.attrib:\n                msg = \"Element '{0}' does not have attribute '{1}'.\"\n                self.fail_test(msg.format(element.tag, attrib))\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   clone.specified = node.specified\nNext line of code:\n    clone.value = node.value\nNext line of code:\n    return clone\ndef _nssplit(name):\n    \"\"\"\n    Split a qualified name into namespace and local name.\n    \"\"\"\n", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocator, endOffset))\n\t\t\t\tdecodeKeyLocator\n\t\t\t  (TlvTypeCodes.KeyLocator, keyLocator, decoder);\n\t\t\telse", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the HUD\n        display.update(delta);\n        \n        //updates the map\n        updateMap(delta);\n        \n        //updates the minimap\n        display.updateMinimap(delta);\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //updates the player's weapons\n        for(int i = 0; i <", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).addPlayer( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .get", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error downloading file: %s\" % r.data.decode(\"utf-8\"))\n    if progress:\n        filename = get_filename(r.headers)\n        if filename:\n            log.info(\"Downloading %s\", filename)\n    with open(filename, \"wb\") as f:\n        f.write(r.data)\n\ndef get_url_raw_unlimited(socket_path, url):\n    \"\"\"Return the raw results of a GET request\n    :param socket_path: Path to the Unix socket to use for API communication\n    :type socket_path: str\n    :param url: URL to request\n    :type url: str\n    :returns: The raw response from the server\n    :rtype: str\n    \"\"\"\n    http = UnixHTTPConnectionPool(socket_path)\n    r = http.request(\"GET\", url)\n    return r.data.decode('utf-8')\ndef get_url_json_unlimited(socket_path, url):\n    \"\"\"Return the JSON results of a GET request\n    :param socket_path: Path to the Unix socket to use for API communication\n    :type socket_path: str\n    :param url: URL to request\n    :type url: str\n    :returns: The json response from the server\n    :rtype: dict\n    \"\"\"\n    http = UnixHTTPConnectionPool(socket_path)\n    r = http.request(\"GET\", url)\n    return json.loads(r.data.decode('utf-8'))\ndef get_url_json_unlimited_total(socket_path, url, total_fn=None):\n    \"\"\"Return the JSON results of a GET request\n    For URLs that use offset/limit arguments, this command will\n    fetch all results for the given request.\n    :param socket_path: Path to the Unix socket to use for API communication\n    :type socket_path: str\n    :param url: URL to request\n    :type url: str\n    :returns: The json response from the server\n    :rtype: dict\n    \"\"\"\n    def default_total_fn(data):\n        \"\"\"Return the total number of available results\"\"\"\n        return data[\"total\"]\n    http = UnixHTTPConnectionPool(socket_path)\n    # Start with limit=0 to just get the number of objects\n    total_url = append_query(url, \"limit=0\")\n    r_total = http.request(\"GET\", total_url)\n    json_total = json.loads(r_total.data.decode('utf-8'))\n    # Where to get the total from\n    if not total_fn:\n        total_fn = default_total_fn\n    # Add the \"total\" returned by limit=0 as the new limit\n    unlimited_url = append_query(url, \"limit=%d\" % total_fn(json_total))\n    r_unlimited = http.request(\"GET\", unlimited_url)\n    return json.loads(r_unlimited.data.decode('utf-8'))\ndef get_url_json_unlimited_total_raw(socket_path, url, total_fn=None):\n    \"\"\"Return the JSON results of a GET request\n    For URLs that use offset/limit arguments, this command will\n    fetch all results for the given request.\n    :param socket_path: Path to the Unix socket to use for API communication\n    :type socket_path: str\n    :param url: URL to request\n    :type url: str\n    :returns: The json response from the server\n    :rtype: dict\n    \"\"\"\n    def default_total_fn(data):\n        \"\"\"Return the total number of available results\"\"\"\n        return data[\"total\"]\n    http = UnixHTTPConnectionPool(socket_path)\n    # Start with limit=0 to just get the number of objects\n    total_url = append_query(url, \"limit=0\")\n    r_total = http.request(\"GET\", total_url)\n    json_total = json.loads(r_total.data.decode('utf-8'))\n    # Where to get the total from\n    if not total_fn:\n        total_fn = default_total_fn\n    # Add the \"total\" returned by limit=0 as the new limit\n    unlimited_url = append_query(url, \"limit=%d\" % total_fn(json_total))\n    r_unlimited = http.request(\"GET\", unlimited_url)\n    return json.loads(r_unlimited.data.decode('utf-8'))\ndef get_url_json_unlimited_total_raw_unlimited(socket_path, url, total_fn=None):\n    \"\"\"Return the JSON results of a GET request\n    For URLs that use offset/limit arguments, this command will\n    fetch all results for the given request.\n    :param socket_path: Path to the Unix socket to use for API communication\n    :type socket_path: str\n    :param url: URL to request\n    :type url: str\n    :returns: The json response from the server\n    :rtype: dict\n    \"\"\"\n    def default_total_fn(data):\n        \"\"\"Return the total number of available results\"\"\"\n        return data[\"total\"]\n    http = UnixHTTPConnectionPool(socket_path)\n    # Start with limit=0 to just get the number of objects\n    total_url = append_query(url, \"limit=0\")\n    r_total = http.request(\"GET\", total_url)\n    json_total = json.loads(r_total.data.decode('utf-8'))\n    # Where to get the total from\n    if not total_fn:\n        total_fn = default_total_fn\n    # Add the \"total\" returned by limit=0 as the new limit\n    unlimited_url = append_query(url, \"limit=%d\" % total_fn(json_total))\n    r_unlimited = http.request(\"GET\", unlimited_url)\n    return json.loads(r_unlimited.data.decode('utf-8'))\ndef get_url_json_unlimited_total_raw_unlimited_unlimited(socket_path, url, total_fn=None):\n    \"\"\"Return the JSON results of a GET request\n    For URLs that use offset/limit arguments, this command will\n    fetch all results for the given request.\n    :param socket_path: Path to the Unix socket to use for API communication\n    :type socket_path: str\n    :param url: URL to request\n    :type url: str\n    :returns: The json response from the server\n    :rtype: dict\n    \"\"\"\n    def default_total_fn(data):\n        \"\"\"Return the total number of available results\"\"\"\n        return data[\"total\"]\n    http = UnixHTTPConnectionPool(socket_path)\n    # Start with limit=0 to just get the number of objects\n    total_url = append_query(url, \"limit=0\")\n    r_total = http.request(\"GET\", total_url)\n    json_total = json.loads(r_total.data.decode('utf-8'))\n    # Where to get the total from\n    if not total_fn:\n        total_fn = default_total_fn\n    # Add the \"total\" returned by limit=0 as the new limit\n    unlimited_url = append_query(url, \"limit=%d\" % total_fn(json_total))\n    r_unlimited = http.request(\"GET\", unlimited_url)\n    return json.loads(r_unlimited.data.decode('utf-8'))\ndef get_url_json_unlimited_total_raw_unlimited_unlimited_unlimited", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = null;\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tfailureReason = ExceptionHandler.GetExceptionMessage(e);\n\t\t\t}\n\t\t}\n\t\t#region IMergeOrdersPage Members\n\t\tpublic void DryRunMergedOrderChanged()\n\t\t{\n\t\t\tDryRunForSelectedOrder();\n\t\t}\n\t\t#endregion\n\t}\n}", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\n            \"Reaction must have exactly one metabolite component.\"\n        )\n    return [coeff for met, coeff in reaction.metabolites.items()]\ndef _find_carbon_sources(model: \"Model\") -> List[str]:\n    \"\"\"Find the carbon sources in the model.\n    Parameters\n    ----------\n    model : cobra.Model\n        The model to operate on.\n    Returns\n    -------\n    list of str\n        The list of carbon sources in the model.\n    \"\"\"\n    carbon_sources = []\n    for rxn in model.reactions:\n        if rxn.id in model.metabolites:\n            carbon_sources.append(rxn.id)\n    return carbon_sources\ndef _find_carbon_sinks(model: \"Model\") -> List[str]:\n    \"\"\"Find the carbon sinks in the model.\n    Parameters\n    ----------\n    model : cobra.Model\n        The model to operate on.\n    Returns\n    -------\n    list of str\n        The list of carbon sinks in the model.\n    \"\"\"\n    carbon_sinks = []\n    for rxn in model.reactions:\n        if rxn.id in model.metabolites:\n            carbon_sinks.append(rxn.id)\n    return carbon_sinks\ndef _find_carbon_sources_and_sinks(model: \"Model\") -> List[str]:\n    \"\"\"Find the carbon sources and sinks in the model.\n    Parameters\n    ----------\n    model : cobra.Model\n        The model to operate on.\n    Returns\n    -------\n    list of str\n        The list of carbon sources and sinks in the model.\n    \"\"\"\n    carbon_sources = _find_carbon_sources(model)\n    carbon_sinks = _find_carbon_sinks(model)\n    return carbon_sources + carbon_sinks\ndef _reaction_coefficients(model: \"Model\") -> List[float]:\n    \"\"\"Return the stoichiometric coefficients of the model's reactions.\n    Parameters\n    ----------\n    model : cobra.Model\n        The model to operate on.\n    Returns\n    -------\n    list of float\n        The stoichiometric coefficients of the model's reactions.\n    \"\"\"\n    return [\n        rxn.stoichiometry.get(\"C\", 0)\n        for rxn in model.reactions\n        if rxn.stoichiometry.get(\"C\", 0) != 0\n    ]\ndef _reaction_weight(reaction: \"Reaction\") -> float:\n    \"\"\"Return the stoichiometric coefficient times the metabolite weight.\n    Parameters\n    ----------\n    reaction : cobra.Reaction\n        The reaction whose stoichiometric coefficient is desired.\n    Returns\n    -------\n    float\n        The stoichiometric coefficient times the metabolite weight.\n    \"\"\"\n    return reaction.stoichiometry.get(\"C\", 0) * reaction.metabolites.get(\"C\", 0)\ndef _total_components_flux(\n    flux: float, components: List[float], consumption: bool\n) -> float:\n    \"\"\"Compute the total flux of a reaction's components.\n    Parameters\n    ----------\n    flux : float\n        The flux of the reaction.\n    components : list of float\n        The stoichiometric coefficients of the reaction's metabolites.\n    consumption : bool\n        Whether the reaction consumes or produces the metabolite.\n    Returns\n    -------\n    float\n        The total flux of the reaction's components.\n    \"\"\"\n    if consumption:\n        return flux * sum(components)\n    else:\n        return flux * sum(components) / sum(components)\ndef _total_yield(\n    flux: float,\n    input_elements: List[float],\n    output_elements: List[float],\n    consumption: bool,\n) -> float:\n    \"\"\"Comput", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(\n            store__path__startswith=pootle_path,\n            submitted_by=user,\n        )\n    def get_for_path_and_user(self, pootle_path, user):\n        \"\"\"Returns units that fall below the `pootle_path` umbrella.\n        :param pootle_path: An internal pootle path.\n        :param user: The user who is accessing the units.\n        \"\"\"\nNext line of code:\n        return self.get_for_path(pootle_path, user)\n    def get_for_path_and_user_and_store(self, pootle_path, user, store):\n        \"\"\"Returns units that fall below the `pootle_path` umbrella.\n        :param pootle_path: An internal pootle path.\n        :param user: The user who is accessing the units.\n        :param store: The store that the units belong to.\n        \"\"\"\nNext line of code:\n        return self.get_for_path_and_user(pootle_path, user).filter(\n            store=store,\n        )\n    def get_for_path_and_user_and_store_and_type(self, pootle_path, user,\n                                                       store, type):\n        \"\"\"Returns units that fall below the `pootle_path` umbrella.\n        :param pootle_path: An internal pootle path.\n        :param user: The user who is accessing the units.\n        :param store: The store that the units belong to.\n        :param type: The type of the units.\n        \"\"\"\nNext line of code:\n        return self.get_for_path_and_user_and_store(pootle_path, user, store) \\\n            .filter(type=type)\n    def get_for_path_and_user_and_store_and_type_and_submitted_by(\n        self, pootle_path, user, store, type, submitted_by):\n        \"\"\"Returns units that fall below the `pootle_path` umbrella.\n        :param pootle_path: An internal pootle path.\n        :param user: The user who is accessing the units.\n        :param store: The store that the units belong to.\n        :param type: The type of the units.\n        :param submitted_by: The user who submitted the units.\n        \"\"\"\nNext line of code:\n        return self.get_for_path_and_user_and_store_and_type(\n            pootle_path, user, store, type\n        ).filter(submitted_by=submitted_by)\n    def get_for_path_and_user_and_store_and_type_and_submitted_by_and_commented_by(\n        self, pootle_path, user, store, type, submitted_by, commented_by):\n        \"\"\"Returns units that fall below the `pootle_path` umbrella.\n        :param pootle_path: An internal pootle path.\n        :param user: The user who is accessing the units.\n        :param store: The store that the units belong to.\n        :param type: The type of the units.\n        :param submitted_by: The user who submitted the units.\n        :param commented_by: The user who commented the units.\n        \"\"\"\nNext line of code:\n        return self.get_for_path_and_user_and_store_and_type_and_submitted_by(\n            pootle_path, user, store, type, submitted_by\n        ).filter(commented_by=commented_by)\n    def get_for_path_and_user_and_store_and_type_and_submitted_by_and_commented_by_and_reviewed_by(\n        self, pootle_path, user, store, type, submitted_by, commented_by, reviewed_by):\n        \"\"\"Returns units that fall below the `pootle_path` umbrella.\n        :param pootle_path: An internal pootle path.\n        :param user: The user who is accessing the units.\n        :param store: The store that the units belong to.\n        :param type: The type of the units.\n        :param submitted_by: The user who submitted the units.\n        :param commented_by: The user who commented the units.\n        :param reviewed_by: The user who reviewed the units.\n        \"\"\"\nNext line of code:\n        return self.get_for_path_and_user_and_store_and_type_and_submitted_by_and_commented_by(\n            pootle_path, user, store, type, submitted_by, commented_by\n        ).filter(reviewed_by=reviewed_by)\n    def get_for_path_and_user_and_store_and_type_and_submitted_by_and_commented_by_and_reviewed_by_and_rejected_by(\n        self, pootle_path, user, store, type, submitted_by, commented_by,\n        reviewed_by, rejected_by):\n        \"\"\"Returns units that fall below the `pootle_path` umbrella.\n        :param pootle_path: An internal pootle path.\n        :param user: The user who is accessing the units.\n        :param store: The store that the units belong to.\n        :param type: The type of the units.\n        :param submitted_by: The user who submitted the units.\n        :param commented_by: The user who commented the units.\n        :param reviewed_by: The user who reviewed the units.\n        :param rejected_by: The user who rejected the units.\n        \"\"\"\nNext line of code:\n        return self.get_for_path_and_user_and_store_and_type_and_submitted_by_and_commented_by_and_reviewed_by(\n            pootle_path, user, store, type, submitted_by, commented_by,\n            reviewed_by\n        ).filter(rejected_by=rejected_by)\n    def get_for_path_and_user_and_store_and_type_and_submitted_by_and_commented_by_and_reviewed_by_and_rejected_by_and_accepted_by(\n        self, pootle_path, user, store, type, submitted_by, commented_by,\n        reviewed_by, rejected_by, accepted_by):\n        \"\"\"Returns units that fall below the `pootle_path` umbrella.\n        :param pootle_path: An internal pootle path.\n        :param user: The user who is accessing the units.\n        :param store: The store that the units belong to.\n        :param type: The type of the units.\n        :param submitted_by: The user who submitted the units.\n        :param commented_by: The user who commented the units.\n        :param reviewed_by: The user who reviewed the units.\n        :param rejected_by: The user who rejected the units.\n        :param accepted_by: The user who accepted the units.\n        \"\"\"\nNext line of code:\n        return self.get_for_path_and_user_and_store_and_type_and_submitted_by_and_commented_by_and_reviewed_by_and_rejected_by(\n            pootle_path, user, store, type, submitted_by, commented_by,\n            reviewed_by, rejected_by\n        ).filter(accepted_by=accepted_by)\n    def get_for_path_and_user_and_store_and_type_and_submitted_by_and_commented_by_and_reviewed_by_and_rejected_by_and_accepted_by_", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField(max_length=200)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TrainingCategory',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField(max_length=200)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TrainingType',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField(max_length=200)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('firstname', models.CharField(max_length=100)),\n                ('lastname', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('password', models.CharField(max_length=100)),\n                ('status', models.PositiveSmallIntegerField(default=0)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='UserNotification',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               else:\n                    self.logger.debug(\"Got ARP request for unknown IP {}\".format(dstip))\n                    self.interface_to_port_map[dstip] = portnum\n                self.pox_switch.send(OpenflowMessage(FlowIdent(srcip=srcip, dstip=dstip, ipproto=arp.protosrc.proto), ofmsg=poxpkt))\n            elif poxpkt.payload.opcode == pktlib.arp.REPLY:\n                self.logger.debug(\"Got ARP reply: {}\".format(str(poxpkt.payload)))\n                arp = poxpkt.payload\n                dstip = str(IPv4Address(arp.protodst))\n                srcip = str(IPv4Address(arp.protosrc))\n                if dstip in self.interface_to_port_map:\n                    portnum = self.interface_to_port_map[dstip]\n                    self.pox_switch.send(OpenflowMessage(FlowIdent(srcip=srcip, dstip=dstip, ipproto=arp.protosrc.proto), ofmsg=poxpkt))\n                else:\n                    self.logger.debug(\"Got ARP reply for unknown IP {}\".format(dstip))\n                    self.interface_to_port_map[dstip] = portnum\n        elif poxpkt.type == poxpkt.ECHO_REQUEST:\n            self.logger.debug(\"Got ECHO request: {}\".format(str(poxpkt.payload)))\n            self.pox_switch.send(OpenflowMessage(FlowIdent(), ofmsg=poxpkt))\n        elif poxpkt.type == poxpkt.ECHO_REPLY:\n            self.logger.debug(\"Got ECHO reply: {}\".format(str(poxpkt.payload)))\n        else:\n            self.logger.debug(\"Got packet {}\".format(str(poxpkt)))\n            self.pox_switch.send(OpenflowMessage(FlowIdent(), ofmsg=poxpkt))\n    def start(self):\n        self.started = True\n        self.pox_switch.start()\n        self.pox_switch.set_connection(self)\n        self.pox_switch.set_output_packet_callback(self.send_packet)\n        self.pox_switch.set_message_handler(self.process_packet)\n        self.pox_switch.set_connection(self)\n        self.pox_switch.set_output_packet_callback(self.send_packet)\n        self.pox_switch.set_message_handler(self.process_packet)\n        self.pox_switch.set_connection(self)\n        self.pox_switch.set_output_packet_callback(self.send_packet)\n        self.pox_switch.set_message_handler(self.process_packet)\n        self.pox_switch.set_connection(self)\n        self.pox_switch.set_output_packet_callback(self.send_packet)\n        self.pox_switch.set_message_handler(self.process_packet)\n        self.pox_switch.set_connection(self)\n        self.pox_switch.set_output_packet_callback(self.send_packet)\n        self.pox_switch.set_message_handler(self.process_packet)\n        self.pox_switch.set_connection(self)\n        self.pox_switch.set_output_packet_callback(self.send_packet)\n        self.pox_switch.set_message_handler(self.process_packet)\n        self.pox_switch.set_connection(self)\n        self.pox_switch.set_output_packet_callback(self.send_packet)\n        self.pox_switch.set_message_handler(self.process_packet)\n        self.pox_switch.set_connection(self)\n        self.pox_switch.set_output_packet_callback(self.send_packet)\n        self.pox_switch.set_message_handler(self.process_packet)\n        self.pox_switch.set_connection(self)\n        self.pox_switch.set_output_packet_callback(self.send_packet)\n        self.pox_switch.set_message_handler(self.process_packet)\n        self.pox_switch.set_connection(self)\n        self.pox_switch.set_output_packet_callback(self.send_packet)\n        self.pox_switch.set_message_handler(self.process_packet)\n        self.pox_switch.set_connection(self)\n        self.pox_switch.set_output_packet_callback(self.send_packet)\n        self.pox_switch.set_message_handler(self.process_packet)\n        self.pox_switch.set_connection(self)\n        self.pox_switch.set_output_packet_callback(self.send_packet)\n        self.pox_switch.set_message_handler(self.process_packet)\n        self.pox_switch.set_connection(self)\n        self.", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    if (m_RecentItems.size() >= m_MaxCount)\n      removeRecentItem(m_RecentItems.size() - 1);\n    m_RecentItems.add(item);\n    writeProps();\n    updateMenu();\n    notifyRecentItemListenersOfAdd(item);\n  }\n  /**\n   * Removes the item from the internal list.\n   *\n   * @param index\tthe index of the item to remove\n   */\n  public synchronized void removeRecentItem(int index) {\nNext line of code:\n    if (m_IgnoreChanges)\n      return;\n    m_RecentItems.remove(index);\n    writeProps();\n    updateMenu();\n    notifyRecentItemListenersOfRemove(index);\n  }\n  /**\n   * Removes the item from the internal list.\n   *\n   * @param item\tthe item to remove\n   */\n  public synchronized void removeRecentItem(T item) {\nNext line of code:\n    if (m_IgnoreChanges)\n      return;\n    int\t\ti;\n    for (i = 0; i < m_RecentItems.size(); i++)\n      if (m_RecentItems.get(i).equals(item))\n\tbreak;\n    if (i < m_RecentItems.size())\n      m_RecentItems.remove(i);\n    writeProps();\n    updateMenu();\n    notifyRecentItemListenersOfRemove(i);\n  }\n  /**\n   * Removes all recent items.\n   */\n  public synchronized void removeAll() {\nNext line of code:\n    if (m_IgnoreChanges)\n      return;\n    m_RecentItems.clear();\n    writeProps();\n    updateMenu();\n    notifyRecentItemListenersOfRemove(m_RecentItems.size());\n  }\n  /**\n   * Notifies the listeners of an addition.\n   *\n   * @param item\tthe item that was added\n   */\n  protected void notifyRecentItemListenersOfAdd(T item) {\n    for (Iterator<RecentItemListener<M,T>> i = m_Listeners.iterator(); i.hasNext();)\n      i.next().recentItemAdded(this, item);\n  }\n  /**\n   * Notifies the listeners of a removal.\n   *\n   * @param index\tthe index of the item that was removed\n   */\n  protected void notifyRecentItemListenersOfRemove(int index) {\n    for (Iterator<RecentItemListener<M,T>> i = m_Listeners.iterator(); i.hasNext();)\n      i", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Followers.Any(x => x.Defender == target) || src.Followers.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src))\n                return true;\n            // Checked aggressed/aggressors\n            if (src.Aggressed.Any(x => x.Defender == target) || src.Aggressors.Any(x => x.Attacker == target))\n                return true;\n           ", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompSets() {\n\t\tforeach (Symbol sym in Symbol.nonterminals) {\n\t\tsym.", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff)  >>  0));\n\t\t\tWriteReport(buff);\n\t\t\tif(mReadDone.WaitOne(1000, false))\n\t\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\tthis.direction = direction;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tMskJointVo v1 = (MskJointVo)o1;\n\t\t\tMskJointVo v2 = (MskJointVo)o2;\n\t\t\tint result = 0;\n\t\t\tif (v1 == null && v2 == null)\n\t\t\t\treturn 0;\n\t\t\tif (v1 == null)\n\t\t\t\treturn -1;\n\t\t\tif (v2 == null)\n\t\t\t\treturn 1;\n\t\t\tif (v1.getID_MskJoints() == null)\n\t\t\t\treturn -1;\n\t\t\tif (v2.getID_MskJoints() == null)\n\t\t\t\treturn 1;\n\t\t\tint v1ID = v1.getID_MskJoints().getID();\n\t\t\tint v2ID = v2.getID_MskJoints().getID();\n\t\t\tif (v1ID < v2ID)\n\t\t\t\treturn -1 * direction;\n\t\t\tif (v1ID > v2ID)\n\t\t\t\treturn 1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() == null)\n\t\t\t\treturn -1;\n\t\t\tif (v2.getID_MskJoints().getID() == null)\n\t\t\t\treturn 1;\n\t\t\tif (v1.getID_MskJoints().getID() < v2.getID_MskJoints().getID())\n\t\t\t\t\treturn -1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() > v2.getID_MskJoints().getID())\n\t\t\t\treturn 1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() == null)\n\t\t\t\treturn -1;\n\t\t\tif (v2.getID_MskJoints().getID() == null)\n\t\t\t\treturn 1;\n\t\t\tif (v1.getID_MskJoints().getID() < v2.getID_MskJoints().getID())\n\t\t\t\treturn -1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() > v2.getID_MskJoints().getID())\n\t\t\t\treturn 1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() == null)\n\t\t\t\treturn -1;\n\t\t\tif (v2.getID_MskJoints().getID() == null)\n\t\t\t\treturn 1;\n\t\t\tif (v1.getID_MskJoints().getID() < v2.getID_MskJoints().getID())\n\t\t\t\treturn -1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() > v2.getID_MskJoints().getID())\n\t\t\t\treturn 1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() == null)\n\t\t\t\treturn -1;\n\t\t\tif (v2.getID_MskJoints().getID() == null)\n\t\t\t\treturn 1;\n\t\t\tif (v1.getID_MskJoints().getID() < v2.getID_MskJoints().getID())\n\t\t\t\treturn -1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() > v2.getID_MskJoints().getID())\n\t\t\t\treturn 1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() == null)\n\t\t\t\treturn -1;\n\t\t\t\tif (v2.getID_MskJoints().getID() == null)\n\t\t\t\treturn 1;\n\t\t\tif (v1.getID_MskJoints().getID() < v2.getID_MskJoints().getID())\n\t\t\t\treturn -1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() > v2.getID_MskJoints().getID())\n\t\t\t\treturn 1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() == null)\n\t\t\t\treturn -1;\n\t\t\tif (v2.getID_MskJoints().getID() == null)\n\t\t\t\treturn 1;\n\t\t\tif (v1.getID_MskJoints().getID() < v2.getID_MskJoints().getID())\n\t\t\t\treturn -1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() > v2.getID_MskJoints().getID())\n\t\t\t\treturn 1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() == null)\n\t\t\t\treturn -1;\n\t\t\tif (v2.getID_MskJoints().getID() == null)\n\t\t\t\treturn 1;\n\t\t\tif (v1.getID_MskJoints().getID() < v2.getID_MskJoints().getID())\n\t\t\t\treturn -1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() > v2.getID_MskJoints().getID())\n\t\t\t\treturn 1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() == null)\n\t\t\t\treturn -1;\n\t\t\tif (v2.getID_MskJoints().getID() == null)\n\t\t\t\treturn 1;\n\t\t\tif (v1.getID_MskJoints().getID() < v2.getID_MskJoints().getID())\n\t\t\t\t\treturn -1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() > v2.getID_MskJoints().getID())\n\t\t\t\treturn 1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() == null)\n\t\t\t\t\treturn -1;\n\t\t\tif (v2.getID_MskJoints().getID() == null)\n\t\t\t\treturn 1;\n\t\t\tif (v1.getID_MskJoints().getID() < v2.getID_MskJoints().getID())\n\t\t\t\treturn -1 * direction;\n\t\t\tif (v1.getID_MskJoints().getID() > v2.getID_MskJoint", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\tDateTime now = DateTime.Now;\n\t\t\treturn now.ToString( \"yyyyMMddHHmmssfff\" );\n\t\t}\n\t}\n}\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueriesForItemWithCollectionsAndChildren()\n\t\t{\n\t\t\tusing (ISession session = OpenSession())\n\t\t\t{\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t\tusing (var cmd = session.Connection.CreateCommand())\n\t\t\t\t{\n\t\t\t\t\tcmd.CommandText = \"DELETE FROM Item\";\n\t\t\t\t\t\tcmd.ExecuteNonQuery();\n\t\t\t\t\t}\n\t\t\t}\n\t\t\tusing (ISession session = OpenSession())\n\t\t\t{\n\t\t\t\t//should bring from cache\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueriesForItemWithCollectionsAndChildrenAndChildren()\n\t\t{\n\t\t\tusing (ISession session = OpenSession())\n\t\t\t{\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t\tusing (var cmd = session.Connection.CreateCommand())\n\t\t\t\t{\n\t\t\t\t\tcmd.CommandText = \"DELETE FROM Item\";\n\t\t\t\t\tcmd.ExecuteNonQuery();\n\t\t\t\t}\n\t\t\t}\n\t\t\tusing (ISession session = OpenSession())\n\t\t\t{\n\t\t\t\t//should bring from cache\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueriesForItemWithCollectionsAndChildrenAndChildrenAndChildren()\n\t\t{\n\t\t\tusing (ISession session = OpenSession())\n\t\t\t{\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t\tusing (var cmd = session.Connection.CreateCommand())\n\t\t\t\t{\n\t\t\t\t\tcmd.CommandText = \"DELETE FROM Item\";\n\t\t\t\t\t\tcmd.ExecuteNonQuery();\n\t\t\t\t}\n\t\t\t}\n\t\t\tusing (ISession session = OpenSession())\n\t\t\t{\n\t\t\t\t//should bring from cache\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueriesForItemWithCollectionsAndChildrenAndChildrenAndChildren()\n\t\t{\n\t\t\tusing (ISession session = OpenSession())\n\t\t\t{\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t\tusing (var cmd = session.Connection.CreateCommand())\n\t\t\t\t{\n\t\t\t\t\t\tcmd.CommandText = \"DELETE FROM Item\";\n\t\t\t\t\tcmd.ExecuteNonQuery();\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tusing (ISession session = OpenSession())\n\t\t\t{\n\t\t\t\t\t//should bring from cache\n\t\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueriesForItemWithCollectionsAndChildrenAndChildrenAndChildren()\n\t\t{\n\t\t\tusing (ISession session = OpenSession())\n\t\t\t{\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t\tusing (var cmd = session.Connection.CreateCommand())\n\t\t\t\t{\n\t\t\t\t\tcmd.CommandText = \"DELETE FROM Item\";\n\t\t\t\t\tcmd.ExecuteNonQuery();\n\t\t\t\t}\n\t\t\t\t}\n\t\t\tusing (ISession session = OpenSession())\n\t\t\t{\n\t\t\t\t\t//should bring from cache\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueriesForItemWithCollectionsAndChildrenAndChildrenAndChildrenAndChildren()\n\t\t{\n\t\t\tusing (ISession session = OpenSession())\n\t\t\t{\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t\tusing (var cmd = session.Connection.CreateCommand())\n\t\t\t{\n\t\t\t\tcmd.CommandText = \"DELETE FROM Item\";\n\t\t\t\t\tcmd.ExecuteNonQuery();\n\t\t\t}\n\t\t\t\tusing (ISession session = OpenSession())\n\t\t\t\t{\n\t\t\t\t\t//should bring from cache\n\t\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t\t.List();\n\t\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueriesForItemWithCollectionsAndChildrenAndChildrenAndChildrenAndChildrenAndChildren()\n\t\t{\n\t\t\tusing (ISession session = OpenSession())\n\t\t\t{\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (i = N1 + N2; i < N_INDEXES; i++, k += 4)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (i = N_INDEXES; i", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       rate.create()\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n       ", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.GetData(), length );\n\t\t\t\tshadowBuffer.Unlock();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Writing hardware buffer is not supported.\" );\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// \n\t\t/// </summary>\n\t\t/// <param name=\"offset\"></param>\n\t\t/// <param name=\"length\"></param>\n\t\t/// <param name=\"src\"></param>\n\t\t/// <param name=\"discardWholeBuffer\"></param>\n\t\tpublic override void ReadData( int offset, int length, IntPtr src, bool discardWholeBuffer )\n\t\t{\n\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLockLocking.ReadOnly );\n\t\t\t\tMemory.Copy( shadowBuffer.GetData(), src, length );\n\t\t\t\tshadowBuffer.Unlock();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Reading hardware buffer is not supported.\" );\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// \n\t\t/// </summary>\n\t\t/// <param name=\"offset\"></param>\n\t\t/// <param name=\"length\"></param>\n\t\t/// <param name=\"src\"></param>\n\t\t/// <param name=\"discardWholeBuffer\"></param>\n\t\tpublic override void WriteData( int offset, int length, IntPtr src, bool discardWholeBuffer )\n\t\t{\n\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLockLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.GetData(), length );\n\t\t\t\tshadowBuffer.Unlock();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Writing hardware buffer is not supported.\" );\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// \n\t\t/// </summary>\n\t\t/// <param name=\"offset\"></param>\n\t\t/// <param name=\"length\"></param>\n\t\t/// <param name=\"src\"></param>\n\t\t/// <param name=\"discardWholeBuffer\"></param>\n\t\tpublic override void ReadData( int offset, int length, IntPtr src, bool discardWholeBuffer )\n\t\t{\n\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLockLocking.ReadOnly );\n\t\t\t\tMemory.Copy( shadowBuffer.GetData(), src, length );\n\t\t\t\tshadowBuffer.Unlock();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Reading hardware buffer is not supported.\" );\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// \n\t\t/// </summary>\n\t\t/// <param name=\"offset\"></param>\n\t\t/// <param name=\"length\"></param>\n\t\t/// <param name=\"src\"></param>\n\t\t/// <param name=\"discardWholeBuffer\"></param>\n\t\tpublic override void WriteData( int offset, int length, IntPtr src, bool discardWholeBuffer )\n\t\t{\n\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\t\tshadowBuffer.Lock( offset, length, BufferLockLocking.WriteOnly );\n\t\t\t\t\tMemory.Copy( src, shadowBuffer.GetData(), length );\n\t\t\t\t\tshadowBuffer.Unlock();\n\t\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t\tthrow new AxiomException( \"Writing hardware buffer is not supported.\" );\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// \n\t\t/// </summary>\n\t\t/// <param name=\"offset\"></param>\n\t\t/// <param name=\"length\"></param>\n\t\t/// <param name=\"src\"></param>\n\t\t/// <param name=\"discardWholeBuffer\"></param>\n\t\tpublic override void ReadData( int offset, int length, IntPtr src, bool discardWholeBuffer )\n\t\t{\n\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLockLocking.ReadOnly );\n\t\t\t\tMemory.Copy( shadowBuffer.GetData(), src, length );\n\t\t\t\tshadowBuffer.Unlock();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Reading hardware buffer is not supported.\" );\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// \n\t\t/// </summary>\n\t\t/// <param name=\"offset\"></param>\n\t\t/// <param name=\"length\"></param>\n\t\t/// <param name=\"src\"></param>\n\t\t/// <param name=\"discardWholeBuffer\"></param>\n\t\tpublic override void WriteData( int offset, int length, IntPtr src, bool discardWholeBuffer )\n\t\t{\n\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLockLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.GetData(), length );\n\t\t\t\tshadowBuffer.Unlock();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Writing hardware buffer is not supported.\" );\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// \n\t\t/// </summary>\n\t\t/// <param name=\"offset\"></param>\n\t\t/// <param name=\"length\"></param>\n\t\t/// <param name=\"src\"></param>\n\t\t/// <param name=\"discardWholeBuffer\"></param>\n\t\tpublic override void ReadData( int offset, int length, IntPtr src, bool discardWholeBuffer )\n\t\t{\n\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLockLocking.ReadOnly );\n\t\t\t\tMemory.Copy( shadowBuffer.GetData(), src, length );\n\t\t\t\tshadowBuffer.Unlock();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Reading hardware buffer is not supported.\" );\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// \n\t\t/// </summary>\n\t\t/// <param name=\"offset\"></param>\n\t\t/// <param name=\"length\"></param>\n\t\t/// <param name=\"src\"></param>\n\t\t/// <param name=\"discardWholeBuffer\"></param>\n\t\tpublic override void WriteData( int offset, int length, IntPtr src, bool discardWho", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.retune(None)\n\t\tself.satfinder_scan_nims = self.satfinder_scan_nims\n\t\tself.satfinder_scan_nims.addNotifier(self.retune, initial_call", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                tcpAcceptFilters.add(new TcpAddress.TcpAddressMask(filterStr));\n            }\n            return;\n        case ZMQ.ZMQ_DELAY_ON_DISCONNECT:\n            delayOnDisconnect = (Integer) optval;\n            if (delayOnDisconnect != 0 && delayOnDisconnect != 1) {\n                throw new IllegalArgumentException(\"delayOnDisconnect only accept 0 or 1 \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_FILTER:\n            filter = (Boolean) optval;\n            return;\n        case ZMQ.ZMQ_RECV_IDENTITY:\n            recvIdentity = (Boolean) optval;\n            return;\n        case ZMQ.ZMQ_DECORDER:\n            decoder = (Class<? extends DecoderBase>) optval;\n            return;\n        case ZMQ.ZMQ_ENCODER:\n            encoder = (Class<? extends EncoderBase>) optval;\n            return;\n        case ZMQ.ZMQ_MSG_ALLOCATOR:\n            msgAllocator = (MsgAllocator) optval;\n            return;\n        case ZMQ.ZMQ_SOCKET_ID:\n            socketId = (Integer) optval;\n            return;\n        default:\n            throw new IllegalArgumentException(\"unknown option \" + option);\n        }\n    }\n    public void setSocketOpt(int option, Object optval, Object optval2)\n    {\n        switch (option) {\n        case ZMQ.ZMQ_SNDHWM:\n            sendHwm = (Integer) optval;\n            if (sendHwm < 0) {\n                throw new IllegalArgumentException(\"sendHwm \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_RCVHWM:\n            recvHwm = (Integer) optval;\n            if (recvHwm < 0) {\n                throw new IllegalArgumentException(\"recvHwm \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_AFFINITY:\n            affinity = (Long) optval;\n            return;\n        case ZMQ.ZMQ_IDENTITY:\n            byte[] val;\n            if (optval instanceof String) {\n                val = ((String) optval).getBytes(ZMQ.CHARSET);\n            }\n            else if (optval instanceof byte[]) {\n                val = (byte[]) optval;\n            }\n            else {\n                throw new IllegalArgumentException(\"identity \" + optval);\n            }\n            if (val == null || val.length > 255) {\n                throw new IllegalArgumentException(\"identity must not be null or less than 255 \" + optval);\n            }\n            identity = Arrays.copyOf(val, val.length);\n            identitySize = (byte) identity.length;\n            return;\n        case ZMQ.ZMQ_RATE:\n            rate = (Integer) optval;\n            return;\n        case ZMQ.ZMQ_RECOVERY_IVL:\n            recoveryIvl = (Integer) optval;\n            return;\n        case ZMQ.ZMQ_SNDBUF:\n            sndbuf = (Integer) optval;\n            return;\n        case ZMQ.ZMQ_RCVBUF:\n            rcvbuf = (Integer) optval;\n            return;\n        case ZMQ.ZMQ_LINGER:\n            linger = (Integer) optval;\n            return;\n        case ZMQ.ZMQ_RECONNECT_IVL:\n            reconnectIvl = (Integer) optval;\n            if (reconnectIvl < -1) {\n                throw new IllegalArgumentException(\"reconnectIvl \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_RECONNECT_IVL_MAX:\n            reconnectIvlMax = (Integer) optval;\n            if (reconnectIvlMax < 0) {\n                throw new IllegalArgumentException(\"reconnectIvlMax \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_BACKLOG:\n            backlog = (Integer) optval;\n            return;\n        case ZMQ.ZMQ_MAXMSGSIZE:\n            maxMsgSize = (Long) optval;\n            return;\n        case ZMQ.ZMQ_MULTICAST_HOPS:\n            multicastHops = (Integer) optval;\n            return;\n        case ZMQ.ZMQ_RCVTIMEO:\n            recvTimeout = (Integer) optval;\n            return;\n        case ZMQ.ZMQ_SNDTIMEO:\n            sendTimeout = (Integer) optval;\n            return;\n        case ZMQ.ZMQ_IPV4ONLY:\n            ipv4only = (Integer) optval;\n            if (ipv4only != 0 && ipv4only != 1) {\n                throw new IllegalArgumentException(\"ipv4only only accepts 0 or 1 \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_TCP_KEEPALIVE:\n            tcpKeepAlive = (Integer) optval;\n            if (tcpKeepAlive != -1 && tcpKeepAlive != 0 && tcpKeepAlive != 1) {\n                throw new IllegalArgumentException(\"tcpKeepAlive only accept 0 or 1 \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_DELAY_ATTACH_ON_CONNECT:\n            delayAttachOnConnect = (Integer) optval;\n            if (delayAttachOnConnect != 0 && delayAttachOnConnect != 1) {\n                throw new IllegalArgumentException(\"delayAttachOnConnect only accept 0 or 1 \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_TCP_KEEPALIVE_CNT:\n        case ZMQ.ZMQ_TCP_KEEPALIVE_IDLE:\n        case ZMQ.ZMQ_", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Write the decoded row to the output stream\n                for (int i = 0; i < bytesPerRow; i++) {\n                    fout.Write(curr[i]);\n                }\n                // Read the next row of data\n                curr = prior;\n                prior", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('org.freedesktop.DBus.Properties'))\n        s.set_interface('org.freedesktop.DBus.Properties')\n        self.assertEqual(s.get_interface(), 'org.freedesktop.DBus.Properties')\n        # bytestring in Python 2, Unicode string in Python 3\n        self.assertEqual(type(s.get_interface()), str)\n        self.assertTrue(s.has_interface('org.freedesktop.DBus.Properties'))\n    def test_member(self):\n        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_member(), None)\n        self.assertFalse(s.has_member('org.freedesktop.DBus.Properties.Int32'))\n        s.set_member('org.freedesktop.DBus.Properties.Int32')\n        self.assertEqual(s.get_member(), 'org.freedesktop.DBus.Properties.Int32')\n        # bytestring in Python 2, Unicode string in Python 3\n        self.assertEqual(type(s.get_member()), str)\n        self.assertTrue(s.has_member('org.freedesktop.DBus.Properties.Int32'))\n    def test_member_deprecated(self):\n        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_member_deprecated(), None)\n        self.assertFalse(s.has_member_deprecated('org.freedesktop.DBus.Properties.Int32'))\n        s.set_member_deprecated('org.freedesktop.DBus.Properties.Int32')\n        self.assertEqual(s.get_member_deprecated(), 'org.freedesktop.DBus.Properties.Int32')\n        # bytestring in Python 2, Unicode string in Python 3\n        self.assertEqual(type(s.get_member_deprecated()), str)\n        self.assertTrue(s.has_member_deprecated('org.freedesktop.DBus.Properties.Int32'))\n    def test_member_deprecated_deprecated(self):\n        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_member_deprecated_deprecated(), None)\n        self.assertFalse(s.has_member_deprecated_deprecated('org.freedesktop.DBus.Properties.Int32'))\n        s.set_member_deprecated_deprecated('org.freedesktop.DBus.Properties.Int32')\n        self.assertEqual(s.get_member_deprecated_deprecated(), 'org.freedesktop.DBus.Properties.Int32')\n        # bytestring in Python 2, Unicode string in Python 3\n        self.assertEqual(type(s.get_member_deprecated_deprecated()), str)\n        self.assertTrue(s.has_member_deprecated_deprecated('org.freedesktop.DBus.Properties.Int32'))\n    def test_member_deprecated_deprecated_deprecated(self):\n        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_member_deprecated_deprecated(), None)\n        self.assertFalse(s.has_member_deprecated_deprecated('", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "               except:\n                    output += \"nothing\\n\"\n        _file = open(filename, 'w+')\n        _file.write(output)\n        _file.close()\n    def make_massey_product_database(self):\n        self.masse", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void clear() {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tqueueOperation( new Clear() );\n\t\t}\n\t\tinitialize( true );\n\t\tmap.clear();\n\t}\n\t@Override\n\tpublic boolean isDirty() {\n\t\treturn map.size() != size();\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key) {\n\t\treturn map.containsKey( key ) && map.get( key ) != get( key );\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value) {\n\t\treturn map.containsKey( key ) && map.get( key ) != value;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != oldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue, Object newNewNewNewValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewNewValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue, Object newNewNewNewValue, Object newNewNewNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue, Object newNewNewNewValue, Object newNewNewNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewNewNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue, Object newNewNewNewValue, Object newNewNewNewOldValue, Object newNewNewNewNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewNewNewNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue, Object newNewNewNewValue, Object newNewNewNewOldValue, Object newNewNewNewNewNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewNewNewNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue, Object newNewNewNewValue, Object newNewNewNewNewOldValue, Object newNewNewNewNewNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewNewNewNewNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue, Object newNewNewNewValue, Object newNewNewNewOldValue, Object newNewNewNewNewOldValue, Object newNewNewNewNewNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewNewNewNewNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue, Object newNewNewNewValue, Object newNewNewNewOldValue, Object newNewNewNewNewOldValue, Object newNewNewNewNewNewOldValue, Object newNewNewNewNewNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewNewNewNewNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue, Object newNewNewNewValue, Object newNewNewNewOldValue, Object newNewNewNewNewOldValue, Object newNewNewNewNewNewOldValue, Object newNewNewNewNewNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewNewNewNewNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue, Object newNewNewNewValue, Object newNewNewNewOldValue, Object newNewNewNewNewOldValue, Object newNewNewNewNewNewOldValue, Object newNewNewNewNewNewNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewNewNewNewNewNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue, Object newNewNewNewValue, Object newNewNewNewOldValue, Object newNewNewNewNewOldValue, Object newNewNewNewNewNewOldValue, Object newNewNewNewNewNewNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewNewNewNewNewNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue, Object newNewNewNewValue, Object newNewNewNewOldValue, Object newNewNewNewNewNewOldValue, Object newNewNewNewNewNewOldValue, Object newNewNewNewNewNewNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewNewNewNewNewNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object key, Object value, Object oldValue, Object newValue, Object newOldValue, Object newNewValue, Object newNewOldValue, Object newNewNewValue, Object newNewNewOldValue, Object newNewNewNewValue, Object newNewNewNewOldValue, Object newNewNewNewNewNewOldValue, Object newNewNewNewNewNewOldValue, Object newNewNewNewNewNewNewNewOldValue) {\n\t\treturn map.containsKey( key ) && map.get( key ) != newNewNewNewNewNewNewNewOldValue;\n\t}\n\t@Override\n\tpublic boolean isDirty(Object", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member bidding on an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param name=\"m\">The mobile bidding on the item</param>\n\t\tpublic static void WriteBidItem( AuctionItem auction, Mobile m )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer\t.WriteLine( \"} Bidding on item [{0}] Mobile: {1} [2], {3}, Account : {4}\",\n\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tm.Name,\n\t\t\t\t\tm.Serial.ToString(),\n\t\t\t\t\tm.AccessLevel.ToString(),\n\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member buying an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param name=\"m\">The mobile buying the item</param>\n\t\tpublic static void WriteBuyItem( AuctionItem auction, Mobile m )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer\t.WriteLine( \"} Buying item [{0}] Mobile: {1} [2], {3}, Account : {4}\",\n\t\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tm.Name,\n\t\t\t\t\tm.Serial.ToString(),\n\t\t\t\t\tm.AccessLevel.ToString(),\n\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member canceling an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param name=\"m\">The mobile canceling the item</param>\n\t\tpublic static void WriteCancelItem( AuctionItem auction, Mobile m )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer\t.WriteLine( \"} Canceling item [{0}] Mobile: {1} [2], {3}, Account : {4}\",\n\t\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tm.Name,\n\t\t\t\t\tm.Serial.ToString(),\n\t\t\t\t\tm.AccessLevel.ToString(),\n\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member closing an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param name=\"m\">The mobile closing the item</param>\n\t\tpublic static void WriteCloseItem( AuctionItem auction, Mobile m )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer\t.WriteLine( \"} Closing item [{0}] Mobile: {1} [2], {3}, Account : {4}\",\n\t\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tm.Name,\n\t\t\t\t\t\tm.Serial.ToString(),\n\t\t\t\t\tm.AccessLevel.ToString(),\n\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member ending an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param name=\"m\">The mobile ending the item</param>\n\t\tpublic static void WriteEndItem( AuctionItem auction, Mobile m )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer\t.WriteLine( \"} Ending item [{0}] Mobile: {1} [2], {3}, Account : {4}\",\n\t\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tm.Name,\n\t\t\t\t\tm.Serial.ToString(),\n\t\t\t\t\tm.AccessLevel.ToString(),\n\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member removing an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param name=\"m\">The mobile removing the item</param>\n\t\tpublic static void WriteRemoveItem( AuctionItem auction, Mobile m )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer\t.WriteLine( \"} Removing item [{0}] Mobile: {1} [2], {3}, Account : {4}\",\n\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tm.Name,\n\t\t\t\t\t", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return modified_attendance\n    @api.multi\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the check in/out\n            message should return to. (\"My Attendances\" or \"Kiosk Mode\")\n        \"\"\"\n        self.ensure_one()\n        if self.user_id:\n            modified_attendance = self.sudo(self.user_id.id).attendance_action_change()\n        else:\n            modified_attendance = self.attendance_action_change()\n        return modified_attendance\n    @api.multi\n    def attendance_action_kiosk_mode(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the check in/out\n            message should return to. (\"My Attendances\" or \"Kiosk Mode\")\n        \"\"\"\n        self.ensure_one()\n        if self.user_id:\n            modified_attendance = self.sudo(self.user_id.id).attendance_action_kiosk_mode()\n        else:\n            modified_attendance = self.attendance_action_kiosk_mode()\n        return modified_attendance\n    @api.multi\n    def attendance_action_kiosk_mode(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the check in/out\n            message should return to. (\"My Attendances\" or \"Kiosk Mode\")\n        \"\"\"\n        self.ensure_one()\n        if self.user_id:\n            modified_attendance = self.sudo(self.user_id.id).attendance_action_kiosk_mode()\n        else:\n            modified_attendance = self.attendance_action_kiosk_mode()\n        return modified_attendance\n    @api.multi\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the check in/out\n            message should return to. (\"My Attendances\" or \"Kiosk Mode\")\n        \"\"\"\n        self.ensure_one()\n        if self.user_id:\n            modified_attendance = self.sudo(self.user_id.id).attendance_action_change()\n        else:\n            modified_attendance = self.attendance_action_change()\n        return modified_attendance\n    @api.multi\n    def attendance_action_change_check_in(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the check in/out\n            message should return to. (\"My Attendances\" or \"Kiosk Mode\")\n        \"\"\"\n        self.ensure_one()\n        if self.user_id:\n            modified_attendance = self.sudo(self.user_id.id).attendance_action_change_check_in()\n        else:\n            modified_attendance = self.attendance_action_change_check_in()\n        return modified_attendance\n    @api.multi\n    def attendance_action_change_check_in(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the check in/out\n            message should return to. (\"My Attendances\" or \"Kiosk Mode\")\n        \"\"\"\n        self.ensure_one()\n        if self.user_id:\n            modified_attendance = self.sudo(self.user_id.id).attendance_action_change_check_in()\n        else:\n            modified_attendance = self.attendance_action_change_check_in()\n        return modified_attendance\n    @api.multi\n    def attendance_action_change_check_out(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the check in/out\n            message should return to. (\"My Attendances\" or \"Kiosk Mode\")\n        \"\"\"\n        self.ensure_one()\n        if self.user_id:\n            modified_attendance = self.sudo(self.user_id.id).attendance_action_change_check_out()\n        else:\n            modified_attendance = self.attendance_action_change_check_out()\n        return modified_attendance\n    @api.multi\n    def attendance_action_change_check_out(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the check in/out\n            message should return to. (\"My Attendances\" or \"Kiosk Mode\")\n        \"\"\"\n        self.ensure_one()\n        if self.user_id:\n            modified_attendance = self.sudo(self.user_id.id).attendance_action_change_check_out()\n        else:\n            modified_attendance = self.attendance_action_change_check_out()\n        return modified_attendance\n    @api.multi\n    def attendance_action_change_check_out_check_in(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the check in/out\n            message should return to. (\"My Attendances\" or \"Kiosk Mode\")\n        \"\"\"\n        self.ensure_one()\n        if self.user_id:\n            modified_attendance = self.sudo(self.user_id.id).attendance_action_change_check_out_check_in()\n        else:\n            modified_attendance = self.attendance_action_change_check_out_check_in()\n        return modified_attendance\n    @api.multi\n    def attendance_action_change_check_out_check_in(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the check in/out\n            message should return to. (\"My Attendances\" or \"Kiosk Mode\")\n        \"\"\"\n        self.ensure_one()\n        if self.user_id:\n            modified_attendance = self.sudo(self.user_id.id).attendance_action_change_check_out_check_in()\n        else:\n            modified_attendance = self.attendance_action_change_check_out_check_in()\n        return modified_attendance\n    @api.multi\n    def attendance_action_change_check_in_check_out(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow row = null;\n\t\tif (orderInvestigationLiteVo.getPathResultDetailsIsNotNull() || orderInvestigationLiteVo.getRadReportingDetailsIsNotNull())\n\t\t{\n\t\t\tif (orderInvestigationLiteVo.getPathResultDetailsIsNotNull())\n\t\t\t{\n\t\t\t\trow = form.grdResults().getRows().newRow();\n\t\t\t\trow.setSelectable(false);\n\t\t\t\trow.setColTestName(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getTestName());\n\t\t\t\trow.setColABN(form.getImages().Core.NormalResult);\n\t\t\t\trow.setColStatus(form.getImages().Core.NormalResult);\n\t\t\t\trow.setColResult(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResult());\n\t\t\t\trow.setColResultDate(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResultDateTime());\n\t\t\t\trow.setColResultDate(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResultDateTime());\n\t\t\t\trow.setColResultDate(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResultDateTime());\n\t\t\t\trow.setColResultDate(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResultDateTime());\n\t\t\t\trow.setColResultDate(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResultDateTime());\n\t\t\t\t\trow.setColResultDate(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResultDateTime());\n\t\t\t\trow.setColResultDate(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResultDateTime());\n\t\t\t\trow.setColResultDate(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResultDateTime());\n\t\t\t\t\trow.setColResultDate(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResultDateTime());\n\t\t\t\trow.setColResultDate(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResultDateTime());\n\t\t\t\trow.setColResultDate(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResultDateTime());\n\t\t\t\trow.setColResultDate(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResultDateTime());\n\t\t\t\trow.setColResultDate(orderInvestigationLiteVo.getPathResultDetails().getPathologyResultDetails().get(0).getResult", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The index of this item in the list view.\n        /// </summary>\n        public int Index { get { return index; } }\n        /// <summary>\n        /// The title of this item.\n        /// </summary>\n        public string Text\n        {\n            get\n            {\n                POINT pt = new POINT();\n                ProcessMemoryChunk c = ProcessMemoryChunk.AllocStruct(sw.Process, pt);\n                ApiHelper.FailIfZero(SystemWindow.SendMessage(new HandleRef(sw, sw.HWnd), SystemListView.LVM_GETITEM, new IntPtr(index), c.Location));\nNext line of code:\n                pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new string(Encoding.Default.GetChars(pt.x, pt.y));\n            }\n        }\n        /// <summary>\n        /// The image of this item.\n        /// </summary>\n        public Image Image\n        {\n            get\n            {\n                POINT pt = new POINT();\n                ProcessMemoryChunk c = ProcessMemoryChunk.AllocStruct(sw.Process, pt);\n                ApiHelper.FailIfZero(SystemWindow.SendMessage(new HandleRef(sw, sw.HWnd), SystemListView.LVM_GETITEM, new IntPtr(index), c.Location));\nNext line of code:\n                pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return Image.FromHbitmap(sw.Process, pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The image of this item.\n        /// </summary>\n        public Image Image\n        {\n            get\n            {\n                POINT pt = new POINT();\n                ProcessMemoryChunk c = ProcessMemoryChunk.AllocStruct(sw.Process, pt);\n                ApiHelper.FailIfZero(SystemWindow.SendMessage(new HandleRef(sw, sw.HWnd), SystemListView.LVM_GETITEM, new IntPtr(index), c.Location));\nNext line of code:\n                pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return Image.FromHbitmap(sw.Process, pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The image of this item.\n        /// </summary>\n        public Image Image\n        {\n            get\n            {\n                POINT pt = new POINT();\n                ProcessMemoryChunk c = ProcessMemoryChunk.AllocStruct(sw.Process, pt);\n                ApiHelper.FailIfZero(SystemWindow.SendMessage(new HandleRef(sw, sw.HWnd), SystemListView.LVM_GETITEM, new IntPtr(index), c.Location));\nNext line of code:\n                pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return Image.FromHbitmap(sw.Process, pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The image of this item.\n        /// </summary>\n        public Image Image\n        {\n            get\n            {\n                POINT pt = new POINT();\n                ProcessMemoryChunk c = ProcessMemoryChunk.AllocStruct(sw.Process, pt);\n                ApiHelper.FailIfZero(SystemWindow.SendMessage(new HandleRef(sw, sw.HWnd), SystemListView.LVM_GETITEM, new IntPtr(index), c.Location));\nNext line of code:\n                pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return Image.FromHbitmap(sw.Process, pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The image of this item.\n        /// </summary>\n        public Image Image\n        {\n            get\n            {\n                POINT pt = new POINT();\n                ProcessMemoryChunk c = ProcessMemoryChunk.AllocStruct(sw.Process, pt);\n                ApiHelper.FailIfZero(SystemWindow.SendMessage(new HandleRef(sw, sw.HWnd), SystemListView.LVM_GETITEM, new IntPtr(index), c.Location));\nNext line of code:\n                pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return Image.FromHbitmap(sw.Process, pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The image of this item.\n        /// </summary>\n        public Image Image\n        {\n            get\n            {\n                POINT pt = new POINT();\n                ProcessMemoryChunk c = ProcessMemoryChunk.AllocStruct(sw.Process, pt);\n                ApiHelper.FailIfZero(SystemWindow.SendMessage(new HandleRef(sw, sw.HWnd), SystemListView.LVM_GETITEM, new IntPtr(index), c.Location));\nNext line of code:\n                pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return Image.FromHbitmap(sw.Process, pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The image of this item.\n        /// </summary>\n        public Image Image\n        {\n            get\n            {\n                POINT pt = new POINT();\n                ProcessMemoryChunk c = ProcessMemoryChunk.AllocStruct(sw.Process, pt);\n                ApiHelper.FailIfZero(SystemWindow.SendMessage(new HandleRef(sw, sw.HWnd), SystemListView.LVM_GETITEM, new IntPtr(index), c.Location));\nNext line of code:\n                pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return Image.FromHbitmap(sw.Process, pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The image of this item.\n        /// </summary>\n        public Image Image\n        {\n            get\n            {\n                POINT pt = new POINT();\n                ProcessMemoryChunk c = ProcessMemoryChunk.AllocStruct(sw.Process, pt);\n                ApiHelper.FailIfZero(SystemWindow.SendMessage(new HandleRef(sw, sw.HWnd), SystemListView.LVM_GETITEM, new IntPtr(index), c.Location));\nNext line of code:\n                pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return Image.FromHbitmap(sw.Process, pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The image of this item.\n        /// </summary>\n        public Image Image\n        {\n            get\n            {\n                POINT pt = new", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       if self.terminator.doing_layout:\n            err(\"You can't create a tab while a layout is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n            err(\"You can't create a tab while a notebook is running\")\n            return\n        if self.terminator.is_child_notebook():\n           ", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\"+Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn;\n        }\n        public void SetDelegate( string name,", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t\t}\n\t\t}\n\t\tpublic bool IsPointer {\n\t\t\tget { return base_type != null && base_type.IsType", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               return null;\n            }\n        }\n        #endregion\n    }\n}\n", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.protocol = protocol\n        self.ciphers = None\n        self.verify_mode = None\n        self.verify_depth = None\n        self.verify_callback = None\n        self.verify_errors = None\n        self.options = None\n        self.options_callback = None\n        self.options_callback_args = None\n        self.options_callback_kwargs = None\n        self.options_callback_kwargs_default = None\n        self.options_callback_kwargs_default = None\n        self.options_callback_kwargs_default = None\n        self.options_callback_kwargs = None\n        self.options_callback_kwargs_default = None\n        self.options_callback_kwargs_default = None\n        self.options_callback = None\n        self.options_callback_args = None\n", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.scrolledwindow4 = new global::Gtk.ScrolledWindow ();\n\t\t\tthis.scrolledwindow4.CanFocus = true;\n\t\t\tthis.scrolledwindow4.Name = \"scrolledwindow4\";\n\t\t\tthis.scrolled", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "               notebooks[\"board\"].set_current_page(new_num)\n                notebooks[\"board\"].set_tab_reorderable(True)\n                notebooks[\"board\"].set_tab_reorderable(True)\n                notebooks[\"board\"].set", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_1),\n    \"Move-Tab-to-left-reverse\": QKeySequence(Qt.CTRL + Qt.Key_2),\n    \"Move", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo{\" +\n\t\t\t\t\"persistenceUnitName='\" + this.persistenceUnitName + '\\'' +\n\t\t\t\t+ \", persistenceProviderClassName='\" + this.persistenceProviderClassName + '\\'' +\n\t\t\t\t\", transactionType=\" + this.transactionType +\n\t\t\t\t\", nonJtaDataSource=\" + this.nonJtaDataSource +\n\t\t\t\t\", jtaDataSource=\" + this.jtaDataSource +\n\t\t\t\t\", mappingFileNames=\" + this.mappingFileNames +\n\t\t\t\", jarFileUrls=\" + this.jarFileUrls +\n\t\t\t\", managedClassNames=\" + this.managedClassNames +\n\t\t\t\t\", excludeUnlistedClasses=\" + this.excludeUnlistedClasses +\n\t\t\t\t\", properties=\" + this.properties +\n\t\t\t\t\", persistenceXMLSchemaVersion='\" + this.persistenceXMLSchemaVersion + '\\'' +\n\t\t\t\t\", persistenceProviderPackageName='\" + this.persistenceProviderPackageName + '\\'' +\n\t\t\t\t'}';\n\t}\n}", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected boolean isFileModified()\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileDirty()\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileSaved()\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileSaving()\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileSaved()\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileDeletable()\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileDeleting()\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileDeleted()\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming()\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String newName)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenamed()\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenameable()\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentCommentComment, String newCommentEncodingCommentCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentCommentComment, String newCommentEncodingCommentCommentComment, String newCommentEncodingCommentCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentCommentComment, String newCommentEncodingCommentCommentComment, String newCommentEncodingCommentCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentCommentCommentComment, String newCommentEncodingCommentCommentCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentCommentComment, String newCommentEncodingCommentCommentComment, String newCommentEncodingCommentCommentCommentComment, String newCommentEncodingCommentCommentCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentCommentComment, String newCommentEncodingCommentCommentCommentComment, String newCommentEncodingCommentCommentCommentCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentCommentComment, String newCommentEncodingCommentCommentCommentComment, String newCommentEncodingCommentCommentCommentCommentComment, String newCommentEncodingCommentCommentCommentCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String newComment, String newCommentEncoding, String newCommentEncodingComment, String newCommentEncodingCommentComment, String newCommentEncodingCommentCommentComment, String newCommentEncodingCommentCommentCommentComment, String newCommentEncodingCommentCommentCommentCommentComment)\n  {\nNext line of code:\n    return false;\n  }\n  \n  protected boolean isFileRenaming(String oldName, String newName, String newExtension, String newMimeType, String newEncoding, String newEncodingComment, String new", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(883, 23);\n\t\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82, 20);\n\t\t\tthis.butAttach.TabIndex = 6;\n\t\t\tthis.butAttach.Text = \"Attachments\";\n\t\t\tthis.butAttach.Click += new System.EventHandler(this.butAttach_Click);\n\t\t\t// \n\t\t\t// gridAttachments\n\t\t\t// \n\t\t\tthis.gridAttachments.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n            | System.Windows.Forms.AnchorStyles.Left) \n            | System.Windows.Forms.AnchorStyles.Right)));\n\t\t\tthis.gridAttachments.ColumnHeadersDefaultCellStyle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224)))), ((int)(((byte)(224)))), ((int)(((byte)(224)))));\n\t\t\tthis.gridAttachments.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font(\"Microsoft Sans Serif\", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n\t\t\tthis.gridAttachments.ColumnHeadersDefaultCellStyle.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(64)))), ((int)(((byte)(64)))));\n\t\t\tthis.gridAttachments.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;\n\t\t\tthis.gridAttachments.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {\n            this.Column1,\n            this.Column2,\n            this", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(EnumSwitchUnion.m_d) {\n\t        case option_1:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // int type\n\t            current_sum += 4;\n\t            break;\n\t        case option_2:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // int type\n\t            current_sum += 4;\n\t            break;\n\t        case option_3:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // String type\n\t            current_sum += 4;\n\t            break;\n\t        default:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // float type\n\t            current_sum += 4;\n\t            break;\n\t    }\n\t    \n\t    return current_align - current_alignment;\n\t}\n\t\n\t/*\n\t * This method calculates the minimum size in CDR for this class.\n\t * \n\t * @param current_alignment Integer containing the current position in the buffer.\n\t */\n\tpublic static int getMinCdrSerializedSize(int current_alignment)\n\t{\n\t    int current_align = current_alignment;\n\t    int sum = 0;\n\t    int current_sum = 0;\n\t    \n\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // Enum type\n\t            \nNext line of code:\n\t    switch(EnumSwitchUnion.m_d) {\n\t        case option_1:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // int type\n\t            current_sum += 4;\n\t            break;\n\t        case option_2:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // int type\n\t            current_sum += 4;\n\t            break;\n\t        case option_3:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // String type\n\t            current_sum += 4;\n\t            break;\n\t        default:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // float type\n\t            current_sum += 4;\n\t            break;\n\t    }\n\t    \n\t    return current_align - current_alignment;\n\t}\n\t\n\t/*\n\t * This method calculates the size in CDR for this class.\n\t * \n\t * @param current_alignment Integer containing the current position in the buffer.\n\t */\n\tpublic static int getCdrSerializedSize(int current_alignment)\n\t{\n\t    int current_align = current_alignment;\n\t    int sum = 0;\n\t    int current_sum = 0;\n\t    \n\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // Enum type\n\t            \nNext line of code:\n\t    switch(EnumSwitchUnion.m_d) {\n\t        case option_1:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // int type\n\t            current_sum += 4;\n\t            break;\n\t        case option_2:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // int type\n\t            current_sum += 4;\n\t            break;\n\t        case option_3:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // String type\n\t            current_sum += 4;\n\t            break;\n\t        default:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // float type\n\t            current_sum += 4;\n\t            break;\n\t    }\n\t    \n\t    return current_align - current_alignment;\n\t}\n\t\n\t/*\n\t * This method calculates the size in CDR for this class.\n\t * \n\t * @param current_alignment Integer containing the current position in the buffer.\n\t */\n\tpublic static int getCdrSerializedSize(int current_alignment, boolean isBigEndian)\n\t{\n\t    int current_align = current_alignment;\n\t    int sum = 0;\n\t    int current_sum = 0;\n\t    \n\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // Enum type\n\t            \nNext line of code:\n\t    switch(EnumSwitchUnion.m_d) {\n\t        case option_1:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // int type\n\t            current_sum += 4;\n\t            break;\n\t        case option_2:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // int type\n\t            current_sum += 4;\n\t            break;\n\t        case option_3:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // String type\n\t            current_sum += 4;\n\t            break;\n\t        default:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // float type\n\t            current_sum += 4;\n\t            break;\n\t    }\n\t    \n\t    return current_align - current_alignment;\n\t}\n\t\n\t/*\n\t * This method calculates the size in CDR for this class.\n\t * \n\t * @param current_alignment Integer containing the current position in the buffer.\n\t */\n\tpublic static int getCdrSerializedSize(int current_alignment, boolean isBigEndian, boolean isSigned)\n\t{\n\t    int current_align = current_alignment;\n\t    int sum = 0;\n\t", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      else\n        return java.GetValue(\"JavaHome\").ToString();\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (String.IsNullOrEmpty(javaHome))\n        return resinHome;\n      else\n        return javaHome;\n    }\n    private static String GetResinHome(String resinHome, String javaHome)\n    {\n      if (String.IsNullOrEmpty(resinHome))\n        return javaHome;\n      else\n        return resinHome;\n    }\n    private static String GetResinRoot(String resinHome, String javaHome)\n    {\n      if (String.IsNullOrEmpty(resinHome))\n        return javaHome;\n      else\n        return resinHome;\n    }\n    private static String GetResinArgs(String resinHome, String javaHome)\n    {\n      if (String.IsNullOrEmpty(resinHome))\n        return javaHome;\n      else\n        return resinHome;\n    }\n    private static String GetResinArgs(String resinHome, String javaHome, String args)\n    {\n      if (String.IsNullOrEmpty(resinHome))\n        return javaHome + \" \" + args;\n      else\n        return resinHome + \" \" + args;\n    }\n    private static String GetResinArgs(String resinHome, String javaHome, String args, String command)\n    {\n      if (String.IsNullOrEmpty(resinHome))\n        return javaHome + \" \" + args + \" \" + command;\n      else\n        return resinHome + \" \" + args + \" \" + command;\n    }\n    private static String GetResinArgs(String resinHome, String javaHome, String args, String command, String server)\n    {\n      if (String.IsNullOrEmpty(resinHome))\n        return javaHome + \" \" + args + \" \" + command + \" \" + server;\n      else\n        return resinHome + \" \" + args + \" \" + command + \" \" + server;\n    }\n    private static String GetResinArgs(String resinHome, String javaHome, String args, String command, String server, String cluster)\n    {\n      if (String.IsNullOrEmpty(resinHome))\n        return javaHome + \" \" + args + \" \" + command + \" \" + server + \" \" + cluster;\n      else\n        return resinHome + \" \" + args + \" \" + command + \" \" + server + \" \" + cluster;\n    }\n    private static String GetResinArgs(String resinHome, String javaHome, String args, String command, String server, String cluster, String elasticServerAddress)\n    {\n      if (String.IsNullOrEmpty(resinHome))\n        return javaHome + \" \" + args + \" \" + command + \" \" + server + \" \" + cluster + \" \" + elasticServerAddress;\n      else\n        return resinHome + \" \" + args + \" \" + command + \" \" + server + \" \" + cluster + \" \" + elasticServerAddress;\n    }\n    private static String GetResinArgs(String resinHome, String javaHome, String args, String command, String server, String cluster, String elasticServerAddress, String elasticServerPort)\n    {\n      if (String.IsNullOrEmpty(resinHome))\n        return javaHome + \" \" + args + \" \" + command + \" \" + server + \" \" + cluster + \" \" + elasticServerAddress + \" \" + elasticServerPort;\n      else\n        return resinHome + \" \" + args + \" \" + command + \" \" + server + \" \" + cluster + \" \" + elasticServerAddress + \" \" + elasticServerPort;\n    }\n    private static String GetResinArgs(String resinHome, String javaHome, String args, String command, String server, String cluster, String elasticServerAddress, String elasticServerPort, String elasticServerPort)\n    {\n      if (String.", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               comment = name\n        return [comment, l]\n    def find_env(self, name):\n        # attempt to find job by 'Ansible:' header comment\n        comment = None\n        for l in self.lines:\n            if comment is not None:\n                if comment == name:\n                    return [comment, l]\n                else:\n                    comment = None\n            elif re.match(r'%s' %", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "       modifier.vertex_group = modifier_json['vertex_group']\nclass MeshModifierVERTEX_WEIGHT_SMOOTH(MeshModifierCommon):\n    @classmethod\n    def _to_json_spec(cls, modifier_", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           if(rankCounts == null)\n                continue;\n            double minLikelihood = min(MIN_EMPTY_PEP_LEN_LIKELIHOOD, totalPositivesCount / MIN_EMPTY_PEP_LEN_FACTOR);\n            for(int i = 0; i < rankCounts.length; ++i)\n            {\n                if(rankCounts[i] == 0)\n                {\n                    rankCounts[i] = minLikelihood;\n                }\n                else\n                {\n                    rankCounts[i] = rankCounts[i] / rankCounts.length;\n                }\n            }\n        }\n        // fill in values for empty buckets using a fraction of total positives for lengths with none, and halving for other missing buckets\n        for(int peptideLength : DEFAULT_PEPTIDE_LENGTHS)\n        {\n            double[] rankCounts = pepLenRankCounts.get(peptideLength);\nNext line of code:\n            if(rankCounts == null)\n                continue;\n            double minLikelihood = min(MIN_EMPTY_PEP_LEN_LIKELIHOOD, totalPositivesCount / MIN_EMPTY_PEP_LEN_FACTOR);\n            for(int i = 0; i < rankCounts.length; ++i)\n            {\n                if(rankCounts[i] == 0)\n                {\n                    rankCounts[i] = minLikelihood;\n                }\n                else\n                {\n                    rankCounts[i] = rankCounts[i] / rankCounts.length;\n                }\n            }\n        }\n        // fill in values for empty buckets using a fraction of total positives for lengths with none, and halving for other missing buckets\n        for(int peptideLength : DEFAULT_PEPTIDE_LENGTHS)\n        {\n            double[] rankCounts = pepLenRankCounts.get(peptideLength);\nNext line of code:\n            if(rankCounts == null)\n                continue;\n            double minLikelihood = min(MIN_EMPTY_PEP_LEN_LIKELIHOOD, totalPositivesCount / MIN_EMPTY_PEP_LEN_FACTOR);\n            for(int i = 0; i < rankCounts.length; ++i)\n", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @DisplayName(\"neighbors() should return iterator with all the neighbors\")\n    void neighbors_iterator() {\n        vertex.addNeighbor(1, \"one\");\n        vertex.addNeighbor(2, \"two\");\n        vertex.addNeighbor(3, \"three\");\n        val neighbors = new ArrayList<Integer>();\nNext line of code:\n        for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @DisplayName(\"neighbors() should return iterator with all the neighbors\")\n    void neighbors_iterator_withNull() {\n        vertex.addNeighbor(1, \"one\");\n        vertex.addNeighbor(2, \"two\");\n        vertex.addNeighbor(3, \"three\");\n        val neighbors = new ArrayList<Integer>();\nNext line of code:\n        for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @DisplayName(\"neighbors() should return iterator with all the neighbors\")\n    void neighbors_iterator_withNull_withNull() {\n        vertex.addNeighbor(1, \"one\");\n        vertex.addNeighbor(2, \"two\");\n        vertex.addNeighbor(3, \"three\");\n        val neighbors = new ArrayList<Integer>();\nNext line of code:\n        for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @DisplayName(\"neighbors() should return iterator with all the neighbors\")\n    void neighbors_iterator_withNull_withNull_withNull() {\n        vertex.addNeighbor(1, \"one\");\n        vertex.addNeighbor(2, \"two\");\n        vertex.addNeighbor(3, \"three\");\n        val neighbors = new ArrayList<Integer>();\nNext line of code:\n        for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @DisplayName(\"neighbors() should return iterator with all the neighbors\")\n    void neighbors_iterator_withNull_withNull_withNull_withNull() {\n        vertex.addNeighbor(1, \"one\");\n        vertex.addNeighbor(2, \"two\");\n        vertex.addNeighbor(3, \"three\");\n        val neighbors = new ArrayList<Integer>();\nNext line of code:\n        for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @DisplayName(\"neighbors() should return iterator with all the neighbors\")\n    void neighbors_iterator_withNull_withNull_withNull_withNull_withNull() {\n        vertex.addNeighbor(1, \"one\");\n        vertex.addNeighbor(2, \"two\");\n        vertex.addNeighbor(3, \"three\");\n        val neighbors = new ArrayList<Integer>();\nNext line of code:\n        for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @DisplayName(\"neighbors() should return iterator with all the neighbors\")\n    void neighbors_iterator_withNull_withNull_withNull_withNull_withNull_withNull() {\n        vertex.addNeighbor(1, \"one\");\n        vertex.addNeighbor(2, \"two\");\n        vertex.addNeighbor(3, \"three\");\n        val neighbors = new ArrayList<Integer>();\nNext line of code:\n        for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @DisplayName(\"neighbors() should return iterator with all the neighbors\")\n    void neighbors_iterator_withNull_withNull_withNull_withNull_withNull_withNull_withNull() {\n        vertex.addNeighbor(1, \"one\");\n        vertex.addNeighbor(2, \"two\");\n        vertex.addNeighbor(3, \"three\");\n        val neighbors = new ArrayList<Integer>();\nNext line of code:\n        for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @DisplayName(\"neighbors() should return iterator with all the neighbors\")\n    void neighbors_iterator_withNull_withNull_withNull_withNull_withNull_withNull_withNull_withNull() {\n        vertex.addNeighbor(1, \"one\");\n        vertex.addNeighbor(2, \"two\");\n        vertex.addNeighbor(3, \"three\");\n        val neighbors = new ArrayList<Integer>();\nNext line of code:\n        for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @DisplayName(\"neighbors() should return iterator with all the neighbors\")\n    void neighbors_iterator_withNull_withNull_withNull_withNull_withNull_withNull_withNull_withNull_withNull() {\n        vertex.addNeighbor(1, \"one\");\n        vertex.addNeighbor(2, \"two\");\n        vertex.addNeighbor(3, \"three\");\n        val neighbors = new ArrayList<Integer>();\nNext line of code:\n        for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @DisplayName(\"", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                   self.parser(self.choice, cap=self.cap)\n                    continue\n                except:\n                    print(self.fatal+\"Invalid option\"+self.blk)\n                    continue\n            except:\n                print(self.fatal+\"Invalid option\"+self.blk)\n                continue\n    def parser(self, option, cap=None):\n        if option == 'list':\n            self.print_usage()\n            self.print_packets(cap)\n            return\n        elif option == 'help':\n            self.print_usage()\n            return\n        elif option == 'exit':\n            return\n        else:\n            self.packet = self.cap[int(option)]\n            self.parser(self.packet, cap=cap)\n            return\n    def parser(self, packet, cap=None):\n        if not cap:\n            cap = self.cap\n        self.packet = packet\n        self.print_packet(self.packet)\n        self.print_summary(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.packet)\n        self.print_fields(self.pack", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 169);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 6;\n            // \n            // label3\n            // \n            this.label3.AutoSize = true;\n            this.label3.ForeColor = System.Drawing.Color.White;\n            this.label3.Location = new System.Drawing.Point(5, 172);\n            this.label3.Name = \"label3\";\n            this.label3.Size = new System.Drawing.Size(61, 13);\n            this.label3.TabIndex = 198;\n            this.label3.Text = \"Report Type:\";\n            // \n            // useCreationDateCheckBox\n            // \n            this.useCreationDateCheckBox.AutoSize = true;\n            this.useCreationDateCheckBox.ForeColor = System.Drawing.Color.Black;\n            this.useCreationDateCheckBox.Location = new System.Drawing.Point(328, 169);\n            this.useCreationDateCheckBox.Name = \"useCreationDateCheckBox\";\n            this.useCreationDateCheckBox.Size = new System.Drawing.Size(100, 17);\n            this.useCreationDateCheckBox.TabIndex = 199;\n            this.useCreationDateCheckBox.Text = \"Use Creation Date\";\n            this.useCreationDateCheckBox.UseVisualStyleBackColor = true;\n            this.useCreationDateCheckBox.CheckedChanged += new System.EventHandler(this.useCreationDateCheckBox_CheckedChanged);\n            // \n            // rptParamsDiag\n            // \n            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               if (isReturnAllTypes()) {\n                    QName qname = new QName(targetNamespace, sdoTypeName);\n                    getGeneratedTypes().put(qname, lookup);\n                }\n                return true;\n            }\n        }\n        return false;\n", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate', 'manager_id': False})\n    def holidays_cancel(self, cr, u", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets whether the Control is visible or not\n        /// </summary>\n        bool IBOColSelector.ControlVisible\n        {\n            get { return this.Visible; }\n", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"Mixer Line {0} {1} {2}\", mixerLine.dwLineID, mixerLine.dwComponentType, mixerLine.dwSource);\n        }\n    }\n}\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\tif (valueObject.getCareContext() instanceof HibernateProxy) // If the proxy is set, there is no need to lazily load, as the proxy knows the id and can\n\t\t{\n\t\t\tObject obj = ((HibernateProxy) valueObject.getC", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\", \"--verbose\", \"--features\", \"%s\" % ' '.join(features), \"--target\", target, \"--release\", \"--no-default-features\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"--\", \"],\n            env=env, verbose=verbose)\n        if status:\n            return status\n        build_end = time()\n        elapsed = build_end - build_start\n        if elapsed > 30:\n            notify_build_done(elapsed)\n        return 0\n\n@Command('clean',\n         description='Clean Servo',\n         category='build')\n@CommandArgument('--target', '-t',\n                 default=None,\n                 help='Cross compile for given target platform')\n@CommandArgument('--release', '-r',\n                 action='store_true',\n                 help='Clean in release mode')\n@CommandArgument('--dev', '-d',\n                 action='store_true',\n                 help='Clean in development mode')\n@CommandArgument('--android',\n                 default=None,\n                 action='store_true',\n                 help='Clean for Android')\n@CommandArgument('--verbose', '-v',\n                 action='store_true',\n                 help='Print verbose output')\ndef clean(target=None, release=False, dev=False, android=None, verbose=False):\n    if android is None:\n        android = self.config[\"build\"][\"android\"]\n    opts = []\n    if target:\n        opts += [\"--target\", target]\n    if release:\n        opts += [\"--release\"]\n    if dev:\n        opts += [\"--dev\"]\n    if android:\n        opts += [\"--android\"]\n    if verbose:\n        opts += [\"--verbose\"]\n    status = call([\"cargo\", \"clean\"], env=self.build_env(), verbose=verbose)\n    if status:\n        return status\n    return 0\n\n@Command('test',\n         description='Run Servo tests',\n         category='build')\n@CommandArgument('--target', '-t',\n                 default=None,\n                 help='Cross compile for given target platform')\n@CommandArgument('--release', '-r',\n                 action='store_true',\n                 help='Run in release mode')\n@CommandArgument('--dev', '-d',\n                 action='store_true',\n                 help='Run in development mode')\n@CommandArgument('--android',\n                 default=None,\n                 action='store_true',\n                 help='Run for Android')\n@CommandArgument('--verbose', '-v',\n                 action='store_true',\n                 help='Print verbose output')\ndef test(target=None, release=False, dev=False, android=None, verbose=False):\n    if android is None:\n        android = self.config[\"build\"][\"android\"]\n    opts = []\n    if target:\n        opts += [\"--target\", target]\n    if release:\n        opts += [\"--release\"]\n    if dev:\n        opts += [\"--dev\"]\n    if android:\n        opts += [\"--android\"]\n    if verbose:\n        opts += [\"--verbose\"]\n    status = call([\"cargo\", \"test\"], env=self.build_env(), verbose=verbose)\n    if status:\n        return status\n    return 0\n\n@Command('bench',\n         description='Run Servo benchmarks',\n         category='build')\n@CommandArgument('--target', '-t',\n                 default=None,\n                 help='Cross compile for given target platform')\n@CommandArgument('--release', '-r',\n                 action='store_true',\n                 help='Run in release mode')\n@CommandArgument('--dev', '-d',\n                 action='store_true',\n                 help='Run in development mode')\n@CommandArgument('--android',\n                 default=None,\n                 action='store_true',\n                 help='Run for Android')\n@CommandArgument('--verbose', '-v',\n                 action='store_true',\n                 help='Print verbose output')\ndef bench(target=None, release=False, dev=False, android=None, verbose=False):\n    if android is None:\n        android = self.config[\"build\"][\"android\"]\n    opts = []\n    if target:\n        opts += [\"--target\", target]\n    if release:\n        opts += [\"--release\"]\n    if dev:\n        opts += [\"--dev\"]\n    if android:\n        opts += [\"--android\"]\n    if verbose:\n        opts += [\"--verbose\"]\n    status = call([\"cargo\", \"bench\"], env=self.build_env(), verbose=verbose)\n    if status:\n        return status\n    return 0\n\n@Command('doc',\n         description='Generate Servo documentation',\n         category='build')\n@CommandArgument('--target', '-t',\n                 default=None,\n                 help='Cross compile for given target platform')\n@CommandArgument('--release', '-r',\n                 action='store_true',\n                 help='Generate in release mode')\n@CommandArgument('--dev', '-d',\n                 action='store_true',\n                 help='Generate in development mode')\n@CommandArgument('--android',\n                 default=None,\n                 action='store_true',\n                 help='Generate for Android')\n@CommandArgument('--verbose', '-v',\n                 action='store_true',\n                 help='Print verbose output')\ndef doc(target=None, release=False, dev=False, android=None, verbose=False):\n    if android is None:\n        android = self.config[\"build\"][\"android\"]\n    opts = []\n    if target:\n        opts += [\"--target\", target]\n    if release:\n        opts += [\"--release\"]\n    if dev:\n        opts += [\"--dev\"]\n    if android:\n        opts += [\"--android\"]\n    if verbose:\n        opts += [\"--verbose\"]\n    status = call([\"cargo\", \"doc\"], env=self.build_env(), verbose=verbose)\n    if status:\n        return status\n    return 0\n\n@Command('fmt',\n         description='Format Servo source code',\n         category='build')\n@CommandArgument('--target', '-t',\n                 default=None,\n                 help='Cross compile for given target platform')\n@CommandArgument('--release', '-r',\n                 action='store_true',\n                 help='Format in release mode')\n@CommandArgument('--dev', '-d',\n                 action='store_true',\n                 help='Format in development mode')\n@CommandArgument('--android',\n                 default=None,\n                 action='store_true',\n                 help='Format for Android')\n@CommandArgument('--verbose', '-v',\n                 action='store_true',\n                 help='Print verbose output')\ndef fmt(target=None, release=False, dev=False, android=None, verbose=False):\n    if android is None:\n        android = self.config[\"build\"][\"android\"]\n    opts = []\n    if target:\n        opts += [\"--target\", target]\n    if release:\n        opts += [\"--release\"]\n    if dev:\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tif (estP == 0 && estN == 0) {\n\t\t\t\treturn this.getScore(new double[] { p, 0 }, true);\n\t\t\t} else {\n\t\t\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            }\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash.Name, gitStash.Message);\n            Stashed.Visible = true;\n            Stashed.GroupByRevision = false;\n            Stashed.ClearDiffs();\n            Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitStash.Diffs, gitStash", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   lattice.Drift(length=0.3)\n    lattice.Drift(length=0.4)\n    lattice.Drift(length=0.5)\n    lattice.Drift(length=0.6)\n    lattice.Drift(length=0.7)\n    lattice.Drift(length=0.8)\n    lattice.Drift(length=0.9)\n    lattice.Drift(length=1.0)\n    lattice.Drift(length=1.1)\n    lattice.Drift(length=1.2)\n    lattice.Drift(length=1.3)\n    lattice.Drift(length=1.4)\n    lattice.Drift(length=1.5)\n    lattice.Drift(length=1.6)\n    lattice.Drift(length=1.7)\n    lattice.Drift(length=1.8)\n    lattice.Drift(length=1.9)\n    lattice.Drift(length=2.0)\n    lattice.Drift(length=2.1)\n    lattice.Drift(length=2.2)\n    lattice.Drift(length=2.3)\n    lattice.Drift(length=2.4)\n    lattice.Drift(length=2.5)\n    lattice.Drift(length=2.6)\n    lattice.Drift(length=2.7)\n    lattice.Drift(length=2.8)\n    lattice.Drift(length=2.9)\n    lattice.Drift(length=3.0)\n    lattice.Drift(length=3.1)\n    lattice.Drift(length=3.2)\n    lattice.Drift(length=3.3)\n    lattice.Drift(length=3.4)\n    lattice.Drift(length=3.5)\n    lattice.Drift(length=3.6)\n    lattice.Drift(length=3.7)\n    lattice.Drift(length=3.8)\n    lattice.Drift(length=3.9)\n    lattice.Drift(length=4.0)\n    lattice.Drift(length=4.1)\n    lattice.Drift(length=4.2)\n    lattice.Drift(length=4.3)\n    lattice.Drift(length=4.4)\n    lattice.Drift(length=4.5)\n    lattice.D", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (this == o) {\n            return true;\n        }\nNext line of code:\n        if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return this.match(that) == 0;\n        }\n        return false;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        return LangUtils.hashCode(this.scheme, this.realm, this.host, this.port);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        return \"AuthScope{\" +\n            \"host='\" + this.host + '\\'' +\n            \", port=\" + this.port +\n            \", realm='\" + this.realm + '\\'' +\n            \", scheme='\" + this.scheme + '\\'' +\n            '}';\n    }\n}", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n   ", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\treturn s;\n\t\t}\n\tpublic String getCSeriennrChargennr() {\n\t\treturn cSeriennrChargennr;\n\t}\n\tpublic void setCSeriennrChargennr(String cSeriennrChargennr) {\n\t\tthis.cSeriennrChargennr = cSeriennrChargennr;\n\t}\n\tpublic BigDecimal getNMenge() {\n\t\treturn nMenge;\n\t}\n\tpublic void setNMenge(BigDecimal nMenge) {\n\t\tthis.nMenge = nMenge;\n\t}\n\tpublic String getCVersion() {\n\t\treturn cVersion;\n\t}\n\tpublic void setCVersion(String cVersion) {\n\t\tthis.cVersion = cVersion;\n\t}\n\tprivate String cSeriennrChargennr;\n\tprivate BigDecimal nMenge;\n\tprivate String cVersion;\n}\n", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tdefault:\n\t\t\t\t\tbase.CSet(feature, value);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void CSet(object value) {\n\t\t\tif (value == null) return;\n\t\t\tif (value is EClassifier) {\n\t\t\t\tEType = (EClassifier)value;\n\t\t\t} else if (value is EGenericType) {\n\t\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t} else {\n\t\t\t\tthrow new ArgumentException(\"Invalid value for ETypedElement\", \"value\");\n\t\t\t//CSet(EStructuralFeature.EGenericType, value);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override object CGet(EStructuralFeature feature) {\n\t\t\tswitch(feature.Name) {\n\t\t\t\tcase \"ordered\" : \n\t\t\t\treturn Ordered;\n\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tcase \"unique\" : \n\t\t\t\treturn Unique;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tcase \"lowerBound\" : \n\t\t\t\treturn LowerBound;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tcase \"upperBound\" : \n\t\t\treturn UpperBound;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eType\" : \n\t\t\t\t\treturn EType;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\treturn EGenericType;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tdefault:\n\t\t\t\treturn base.CGet(feature);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void CAdd(object value) {\n\t\t\tif (value == null) return;\n\t\t\tif (value is EClassifier) {\n\t\t\tEType = (EClassifier)value;\n\t\t} else if (value is EGenericType) {\n\t\t\tEGenericType = (EGenericType)value;\n\t\t} else {\n\t\t\tthrow new ArgumentException(\"Invalid value for ETypedElement\", \"value\");\n\t\t\t//CAdd(EStructuralFeature.EGenericType, value);\n\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t#endregion\n\t\t\n\t\t#region EClassifier\n\t\tpublic  EClassifier EType {\n\t\t\tget {\n\t\t\t\treturn _eType;\n\t\t\t}\n\t\t\tset {\n\t\t\t\t\tEClassifier oldValue = _eType;\n\t\t\t\t\t_eType = value;\n\t\t\t\tif (oldValue != null) (oldValue as CObjectImpl).CContainer = null;\n\t\t\t\tif (value != null) (value as CObjectImpl).CContainer = this;\n\t\t\t\tif (CNotificationRequired(ECoreMeta.cINSTANCE.Package.ETypedElement_EType)) {\n\t\t\t\t\tCNotify(new CAction(this, CActionType.SET, ECoreMeta.cINSTANCE.Package.ETypedElement_EType, oldValue, value, -1, null));\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t\tpublic  void SetEType(EClassifier value, object data) {\n\t\t\tEClassifier oldValue = _eType;\n\t\t\t_eType = value;\n\t\t\tif (oldValue != null) (oldValue as CObjectImpl).CContainer = null;\n\t\t\tif (value != null) (value as CObjectImpl).CContainer = this;\n\t\t\tif (CNotificationRequired(ECoreMeta.cINSTANCE.Package.ETypedElement_EType)) {\n\t\t\t\tCNotify(new CAction(this, CActionType.SET, ECoreMeta.cINSTANCE.Package.ETypedElement_EType, oldValue, value, -1, data));\n\t\t\t}\t\n\t\t}\n\t\t#endregion\n\t\t\n\t\t#region EGenericType\n\t\tpublic  EGenericType EGenericType {\n\t\t\tget {\n\t\t\treturn _eGenericType;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tEGenericType oldValue = _eGenericType;\n\t\t\t\t_eGenericType = value;\n\t\t\t\tif (oldValue != null) (oldValue as CObjectImpl).CContainer = null;\n\t\t\t\tif (value != null) (value as CObjectImpl).CContainer = this;\n\t\t\t\tif (CNotificationRequired(ECoreMeta.cINSTANCE.Package.ETypedElement_EGenericType)) {\n\t\t\t\t\tCNotify(new CAction(this, CActionType.SET,", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   archive_index = load_archive_index(args.index_file)\n\n\nif __name__ == '__main__':\n    main()\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.bit_ss, self.bit_es = ptype == 'BITS'\n        self.cmd_token = mosi\n        self.cmd_token_bits = miso\n        # TODO: Decode all bits.\n        self.putx([ptype,", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         if (!(in_grouping_b(g_v, 97, 259))) {\n            break lab1;\n          }\n          break lab0;\n        } while (false);\n        if (cursor >= limit) {\n          return false;\n       ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (cls != null) {\n                    o = cls.newInstance();\n                    if (o instanceof SpyPlugin) {\n                        ((SpyPlugin)o).handle(channel, dins);\n                    }\n                }\n            } catch (Exception ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n            if (o != null) {\n                cd.last = o;\n                cd.last_time = utime_now();\n                cd.last_size = msg_size;\n                cd.last_fingerprint = fingerprint;\n                cd.last_hz = cd.hz;\n                cd.last_jitter = cd.jitter;\n                cd.last_bandwidth = cd.bandwidth;\n                cd.last_errors = cd.nerrors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors = cd.last_errors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors = cd.last_errors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors = cd.last_errors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors = cd.last_errors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors = cd.last_errors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors = cd.last_errors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors = cd.last_errors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors = cd.last_errors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors = cd.last_errors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors = cd.last_errors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors = cd.last_errors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors = cd.last_errors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors = cd.last_errors;\n                cd.last_time = cd.last_time;\n                cd.last_size = cd.last_size;\n                cd.last_fingerprint = cd.last_fingerprint;\n                cd.last_hz = cd.last_hz;\n                cd.last_jitter = cd.last_jitter;\n                cd.last_bandwidth = cd.last_bandwidth;\n                cd.last_errors =", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   return result\n    def _get_key_usage(self):\n        try:\n            current_key_ext = self.cert.get_extension_for_class(x509.KeyUsage)\n            current_key_usage = current_key_ext.value\n", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\t\tif (s.find (i) != s.end ()) {\n\t\t\t\t\tstill_there = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\"\"\", file=f)\n    print(\"\\t\\t\\t\\t\\tboost::shared_ptr<Connection> c = i->second;\", file=f)\n    print(\"\\t\\t\\t\\t\\t\\tc->signal (r);\", file=f)\n    print(\"\\t\\t\\t\\t}\", file=f)\n    print(\"\\t\\t}\", file=f)\n    print(\"\\t\\t}\", file=f)\n    print(\"\\t\\treturn;\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\t\tif (r.size () > 0) {\n\t\t\t\temit (r);\n\t\t\t}\n\t\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n    print(\"\\t}\", file=f)\n    print(\"\"\"\n\t\tif (ir) {\n\t\t\tir->event_loop = event_loop;\n\t\t}\n\"\"\", file=f)\n   ", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   if X.begin >= 0x10000:\n        # The first word is the same as the second word.\n        # The second word is the same as the first word.\n        return [ X[0], X[1] ]\n    else:\n        # The first word is different from the second word.\n        # The second word is the same as the first word.\n        return [ X[0], X[1] ]\n\ndef get_interval_for_utf16_value(X):\n    \"\"\"Returns the interval that contains the given utf16 value.\n    \"\"\"\n    if X >= 0x10000:\n        return [X]\n    else:\n        return [X[0], X[1]]\n\ndef get_utf16_value_for_interval(X):\n    \"\"\"Returns the utf16 value that is contained in the given interval.\n    \"\"\"\n    if X >= 0x10000:\n        return X\n    else:\n        return X[0], X[1]\n\ndef get_utf16_value_for_utf16_value(X):\n    \"\"\"Returns the utf16 value that is contained in the given utf16 value.\n    \"\"\"\n    if X >= 0x10000:\n        return X\n    else:\n        return X[0], X[1]\n\ndef get_utf16_value_for_utf16_value_and_interval(X, X_interval):\n    \"\"\"Returns the utf16 value that is contained in the given utf16 value and\n       interval.\n    \"\"\"\n    if X >= 0x10000:\n        return X\n    else:\n        return X[0], X[1]\n\ndef get_utf16_value_for_utf16_value_and_interval_and_utf16_value(X, X_interval, Y):\n    \"\"\"Returns the utf16 value that is contained in the given utf16 value and\n       interval and the given utf16 value.\n    \"\"\"\n    if X >= 0x10000:\n        return X\n    else:\n        return X[0], X[1]\n\ndef get_utf16_value_for_utf16_value_and_interval_and_utf16_value_and_utf16_value(X, X_interval, Y, Z):\n    \"\"\"Returns the utf16 value that is contained in the given utf16 value and\n       interval and the given utf16 value and the given utf16 value.\n    \"\"\"\n    if X >= 0x10000:\n        return X\n    else:\n        return X[0], X[1]\n\ndef get_utf16_value_for_utf16_value_and_interval_and_utf16_value_and_utf16_value_and_utf16_value(X, X_interval, Y, Z, W):\n    \"\"\"Returns the utf16 value that is contained in the given utf16 value and\n       interval and the given utf16 value and the given utf16 value and the\n       given utf16 value.\n    \"\"\"\n    if X >= 0x10000:\n        return X\n    else:\n        return X[0], X[1]\n\ndef get_utf16_value_for_utf16_value_and_interval_and_utf16_value_and_utf16_value_and_utf16_value_and_utf16_value(X, X_interval, Y, Z, W, X_interval_2):\n    \"\"\"Returns the utf16 value that is contained in the given utf16 value and\n       interval and the given utf16 value and the given utf16 value and the\n       given utf16 value and the given utf16 value.\n    \"\"\"\n    if X >= 0x10000:\n        return X\n    else:\n        return X[0], X[1]\n\ndef get_utf16_value_for_utf16_value_and_interval_and_utf16_value_and_utf16_value_and_utf16_value_and_utf16_value_and_utf16_value(X, X_interval, Y, Z, W, X_interval_2, X_interval_3):\n    \"\"\"Returns the utf16 value that is contained in the given utf16 value and\n       interval and the given utf16 value and the given utf16 value and the\n       given utf16 value and the given utf16 value and the given utf16 value.\n    \"\"\"\n    if X >= 0x10000:\n        return X\n    else:\n        return X[0], X[1]\n\ndef get_utf16_value_for_utf16_value_and_interval_and_utf16_value_and_utf16_value_and_utf16_value_and_utf16_value_and_utf16_value_and_utf16_value(X, X_interval, Y, Z, W, X_interval_2, X_interval_3, X_interval_4):\n    \"\"\"Returns", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = t.pos;\n\t\t\twhile (StartOf(11)) {\n\t\t\t\tGet();\n\t\t\t}\n\t\t\tExpect(27);\n\t\t\tif (t.pos > beg)\n\t\t\t\t sym.attrPos = new Position(beg, t.pos, 0);\n\t\t} else {\n\t\t\tSemErr(\"bad attribute\");\n\t\t}\n\t}\n\tvoid SimSet(out CharSet s) {\n\t\tCharSet s2;\n\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc_list.append(edi_doc)\n        return edi_doc_list\n    def _edi_import_company(self, cr, uid, edi_document, context=None):\n        # TODO: for multi-company setups, we currently import the document in the\n        #       user's current company, but we should perhaps foresee a way to select\n        #       the desired company among the user's allowed companies\n        self._edi_requires_attributes(('company_id','company_address','order_line','date_order','currency'), edi_document)\n        res_partner_address = self.pool.get('res.partner.address')\n        res_partner = self.pool.get('res.partner')\n        # imported company = as a new partner\n        src_company_id, src_company_name = edi_document.pop('company_id')\n        partner_id = self.edi_import_relation(cr, uid, 'res.partner', src_company_name,\n                                              src_company_id, context=context)\n        partner_value = {'supplier': True}\n        res_partner.write(cr, uid, [partner_id], partner_value, context=context)\n        # imported company_address = new partner address\n        address_info = edi_document.pop('company_address')\n        address_info['partner_id'] = (src_company_id, src_company_name)\n        address_info['type'] = 'default'\n        address_id = res_partner_address.edi_import(cr, uid, address_info, context=context)\n        # modify edi_document to refer to new partner/address\n        partner_address = res_partner_address.browse(cr, uid, address_id, context=context)\n        edi_document['partner_id'] = (src_company_id, src_company_name)\n        edi_document.pop('partner_address', False) # ignored\n        address_edi_m2o = self.edi_m2o(cr, uid, partner_address, context=context)\n        edi_document['partner_order_id'] = address_edi_m2o\n        edi_document['partner_invoice_id'] = address_edi_m2o\n        edi_document['partner_shipping_id'] = address_edi_m2o\n        return partner_id\n    def _edi_get_pricelist(self, cr, uid, partner_id, currency, context=None):\n        # TODO: refactor into common place for purchase/sale, e.g. into product module\n        partner_model = self.pool.get('res.partner')\n        partner = partner_model.browse(cr, uid, partner_id, context=context)\n        pricelist = partner.property_product_pricelist\n        if not pricelist:\n            pricelist = self.pool.get('ir.model.data').get_object(cr, uid, 'product', 'list0', context=context)\n        if not pricelist.currency_id == currency:\n            # look for a pricelist with the right type and currency, or make a new one\n            pricelist_type = 'sale'\n            product_pricelist = self.pool.get('product.pricelist')\n            match_pricelist_ids = product_pricelist.search(cr, uid,[('type','=',pricelist_type),\n                                                                        ('currency_id','=',currency.id)])\n            if match_pricelist_ids:\n                pricelist_id = match_pricelist_ids[0]\n            else:\n                pricelist_name = _('EDI Pricelist (%s)') % (currency.name,)\n                pricelist_id = product_pricelist.create(cr, uid, {'name': pricelist_name,\n                                                                    'type': pricelist_type,\n                                                                    'currency_id': currency.id,\n                                                                    })\n                self.pool.get('", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n}", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                }\n            }\n            nameMap.put(name, permissions);\n        }\n    @Test\n    public void testHasPermission_virtualNode_permissions() throws Exception\n    {\n        setUpTestPermissions();\n        // virtual permission", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.ID_INPUT_MOUSE\n            assert device.sys_name == 'mouse0'\n    @pytest.mark.match\n    def test_list_devices_nomatch(self, context):\n        devices = list(context.list_devices(\nNext line of code:\n            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0',\n            nomatch=True))\n        for device in devices:\n            assert device.subsystem != 'input'\n            assert not device.ID_INPUT_MOUSE\n            assert not device.sys_name == 'mouse0'\n    @pytest.mark.match\n    def test_list_devices_nomatch_unfulfillable(self, context):\n        devices = list(context.list_devices(\nNext line of code:\n            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0',\n            nomatch=True))\n        for device in devices:\n            assert not device\n    @pytest.mark.match\n    def test_list_devices_match(self, context):\n        devices = list(context.list_devices(\nNext line of code:\n            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0',\n            match=True))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.ID_INPUT_MOUSE\n            assert device.sys_name == 'mouse0'\n    @pytest.mark.match\n    def test_list_devices_match_nomatch(self, context):\n        devices = list(context.list_devices(\nNext line of code:\n            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0',\n            match=True, nomatch=True))\n        for device in devices:\n            assert device.subsystem != 'input'\n            assert not device.ID_INPUT_MOUSE\n            assert not device.sys_name == 'mouse0'\n    @pytest.mark.match\n    def test_list_devices_match_unfulfillable(self, context):\n        devices = list(context.list_devices(\nNext line of code:\n            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0',\n            match=True, nomatch=True))\n        for device in devices:\n            assert not device\n    @pytest.mark.match\n    def test_list_devices_match_passthrough(self, context):\n        devices = list(context.list_devices(\nNext line of code:\n            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0',\n            match=True, match_subsystem='input', match_sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.ID_INPUT_MOUSE\n            assert device.sys_name == 'mouse0'\n    @pytest.mark.match\n    def test_list_devices_match_passthrough_nomatch(self, context):\n        devices = list(context.list_devices(\nNext line of code:\n            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0',\n            match=True, match_subsystem='input', match_sys_name='mouse0',\n            nomatch=True))\n        for device in devices:\n            assert device.subsystem != 'input'\n            assert not device.ID_INPUT_MOUSE\n            assert not device.sys_name == 'mouse0'\n    @pytest.mark.match\n    def test_list_devices_match_passthrough_unfulfillable(self, context):\n        devices = list(context.list_devices(\nNext line of code:\n            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0',\n            match=True, match_subsystem='input', match_sys_name='mouse0',\n            nomatch=True))\n        for device in devices:\n            assert not device\n    @pytest.mark.match\n    def test_list_devices_match_passthrough_nomatch_unfulfillable(self,\n                                                                  context):\n        devices = list(context.list_devices(\nNext line of code:\n            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0',\n            match=True, match_subsystem='input', match_sys_name='mouse0',\n            nomatch=True))\n        for device in devices:\n            assert not device\n    @pytest.mark.match\n    def test_list_devices_match_passthrough_nomatch_unfulfillable_nomatch(\n            self, context):\n        devices = list(context.list_devices(\nNext line of code:\n            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0',\n            match=True, match_subsystem='input', match_sys_name='mouse0',\n            nomatch=True, nomatch=True))\n        for device in devices:\n            assert not device\n    @pytest.mark.match\n    def test_list_devices_match_passthrough_nomatch_unfulfillable_nomatch(\n            self, context):\n        devices = list(context.list_devices(\nNext line of", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   app = Device(deviceToken)\n    app.check_inspection()\n    app.newUser(loginId, password)\n    app.mainmenu()\n    app.endTutorial()\n    app.cardUpdate()\n    app.cardCategoryUpdate()\n    app.cardComboUpdate()\n    app.edit()\n    app.save([\"7803549\", \"15208758\", \"17258743\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\"], \"17258743\")\n    app.friendlist()\n    app.likeUseranswers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "       elif (index_elements[0] == \"Alpha\"):\n            for j in xrange(1, len(index_elements)):\n                if (index_elements[j] != \"*******\"):\n                    rv['alphaCoefficients'].append(float(", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (Parent is Mobile)\n            {\n                ((Mobile)Parent).Send(new ItemID(this));\n            }\n        }\n    }\n}", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iterator = devices.iterator(); iterator.hasNext();) {\n            String device = iterator.next();\n            // DRS 20181025 - Added 1 - If we get an error here, return empty list and stop any more attempts", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {\n      jobs.put(Version.DAY_BY_DAY_STICKERS, new DayByDayStickersMigrationJob());\n    }\n    if (lastSeenVersion < Version.BLOB_LOCATION) {\n      jobs.put(Version.BLOB_LOCATION, new BlobLocationMigrationJob());\n    }\n    if (lastSeenVersion < Version.GV2) {\n      jobs.put(Version.GV2, new AttributesMigrationJob());\n    }\n    if (lastSeenVersion < Version.GV2_2) {\n      jobs.put(Version.GV2_2, new AttributesMigrationJob());\n    }\n    if (lastSeenVersion < Version.SMS_STORAGE_SYNC) {\n      jobs.put(Version.SMS_STORAGE_SYNC, new SmsStorageSyncMigrationJob());\n    }\n    if (lastSeenVersion < Version.APPLY_UNIVERSAL_EXPIRE) {\n      jobs.put(Version.APPLY_UNIVERSAL_EXPIRE, new ApplyUniversalExpireMigrationJob());\n    }\n    if (lastSeenVersion < Version.SENDER_KEY) {\n      jobs.put(Version.SENDER_KEY, new SenderKeyMigrationJob());\n    }\n    if (lastSeenVersion < Version.SENDER_", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length == 0) {\n        throw new RuntimeException(\"Missing regex in line \" + lineCount);\n      }\n      String regex = split[0];\n      String type = split[1];\n      String priority = split[2];\n      Set<String> overwritableTypes = new HashSet<>();\n      if (split.length > 3) {\n        overwritableTypes = Arrays.asList(split[3].split(\",\"));\n      }\n      entries.add(new Entry(Arrays.asList(Pattern.compile(regex, ignoreCase)), type, overwritableTypes, Double.parseDouble(priority)));\n    }\n    Collections.sort(entries, new Comparator<Entry>() {\n      @Override\n      public int compare(Entry o1, Entry o2) {\n        return o1.priority - o2.priority;\n      }\n    });\n    return entries;\n  }\n  /**\n   *  Find the first index of the given document where the regex matches.\n   *  @param regex The regex to match\n   *  @param document The document to search\n   *  @param start The index of the first token to search\n   *  @param myLabels The set of labels that we are allowed to assign\n   *  @param ignoreCase Whether to ignore case when matching\n   *  @return The index of the first token that matches the regex, or -1 if no match is found\n   */\n  private int findStartIndex(Entry entry, List<CoreLabel> document, int start, Set<String> myLabels, boolean ignoreCase) {\n    int end = start + entry.regex.size();\n    for (int i = start; i < end; i++) {\n      if (entry.regex.get(i - start).matcher(document.get(i).word()).matches()) {\n        if (entry.exact.get(i - start) != null) {\n          if (entry.exact.get(i - start).equals(entry.regex.get(i - start).toString())) {\n            return i;\n          }\n        }\n        if (entry.exact.get(i - start) == null) {\n          if (entry.regex.get(i - start).toString().equals(entry.type)) {\n            return i;\n          }\n        }\n        if (entry.overwritableTypes.contains(entry.type)) {\n          if (entry.exact.get(i - start) == null) {\n            myLabels.add(entry.type);\n          }\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n  @Override\n  public void write(ObjectOutputStream out) throws IOException {\n    out.writeObject(entries);\n  }\n  @Override\n  public void readFields(ObjectInputStream in) throws IOException, ClassNotFoundException {\n    entries = (List<Entry>) in.readObject();\n  }\n  @Override\n  public void write(ObjectOutputStream out, Properties properties) throws IOException {\n    out.writeObject(properties);\n  }\n  @Override\n  public void readFields(ObjectInputStream in, Properties properties) throws IOException, ClassNotFoundException {\n    this.ignoreCase = properties.getProperty(\"ignoreCase\", \"false\").equals(\"true\");\n    this.validPosPattern = Pattern.compile(properties.getProperty(\"validPosPattern\", \"\"));\n    this.myLabels = new HashSet<>(Arrays.asList(properties.getProperty(\"myLabels\", \"\").split(\",\"", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           if SCons.Util.is_List(env['ENV'][include[0]]):\n                for p in env['ENV'][include[0]]:\n                    if SCons.Util.is_List(p):\n                        for sub_path in p:\n                            if SCons.Util.is_List(sub_path):\n                                for sub_sub_path in sub_path:\n                                    if os.path.isfile(os.path.join(source_dir, sub_sub_path)):\n                                        return n\n                    else:\n                        if os.path.isfile(os.path.join(source_dir, p)):\n                            return n\n            else:\n                if os.path.isfile(os.path.join(source_dir, n)):\n                    return n\n        return None\n    def find_include(self, include, source_dir, path):\n        try:\n            sub_path = path[include[0]]\n        except (IndexError, KeyError):\n            sub_path = ()\n        try_names = self._latex_names(include)\n        for n in try_names:\n            # see if we find it using the path in env[var]\n            if SCons.Util.is_List(env['ENV'][include[0]]):\n                for p in env['ENV'][include[0]]:\n                    if SCons.Util.is_List(p):\n                        for sub_path in p:\n                            if SCons.Util.is_List(sub_path):\n                                for sub_sub_path in sub_path:\n                                    if os.path.isfile(os.path.join(source_dir, sub_sub_path)):\n                                        return n\n                            else:\n                                if os.path.isfile(os.path.join(source_dir, p)):\n                                    return n\n            else:\n                if os.path.isfile(os.path.join(source_dir, n)):\n                    return n\n        return None\n    def find_include_path(self, include, source_dir, path):\n        try:\n            sub_path = path[include[0]]\n        except (IndexError, KeyError):\n            sub_path = ()\n        try_names = self._latex_names(include)\n        for n in try_names:\n            # see if we find it using the path in env[var]\n            if SCons.Util.is_List(env['ENV'][include[0]]):\n                for p in env['ENV'][include[0]]:\n                    if SCons.Util.is_List(p):\n                        for sub_path in p:\n                            if SCons.Util.is_List(sub_path):\n                                for sub_sub_path in sub_path:\n                                    if os.path.isfile(os.path.join(source_dir, sub_sub_path)):\n                                        return n\n                            else:\n                                if os.path.isfile(os.path.join(source_dir, p)):\n                                    return n\n            else:\n                if os.path.isfile(os.path.join(source_dir, n)):\n                    return n\n        return", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def features(self, query):\n        \"\"\"Return an iterable which yields instances of Feature for features within the passed query.\n        Required arguments:\n          query -- a Query instance specifying the region for which features should be returned\n        \"\"\"\n        return None\nNext line of code:", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       if self.want.ip == '*' and self.want.port != '*':\n            raise F5ModuleError(\n                \"Specifying a port number requires that an IP address be specified\"\n            )\n        if self.want.ip == '*'", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   def fill(self, values):\n        \"\"\"\n        Args:\n            values (list): [] to remove all vars or [(\"var\", \"value\", \"type\"), ...] to fill the view\n        \"\"\"\n        if set(values) == set(self.all_vars):\n            return False\n        else:\n            for value in self._values_to_remove(values):\n                self.location.fill(value[0])\n                self.playbook_name.fill(value[0])\n                self.playbook_display_name.fill(value[0])\n                self.script.fill(value[0])\n                self.data.fill(value[0])\n                self.validate_button.click()\n            for value in self._values_to_add(values):\n                self.location.fill(value[0])\n                self.playbook_name.fill(value[0])\n                self.playbook_display_name.fill(value[0])\n                self.script.fill(value[0])\n                self.data.fill(value[0])\n                self.validate_button.click()\n            return True\n        return False\n    @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text == 'Add Automate Method' and\n            self.datastore.is_opened and\n            check_tree_path(\n                self.datastore.tree.currently_selected,\n                self.context['object'].tree_path))\nclass MethodEditView(AutomateExplorerView):\n    title = Text('#explorer_title_text')\n    fqdn = SummaryFormItem('Main Info', 'Fully Qualified Name', text_filter=parsetime.from_iso_with_utc)\n    name = SummaryFormItem('Main Info', 'Name')\n    display_name = SummaryFormItem('Main Info', 'Display Name')\n    location = SummaryFormItem('Main Info', 'Location')\n    created_on = SummaryFormItem('Main Info', 'Created On', text_filter=parsetime.from_iso_with_utc)\n    inputs = View.nested(Inputs)\n    playbook_name = Input(name='name')\n    playbook_display_name = Input(name='display_name')\n    repository = PlaybookBootstrapSelect('provisioning_repository_id')\n    machine_credential = PlaybookBootstrapSelect('provisioning_machine_credential_id')\n    hosts = Input('provisioning_inventory')\n    max_ttl = Input('provisioning_execution_ttl')\n    escalate_privilege = BootstrapSwitch('provisioning_become_enabled')\n    verbosity = PlaybookBootstrapSelect('provisioning_verbosity')\n    playbook_input_parameters = PlaybookInputParameters()\n    edit_button = Button('Edit')\n    delete_button = Button('Delete')\n    def fill(self, values):\n        \"\"\"\n        Args:\n            values (list): [] to remove all vars or [(\"var\", \"value\", \"type\"), ...] to fill the view\n        \"\"\"\n        if set(values) == set(self.all_vars):\n            return False\n        else:\n            for value in self._values_to_remove(values):\n                self.location.fill(value[0])\n                self.playbook_name.fill(value[0])\n                self.playbook_display_name.fill(value[0])\n                self.script.fill(value[0])\n                self.data.fill(value[0])\n                self.validate_button.click()\n            for value in self._values_to_add(values):\n                self.location.fill(value[0])\n                self.playbook_name.fill(value[0])\n                self.playbook_display_name.fill(value[0])\n                self.script.fill(value[0])\n                self.data.fill(value[0])\n                self.validate_button.click()\n            return True\n        return False\n    @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text == 'Edit Automate Method' and\n            self.datastore.is_opened and\n            check_tree_path(\n                self.datastore.tree.currently_selected,\n                self.context['object'].tree_path))\nclass MethodDeleteView(AutomateExplorerView):\n    title = Text('#explorer_title_text')\n    fqdn = SummaryFormItem('Main Info', 'Fully Qualified Name', text_filter=parsetime.from_iso_with_utc)\n    name = SummaryFormItem('Main Info', 'Name')\n    display_name = SummaryFormItem('Main Info', 'Display Name')\n    location = SummaryFormItem('Main Info', 'Location')\n    created_on = SummaryFormItem('Main Info', 'Created On', text_filter=parsetime.from_iso_with_utc)\n    inputs = View.nested(Inputs)\n    playbook_name = Input(name='name')\n    playbook_display_name = Input(name='display_name')\n    repository = PlaybookBootstrapSelect('provisioning_repository_id')\n    machine_credential = PlaybookBootstrapSelect('provisioning_machine_credential_id')\n    hosts = Input('provisioning_inventory')\n    max_ttl = Input('provisioning_execution_ttl')\n    escalate_privilege = BootstrapSwitch('provisioning_become_enabled')\n    verbosity = PlaybookBootstrapSelect('provisioning_verbosity')\n    playbook_input_parameters = PlaybookInputParameters()\n    delete_button = Button('Delete')\n    def fill(self, values):\n        \"\"\"\n        Args:\n            values (list): [] to remove all vars or [(\"var\", \"value\", \"type\"), ...] to fill the view\n        \"\"\"\n        if set(values) == set(self.all_vars):\n            return False\n        else:\n            for value in self._values_to_remove(values):\n                self.location.fill(value[0])\n                self.playbook_name.fill(value[0])\n                self.playbook_display_name.fill(value[0])\n                self.script.fill(value[0])\n                self.data.fill(value[0])\n                self", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"Action class not found: \" + className);\n        }\n        return result;\n    }\n    public void publish(EventObject event) {\n        if (event.getEventType() == EventType.ACTION) {\n            // get the action object\n            IAction action = (IAction) event.getSource();\n            // get the action name\n            String actionName = action.getActionName();\n            // get the action class\n            String actionClass = action.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class\";\n            // get the action class\n            IAction actionObject = getActionObject(actionClassPath);\n            // get the action name\n            String actionName = actionObject.getActionName();\n            // get the action class\n            String actionClass = actionObject.getActionClass();\n            // get the action class name\n            String actionClassName = actionClass.replace(\".class\", \"\");\n            // get the action class name\n            String actionClassPath = actionClassName + \".class", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return embedManifestDllAction(target, source, env)\n        else:\n            raise SCons.Errors.UserError(\"Unable to find manifest file %s\" % manifestSrc)\n    else:\n        return 0\ndef embedManifestDllCheckAction(target, source, env):\n    \"\"\"Function run by embedManifestDllCheckAction to check for existence of manifest\n    and other conditions, and embed the manifest by calling embedManifestDllAction if so.\"\"\"\n    if env.get('WINDOWS_EMBED_MANIFEST', 0):\n        manifestSrc = target[0].abspath + '.manifest'\n        if os.path.exists(manifestSrc):\n            return embedManifestDllAction(target, source, env)\n        else:\n            raise SCons.Errors.UserError(\"Unable to find manifest file %s\" % manifestSrc)\n    else:\n        return 0\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function run by embedManifestExeCheckAction to check for existence of manifest\n    and other conditions, and embed the manifest by calling embedManifestExeAction if so.\"\"\"\n    if env.get('WINDOWS_EMBED_MANIFEST', 0):\n        manifestSrc = target[0].abspath + '.manifest'\n        if os.path.exists(manifestSrc):\n            return embedManifestExeAction(target, source, env)\n        else:\n            raise SCons.Errors.UserError(\"Unable to find manifest file %s\" % manifestSrc)\n    else:\n        return 0\ndef embedManifestExeCheckAction(target, source, env):\n    \"\"\"Function run by embedManifestExeCheckAction to check for existence of manifest\n    and other conditions, and embed the manifest by calling embedManifestExeAction if so.\"\"\"\n    if env.get('WINDOWS_EMBED_MANIFEST', 0):\n        manifestSrc = target[0].abspath + '.manifest'\n        if os.path.exists(manifestSrc):\n            return embedManifestExeAction(target, source, env)\n        else:\n            raise SCons.Errors.UserError(\"Unable to find manifest file %s\" % manifestSrc)\n    else:\n        return 0\ndef embedManifestExeAction(target, source, env):\n    \"\"\"Function run by embedManifestExeAction to embed the manifest.\"\"\"\n    if env.get('WINDOWS_EMBED_MANIFEST', 0):\n        manifestSrc = target[0].abspath + '.manifest'\n        manifestDst = target[0].abspath + '.manifest.embedded'\n        if os.path.exists(manifestDst):\n            raise SCons.Errors.UserError(\"Unable to find manifest file %s\" % manifestDst)\n        else:\n            print \"Embedding manifest %s into %s\" % (manifestSrc, target[0].abspath)\n            os.system(\"msiexec /i %s /qn /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /p %s /", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(getSelectedResources(), new SubProgressMonitor(new IProgressMonitor() {\n                public void subTask(IProgressMonitor monitor, ITask task) {\n                    // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n                    monitor.subTask(getOperationMessage());\n                }\n                public void done() {\n                    // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n                    monitor.done();\n                }\n                public void done(IProgressMonitor monitor) {\n                    // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n                    monitor.done();\n                }\n                public void progress(IProgressMonitor monitor, int taskId, int stage) {\n                    // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n                    monitor.progress(taskId, stage);\n                }\n                public void progress(IProgressMonitor monitor, int taskId, int stage, int total) {\n                    // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n                    monitor.progress(taskId, stage, total);\n                }\n                public void progress(IProgressMonitor monitor, int taskId, int stage, int total, int workRemaining) {\n                    // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n                    monitor.progress(taskId, stage, total, workRemaining);\n                }\n                public void progress(IProgressMonitor monitor, int taskId, int stage, int total, int workRemaining, int workRemainingUnit) {\n                    // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n                    monitor.progress(taskId, stage, total, workRemaining, workRemainingUnit);\n                }\n                public void progress(IProgressMonitor monitor, int taskId, int stage, int total, int workRemaining, int workRemainingUnit, int workRemainingUnitMultiplier) {\n                    // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n                    monitor.progress(taskId, stage, total, workRemaining, workRemainingUnit, workRemainingUnitMultiplier);\n                }\n                public void progress(IProgressMonitor monitor, int taskId, int stage, int total, int workRemaining, int workRemainingUnit, int workRemainingUnitMultiplier, int workRemainingUnitMultiplierMultiplier) {\n                    // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n                    monitor.progress(taskId, stage, total, workRemaining, workRemainingUnit, workRemainingUnitMultiplier, workRemainingUnitMultiplierMultiplier);\n                }\n                public void progress(IProgressMonitor monitor, int taskId, int stage, int total, int workRemaining, int workRemainingUnit, int workRemainingUnitMultiplier, int workRemainingUnitMultiplierMultiplier, int workRemainingUnitMultiplierMultiplierMultiplier) {\n                    // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n                    monitor.progress(taskId, stage, total, workRemaining, workRemainingUnit, workRemainingUnitMultiplier, workRemainingUnitMultiplierMultiplier, workRemainingUnitMultiplierMultiplierMultiplier);\n                }\n                public void progress(IProgressMonitor monitor, int taskId, int stage, int total, int workRemaining, int workRemainingUnit, int workRemainingUnitMultiplier, int workRemainingUnitMultiplierMultiplier, int workRemainingUnitMultiplierMultiplierMultiplier, int workRemainingUnitMultiplierMultiplierMultiplierMultiplier) {\n                    // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n                    monitor.progress(taskId, stage, total, workRemaining, workRemainingUnit, workRemainingUnitMultiplier, workRemainingUnitMultiplierMultiplier, workRemainingUnitMultiplierMultiplierMultiplier, workRemainingUnitMultiplierMultiplierMultiplierMultiplier);\n                }\n                public void progress(IProgressMonitor monitor, int taskId, int stage, int total, int workRemaining, int workRemainingUnit, int workRemainingUnitMultiplier, int workRemainingUnitMultiplierMultiplier, int workRemainingUnitMultiplierMultiplierMultiplier, int workRemainingUnitMultiplierMultiplierMultiplierMultiplier) {\n                    // 1FV0B3Y: ITPUI:ALL", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tif (super.init(smi, sdi))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t// See if we have attributes\n\t\tmeta.readAttributes(getStepAttributeInterface(), sdi);\n\t\t\n\t\t// See if we have input/output specifications\n\t\tmeta.readInput(getInput(), sdi);\n\t\tmeta.readOutput(getOutput(), sdi);\n\t\t\n\t\t// See if we have a custom stepname\n\t\tmeta.readCustom(getStepname(), sdi);\n\t\t\n\t\t// See if we have a custom description\n\t\tmeta.readCustomDescription(getDescription(), sdi);\n\t\t\n\t\t// See if we have a custom icon\n\t\tmeta.readCustomIcon(getIcon(), sdi);\n\t\t\n\t\t// See if we have a custom category\n\t\tmeta.readCustomCategory(getStepcategory(), sdi);\n\t\t\n\t\t// See if we have a custom priority\n\t\tmeta.readCustomPriority(getPriority(), sdi);\n\t\t\n\t\t// See if we have a custom type\n\t\tmeta.readCustomType(getStepType(), sdi);\n\t\t\n\t\t// See if we have a custom copy\n\t\tmeta.readCustomCopy(getCopy(), sdi);\n\t\t\n\t\t// See if we have a custom status\n\t\tmeta.readCustomStatus(getStatus(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(), sdi);\n\t\t\n\t\t// See if we have a custom variable\n\t\tmeta.readCustomVariable(getVariable(),", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('+5..', last) == (d(2014,1,30, 22,21), now)\n    assert f('-5..', last) == (d(2014,1,31, 19,4", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           if (m_MinTimeOverride != -1)\n                dmaxtime = m_MinTimeOverride;\n            if (m_MaxTimeOverride != -1)\n                dmaxtime = m_MaxTimeOverride;\n            if (m_MinTimeOverride != -1", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest system log is not available\")\n        if o:\n            raise exceptions.TestFail(\"Guest system log is not available\")\n        if o:\n            raise exceptions.TestFail(\"Guest system log is not available\")\n        if o:\n            raise exceptions.TestFail(\"Guest system log is not available\")\n        if o:\n            raise exceptions.TestFail(\"Guest system log is not available\")\n        if", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc.get();\n        service.shutdown();\n        ZMQ.msleep(1000);\n        assertThat(rc.isDone(), is(true));\n        assertThat(rc.get(), is(1));\n        assertThat(service.isShutdown(), is(true));\n    }\n    @Test\n    public void testUnsubscribeIssue554() throws Exception\n    {\n        final int port = Utils.findOpenPort();\n        final ExecutorService service = Executors.newFixedThreadPool(2);\n        final Callable<Boolean> pub = new Callable<Boolean>()\n        {\n            @Override\n            public Boolean call()\n            {\n                final ZMQ.Context ctx = ZMQ.context(1);\n                assertThat(ctx, notNullValue());\n                final ZMQ.Socket pubsocket = ctx.socket(SocketType.PUB);\n                assertThat(pubsocket, notNullValue());\n                boolean rc = pubsocket.bind(\"tcp://*:\" + port);\n                assertThat(rc, is(true));\n                for (int idx = 1; idx <= 15; ++idx) {\n                    rc = pubsocket.sendMore(\"test/\");\n                    assertThat(rc, is(true));\n                    rc = pubsocket.send(\"data\" + idx);\n                    assertThat(rc, is(true));\n                    System.out.printf(\"Send-%d/\", idx);\n                    ZMQ.msleep(100);\n                }\n                pubsocket.close();\n                ctx.close();\n                return true;\n            }\n        };\n        final Callable<Integer> sub = new Callable<Integer>()\n        {\n            @Override\n            public Integer call() throws Exception\n            {\n                final ZMQ.Context ctx = ZMQ.context(1);\n                assertThat(ctx, notNullValue());\n                final ZMQ.Socket sub = ctx.socket(SocketType.SUB);\n                assertThat(sub, notNullValue());\n                boolean rc = sub.setReceiveTimeOut(3000);\n                assertThat(rc, is(true));\n                rc = sub.subscribe(\"test/\");\n                assertThat(rc, is(true));\n                rc = sub.connect(\"tcp://localhost:\" + port);\n                assertThat(rc, is(true));\n                System.out.println(\"[SUB]\");\n                int received = receive(sub, 5);\n                assertThat(received > 1, is(true));\n                // unsubscribe from the topic and verify that we don't receive messages anymore\n                rc = sub.unsubscribe(\"test/\");\n                assertThat(rc, is(true));\n                System.out.printf(\"%n[UNSUB]%n\");\n                received = receive(sub, 10);\n                sub.close();\n                ctx.close();\n                return received;\n            }\n            private int receive(ZMQ.Socket socket, int maxSeconds)\n            {\n                int received = 0;\n                long current = System.currentTimeMillis();\n                long end = current + maxSeconds * 1000;\n                while (current < end) {\n                    ZMsg msg = ZMsg.recvMsg(socket);\n                    if (msg == null) {\n                        continue;\n                    }\n                    ++received;\n                }\n                return received;\n            }\n        };\n        final Future<Integer> rc = service.submit(sub);\nNext line of code:\n        rc.get();\n        service.shutdown();\n        ZMQ.msleep(1000);\n        assertThat(rc.isDone(), is(true));\n        assertThat(rc.get(), is(1));\n        assertThat(service.isShutdown(), is(true));\n    }\n    @Test\n    public void testUnsubscribeIssue554() throws Exception\n    {\n        final int port = Utils.findOpenPort();\n        final ExecutorService service = Executors.newFixedThreadPool(2);\n        final Callable<Boolean> pub = new Callable<Boolean>()\n        {\n            @Override\n            public Boolean call()\n            {\n                final ZMQ.Context ctx = ZMQ.context(1);\n                assertThat(ctx, notNullValue());\n                final ZMQ.Socket pubsocket = ctx.socket(SocketType.PUB);\n                assertThat(pubsocket, notNullValue());\n                boolean rc = pubsocket.bind(\"tcp://*:\" + port);\n                assertThat(rc, is(true));\n                for (int idx = 1; idx <= 15; ++idx) {\n                    rc = pubsocket.sendMore(\"test/\");\n                    assertThat(rc, is(true));\n                    rc = pubsocket.send(\"data\" + idx);\n                    assertThat(rc, is(true));\n                    System.out.printf(\"Send-%d/\", idx);\n                    ZMQ.msleep(100);\n                }\n                pubsocket.close();\n                ctx.close();\n                return true;\n            }\n        };\n        final Callable<Integer> sub = new Callable<Integer>()\n        {\n            @Override\n            public Integer call() throws Exception\n            {\n                final ZMQ.Context ctx = ZMQ.context(1);\n                assertThat(ctx, notNullValue());\n                final ZMQ.Socket sub = ctx.socket(SocketType.SUB);\n                assertThat(sub, notNullValue());\n                boolean rc = sub.setReceiveTimeOut(3000);\n                assertThat(rc, is(true));\n                rc = sub.subscribe(\"test/\");\n                assertThat(rc, is(true));\n                rc = sub.connect(\"tcp://localhost:\" + port);\n                assertThat(rc, is(true));\n                System.out.println(\"[SUB]\");\n                int received = receive(sub, 5);\n                assertThat(received > 1, is(true));\n                // unsubscribe from the topic and verify that we don't receive messages anymore\n                rc = sub.unsubscribe(\"test/\");\n                assertThat(rc, is(true));\n                System.out.printf(\"%n[UNSUB]%n\");\n                received = receive(sub, 10);\n                sub.close();\n                ctx.close();\n                return received;\n            }\n            private int receive(ZMQ.Socket socket, int maxSeconds)\n            {\n                int received = 0;\n                long current = System.currentTimeMillis();\n                long end = current + maxSeconds * 1000;\n                while (current < end) {\n                    ZMsg msg = ZMsg.recvMsg(socket);\n                    if (msg == null) {\n                        continue;\n                    }\n                    ++received;\n                }\n                return received;\n            }\n        };\n        final Future<Integer> rc = service.submit(sub);\nNext line of code:\n        rc.get();\n        service.shutdown();\n        ZMQ.msleep(1000);\n        assertThat(rc.isDone(), is(true));\n        assertThat(rc.get(), is(1));\n        assertThat(service.isShutdown(), is(true));\n    }\n    @Test\n    public void testUnsubscribeIssue554() throws Exception\n    {\n        final int port = Utils.findOpenPort();\n        final ExecutorService service = Executors.newFixedThreadPool(2);\n        final Callable<Boolean> pub = new Callable<Boolean>()\n        {\n            @Override\n            public Boolean call()\n            {\n                final ZMQ.Context ctx = ZMQ.context(1);\n                assertThat(ctx, notNullValue());\n                final ZMQ.Socket pubsocket = ctx.socket(SocketType.PUB);\n                assertThat(pubsocket, notNullValue());\n                boolean rc = pubsocket.bind(\"tcp://*:\" + port);\n                assertThat(rc, is(true));\n                for (int idx = 1; idx <= 15; ++idx) {\n                    rc = pubsocket.sendMore(\"test/\");\n                    assertThat(rc, is(true));\n                    rc = pubsocket.send(\"data\" + idx);\n                    assertThat(rc, is(true));\n                    System.out.printf(\"Send-%d/\", idx);\n                    ZMQ.msleep(100);\n                }\n                pubsocket.close();\n                ctx.close();\n                return true;\n            }\n        };\n        final Callable<Integer> sub = new Callable<Integer>()\n        {\n            @Override\n            public Integer call() throws Exception\n            {\n                final ZMQ.Context ctx = ZMQ.context(1);\n                assertThat(ctx, notNullValue());\n                final ZMQ.Socket sub = ctx.socket(SocketType.SUB);\n                assertThat(sub, notNullValue());\n                boolean rc = sub.setReceiveTimeOut(3000);\n                assertThat(rc, is(true));\n                rc = sub.subscribe(\"test/\");\n                assertThat(rc, is(true));\n                rc = sub.connect(\"tcp://localhost:\" + port);\n                assertThat(rc, is(true));\n                System.out.println(\"[SUB]\");\n                int received = receive(sub, 5);\n                assertThat(received > 1, is(true));\n                // unsubscribe from the topic and verify that we don't receive messages anymore\n                rc = sub.unsubscribe(\"test/\");\n                assertThat(rc, is(true));\n                System.out.printf(\"%n[UNSUB]%n\");\n                received = receive(sub, 10);\n                sub.close();\n                ctx.close();\n                return received;\n            }\n            private int receive(ZMQ.Socket socket, int maxSeconds)\n            {\n                int received = 0;\n                long current = System.currentTime", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) {\n            logger.info(\"[FAULT] \" + this.ownerID + \" : FAILURE OF \" + destination.getID() +\n                \" SUSPECTED ON REQUEST SENDING : \" + e.getMessage());\n            UniversalBody newDestination = this.communicationFailed(destination.getID(), destination, e);\n            return this.sendRequest(r, newDestination);\n        } catch (IOException e) {\n            logger.info(\"[FAULT] \" + this.ownerID + \" : FAILURE OF \" + destination.getID() +\n                \" SUSPECTED ON REQUEST SENDING : \" + e.getMessage());\n            UniversalBody newDestination = this.communicationFailed(destination.getID(), destination, e);\n            return this.sendRequest(r, newDestination);\n", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn 1;\n\t\t\tif (value <= 0x3FFF)\n\t\t\t\t\treturn 2;\n\t\t\tif (value <= 0x1FFFFFFF)\n\t\t\t\treturn 3;\n\t\t\tthrow new ArgumentOutOfRangeException(\"UInt32 value can't be compressed\");\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.notify(descr)\n        self.fm.env.copy.append(one_file.path)\n        self.fm.env.copy.append(one_file.path)\n        self.fm.env.copy.append(one_file.dirname", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t\t[ExpectedException (typeof (ArgumentException))]\n\t\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tActivator.CreateInstance (null, null);\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A04\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A05\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A06\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A07\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A08\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A09\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A10\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A11\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A12\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A13\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A14\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A15\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A16\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A17\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A18\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id = 2;\n\t\t\tAssert.AreEqual (2, objCOMTest.Id, \"#A19\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tCOMTest objCOMTest", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       fr = Locale.objects.get(code='fr')\nNext line of code:\n        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\nNext line of code:\n        self.assertEqual(repo.changesets.count(), 3)\nNext line of code:\n        avs = AppVersion.objects.all()\nNext line of code:\n        flagdata = flags4appversions(avs)\nNext line of code:\n        self.assertIn(self.old_av, flagdata)\nNext line of code:\n        self.assertIn(self.new_av, flagdata)\nNext line of code:\n        self.assertEqual(len(flagdata), 2)\nNext line of code:\n        self.assertDictEqual(\n            flagdata[self.new_av],\n            {'da':\n                ['fx1.1', {Action.ACCEPTED: self.actions[3].id}]\n             })\nNext line of code:\n        self.assertDictEqual(\n            flagdata[self.old_av],\n            {'da':\n                ['fx1.0', {Action.ACCEPTED: self.actions[1].id}]\n             })\n    def testOneOldAndNewByActionDate(self):\n        \"\"\"One accepted signoff on the old appversion,\n        nothing on the new, thus falling back to the old one.\n        \"\"\"\n        locale = Locale.objects.get(code='da')\n        repo = self._setup(locale, Action.ACCEPTED, None)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs)\n        self.assertIn(self.old_av, flagdata)\n        self.assertIn(self.new_av, flagdata)\n        self.assertEqual(len(flagdata), 2)\n        self.assertDictEqual(\n            flagdata[self.new_av],\n            {'da':\n                ['fx1.1', {Action.ACCEPTED: self.actions[3].id}]\n             })\n        self.assertDictEqual(\n            flagdata[self.old_av],\n            {'da':\n                ['fx1.0', {Action.ACCEPTED: self.actions[1].id}]\n             })\n    def testOneOldAndNewByActionDate(self):\n        \"\"\"One accepted signoff on the old appversion,\n        nothing on the new, thus falling back to the old one.\n        \"\"\"\n        locale = Locale.objects.get(code='da')\n        repo = self._setup(locale, None, None)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs)\n        self.assertIn(self.old_av, flagdata)\n        self.assertIn(self.new_av, flagdata)\n        self.assertEqual(len(flagdata), 2)\n        self.assertDictEqual(\n            flagdata[self.new_av],\n            {'da':\n                ['fx1.1', {Action.ACCEPTED: self.actions[3].id}]\n             })\n        self.assertDictEqual(\n            flagdata[self.old_av],\n            {'da':\n                ['fx1.0', {Action.ACCEPTED: self.actions[1].id}]\n             })\n    def testOneOldAndNewByActionDate(self):\n        \"\"\"One accepted signoff on the old appversion,\n        nothing on the new, thus falling back to the old one.\n        \"\"\"\n        locale = Locale.objects.get(code='da')\n        repo = self._setup(locale, None, Action.ACCEPTED)\n        self.assertEqual(repo.changes", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            if \"voice_activity\" in cmd.parameters:\n                userstate.voice_activity = cmd.parameters[\"voice_activity\"]\n            if \"voice_activity_threshold\" in cmd.parameters:\n                user", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n        }\n    }\n    public static void changeLeader(PlayerGroup group, Player newLeader) {\nNext line of code:\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, newLeader));\n    }\n    public static void changeLeader(PlayerGroup group, Player newLeader, Player oldLeader) {\nNext line of code:\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, newLeader, oldLeader));\n    }\n    public static void changeLeader(PlayerGroup group, Player newLeader, Player oldLeader, boolean isKick) {\nNext line of code:\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, newLeader, oldLeader, isKick));\n    }\n    public static void changeLeader(PlayerGroup group, Player newLeader, Player oldLeader, boolean isKick, boolean isKickAll) {\nNext line of code:\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, newLeader, oldLeader, isKick, isKickAll));\n    }\n    public static void changeLeader(PlayerGroup group, Player newLeader, Player oldLeader, boolean isKick, boolean isKickAll, boolean isKickAll2) {\nNext line of code:\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, newLeader, oldLeader, isKick, isKickAll, isKickAll2));\n    }\n    public static void changeLeader(PlayerGroup group, Player newLeader, Player oldLeader, boolean isKick, boolean isKickAll, boolean isKickAll2, boolean isKickAll3) {\nNext line of code:\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, newLeader, oldLeader, isKick, isKickAll, isKickAll2, isKickAll3));\n    }\n    public static void changeLeader(PlayerGroup group, Player newLeader, Player oldLeader, boolean isKick, boolean isKickAll, boolean isKickAll2, boolean isKickAll3, boolean isKickAll4) {\nNext line of code:\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, newLeader, oldLeader, isKick, isKickAll, isKickAll2, isKickAll3, isKickAll4));\n    }\n    public static void changeLeader(PlayerGroup group, Player newLeader, Player oldLeader, boolean isKick, boolean isKickAll, boolean isKickAll2, boolean isKickAll3, boolean isKickAll4, boolean isKickAll5) {\nNext line of code:\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, newLeader, oldLeader, isKick, isKickAll, isKickAll2, isKickAll3, isKickAll4, isKickAll5));\n    }\n    public static void changeLeader(PlayerGroup group, Player newLeader, Player oldLeader, boolean isKick, boolean isKickAll, boolean isKickAll2, boolean isKickAll3, boolean isKickAll4, boolean isKickAll5, boolean isKickAll6) {\nNext line of code:\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, newLeader, oldLeader, isKick, isKickAll, isKickAll2, isKickAll3, isKickAll4, isKickAll5, isKickAll6));\n    }\n    public static void changeLeader(PlayerGroup group, Player newLeader, Player oldLeader, boolean isKick, boolean isKickAll, boolean isKickAll2, boolean isKickAll3, boolean isKickAll4, boolean isKickAll5, boolean isKickAll6, boolean isKickAll7) {\nNext line of code:\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, newLeader, oldLeader, isKick, isKickAll, isKickAll2, isKickAll3, isKickAll4, isKickAll5, isKickAll6, isKickAll7));\n    }\n    public static void changeLeader(PlayerGroup group, Player newLeader, Player oldLeader, boolean isKick, boolean isKickAll, boolean isKickAll2, boolean isKickAll3, boolean isKickAll4, boolean isKickAll5, boolean isKickAll6, boolean isKickAll7, boolean isKickAll8) {\nNext line of code:\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, newLeader, oldLeader, isKick, isKickAll, isKickAll2, isKickAll3, isKickAll4, isKickAll5, isKickAll6, isKickAll7, isKickAll8));\n    }\n    public static void changeLeader(PlayerGroup group, Player newLeader, Player oldLeader, boolean isKick, boolean isKickAll, boolean isKickAll2, boolean isKickAll3, boolean isKickAll4, boolean isKickAll5, boolean isKickAll6, boolean isKickAll7, boolean isKickAll", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       if formatter is None:\n            formatter = DefaultStyle\n        if outfile is None:\n            outfile = StringIO()\n        if not isinstance(formatter, str):\n            formatter = Formats[formatter]\n        if not isinstance(outfile, str):\n            outfile = StringIO()\n        if not isinstance(outfile, StringIO):\n            outfile = StringIO()\n        if not isinstance(formatter, Formats):\n            formatter = Formats[formatter]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not isinstance(outfile, Formats):\n            outfile = Formats[outfile]\n        if not", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\", column.quantity_renderer.get_property(\"text\"))\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\nNext line of code:\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\", column.quantity_renderer.get_property(\"text\"))\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\nNext line of code:\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\", column.quantity_renderer.get_property(\"text\"))\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\nNext line of code:\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\", column.quantity_renderer.get_property(\"text\"))\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\nNext line of code:\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\", column.quantity_renderer.get_property(\"text\"))\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\nNext line of code:\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\", column.quantity_renderer.get_property(\"text\"))\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\nNext line of code:\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\", column.quantity_renderer.get_property(\"text\"))\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\nNext line of code:\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\", column.quantity_renderer.get_property(\"text\"))\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\nNext line of code:\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\", column.quantity_renderer.get_property(\"text\"))\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\nNext line of code:\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\", column.quantity_renderer.get_property(\"text\"))\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\nNext line of code:\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\", column.quantity_renderer.get_property(\"text\"))\n    def test_update_cell_based_on_data", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                Dialog = new DialogEntry();\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i];\n                    Dialog.Add(n.Attributes[\"ID\"].InnerText, n.Attributes[\"Value\"].InnerText);\n                }\n                nl = element.SelectSingleNode(\"Frames\");\n                if (nl != null) {\n                    FramesCount = Convert.ToByte(nl.Attributes[\"Count\"].InnerText);\n                    FramesLoaded = Convert.ToByte(nl.Attributes[\"Loaded\"].InnerText);\n                }\n                nl = element.SelectSingleNode(\"ImageIndex\");\n                if (nl != null) {\n                    ImageIndex = Convert.ToInt32(nl.Attributes[\"Index\"].InnerText);\n                }\n                nl = element.SelectSingleNode(\"GrayImageIndex\");\n                if (nl != null) {\n                    GrayImageIndex = Convert.ToInt32(nl.Attributes[\"Index\"].InnerText);\n                }\n                nl = element.SelectSingleNode(\"CorpsesPersist\");\n                if (nl != null) {\n                    CorpsesPersist = Convert.ToBoolean(nl.Attributes[\"Persist\"].InnerText);\n                }\n                nl = element.SelectSingleNode(\"WithoutCorpse\");\n                if (nl != null) {\n                    WithoutCorpse = Convert.ToBoolean(nl.Attributes[\"WithoutCorpse\"].InnerText);\n                }\n                nl = element.SelectSingleNode(\"Remains\");\n                if (nl != null) {\n                    Remains = Convert.ToBoolean(nl.Attributes[\"Remains\"].InnerText);\n                }\n            }\n            catch (Exception ex) {\n                throw new Exception(\"CreatureLoadXML: \" + ex.Message);\n            }\n        }\n        public override void SaveXML(XmlNode element, FileVersion version)\n        {\n            try {\n                base.SaveXML(element, version);\n                element.AppendChild(new XmlElement(\"Race\", \"Creature\", \"Race\", Race.ToString()));\n                element.AppendChild(new XmlElement(\"gfx\", \"Creature\", \"Gfx\", Gfx));\n                element.AppendChild(new XmlElement(\"sfx\", \"Creature\", \"Sfx\", Sfx));\n                element.AppendChild(new XmlElement(\"Signs\", \"Creature\", \"Signs\", Flags.Signature));\n                element.AppendChild(new XmlElement(\"minHP\", \"Creature\", \"minHP\", Convert.ToString(MinHP)));\n                element.AppendChild(new XmlElement(\"maxHP\", \"Creature\", \"maxHP\", Convert.ToString(MaxHP)));\n                element.AppendChild(new XmlElement(\"AC\", \"Creature\", \"AC\", Convert.ToString(AC)));\n                element.AppendChild(new XmlElement(\"Speed\", \"Creature\", \"Speed\", Convert.ToString(Speed)));\n                element.AppendChild(new XmlElement(\"ToHit\", \"Creature\", \"ToHit\", Convert.ToString(ToHit)));\n                element.AppendChild(new XmlElement(\"Attacks\", \"Creature\", \"Attacks\", Convert.ToString(Attacks)));\n                element.AppendChild(new XmlElement(\"Constitution\", \"Creature\", \"Constitution\", Convert.ToString(Constitution)));\n                element.AppendChild(new XmlElement(\"Strength\", \"Creature\", \"Strength\", Convert.ToString(Strength)));\n                element.AppendChild(new XmlElement(\"minDB\", \"Creature\", \"minDB\", Convert.ToString(MinDB)));\n                element.AppendChild(new XmlElement(\"maxDB\", \"Creature\", \"maxDB\", Convert.ToString(MaxDB)));\n                element.AppendChild(new XmlElement(\"Survey\", \"Creature\", \"Survey\", Convert.ToString(Survey)));\n                element.AppendChild(new XmlElement(\"Level\", \"Creature\", \"Level\", Convert.ToString(Level)));\n                element.AppendChild(new XmlElement(\"Alignment\", \"Creature\", \"Alignment\", Convert.ToString(Alignment)));\n                element.AppendChild(new XmlElement(\"Weight\", \"Creature\", \"Weight\", Convert.ToString(Weight)));\n                element.AppendChild(new XmlElement(\"Sex\", \"Creature\", \"Sex\", Sex.ToString()));\n                element.AppendChild(new XmlElement(\"FleshEffect\", \"Creature\", \"FleshEffect\", Convert.ToString(FleshEffect)));\n                element.AppendChild(new XmlElement(\"FleshSatiety\", \"Creature\", \"FleshSatiety\", Convert.ToString(FleshSatiety)));\n                element.AppendChild(new XmlElement(\"Symbol\", \"Creature\", \"Symbol\", Symbol));\n                element.AppendChild(new XmlElement(\"Extinctable\", \"Creature\", \"Extinctable\", Convert.ToString(Extinctable)));\n                element.AppendChild(new XmlElement(\"Dexterity\", \"Creature\", \"Dexterity\", Convert.ToString(Dexterity)));\n                element.AppendChild(new XmlElement(\"Hear\", \"Creature\", \"Hear\", Convert.ToString(Hear)));\n                element.AppendChild(new XmlElement(\"Smell\", \"Creature\", \"Smell\", Convert.ToString(Smell)));\n                element.AppendChild(new XmlElement(\"FramesCount\", \"Creature\", \"FramesCount\", Convert.ToString(FramesCount)));\n                element.AppendChild(new XmlElement(\"FramesLoaded\", \"Creature\", \"FramesLoaded\", Convert.ToString(FramesLoaded)));\n                element.AppendChild(new XmlElement(\"ImageIndex\", \"Creature\", \"ImageIndex\", Convert.ToString(ImageIndex)));\n                element.AppendChild(new XmlElement(\"GrayImageIndex\", \"Creature\", \"GrayImageIndex\", Convert.ToString(GrayImageIndex)));\n                element.AppendChild(new XmlElement(\"CorpsesPersist\", \"Creature\", \"CorpsesPersist\", Convert.ToString(CorpsesPersist)));\n                element.AppendChild(new XmlElement(\"WithoutCorpse\", \"Creature\", \"WithoutCorpse\", Convert.ToString(WithoutCorpse)));\n                element.AppendChild(new XmlElement(\"Remains\", \"Creature\", \"Remains\", Convert.ToString(Remains)));\n            }\n            catch (Exception ex) {\n                throw new Exception(\"CreatureSaveXML: \" + ex.Message);\n            }\n        }\n        public override void SaveXML(XmlNode element, FileVersion version)\n        {\n            try {\n                base.SaveXML(element, version);\n                element.AppendChild(new XmlElement(\"Race\", \"Creature\", \"Race\", Race.ToString()));\n                element.AppendChild(new XmlElement(\"gfx\", \"Creature\", \"Gfx\", Gfx));\n                element.AppendChild(new XmlElement(\"sfx\", \"Creature\", \"Sfx\", Sfx));\n                element.AppendChild(new XmlElement(\"Signs\", \"Creature\", \"Signs\", Flags.Signature));\n                element.AppendChild(new XmlElement(\"minHP\", \"Creature\", \"minHP\", Convert.ToString(MinHP)));\n                element.AppendChild(new XmlElement(\"maxHP\", \"Creature\", \"maxHP\", Convert.ToString(MaxHP)));\n                element.AppendChild(new XmlElement(\"AC\", \"Creature\", \"AC\", Convert.ToString(AC)));\n                element.AppendChild(new XmlElement(\"Speed\", \"Creature\", \"Speed\", Convert.ToString(Speed)));\n                element.AppendChild(new XmlElement(\"ToHit\", \"Creature\", \"ToHit\", Convert.ToString(ToHit)));\n                element.AppendChild(new XmlElement(\"Attacks\", \"Creature\", \"Attacks\", Convert.ToString(Attacks)));\n                element.AppendChild(new XmlElement(\"Constitution\", \"Creature\", \"Constitution\", Convert.ToString(Constitution)));\n                element.AppendChild(new XmlElement(\"Strength\", \"Creature\", \"Strength\", Convert.ToString(Strength)));\n                element.AppendChild(new XmlElement(\"minDB\", \"Creature\", \"minDB\", Convert.ToString(MinDB)));\n                element.AppendChild(new XmlElement(\"maxDB\", \"Creature\", \"maxDB\", Convert.ToString(MaxDB)));\n                element.AppendChild(new XmlElement(\"Survey\", \"Creature\", \"", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                       m_key[i] = new ExodusActivation();\n                    else if (m_Peerless == PeerlessList.ParoxysmusFelucca)\nNext line of code:\n                        m_key[i] = new Paroxysmus", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans[i]).buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection buildFromBeanCollection(java.util.List beans)\n\t{\n\t\treturn buildFromBeanCollection(beans.size(), beans);\n\t}\n\tpublic static ChangeOfServiceVoCollection buildFromBeanCollection(int size, java.util.List beans)\n\t{\n\t\tChangeOfServiceVoCollection coll = new ChangeOfServiceVoCollection();\n\t\tfor(int i = 0; i < size; i++)\n\t\t{\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans.get(i)).buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection buildFromBeanCollection(java.util.List beans, boolean includeIncorrect)\n\t{\n\t\tChangeOfServiceVoCollection coll = new ChangeOfServiceVoCollection();\n\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans.get(i)).buildVo(includeIncorrect));\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection buildFromBeanCollection(java.util.List beans, boolean includeIncorrect, ims.framework.utils.CollectionWritingUtils writingUtils)\n\t{\n\t\tChangeOfServiceVoCollection coll = new ChangeOfServiceVoCollection();\n\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans.get(i)).buildVo(includeIncorrect, writingUtils));\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection buildFromBeanCollection(java.util.List beans, boolean includeIncorrect, ims.framework.utils.CollectionWritingUtils writingUtils, String studentIEN)\n\t{\n\t\tChangeOfServiceVoCollection coll = new ChangeOfServiceVoCollection();\n\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans.get(i)).buildVo(includeIncorrect, writingUtils, studentIEN));\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection buildFromBeanCollection(java.util.List beans, boolean includeIncorrect, ims.framework.utils.CollectionWritingUtils writingUtils, String studentIEN, ims.framework.ConversionEngine conversionEngine)\n\t{\n\t\tChangeOfServiceVoCollection coll = new ChangeOfServiceVoCollection();\n\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans.get(i)).buildVo(includeIncorrect, writingUtils, studentIEN, conversionEngine));\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection buildFromBeanCollection(java.util.List beans, boolean includeIncorrect, ims.framework.utils.CollectionWritingUtils writingUtils, String studentIEN, ims.framework.ConversionEngine conversionEngine, ims.framework.FormInfo formInfo)\n\t{\n\t\tChangeOfServiceVoCollection coll = new ChangeOfServiceVoCollection();\n\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans.get(i)).buildVo(includeIncorrect, writingUtils, studentIEN, conversionEngine, formInfo));\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection buildFromBeanCollection(java.util.List beans, boolean includeIncorrect, ims.framework.utils.CollectionWritingUtils writingUtils, String studentIEN, ims.framework.ConversionEngine conversionEngine, ims.framework.FormInfo formInfo, ims.framework.Context context)\n\t{\n\t\tChangeOfServiceVoCollection coll = new ChangeOfServiceVoCollection();\n\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans.get(i)).buildVo(includeIncorrect, writingUtils, studentIEN, conversionEngine, formInfo, context));\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection buildFromBeanCollection(java.util.List beans, boolean includeIncorrect, ims.framework.utils.CollectionWritingUtils writingUtils, String studentIEN, ims.framework.ConversionEngine conversionEngine, ims.framework.FormInfo formInfo, ims.framework.Context context, ims.framework.utils.Image[] images)\n\t{\n\t\tChangeOfServiceVo", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "               new Version(1, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\tbyte[] pb = kdf.ComputeHash(pbMsg);\n\t\t\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\t\tthrow new SecurityException(\"Argon2-1\");\n\t\t\t\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\t/**\n\t * Requests mana from items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the cost.\n\t * @param manaToGet How much mana is to be requested, if less mana exists than this amount,\n\t * the amount of mana existent will be returned instead, if you want exact values use requestManaExact.\n\t * @param remove If true, the mana will be added from the target item. Set to false to just check.\n\t * @return The amount of mana received from the request.\n\t */\n\tpublic static int requestManaForTool(ItemStack stack, EntityPlayer player, int manaToGet, boolean remove) {\n\t\tfloat multiplier = Math.max(0F, 1F - getFullDiscountForTools(player));\n\t\tint cost = (int) (manaToGet * multiplier);\n\t\treturn (int) (dispatchMana(stack, player, cost, remove) / multiplier);\n\t}\n\t/**\n\t * Requests an exact amount of mana from items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the cost.\n\t * @param manaToGet How much mana is to be requested, if less mana exists than this amount,\n\t * false will be returned instead, and nothing will happen.\n\t * @param remove If true, the mana will be added from the target item. Set to false to just check.\n\t * @return If the request was succesful.\n\t */\n\tpublic static boolean requestManaExactForTool(ItemStack stack, EntityPlayer player, int manaToGet, boolean remove) {\n\t\tfloat multiplier = Math.max(0F, 1F - getFullDiscountForTools(player));\n\t\tint cost = (int) (manaToGet * multiplier);\n\t\treturn (int) (dispatchManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\t/**\n\t * Requests mana from items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the cost.\n\t * @param manaToGet How much mana is to be requested, if less mana exists than this amount,\n\t * the amount of mana existent will be returned instead, if you want exact values use requestManaExact.\n\t * @param remove If true, the mana will be added from the target item. Set to false to just check.\n\t * @return The amount of mana received from the request.\n\t */\n\tpublic static int requestManaForTool(ItemStack stack, EntityPlayer player, int manaToGet, boolean remove) {\n\t\tfloat multiplier = Math.max(0F, 1F - getFullDiscountForTools(player));\n\t\tint cost = (int) (manaToGet * multiplier);\n\t\treturn (int) (requestMana(stack, player, cost, remove) / multiplier);\n\t}", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\t\"but Lights has {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Adds a frame to the end of the output queue\n\t\t/// </summary>\n\t\t/// <param name=\"NextFrame\">A Layer representing the desired frame.</param>\n\t\t/// <param name=\"ForceFrameRequest\">If true, force an update for the next frame request</param>\n\t\tpublic void PushToQueue (Layer NextFrame, bool ForceFrameRequest)\n\t\t{\n\t\t\tif (NextFrame.PixelCount != LightCount)\n\t\t\t\tthrow new ArgumentOutOfRangeException (\"NextFrame\",\n\t\t\t\t\tstring.Format (\n\t\t\t\t\t\t\"NextFrame must contain same number of LEDs (has {0},\" +\nNext line of code:\n\t\t\t\t\t\t\"but Lights has {1})\",\n\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t\tif (ForceFrameRequest == true)\n\t\t\t\t\tAnimationForceFrameRequest = true;\n\t\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Adds a frame to the end of the output queue\n\t\t/// </summary>\n\t\t/// <param name=\"NextFrame\">A Layer representing the desired frame.</param>\n\t\t/// <param name=\"ForceFrameRequest\">If true, force an update for the next frame request</param>\n\t\t/// <param name=\"BlendMode\">The blending mode to use for the frame</param>\n\t\tpublic void PushToQueue (Layer NextFrame, bool ForceFrameRequest, Color.BlendMode BlendMode)\n\t\t{\n\t\t\tif (NextFrame.PixelCount != LightCount)\n\t\t\t\tthrow new ArgumentOutOfRangeException (\"NextFrame\",\n\t\t\t\tstring.Format (\n\t\t\t\t\t\t\"NextFrame must contain same number of LEDs (has {0},\" +\nNext line of code:\n\t\t\t\t\t\t\"but Lights has {1})\",\n\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t\tif (ForceFrameRequest == true)\n\t\t\t\t\tAnimationForceFrameRequest = true;\n\t\t\t\tLights.Blending = BlendMode;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Adds a frame to the end of the output queue\n\t\t/// </summary>\n\t\t/// <param name=\"NextFrame\">A Layer representing the desired frame.</param>\n\t\t/// <param name=\"ForceFrameRequest\">If true, force an update for the next frame request</param>\n\t\t/// <param name=\"BlendMode\">The blending mode to use for the frame</param>\n\t\t/// <param name=\"BlendMode\">The blending mode to use for the frame</param>\n\t\tpublic void PushToQueue (Layer NextFrame, bool ForceFrameRequest, Color.BlendMode BlendMode, Color.BlendMode BlendMode2)\n\t\t{\n\t\t\tif (NextFrame.PixelCount != LightCount)\n\t\t\t\tthrow new ArgumentOutOfRangeException (\"NextFrame\",\n\t\t\t\t\tstring.Format (\n\t\t\t\t\t\"NextFrame must contain same number of LEDs (has {0},\" +\nNext line of code:\n\t\t\t\t\t\t\"but Lights has {1})\",\n\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t\tif (ForceFrameRequest == true)\n\t\t\t\t\tAnimationForceFrameRequest = true;\n\t\t\t\tLights.Blending = BlendMode;\n\t\t\t\tLights.Blending = BlendMode2;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Adds a frame to the end of the output queue\n\t\t/// </summary>\n\t\t/// <param name=\"NextFrame\">A Layer representing the desired frame.</param>\n\t\t/// <param name=\"ForceFrameRequest\">If true, force an update for the next frame request</param>\n\t\t/// <param name=\"BlendMode\">The blending mode to use for the frame</param>\n\t\t/// <param name=\"BlendMode\">The blending mode to use for the frame</param>\n\t\t/// <param name=\"BlendMode\">The blending mode to use for the frame</param>\n\t\t/// <param name=\"BlendMode\">The blending mode to use for the frame</param>\n\t\tpublic void PushToQueue (Layer NextFrame, bool ForceFrameRequest, Color.BlendMode BlendMode, Color.BlendMode BlendMode2, Color.BlendMode BlendMode3)\n\t\t{\n\t\t\tif (NextFrame.PixelCount != LightCount)\n\t\t\t\tthrow new ArgumentOutOfRangeException (\"NextFrame\",\n\t\t\t\t\tstring.Format (\n\t\t\t\t\t\t\"NextFrame must contain same number of LEDs (has {0},\" +\nNext line of code:\n\t\t\t\t\t\t\t\"but Lights has {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t\tif (ForceFrameRequest == true)\n\t\t\t\t\tAnimationForceFrameRequest = true;\n\t\t\t\tLights.Blending = BlendMode;\n\t\t\t\tLights.Blending = BlendMode2;\n\t\t\t\tLights.Blending = BlendMode3;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Adds a frame to the end of the output queue\n\t\t/// </summary>\n\t\t/// <param name=\"NextFrame\">A Layer representing the desired frame.</param>\n\t\t/// <param name=\"ForceFrameRequest\">If true, force an update for the next frame request</param>\n\t\t/// <param name=\"BlendMode\">The blending mode to use for the frame</param>\n\t\t/// <param name=\"BlendMode\">The blending mode to use for the frame</param>\n\t\t/// <param name=\"BlendMode\">The blending mode to use for the frame</param>\n\t\t/// <param name=\"BlendMode\">The blending mode to use for the frame</param>\n\t\t/// <param name=\"BlendMode\">The blending mode to use for the frame</param>\n\t\t/// <param name=\"BlendMode\">The blending mode to use for the frame</param>\n\t\tpublic void PushToQueue (Layer NextFrame, bool ForceFrameRequest, Color.BlendMode BlendMode, Color.BlendMode BlendMode2, Color.BlendMode BlendMode3, Color.BlendMode BlendMode4)\n\t\t{\n\t\t\tif (NextFrame.PixelCount != LightCount)\n\t\t\t\tthrow new ArgumentOutOfRangeException (\"NextFrame\",\n\t\t\t\t\tstring.Format (\n\t\t\t\t\t\t\"NextFrame must contain same number of LEDs (has {0},\" +\nNext line of code:\n\t\t\t\t\t\t\"but Lights has {1})\",\n\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t\tif (ForceFrameRequest == true)\n\t\t\t\t\t\tAnimationForceFrameRequest = true;\n\t\t\t\t\tLights.Blending = BlendMode;\n\t\t\t\t\tLights.Blending = BlendMode2;\n\t\t\t\t\tLights.Blending = BlendMode3;\n\t\t\t\t\tLights.Blending = BlendMode4;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Adds a frame to the end of the output queue\n\t\t///", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList != null))\n                return false;\n        } else if ((!this.actionTraceList.equals(other.actionTraceList)))\n            return false;\n        if ((this.screenshots == null)) {\n            if ((other.screenshots != null))\n                return false;\n        } else if ((!this.screenshots.equals(other.screenshots)))\n            return false;\n        if ((this.files == null)) {\n            if ((other.files != null))\n                return false;\n        } else if ((!this.files.equals(other.files)))\n            return false;\n        if ((this.messages == null)) {\n            if ((other.messages != null))\n                return false;\n        } else if ((!this.messages.equals(other.messages)))\n            return false;\n        if ((this.getContextSnapshot() == null)) {\n            if ((other.getContextSnapshot() != null))\n                return false;\n        } else if ((!this.getContextSnapshot().equals(other.getContextSnapshot())))\n            return false;\n        if ((this.getPropertyList() == null)) {\n            if ((other.getPropertyList() != null))\n                return false;\n        } else if ((!this.getPropertyList().equals(other.getPropertyList())))\n            return false;\n        return true;\n    }\n    @Override\n    public int hashCode() {\n        final int PRIME = 31;\n        int result = super.hashCode();\n        result = ((PRIME * result) + ((this.state == null) ? 0 : this.state.hashCode()));\n        result = ((PRIME * result) + ((this.userMessage == null) ? 0 : this.userMessage.hashCode()));\n        result = ((PRIME * result) + ((this.userErrorMessage == null) ? 0 : this.userErrorMessage.hashCode()));\n        result =", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = p.readString();\n            dc.type = DriverCall.typeFromCLCC(p.readInt());\n            dc.callerId = p.readString();\n            dc.callerIdType = DriverCall.callerIdTypeFrom", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomainData()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(\n\t\t\t\t\t\tMetadataEnumType.DOCUMENT)) {\n\t\t\t\t\tfor (Licence licence : availableLicences) {\n\t\t\t\t\t\t\t\tif (licence.isDomainData()) {\n\t\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tLOG.error(\"Error while getting licences: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\t/*\n\t * Fill categories according to the metadata type: dataset, app, document\n\t */\n\tprivate void getCategoriesforType(ODRClient odrClient) {\n\t\tcategories = new ArrayList<Category>();\n\t\tList<Category> availableCategories = odrClient.listCategories();\n\t\tif (availableCategories.size() > 0) {\n\t\t\tLOG.debug(\"Number of available categories: \"\n\t\t\t\t\t+ availableCategories.size());\n\t\t\ttry {\n\t\t\t\tif (odrMetadata.getType().equals(MetadataEnumType.DATASET)\n\t\t\t\t\t\t|| odrMetadata.getType().equals(\n\t\t\t\t\t\t\t\t\tMetadataEnumType.UNKNOWN)) {\n\t\t\t\t\tfor (Category category : availableCategories) {\n\t\t\t\t\t\tif (category.getType().equals(CategoryEnumType.DATA)) {\n\t\t\t\t\t\t\tcategories.add(category);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(\n\t\t\t\t\t\tMetadataEnumType.APPLICATION)) {\n\t\t\t\t\tfor (Category category : availableCategories) {\n\t\t\t\t\t\tif (category.getType().equals(CategoryEnumType.DATA)) {\n\t\t\t\t\t\tcategories.add(category);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(\n\t\t\t\t\t\tMetadataEnumType.DOCUMENT)) {\n\t\t\t\t\tfor (Category category : availableCategories) {\n\t\t\t\t\t\tif (category.getType().equals(CategoryEnumType.DATA)) {\n\t\t\t\t\t\t\tcategories.add(category);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Error while getting categories: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\t/*\n\t * Fill geo granularities according to the metadata type: dataset, app,\n\t * document\n\t */\n\tprivate void getGeoGranularitiesforType(ODRClient odrClient) {\n\t\tgeoGranularities = new ArrayList<GeoGranularity>();\n\t\tList<GeoGranularity> availableGeoGranularities = odrClient\n\t\t\t\t.listGeoGranularities();\n\t\tif (availableGeoGranularities.size() > 0) {\n\t\t\tLOG.debug(\"Number of available geo granularities: \"\n\t\t\t\t\t+ availableGeoGranularities.size());\n\t\t\ttry {\n\t\t\t\tif (odrMetadata.getType().equals(MetadataEnumType.DATASET)\n\t\t\t\t\t\t|| odrMetadata.getType().equals(\n\t\t\t\t\t\t\t\tMetadataEnumType.UNKNOWN)) {\n\t\t\t\t\tfor (GeoGranularity geoGranularity : availableGeoGranularities) {\n\t\t\t\t\t\tif (geoGranularity.getType().equals(\n\t\t\t\t\t\t\t\tGeoGranularityEnumType.GRANULARITY)) {\n\t\t\t\t\t\tgeoGranularities.add(geoGranularity);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(\n\t\t\t\t\t\tMetadataEnumType.APPLICATION)) {\n\t\t\t\t\tfor (GeoGranularity geoGranularity : availableGeoGranularities) {\n\t\t\t\t\t\tif (geoGranularity.getType().equals(\n\t\t\t\t\t\t\t\tGeoGranularityEnumType.GRANULARITY)) {\n\t\t\t\t\t\t\tgeoGranularities.add(geoGranularity);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t} else if (odrMetadata.getType().equals(\n\t\t\t\t\t\tMetadataEnumType.DOCUMENT)) {\n\t\t\t\t\tfor (GeoGranularity geoGranularity : availableGeoGranularities) {\n\t\t\t\t\t\tif (geoGranularity.getType().equals(\n\t\t\t\t\t\t\t\tGeoGranularityEnumType.GRANULARITY)) {\n\t\t\t\t\t\t\tgeoGranularities.add(geoGranularity);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLOG", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                newVertices[x + y * xSizeP] = new Vector3(x * xPixelsPerTile, 0, 0);\n                newNormals[x + y * xSizeP] = new Vector3(0, 0, 1);\n                newUV[x + y * xSizeP] = new Vector2(x * xPixelsPerTile, 0);\n            }\n        }\n        mesh.vertices = newVertices;\n        mesh.normals = newNormals;\n        mesh.uv = newUV;\n        mesh.triangles = newTriangles;\n        mesh.RecalculateNormals();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.RecalculateBounds();\n        mesh.RecalculateTangents();\n        mesh.", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\trawResult = client.call(API_METHOD_ADD, new Object[] { testInt1, testInt2 });\n\t\t\t\t\n\t\t\t\t\tif (rawResult instanceof Integer)\n\t\t\t\t\tresult = (Integer) rawResult;\n\t\t\t\t\telse\n\t\t\t\t\tresult = 0;\n\t\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tLog.e(TAG, \"Exception occurred in doConnectionTest() \\n\" + \n\t\t\t\t\t\t\t\"Execption message was: \" + e.getMessage());\n\t\t\t}\n\t\t\t\n\t\t\tif (result == 0)\n\t\t\t{\n\t\t\t\tLog.i(TAG, \"Connection test failed. Server at \" + url.toString() + \" returned 0\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tLog.i(TAG, \"Connection test passed. Server at \" + url.toString() + \" returned \" + result);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tLog.e(TAG, \"Exception occurred in doConnectionTest() \\n\" + \n\t\t\t\t\t\"Execption message was: \" + e.getMessage());\n\t\t\treturn false;\n\t\t}\n    }\n\t\n\t/**\n\t * Sets up the XMLRPC client to use the next server in the list. If the end\n\t * of the list has been reached, throws a RuntimeException. \n\t */\n\tprivate XMLRPCClient setUpClient(URL url, String username, String password)\n\t{\n\t\ttry\n\t\t{\n\t\t\tLog.i(TAG, \"Setting up XMLRPC client to use \" + url.toString());\n\t\t\t\n\t\t\tif (url == null)\n\t\t\t{\n\t\t\t\tLog.e(TAG, \"URL is null. Cannot set up XMLRPC client\");\n\t\t\t\tthrow new RuntimeException(\"URL is null. Cannot set up XMLRPC client\");\n\t\t\t}\n\t\t\t\n\t\t\tif (username == null)\n\t\t\t{\n\t\t\tLog.e(TAG, \"Username is null. Cannot set up XMLRPC client\");\n\t\t\t\tthrow new RuntimeException(\"Username is null. Cannot set up XMLRPC client\");\n\t\t\t}\n\t\t\t\n\t\t\tif (password == null)\n\t\t\t{\n\t\t\t\tLog.e(TAG, \"Password is null. Cannot set up XMLRPC client\");\n\t\t\t\tthrow new RuntimeException(\"Password is null. Cannot set up XMLRPC client\");\n\t\t\t}\n\t\t\t\n\t\t\tnewClient = new XMLRPCClient(url);\n\t\t\tnewClient.setUsername(username);\n\t\t\tnewClient.setPassword(password);\n\t\t\t\n\t\t\treturn newClient;\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tLog.e(TAG, \"Exception occurred in setUpClient() \\n\" + \n\t\t\t\t\t\"Execption message was: \" + e.getMessage());\n\t\t\tthrow new RuntimeException(\"Exception occurred in setUpClient() \\n\" + \n\t\t\t\t\t\t\"Execption message was: \" + e.getMessage());\n\t\t}\n\t}\n}", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12, final boolean b13)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12, final boolean b13, final boolean b14)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12, final boolean b13, final boolean b14, final boolean b15)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12, final boolean b13, final boolean b14, final boolean b15, final boolean b16)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12, final boolean b13, final boolean b14, final boolean b15, final boolean b16, final boolean b17)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12, final boolean b13, final boolean b14, final boolean b15, final boolean b16, final boolean b17, final boolean b18)\n\t\t\t{\n\t\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12, final boolean b13, final boolean b14, final boolean b15, final boolean b16, final boolean b17, final boolean b18, final boolean b19)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12, final boolean b13, final boolean b14, final boolean b15, final boolean b16, final boolean b17, final boolean b18, final boolean b19, final boolean b20)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12, final boolean b13, final boolean b14, final boolean b15, final boolean b16, final boolean b17, final boolean b18, final boolean b19, final boolean b20, final boolean b21)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12, final boolean b13, final boolean b14, final boolean b15, final boolean b16, final boolean b17, final boolean b18, final boolean b19, final boolean b20, final boolean b21, final boolean b22)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12, final boolean b13, final boolean b14, final boolean b15, final boolean b16, final boolean b17, final boolean b18, final boolean b19, final boolean b20, final boolean b21, final boolean b22, final boolean b23)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds, final boolean b, final boolean b1, final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6, final boolean b7, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12, final boolean b13,", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n        }\n        else {\nNext line of code:\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                       16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        0, 0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSP", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(position.To2D()) <= spell.Range &&\n                                    minionPrediction.UnitPosition.To2D().Distance(position.To2D()) <= spell.Range)\n                                {\n                                    result.Add(minion);\n                ", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       if (graph.isDefCollider(x, y)) {\n            return true;\n        }\n        List<Node> path = new LinkedList<>();\n        path.add(x);\n        for (Node z : graph.getAdjacentNodes(x)) {\n            if (z.getNodeType() == NodeType.MEASURED) {\n                path.add(z);\n            }\n        }\n        if (path.size() >= 2) {\n            Node _a = path.get(0);\n            Node _b = path.get(1);\n            Node _c = path.get(2);\n            if (graph.isDefCollider(_a, _b, _c)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static boolean existsInducingPathOutOf(Node x, Node y, Graph graph) {\n        if (x.getNodeType() != NodeType.MEASURED) throw new IllegalArgumentException();\n        if (y.getNodeType() != NodeType.MEASURED) throw new IllegalArgumentException();\nNext line of code:\n        if (graph.isDefCollider(x, y)) {\n            return true;\n        }\n        List<Node> path = new LinkedList<>();\n        path.add(x);\n        for (Node z : graph.getAdjacentNodes(x)) {\n            if (z.getNodeType() == NodeType.MEASURED) {\n                path.add(z);\n            }\n        }\n        if (path.size() >= 2) {\n            Node _a = path.get(0);\n            Node _b = path.get(1);\n            Node _c = path.get(2);\n            if (graph.isDefCollider(_a, _b, _c)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static boolean existsInducingPathInto(Node x, Node y, Graph graph) {\n        if (x.getNodeType() != NodeType.MEASURED) throw new IllegalArgumentException();\n        if (y.getNodeType() != NodeType.MEASURED) throw new IllegalArgumentException();\nNext line of code:\n        if (graph.isDefCollider(x, y)) {\n            return true;\n        }\n        List<Node> path = new LinkedList<>();\n        path.add(x);\n        for (Node z : graph.getAdjacentNodes(x)) {\n            if (z.getNodeType() == NodeType.MEASURED) {\n                path.add(z);\n            }\n        }\n        if (path.size() >= 2) {\n            Node _a = path.get(0);\n            Node _b = path.get(1);\n            Node _c = path.get(2);\n            if (graph.isDefCollider(_a, _b, _c)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static boolean existsInducingPathOutOf(Node x, Node y, Graph graph) {\n        if (x.getNodeType() != NodeType.MEASURED) throw new IllegalArgumentException();\n        if (y.getNodeType() != NodeType.MEASURED) throw new IllegalArgumentException();\nNext line of code:\n        if (graph.isDefCollider(x, y)) {\n            return true;\n        }\n        List<Node> path = new LinkedList<>();\n        path.add(x);\n        for (Node z : graph.getAdjacentNodes(x)) {\n            if (z.getNodeType() == NodeType.MEASURED) {\n                path.add(z);\n            }\n        }\n        if (path.size() >= 2) {\n            Node _a = path.get(0);\n            Node _b = path.get(1);\n            Node _c = path.get(", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child=pop[i];\n                    if (child is Drawable)\n                        plcs.Push(child as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">Name of the element we are looking for</param>\n        /// <returns>The found element</returns>\n        public Drawable FindElement(string Name, bool recursive)\n        {\n            if (this.Name == Name)\n                return this;\n            var plcs=new System.Collections.Generic.Stack<PlaceBase>();\n            if (this is PlaceBase)\n                plcs.Push(this as PlaceBase);\n            while (plcs.Count != 0)\n            {\n                PlaceBase pop=plcs.Pop();\n                if (pop.Name == Name)\n                    return pop;\n                for (int i = 0; i < pop.Length; i++)\n                {\n                    var child=pop[i];\n                    if (child is Drawable)\n                        plcs.Push(child as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">Name of the element we are looking for</param>\n        /// <returns>The found element</returns>\n        public Drawable FindElement(string Name, bool recursive, bool ignoreParent)\n        {\n            if (this.Name == Name)\n                return this;\n            var plcs=new System.Collections.Generic.Stack<PlaceBase>();\n            if (this is PlaceBase)\n                plcs.Push(this as PlaceBase);\n            while (plcs.Count != 0)\n            {\n                PlaceBase pop=plcs.Pop();\n                if (pop.Name == Name)\n                    return pop;\n                for (int i = 0; i < pop.Length; i++)\n                {\n                    var child=pop[i];\n                    if (child is Drawable)\n                        plcs.Push(child as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">Name of the element we are looking for</param>\n        /// <returns>The found element</returns>\n        public Drawable FindElement(string Name, bool recursive, bool ignoreParent, bool ignoreSelf)\n        {\n            if (this.Name == Name)\n                return this;\n            var plcs=new System.Collections.Generic.Stack<PlaceBase>();\n            if (this is PlaceBase)\n                plcs.Push(this as PlaceBase);\n            while (plcs.Count != 0)\n            {\n                PlaceBase pop=plcs.Pop();\n                if (pop.Name == Name)\n                    return pop;\n                for (int i = 0; i < pop.Length; i++)\n                {\n                    var child=pop[i];\n                    if (child is Drawable)\n                        plcs.Push(child as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">Name of the element we are looking for</param>\n        /// <returns>The found element</returns>\n        public Drawable FindElement(string Name, bool recursive, bool ignoreParent, bool ignoreSelf, bool ignoreChildren)\n        {\n            if (this.Name == Name)\n                return this;\n            var plcs=new System.Collections.Generic.Stack<PlaceBase>();\n            if (this is PlaceBase)\n                plcs.Push(this as PlaceBase);\n            while (plcs.Count != 0)\n            {\n                PlaceBase pop=plcs.Pop();\n                if (pop.Name == Name)\n                    return pop;\n                for (int i = 0; i < pop.Length; i++)\n                {\n                    var child=pop[i];\n                    if (child is Drawable)\n                        plcs.Push(child as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">Name of the element we are looking for</param>\n        /// <returns>The found element</returns>\n        public Drawable FindElement(string Name, bool recursive, bool ignoreParent, bool ignoreSelf, bool ignoreChildren, bool ignoreChildrenChildren)\n        {\n            if (this.Name == Name)\n                return this;\n            var plcs=new System.Collections.Generic.Stack<PlaceBase>();\n            if (this is PlaceBase)\n                plcs.Push(this as PlaceBase);\n            while (plcs.Count != 0)\n            {\n                PlaceBase pop=plcs.Pop();\n                if (pop.Name == Name)\n                    return pop;\n                for (int i = 0; i < pop.Length; i++)\n                {\n                    var child=pop[i];\n                    if (child is Drawable)\n                        plcs.Push(child as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">Name of the element we are looking for</param>\n        /// <returns>The found element</returns>\n        public Drawable FindElement(string Name, bool recursive, bool ignoreParent, bool ignoreSelf, bool ignoreChildren, bool ignoreChildrenChildren, bool ignoreChildrenChildrenChildren)\n        {\n            if (this.Name == Name)\n                return this;\n            var plcs=new System.Collections.Generic.Stack<PlaceBase>();\n            if (this is PlaceBase)\n                plcs.Push(this as PlaceBase);\n            while (plcs.Count != 0)\n            {\n                PlaceBase pop=plcs.Pop();\n                if (pop.Name == Name)\n                    return pop;\n                for (int i = 0; i < pop.Length; i++)\n                {\n                    var child=pop[i];\n                    if (child is Drawable)\n                        plcs.Push(child as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">Name of the element we are looking for</param>\n        /// <returns>The found element</returns>\n        public Drawable FindElement(string Name, bool recursive, bool ignoreParent, bool ignoreSelf, bool ignoreChildren, bool ignoreChildrenChildren, bool ignoreChildrenChildrenChildren)\n        {\n            if (this.Name == Name)\n                return this;\n            var plcs=new System.Collections.Generic.Stack<PlaceBase>();\n            if (this is PlaceBase)\n                plcs.Push(this as PlaceBase);\n            while (plcs.Count != 0)\n            {\n                PlaceBase pop=plcs.Pop();\n                if (pop.Name == Name)\n                    return pop;\n                for (int i = 0; i < pop.Length; i++)\n                {\n                    var child=pop[i];\n                    if (child is Drawable)\n                        plcs.Push(child as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">Name of the element we are looking for</param>\n        /// <returns>The found element</returns>\n        public Drawable FindElement(string Name, bool recursive, bool ignoreParent, bool ignoreSelf, bool ignoreChildren, bool ignoreChildrenChildren, bool ignoreChildrenChildrenChildren, bool ignoreChildrenChildrenChildrenChildren)\n        {\n            if (this.Name == Name)\n                return this;\n            var plcs=new System.Collections.Generic.Stack<PlaceBase>();\n            if (this is PlaceBase)\n                plcs.Push(this as PlaceBase);\n            while (plcs.Count != 0)\n            {\n                PlaceBase pop=plcs.Pop();\n                if (pop.Name == Name)\n                    return pop;\n                for (int i = 0; i < pop.Length; i++)\n                {\n                    var child=pop[i];\n                    if (child is Drawable)\n                        plcs.Push(child as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">Name of the element we are looking for</param>\n        /// <returns>The found element</returns>\n        public Drawable FindElement(string Name, bool recursive, bool ignoreParent, bool ignoreSelf, bool ignoreChildren, bool ignoreChildrenChildren, bool ignoreChildrenChildrenChildren, bool ignore", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (getClass() != other.getClass()) {\n            return false;\n        }\n        if (getUpdateUser() == null) {\n            if (other.getUpdateUser() != null) {\n                return false;\n            }\n        } else if (!getUpdateUser().equals(other.getUpdateUser())) {\n            return false;\n        }\n        if (getUpdateUserFullName() == null) {\n            if (other.getUpdateUserFullName() != null) {\n                return false;\n            }\n        } else if (!getUpdateUserFullName().equals(other.getUpdateUserFullName())) {\n            return false;\n        }\n        if (getDescription() == null) {\n            if (other.getDescription() != null) {\n                return false;\n            }\n        } else if (!getDescription().equals(other.getDescription())) {\n            return false;\n        }\n        if (getFileId() == null) {\n            if (other.getFileId() != null) {\n                return false;\n            }\n        } else if (!getFileId().equals(other.getFileId())) {\n            return false;\n        }\n        if (getFile() == null) {\n            if (other.getFile() != null) {\n                return false;\n            }\n        } else if (!getFile().equals(other.getFile())) {\n            return false;\n        }\n        if (getFinancialEntityId() == null) {\n            if (other.getFinancialEntityId() != null) {\n                return false;\n            }\n        } else if (!getFinancialEntityId().equals(other.getFinancialEntityId())) {\n            return false;\n        }\n        if (getPersonFinIntDisclosureId() == null) {\n            if (other.getPersonFinIntDisclosureId() != null) {\n                return false;\n            }\n        } else if (!getPersonFinIntDisclosureId().equals(other.getPersonFinIntDisclosureId())) {\n            return false;\n        }\n        if (getUpdateTimestamp() == null) {\n            if (other.getUpdateTimestamp() != null) {\n                return false;\n            }\n        } else if (!getUpdateTimestamp().equals(other.getUpdateTimestamp())) {\n            return false;\n        }\n        return true;\n    }\n    public boolean matches(FinancialEntityAttachment other, BusinessObjectService businessObjectService) {\n        if (this == other) {\n            return true;\n        }\nNext line of code:\n        if (getClass() != other.getClass()) {\n            return false;\n        }\n        if (getUpdateUser() == null) {\n            if (other.getUpdateUser() != null) {\n                return false;\n            }\n        } else if (!getUpdateUser().equals(other.getUpdateUser())) {\n            return false;\n        }\n        if (getUpdateUserFullName() == null) {\n            if (other.getUpdateUserFullName() != null) {\n                return false;\n            }\n        } else if (!getUpdateUserFullName().equals(other.getUpdateUserFullName())) {\n            return false;\n        }\n        if (getDescription() == null) {\n            if (other.getDescription() != null) {\n                return false;\n            }\n        } else if (!getDescription().equals(other.getDescription())) {\n            return false;\n        }\n        if (getFileId() == null) {\n            if (other.getFileId() != null) {\n                return false;\n            }\n        } else if (!getFileId().equals(other.getFileId())) {\n            return false;\n        }\n        if (getFile() == null) {\n            if (other.getFile() != null) {\n                return false;\n            }\n        } else if (!getFile().equals(other.getFile())) {\n            return false;\n        }\n        if (getFinancialEntityId() == null) {\n            if (other.getFinancialEntityId() != null) {\n                return false;\n            }\n        } else if (!getFinancialEntityId().equals(other.getFinancialEntityId())) {\n            return false;\n        }\n        if (getPersonFinIntDisclosureId() == null) {\n            if (other.getPersonFinIntDisclosureId() != null) {\n                return false;\n            }\n        } else if (!getPersonFinIntDisclosureId().equals(other.getPersonFinIntDisclosureId())) {\n            return false;\n        }\n        if (getUpdateTimestamp() == null) {\n            if (other.getUpdateTimestamp() != null) {\n                return false;\n            }\n        } else if (!getUpdateTimestamp().equals(other.getUpdateTimestamp())) {\n            return false;\n        }\n        return true;\n    }\n    public boolean matches(FinancialEntityAttachment other, String updateUser, String updateUserFullName, String description, String fileId, String file, String financialEntityId, String personFinIntDisclosureId, String statusCode, String updateTimestamp) {\n        if (this == other) {\n            return true;\n        }\nNext line of code:\n        if (getClass() != other.getClass()) {\n            return false;\n        }\n        if (getUpdateUser() == null) {\n            if (other.getUpdateUser() != null) {\n                return false;\n            }\n        } else if (!getUpdateUser().equals(other.getUpdateUser())) {\n            return false;\n        }\n        if (getUpdateUserFullName() == null) {\n            if (other.getUpdateUserFullName() != null) {\n                return false;\n            }\n        } else if (!getUpdateUserFullName().equals(other.getUpdateUserFullName())) {\n            return false;\n        }\n        if (getDescription() == null) {\n            if (other.getDescription() != null) {\n                return false;\n            }\n        } else if (!getDescription().equals(other.getDescription())) {\n            return false;\n        }\n        if (getFileId() == null) {\n            if (other.getFileId() != null) {\n                return false;\n            }\n        } else if (!getFileId().equals(other.getFileId())) {\n            return false;\n        }\n        if (getFile() == null) {\n            if (other.getFile() != null) {\n                return false;\n            }\n        } else if (!getFile().equals(other.getFile())) {\n            return false;\n        }\n        if (getFinancialEntityId() == null) {\n            if (other.getFinancialEntityId() != null) {\n                return false;\n            }\n        } else if (!getFinancialEntityId().equals(other.getFinancialEntityId())) {\n            return false;\n        }\n        if (getPersonFinIntDisclosureId() == null) {\n            if (other.getPersonFinIntDisclosureId() != null) {\n                return false;\n            }\n        } else if (!getPersonFinIntDisclosureId().equals(other.getPersonFinIntDisclosureId())) {\n            return false;\n        }\n        if (getUpdateTimestamp() == null) {\n            if (other.getUpdateTimestamp() != null) {\n                return false;\n            }\n        } else if (!getUpdateTimestamp().equals(other.getUpdateTimestamp())) {\n            return false;\n        }\n        return true;\n    }\n    public boolean matches(FinancialEntityAttachment other, String updateUser, String updateUserFullName, String description, String fileId, String file, String financialEntityId, String personFinIntDisclosureId, String statusCode, String updateTimestamp, String attachmentId) {\n        if (this == other) {\n            return true;\n        }\nNext line of code:\n        if (getClass() != other.getClass()) {\n            return false;\n        }\n        if (getUpdateUser() == null) {\n            if (other.getUpdateUser() != null) {\n                return false;\n            }\n        } else if (!getUpdateUser().equals(other.getUpdateUser())) {\n            return false;\n        }\n        if (getUpdateUserFullName() == null)", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (m_Item.From == mobile)\n                            continue;\n                        if (m_Item.From.CanBeHarmful(mobile, false))\n                        {\n                            m_Item.From.DoHarmful(mobile);\n                            AOS.Damage(mobile, m_Item.From, m_Item.GetDamage(), 0, 100, 0, 0, 0);\n                            mobile.PlaySound(0x208);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg.User, msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Message(PlayerMobile user, string text)\n\t\t{\n\t\t\tMessage(user, text, false);\n\t\t}\n\t\tpublic virtual void Message(PlayerMobile user, string text, bool message)\n\t\t{\n\t\t\tMessage(user, text, message);\n\t\t}\n\t\tpublic virtual void Message(PlayerMobile user, string text, bool message, bool messageToAll)\n\t\t{\n\t\t\tMessage(user, text, message, messageToAll);\n\t\t}\n\t\tpublic virtual void Message(PlayerMobile user, string text, bool message, bool messageToAll, bool messageToAllChannels)\n\t\t{\n\t\t\tMessage(user, text, message, messageToAll, messageToAllChannels);\n\t\t}\n\t\tpublic virtual void Message(PlayerMobile user, string text, bool message, bool messageToAll, bool messageToAllChannels, bool messageToAllChannelsExcept)\n\t\t{\n\t\t\tMessage(user, text, message, messageToAll, messageToAllChannels, messageToAllChannelsExcept);\n\t\t}\n\t\tpublic virtual void Message(PlayerMobile user, string text, bool message, bool messageToAll, bool messageToAllChannels, bool messageToAllChannelsExcept, bool messageToAllChannelsExceptExcept)\n\t\t{\n\t\t\tMessage(user, text, message, messageToAll, messageToAllChannels, messageToAllChannelsExcept, messageToAllChannelsExceptExcept);\n\t\t}\n\t\tpublic virtual void Message(PlayerMobile user, string text, bool message, bool messageToAll, bool messageToAllChannels, bool messageToAllChannelsExcept, bool messageToAllChannelsExceptExcept, bool messageToAllChannelsExceptExceptExcept)\n\t\t{\n\t\t\tMessage(user, text, message, messageToAll, messageToAllChannels, messageToAllChannelsExcept, messageToAllChannelsExceptExcept, messageToAllChannelsExceptExceptExcept);\n\t\t}\n\t\tpublic virtual void Message(PlayerMobile user, string text, bool message, bool messageToAll, bool messageToAllChannels, bool messageToAllChannelsExcept, bool messageToAllChannelsExceptExcept, bool messageToAllChannelsExceptExceptExcept, bool messageToAllChannelsExceptExceptExceptExcept)\n\t\t{\n\t\t\tMessage(user, text, message, messageToAll, messageToAllChannels, messageToAllChannelsExcept", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId, sCompoName);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId) {\n    return mock.getAvailCompoIds(sClientSpaceId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName,\n          String sComponentName) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId, sCompoName, sComponentName);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId, sCompoName);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId) {\n    return mock.getAvailCompoIds(sClientSpaceId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName,\n          String sComponentName, String sProfile) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId, sCompoName, sComponentName, sProfile);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName,\n          String sComponentName, String sProfile) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId, sCompoName, sComponentName, sProfile);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName,\n          String sComponentName, String sProfile, String sComponentType) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId, sCompoName, sComponentName, sProfile,\n          sComponentType);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName,\n          String sComponentName, String sProfile, String sComponentType) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId, sCompoName, sComponentName, sProfile,\n          sComponentType);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName,\n          String sComponentName, String sProfile, String sComponentType, String sComponentType2) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId, sCompoName, sComponentName, sProfile,\n          sComponentType, sComponentType2);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName,\n          String sComponentName, String sProfile, String sComponentType, String sComponentType2,\n          String sComponentType3) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId, sCompoName, sComponentName, sProfile, sComponentType,\n          sComponentType2, sComponentType3);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName,\n          String sComponentName, String sProfile, String sComponentType, String sComponentType2,\n          String sComponentType3, String sComponentType4) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId, sCompoName, sComponentName, sProfile,\n          sComponentType, sComponentType2, sComponentType3, sComponentType4);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName,\n          String sComponentName, String sProfile, String sComponentType, String sComponentType2,\n          String sComponentType3, String sComponentType4, String sComponentType5) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId, sCompoName, sComponentName, sProfile,\n          sComponentType, sComponentType2, sComponentType3, sComponentType4, sComponentType5);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName,\n          String sComponentName,", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog1 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog1.show(mActivity.getFragmentManager(), BrowserActivity.TAG_DIALOG);\n                    return true;\n                case R.id.actionrename:\n                    for (int i = 0; i < checkedItemSize; i++) {\n                        final int key = items.keyAt(i);\n                        if (items.get(key)) {\n                            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog1 = RenameDialog.instantiate(files);\n                    mode.finish();\n                    dialog1.show(mActivity.getFragmentManager(), BrowserActivity.TAG_DIALOG);\n                    return true;\n                case R.id.actiondetails:\n                    for (int i = 0; i < checkedItemSize; i++) {\n                        final int key = items.keyAt(i);\n                        if (items.get(key)) {\n                            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog1 = FilePropertiesDialog.instantiate(files);\n                    mode.finish();\n                    dialog1.show(mActivity.getFragmentManager(), BrowserActivity.TAG_DIALOG);\n                    return true;\n                default:\n                    return false;\n            }\n        }\n    }\n}\n\\end{code}\n\nComment: I'm not sure what you're asking.  Are you asking how to get the selected items from a ListView?\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm not sure what you're asking.  Are you asking how to get the selected items from a ListView?\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to get the selected items from a ListView.\n\nComment: I'm asking how to", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void close(ChatMessage chatmessage) {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void close() {\n        this.close(new ChatMessage(\"disconnect.normal\", new Object[0]));\n    }\n    public void d() {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void e() {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void f() {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void g() {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void h() {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void i() {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void j() {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void k() {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void l() {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void m() {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void n() {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void o() {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();\n        try {\n            this.i.clear();\n        } finally {\n            this.j.writeLock().unlock();\n        }\n    }\n    public void p() {\n        this.m();\n        this.a();\n        this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.m = null;\n        this.n = null;\n        this.o = false;\n        this.p = false;\n        this.j.writeLock().lock();", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               z_dict[z_key][per] = z_dict[z_key][per][0]\n                z_err_dict[z_key][per] = z_dict[z_key][per][1]\n                \n                # if there is tipper data,", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    } else {\n      String name = recipients.get(0).toShortString();\nNext line of code:\n      return context.getString(resourceTwo, name);\n    }\n  }\n}\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if gonk:\n            env[\"GONK_BUILD_ID\"] = self.config[\"gonk\"][\"b2g\"]\n            env[\"GONK_PRODUCT\"] = self.config[\"gonk\"][\"product\"]\n        if hosts_file_path:\n            env[\"HOSTS_FILE\"] = hosts_file_path\n        return env\n    def build(self, release=False, dev=False, gonk=False, hosts_file_path=None):\n        \"\"\"Build Servo.\n        This is a wrapper around the build script.\n        \"\"\"\n        if not self.context.bootstrapped:\n            self.context.bootstrapped = True\n            self.context.topdir = path.join(self.context.topdir, \"build\")\n            self.context.build_dir = path.join(self.context.topdir, \"build\")\n            self.context.sharedir = path.join(self.context.topdir, \"sharedir\")\n            self.context.target_dir = path.join(self.context.topdir, \"target\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.context.sharedir_dir = path.join(self.context.topdir, \"sharedir\")\n            self.", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                for test in tests:\n                    source_file = SourceFile(tests_root,\n                                           rel_path_to_url(path),\n                                           obj[\"url_base\"])\n                    source_file.update(test)\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                    source_files[source_file.rel_path] = source_file\n                    tests_root = source_file.tests_root\n                ", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.remove();\n        }\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding(new Object[] {});\n    }\n    private CompilerConfiguration createCompilerConfiguration() {\n        return new CompilerConfiguration();\n    }\n    private void compileAndCache(final ScriptingSecurityManager scriptingSecurityManager) throws Throwable {\n        final GroovyShell shell = new GroovyShell(scriptClassLoader, createBindingForCompilation(), createCompilerConfiguration());\n        final GroovyShellClassCompiler compiler = new GroovyShellClassCompiler(shell, scriptingSecurityManager);\n        final GroovyShellClassCompiler.Result result = compiler.compile(script);\n        if (result.getException() != null) {\n            errorsInScript = result.getException();\n            return;\n        }\n        compiledScript = result.getCompiledClass();\n    }\n    private void handleScriptRuntimeException(final GroovyRuntimeException e, final PrintStream outStream, final IFreeplaneScriptErrorHandler errorHandler) {\n        if (e.getCause() instanceof AccessControlException) {\n            throw (AccessControlException) e.getCause();\n        }\n        if (e.getCause() instanceof AccessControlException) {\n            throw (AccessControlException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();\n        }\n        if (e.getCause() instanceof GroovyRuntimeException) {\n            throw (GroovyRuntimeException) e.getCause();", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n            throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect();\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMs, int retryMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMs, int retryMsMs, int retryMsMsMs, int retryMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMs, int retryMsMs, int retryMsMsMs, int retryMsMsMsMs, int retryMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMs, int retryMsMsMs, int retryMsMsMsMs, int retryMsMsMsMsMs, int retryMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMs, int retryMsMsMs, int retryMsMsMsMs, int retryMsMsMsMsMs, int retryMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMs, int retryMsMsMsMs, int retryMsMsMsMsMs, int retryMsMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMsMs, int retryMsMsMsMsMs, int retryMsMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMsMsMsMs, int retryMsMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMsMsMsMs, int retryMsMsMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMsMsMsMsMs, int retryMsMsMsMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMsMsMsMsMsMsMs, int retryMsMsMsMsMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMsMsMsMsMsMsMsMs, int retryMsMsMsMsMsMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMsMsMsMsMsMsMsMsMs, int retryMsMsMsMsMsMsMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMsMsMsMsMsMsMsMsMs, int retryMsMsMsMsMsMsMsMsMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMsMsMsMsMsMsMsMsMsMsMs, int retryMsMsMsMsMsMsMsMsMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMsMsMsMsMsMsMsMsMsMsMsMs, int retryMsMsMsMsMsMsMsMsMsMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMsMsMsMsMsMsMsMsMsMsMsMsMs, int retryMsMsMsMsMsMsMsMsMsMsMsMsMsMsMs);\n        /// <summary>\n        /// Method to override reconnecting for a wrapped server adapter\n        /// </summary>\n        /// <returns>True indicates a reconnect was successful</returns>\n        protected abstract bool ServerReconnect(int timeout, int timeoutMs, int retry, int retryMs, int retryMsMsMsMsMsMsMsMsMsMsMsMs", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E = np.reshape(grad_E, (-1,3))\n        transformed_grad.append(grad_E)\n      transformed_grad = np.asarray(transformed_grad)\n      return transformed_grad\n\nclass GradientTransformer(Transformer):\n  \"\"\"\n  TODO(rbharath): Needs more discussion of what a gradient is semantically.\n  It's evident that not every Dataset has meaningful gradient information, so\n  this transformer can't be applied to all data. Should there be a subclass of\n  Dataset named GradientDataset perhaps?\n  \"\"\"\n  def __init__(self, transform_X=False, transform_y=False, transform_w=False,\n               dataset=None):\n    \"\"\"Initialize normalization transformation.\"\"\"\n    super(GradientTransformer, self).__init__(\n        transform_X=transform_X, transform_y=transform_y,\n        transform_w=transform_w, dataset=dataset)\n    X_means, X_stds, y_means, y_stds = dataset.get_statistics()\n    self.X_means = X_means \n    self.X_stds = X_stds\n    self.y_means = y_means \n    # Control for pathological case with no variance.\n    y_stds[y_stds == 0] = 1.\n    self.y_stds = y_stds\n    true_grad, ydely_means = get_grad_statistics(dataset)\n    self.grad = np.reshape(true_grad, (true_grad.shape[0],-1,3))\n    self.ydely_means = ydely_means\n  def transform(self, dataset, parallel=False):\n    return super(GradientTransformer, self).transform(\n        dataset, parallel=parallel)\n  def transform_array(self, X, y, w):\n    \"\"\"Transform the data in a set of (X, y, w) arrays.\"\"\"\n    if self.transform_X:\n      X = np.nan_to_num((X - self.X_means) / self.X_stds)\n    if self.transform_y:\n      y = np.nan_to_num((y - self.y_means) / self.y_stds)\n      # add 2nd order correction term to gradients\n      grad_var = 1/self.y_stds[0]*(self.ydely_means-self.y_means[0]*self.y_means[1:])\n      for i in range(y.shape[0]):\n        y[i,1:] = y[i,1:] - grad_var*y[i,0]/self.y_stds[0]\n    return (X, y, w)\n  def untransform(self, z):\n    \"\"\"\n    Undo transformation on provided data.\n    \"\"\"\n    if self.transform_X:\n      return z * self.X_stds + self.X_means\n    elif self.transform_y:\n      # untransform grad\n      grad_var = 1/self.y_stds[0]*(self.ydely_means-self.y_means[0]*self.y_means[1:])\n      for i in range(z.shape[0]):\n        z[i,1:] = z[i,0]*grad_var + self.y_stds[0]*z[i,1:] + self.y_means[1:]\n      # untransform energy\n      z[:,0] = z[:,0] * self.y_stds[0] + self.y_means[0]\n      return z\n  def untransform_grad(self, grad, tasks):\n    \"\"\"\n    Undo transformation on gradient.\n    \"\"\"\n    if self.transform_y:\n      grad_means = self.y_means[1:]\n      energy_var = self.y_stds[0]        \n      grad_var =", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(caseInsensitive); // this is to avoid eclipse warning only.\n\t\tif (!(OrderInvestigationForStatusChangeVo.class.isAssignableFrom(obj.getClass())))\n\t\t{\n\t\t\tthrow new ClassCastException(\"The class variable OrderInvestigationForStatusChangeVo is assignable only from the class OrderInvestigationForStatusChangeVo\");\n\t\t}\n\t\tif (this.isValidated)\n\t\t{\n\t\t\tif(caseInsensitive)\n\t\t\t\t{\n\t\t\t\t\tif (this.ordinvcurrentstatus == null)\n\t\t\t\t\treturn ((OrderInvestigationForStatusChangeVo)obj).ordinvcurrentstatus == null ? 0 : ((OrderInvestigationForStatusChangeVo)obj).ordinvcurrentstatus.compareTo(this.ordinvcurrentstatus);\n\t\t\t\treturn ((OrderInvestigationForStatusChangeVo)obj).ordinvcurrentstatus == null ? -1 : this.ordinvcurrentstatus.compareTo(((OrderInvestigationForStatusChangeVo)obj).ordinvcurrentstatus);\n\t\t\t}\n\t\t\tif (this.ordinvcurrentstatus == null)\n\t\t\t\treturn -1;\n\t\t\treturn this.ordinvcurrentstatus.compareTo(((OrderInvestigationForStatusChangeVo)obj).ordinvcurrentstatus);\n\t\t}\n\t\treturn super.compareTo(obj);\n\t}\n\tpublic int hashCode()\n\t{\n\t\treturn this.getClass().hashCode();\n\t}\n\tpublic boolean equals(Object obj)\n\t{\n\t\tif (!(obj instanceof ims.ocrr.vo.OrderInvestigationForStatusChangeVo))\n\t\t\treturn false;\n\t\telse\n\t\t{\n\t\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo)obj;\n\t\t\tif (this.isBusy)\n\t\t\treturn false;\n\t\t\tif (this.isValidated)\n\t\t\t{\n\t\t\t\tif (other.isBusy)\n\t\t\t\t\t\treturn false;\n\t\t\t\tif (this.isValidated() == false)\n\t\t\t\t\treturn false;\n\t\t\t\tif (other.isValidated() == false)\n\t\t\t\t\treturn false;\n\t\t\t\tif (this.ordinvcurrentstatus == null)\n\t\t\t{\n\t\t\t\tif (other.ordinvcurrentstatus != null)\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if (!this.ordinvcurrentstatus.equals(other.ordinvcurrentstatus))\n\t\t\t\t\treturn false;\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\tpublic String toString()\n\t{\n\t\tStringBuffer sb = new StringBuffer();\n\t\tsb.append(\"[id=\");\n\t\tsb.append(this.getId());\n\t\tsb.append(\", version=\");\n\t\tsb.append(this.getVersion());\n\t\tsb.append(\", ordInvCurrentStatus=\");\n\t\tsb.append(this.ordinvcurrentstatus);\n\t\tsb.append(\", ordInvStatusHistory=\");\n\t\tsb.append(this.ordinvstatushistory);\n\t\tsb.append(\"]\");\n\t\treturn sb.toString();\n\t}\n\tpublic String toXMLString()\n\t{\n\t\tString xmlString = \"\";\n\t\tStringBuffer sb = new StringBuffer();\n\t\tsb.append(\"<class type=\\\"OrderInvestigationForStatusChangeVo\\\" id=\\\"\");\n\t\tsb.append(this.getId());\n\t\tsb.append(\"\\\" version=\\\"\");\n\t\tsb.append(this.getVersion());\n\t\tsb.append(\"\\\" ordInvCurrentStatus=\\\"\");\n\t\tif (this.ordinvcurrentstatus == null)\n\t\t\tsb.append(\"null\");\n\t\telse\n\t\t\tsb.append(this.ordinvcurrentstatus);\n\t\tsb.append(\"\\\" ordInvStatusHistory=\\\"\");\n\t\tif (this.ordinvstatushistory == null)\n\t\t\tsb.append(\"null\");\n\t\telse\n\t\t\tsb.append(this.ordinvstatushistory);\n\t\tsb.append(\"\\\" />\");\n\t\treturn sb.toString();\n\t}\n\tpublic void fromXMLString(String xmlString) throws Exception\n\t{\n\t\tString xmlNodeName = null;\n\t\tif(xmlString != null)\n\t\t{\n\t\t\txmlNodeName = xmlString.toUpperCase();\n\t\t\tif(xmlNodeName.indexOf(\"CLASS\") == -1 && xmlNodeName.indexOf(\"CLASS_\") == -1)\n\t\t\t{\n\t\t\t\txmlNodeName = \"CLASS\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(xmlNodeName == null || xmlNodeName.equals(\"OBJECT\"))\n\t\t{\n\t\t\tthis.setClass(new ims.ocrr.vo.OrderInvestigationForStatusChangeVoCollection());\n\t\t}\n\t\telse if(xmlNodeName.equals(\"CLASS\"))\n\t\t{\n\t\t\tthis.setClass(new ims.ocrr.vo.OrderInvestigationForStatusChangeVoCollection());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tString xmlText = xmlString;\n\t\t\tString xmlValue = null;\n\t\t\t\n\t\t\tint xmlPos = xmlText.indexOf(\":\");\n\t\t\tif(xmlPos + 1 < xmlText.length())\n\t\t\t{\n\t\t\t\txmlValue = xmlText.substring(xmlPos + 1);\n\t\t\t}\n\t\t\tif(xmlValue != null)\n\t\t\t{\n\t\t\t\tif(xmlValue.equals(\"null\") || xmlValue.equals(\"\"))\n\t\t\t\t{\n\t\t\t\t\t//ie: null or \"\"\n\t\t\t\t}\n\t\t\t\telse if(", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\n        assertTrue(found.get(0).getTags().contains(\"search-tag1\"));\n        assertTrue(found.get(0).getTags().contains(\"search-tag2\"));\n        assertTrue(found.get(1).getTags().contains(\"search-tag1\"));\n        assertTrue(found.get(1).getTags().contains(\"search-tag2\"));\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullTags() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffset() throws Exception {\n        stackDao.searchStacks(null, asList(\"search-tag1\", \"search-tag2\"), 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTags() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void shouldThrowNpeWhenSearchingStacksWithNullOffsetAndNullTagsAndNullOffset() throws Exception {\n        stackDao.searchStack", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterFamily(pf);\n        depthParameter.setParameterName(DEPTH);\n        depthParameter.setParameterValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION REGEXP\nNext line of code:\n        Parameter exclusionRegexpParameter = new ParameterImpl();\n        exclusionRegexpParameter.setParameterFamily(pf);\n        exclusionRegexpParameter.setParameterName(EXCLUSION_REGEXP);\n        exclusionRegexpParameter.setParameterValue(exclusionRegexp);\n        crawlParameters.add(exclusionRegexpParameter);\n        //INCLUSION REGEXP\nNext line of code:\n        Parameter inclusionRegexpParameter = new ParameterImpl();\n        inclusionRegexpParameter.setParameterFamily(pf);\n        inclusionRegexpParameter.setParameterName(INCLUSION_REGEXP);\n        inclusionRegexpParameter.setParameterValue(inclusionRegexp);\n        crawlParameters.add(inclusionRegexpParameter);\n        //MAX DURATION\nNext line of code:\n        Parameter maxDurationParameter = new ParameterImpl();\n        maxDurationParameter.setParameterFamily(pf);\n        maxDurationParameter.setParameterName(MAX_DURATION);\n        maxDurationParameter.setParameterValue(maxDuration);\n        crawlParameters.add(maxDurationParameter);\n        //MAX DOCUMENTS\nNext line of code:\n        Parameter maxDocumentsParameter = new ParameterImpl();\n        maxDocumentsParameter.setParameterFamily(pf);\n        maxDocumentsParameter.setParameterName(MAX_DOCUMENTS);\n        maxDocumentsParameter.setParameterValue(maxDocuments);\n        crawlParameters.add(maxDocumentsParameter);\n        //PROXY\nNext line of code:\n        Parameter proxyHostParameter = new ParameterImpl();\n        proxyHostParameter.setParameterFamily(pf);\n        proxyHostParameter.setParameterName(PROXY_HOST);\n        proxyHostParameter.setParameterValue(proxyHost);\n        crawlParameters.add(proxyHostParameter);\n        Parameter proxyPortParameter = new ParameterImpl();\n        proxyPortParameter.setParameterFamily(pf);\n        proxyPortParameter.setParameterName(PROXY_PORT);\n        proxyPortParameter.setParameterValue(proxyPort);\n        crawlParameters.add(proxyPortParameter);\n        return crawlParameters;\n    }\n}", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t\tif (kind == LNodeKind.List)\n\t\t\t\t{\n\t\t\t\tif (pattern.Kind != LNodeKind.List)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t\n\t\t\t\t\t// [$capt", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (colisionList.Count() > 0)\n                    {\n                        extendedFarmLocation = colisionList[0];\n                        extendedWillHit++;\n                    }\n                }\n                if (extendedWillHit >= zedMenu.GetParamSlider(\"koreanzed.laneclearmenu.useqif\"))\n                {\n                    actionQueue.EnqueueAction(\n                        laneClearQueue,\n                        () => true,\n                        () => true,\n                        () => !q.IsReady());\n                    return;\n                }\n            }\n        }\n        public void JungleClear()\n        {\n            List<Obj_AI_Base> shadows = GetShadows();\n            if (!shadows.Any()\n                || (!q.UseOnJungleClear && !e.UseOnJungleClear)\n                || (!q.IsReady() && !e.IsReady()))\n            {\n                return;\n            }\n            foreach (Obj_AI_Base objAiBase in shadows)\n            {\n                if (((q.UseOnJungleClear && !q.IsReady()) || !q.UseOnJungleClear)\n                    && ((e.UseOnJungleClear && !e.IsReady()) || !e.UseOnJungleClear))\n                {\n                    break;\n                }\n                if (q.UseOnJungleClear && q.IsReady())\n                {\n                    AIHeroClient target = TargetSelector.GetTarget(q.Range, q.DamageType, true, null, objAiBase.Position);\n                    if (target != null)\n                    {\n                        PredictionInput predictionInput = new PredictionInput();\n                        predictionInput.Range = q.Range;\n                        predictionInput.RangeCheckFrom = objAiBase.Position;\n                        predictionInput.From = objAiBase.Position;\n                        predictionInput.Delay = q.Delay;\n                        predictionInput.Speed = q.Speed;\n                        predictionInput.Unit = target;\n                        predictionInput.Type = SkillshotType.SkillshotLine;\n                        predictionInput.Collision = false;\n                        PredictionOutput predictionOutput = Prediction.GetPrediction(predictionInput);\n                        if (predictionOutput.Hitchance >= HitChance.Medium)\n                        {\n                            q.Cast(predictionOutput.CastPosition);\n                        }\n                    }\n                }\n                if (e.UseOnJungleClear && e.IsReady())\n                {\n                    AIHeroClient target = TargetSelector.GetTarget(e.Range, e.DamageType, true, null, objAiBase.Position);\n                    if (target != null)\n                    {\n                        e.Cast();\n                    }\n                }\n            }\n        }\n        public void TeamFight()\n        {\n            List<Obj_AI_Base> shadows = GetShadows();\n            if (!shadows.Any()\n                || (!q.UseOnTeamFight && !e.UseOnTeamFight)\n                || (!q.IsReady() && !e.IsReady()))\n            {\n                return;\n            }\n            foreach (Obj_AI_Base objAiBase in shadows)\n            {\n                if (((q.UseOnTeamFight && !q.IsReady()) || !q.UseOnTeamFight)\n                    && ((e.UseOnTeamFight && !e.IsReady()) || !e.UseOnTeamFight))\n                {\n                    break;\n                }\n                if (q.UseOnTeamFight && q.IsReady())\n                {\n                    AIHeroClient target = TargetSelector.GetTarget(q.Range, q.DamageType, true, null, objAiBase.Position);\n                    if (target != null)\n                    {\n                        PredictionInput predictionInput = new PredictionInput();\n                        predictionInput.Range = q.Range;\n                        predictionInput.RangeCheckFrom = objAiBase.Position;\n                        predictionInput.From = objAiBase.Position;\n                        predictionInput.Delay = q.Delay;\n                        predictionInput.Speed = q.Speed;\n                        predictionInput.Unit = target;\n                        predictionInput.Type = SkillshotType.SkillshotLine;\n                        predictionInput.Collision = false;\n                        PredictionOutput predictionOutput = Prediction.GetPrediction(predictionInput);\n                        if (predictionOutput.Hitchance >= HitChance.Medium)\n                        {\n                            q.Cast(predictionOutput.CastPosition);\n                        }\n                    }\n                }\n                if (e.UseOnTeamFight && e.IsReady())\n                {\n                    AIHeroClient target = TargetSelector.GetTarget(e.Range, e.DamageType, true, null, objAiBase.Position);\n                    if (target != null)\n                    {\n                        e.Cast();\n                    }\n                }\n            }\n        }\n        public void Combo()\n        {\n            List<Obj_AI_Base> shadows = GetShadows();\n            if (!shadows.Any()\n                || (!q.UseOnCombo && !e.UseOnCombo)\n                || (!q.IsReady() && !e.IsReady()))\n            {\n                return;\n            }\n            foreach (Obj_AI_Base objAiBase in shadows)\n            {\n                if (((q.UseOnCombo && !q.IsReady()) || !q.UseOnCombo)\n                    && ((e.UseOnCombo && !e.IsReady()) || !e.UseOnCombo))\n                {\n                    break;\n                }\n                if (q.UseOnCombo && q.IsReady())\n                {\n                    AIHeroClient target = TargetSelector.GetTarget(q.Range, q.DamageType, true, null, objAiBase.Position);\n                    if (target != null)\n                    {\n                        PredictionInput predictionInput = new PredictionInput();\n                        predictionInput.Range = q.Range;\n                        predictionInput.RangeCheckFrom = objAiBase.Position;\n                        predictionInput.From = objAiBase.Position;\n                        predictionInput.Delay = q.Delay;\n                        predictionInput.Speed = q.Speed;\n                        predictionInput.Unit = target;\n                        predictionInput.Type = SkillshotType.SkillshotLine;\n                        predictionInput.Collision = false;\n                        PredictionOutput predictionOutput = Prediction.GetPrediction(predictionInput);\n                        if (predictionOutput.Hitchance >= HitChance.Medium)\n                        {\n                            q.Cast(predictionOutput.CastPosition);\n                        }\n                    }\n                }\n                if (e.UseOnCombo && e.IsReady())\n                {\n                    AIHeroClient target = TargetSelector.GetTarget(e.Range, e.DamageType, true, null, objAiBase.Position);\n                    if (target != null)\n                    {\n                        e.Cast();\n                    }\n                }\n            }\n        }\n        public void Harass()\n       ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tcontextMenus = new ContextMenus();\n\t\tcontextMenus.initialize(loadContextMenus(context));\n\t\tcontextMenus.contextMenuPCI = factory.createMenu(startControlID.intValue() + 1);\n\t\t\tcontextMenus.", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   return re.search(pattern, frozen_output)\n@task\n@timed\ndef install_python_prereqs():\n    \"\"\"\n    Install Python prerequisites\n    \"\"\"\n    if no_prereq_install():\n        print(NO_PREREQ_INSTALL_MESSAGE)\n        return\n    prereq_cache(\"Python prereqs\", [\"requirements/edx/testing.txt\"], python_prereqs_installation)\n@task\n@timed\ndef install_node_prereqs_and_python_prereqs():\n    \"\"\"\n    Install Node prerequisites and Python prerequisites\n    \"\"\"\n    install_node_prereqs()\n    install_python_prereqs()\n@task\n@timed\ndef install_prereqs():\n    \"\"\"\n    Install all prerequisites\n    \"\"\"\n    install_node_prereqs_and_python_prereqs()\n@task\n@timed\ndef install_prereqs_and_coverage():\n    \"\"\"\n    Install all prerequisites and coverage\n    \"\"\"\n    install_prereqs()\n    install_coverage()\n@task\n@timed\ndef install_coverage():\n    \"\"\"\n    Install coverage\n    \"\"\"\n    if no_prereq_install():\n        print(NO_PREREQ_INSTALL_MESSAGE)\n        return\n    if no_python_uninstall():\n        print(NO_PYTHON_UNINSTALL_MESSAGE)\n        return\n    if not os.path.exists(COVERAGE_REQ_FILE):\n        print(\"Coverage not installed, skipping...\")\n        return\n    # Install coverage\n    sh(\"pip install -q --disable-pip-version-check --exists-action w -r {coverage_file}\".format(coverage_file=COVERAGE_REQ_FILE))\n@task\n@timed\ndef install_prereqs_and_coverage_and_pylint():\n    \"\"\"\n    Install all prerequisites, coverage, and pylint\n    \"\"\"\n    install_prereqs_and_coverage()\n    install_pylint()\n@task\n@timed\ndef install_pylint():\n    \"\"\"\n    Install pylint\n    \"\"\"\n    if no_prereq_install():\n        print(NO_PREREQ_INSTALL_MESSAGE)\n        return\n    if no_python_uninstall():\n        print(NO_PYTHON_UNINSTALL_MESSAGE)\n        return\n    if not os.path.exists(COVERAGE_REQ_FILE):\n        print(\"Coverage not installed, skipping...\")\n        return\n    # Install pylint\n    sh(\"pip install -q --disable-pip-version-check --exists-action w -r {pylint_file}\".format(pylint_file=PYTHON_REQ_FILES[0]))\n@task\n@timed\ndef install_prereqs_and_pylint_and_pylint_config():\n    \"\"\"\n    Install all prerequisites, coverage, pylint, and pylint config\n    \"\"\"\n    install_prereqs_and_coverage_and_pylint()\n    install_pylint_config()\n@task\n@timed\ndef install_pylint_config():\n    \"\"\"\n    Install pylint config\n    \"\"\"\n    if no_prereq_install():\n        print(NO_PREREQ_INSTALL_MESSAGE)\n        return\n    if no_python_uninstall():\n        print(NO_PYTHON_UNINSTALL_MESSAGE)\n        return\n    if not os.path.exists(COVERAGE_REQ_FILE):\n        print(\"Coverage not installed, skipping...\")\n        return\n    # Install pylint config\n    sh(\"pip install -q --disable-pip-version-check --exists-action w -r {pylint_config_file}\".format(pylint_config_file=PYTHON_REQ_FILES[1]))\n@task\n@timed\ndef install_prereqs_and_pylint_and_pylint_config_and_pylint_ignore():\n    \"\"\"\n    Install all prerequisites, coverage, p", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'value': 1\n        })\n        f = Form(r)\n        with f.subs.new() as sub:\n            self.assertEqual(sub.value, 1)\n            self.assertEqual(sub.v, 1)\n        r = f.save()\n        self.assertEqual(\n            [get(s) for s in r.subs],\n            [(\"1\", 1, 1), (\"1\", 1, 1)]\n        )\n    def test_m2o_inline(self):\n        r = self.env['", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x, (x, 1, 2))) == x\n    assert simplify(Sum(x, (x, 1, 2))) == x\n    assert simplify(Sum(x, (x, 1, 2))) == x\n    assert simplify", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\telse if(argc==2){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tSystem.Text.Encoding a2;\n\t\t\t\tcheckType(l,2,out a2);\n\t\t\t\tvar ret=UnityEngine.WWWW.UnEscapeURL(a1,a2);\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\tpushValue(l,false);\n\t\t\tLuaDLL.lua_pushstring(l,\"No matched override function to call\");\n\t\t\treturn 2;\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\treturn error(l,e);\n\t\t}\n\t}\n\t[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]\n\tstatic public int GetURL(IntPtr l) {\n\t\ttry {\n\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\t\tvar ret=self.GetURL();\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\telse if(argc==2){\n\t\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,2,out a1);\n\t\t\t\tvar ret=self.GetURL(a1);\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\tpushValue(l,false);\n\t\t\tLuaDLL.lua_pushstring(l,\"No matched override function to call\");\n\t\t\treturn 2;\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\treturn error(l,e);\n\t\t}\n\t}\n\t[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]\n\tstatic public int GetURLCompressed(IntPtr l) {\n\t\ttry {\n\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\t\tvar ret=self.GetURLCompressed();\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\telse if(argc==2){\n\t\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\t\tvar ret=self.GetURLCompressed(a1);\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\tpushValue(l,false);\n\t\t\tLuaDLL.lua_pushstring(l,\"No matched override function to call\");\n\t\t\treturn 2;\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\treturn error(l,e);\n\t\t}\n\t}\n\t[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]\n\tstatic public int GetImage(IntPtr l) {\n\t\ttry {\n\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\t\tvar ret=self.GetImage();\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\telse if(argc==2){\n\t\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,2,out a1);\n\t\t\t\tvar ret=self.GetImage(a1);\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\tpushValue(l,false);\n\t\t\tLuaDLL.lua_pushstring(l,\"No matched override function to call\");\n\t\t\treturn 2;\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\treturn error(l,e);\n\t\t}\n\t}\n\t[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]\n\tstatic public int GetImageCompressed(IntPtr l) {\n\t\ttry {\n", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._notifyAction = action;\n                this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else\n            {\nNext line of code:\n                this._notifyAction = action;\n                this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n        }\n        private void InitializeAddOrRemove(NotifyCollectionChangedAction action, Object[] changedItems, int startingIndex)\n        {\n            if (action == NotifyCollectionChangedAction.Add)\n            {\nNext line of code:\n                this._notifyAction = action;\n                this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else\n            {\nNext line of code:\n                this._notifyAction = action;\n                this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int newStartingIndex, int oldStartingIndex)\n        {\n            this._notifyAction = action;\n            this._newItemList = (newItems == null) ? null : ArrayList.ReadOnly(newItems);\n            this._newStartingIndex = newStartingIndex;\n            this._oldItemList = (oldItems == null) ? null : ArrayList.ReadOnly(oldItems);\n            this._oldStartingIndex = oldStartingIndex;\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, Object[] newItems, Object[] oldItems, int newStartingIndex, int oldStartingIndex)\n        {\n            this._notifyAction = action;\n            this._newItemList = (newItems == null) ? null : ArrayList.ReadOnly(newItems);\n            this._newStartingIndex = newStartingIndex;\n            this._oldItemList = (oldItems == null) ? null : ArrayList.ReadOnly(oldItems);\n            this._oldStartingIndex = oldStartingIndex;\n        }\n        #endregion\n    }\n    #endregion\n}\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           streamWriter.close();\n            int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            StringReader reader = new StringReader(writer.toString());\n            InputSource inputSource = new InputSource(reader);\n            Document testDocument =", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.Campus2:\n                    c.Campus2 = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.Campus3 = Token2Csv();\n                    break;\n                case Param.Campus4:\n                    c.Campus4 = Token2Csv();\n                    break;\n                case Param.Campus5:\n                    c.Campus5 = Token2Csv();\n                    break;\n                case Param.Campus6:\n                    c.Campus6 = Token2Csv();\n                    break;\n                case Param.Campus7:\n                    c.Campus7 = Token2Csv();\n                    break;\n                case Param.Campus8:\n                    c.Campus8 = Token2Csv();\n                    break;\n                case Param.Campus9:\n                    c.Campus9 = Token2Csv();\n                    break;\n                case Param.Campus10:\n                    c.Campus10 = Token2Csv();\n                    break;\n                case Param.Campus11:\n                    c.Campus11 = Token2Csv();\n                    break;\n                case Param.Campus12:\n                    c.Campus12 = Token2Csv();\n                    break;\n                case Param.Campus13:\n                    c.Campus13 = Token2Csv();\n                    break;\n                case Param.Campus14:\n                    c.Campus14 = Token2Csv();\n                    break;\n                case Param.Campus15:\n                    c.Campus15 = Token2Csv();\n                    break;\n                case Param.Campus16:\n                    c.Campus16 = Token2Csv();\n                    break;\n                case Param.Campus17:\n                    c.Campus17 = Token2Csv();\n                    break;\n                case Param.Campus18:\n                    c.Campus18 = Token2Csv();\n                    break;\n                case Param.Campus19:\n                    c.Campus19 = Token2Csv();\n                    break;\n                case Param.Campus20:\n                    c.Campus20 = Token2Csv();\n                    break;\n                case Param.Campus21:\n                    c.Campus21 = Token2Csv();\n                    break;\n                case Param.Campus22:\n                    c.Campus22 = Token2Csv();\n                    break;\n                case Param.Campus23:\n                    c.Campus23 = Token2Csv();\n                    break;\n                case Param.Campus24:\n                    c.Campus24 = Token2Csv();\n                    break;\n                case Param.Campus25:\n                    c.Campus25 = Token2Csv();\n                    break;\n                case Param.Campus26:\n                    c.Campus26 = Token2Csv();\n                    break;\n                case Param.Campus27:\n                    c.Campus27 = Token2Csv();\n                    break;\n                case Param.Campus28:\n                    c.Campus28 = Token2Csv();\n                    break;\n                case Param.Campus29:\n                    c.Campus29 = Token2Csv();\n                    break;\n                case Param.Campus30:\n                    c.Campus30 = Token2Csv();\n                    break;\n                case Param.Campus31:\n                    c.Campus31 = Token2Csv();\n                    break;\n                case Param.Campus32:\n                    c.Campus32 = Token2Csv();\n                    break;\n                case Param.Campus33:\n                    c", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Width: {0}\", ide.width);\nConsole.WriteLine (\"Height: {0}\", ide.height);\nConsole.WriteLine (\"ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"Reserved: {0}\", ide.reserved);\nConsole.WriteLine", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               JSR.addSuccessor(l);\n            }\n        }\n        // adds a label l to the stack\n        Label l = new Label();\n        l.next = null;\n        if (JSR != null) {\nNext line of code:\n                JSR.", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(StackObject.ToObject(ptr_of_this_method, __domain, __mStack));\n            var result_of_this_method = instance_of_this_method.ToString();\n\n            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            WriteBackInstance(__domain, ptr_of_this_method, __mStack, ref instance_of_this_method);\n            __intp.Free(ptr_of_this_method);\n            return ILIntepreter.PushObject(__ret, __mStack, result_of_this_method);\n        }\n        static StackObject* ToString_6(ILIntepreter __intp, StackObject* __esp, IList<object> __mStack, CLRMethod __method, bool isNewObj)\n        {\n            CSHotFix.Runtime.Enviorment.AppDomain __domain = __intp.AppDomain;\n            StackObject* ptr_of_this_method;\n            StackObject* __ret = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(StackObject.ToObject(ptr_of_this_method, __domain, __mStack));\n            var result_of_this_method = instance_of_this_method.ToString();\n\n            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            WriteBackInstance(__domain, ptr_of_this_method, __mStack, ref instance_of_this_method);\n            __intp.Free(ptr_of_this_method);\n            return ILIntepreter.PushObject(__ret, __mStack, result_of_this_method);\n        }\n\n\n\n\n    }\n}\n#endif\n", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tlblLabelPosition.setText(\"Label Position: \" + position.toString());\n\t\t\tcomboLabelPosition.select(position.ordinal());\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {\nNext line of code:\n\t\t\treturn Position.valueOf(comboLabelPosition.getSelectionIndex());\n\t\t}\n\t\t\n\t\tprivate void setPosition(int position) {\nNext line of code:\n\t\t\tcomboLabelPosition.select(position);\n\t\t\tlblLabelPosition.setText(\"Label Position: \" + position);\n\t\t}\n\t\t\n\t\tprivate void setExplosion(int explosion) {\nNext line of code:\n\t\t\tthis.explosion.setSelection(explosion);\n\t\t\tlblExplosion.setText(\"Pie Explosion: \" + String.valueOf(this.explosion.getSelection()));\n\t\t}\n\t\t\n\t\tprivate void setPosition(Position position) {\nNext line of code:\n\t\t\tthis.explosion.setSelection(position.ordinal());\n\t\t\tlblExplosion.setText(\"Pie Explosion: \" + String.valueOf(this.explosion.getSelection()));\n\t\t}\n\t\t\n\t\tprivate void setExplosion(int explosion) {\nNext line of code:\n\t\t\tthis.explosion.setSelection(explosion);\n\t\t\tlblExplosion.setText(\"Pie Explosion: \" + String.valueOf(this.explosion.getSelection()));\n\t\t}\n\t\t\n\t\tprivate void setPosition(", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport._set_K_H(self.p, self.g, self.e, self.f, K, srv_token)\n        self.transport._expect_packet(MSG_KEXGSS_ERROR)\n        self.transport._expect", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           if (disableTreeSelection) {\n                tree.setEnabled(false);\n            }\n            tree.setEnabled(true);\n        }\n    }\n}", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                if res:\n                    result = res[0]\n                    if result:\n                        result = result / result\n                    return result\n                return 0.0\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       dVdzdOm.append(cosmo.dVdzdOm(zi))\n        #OK\n        #OK\n        #OK\n        #OK\n        #OK\n        #OK\n        #OK\n        #OK\n        #OK\n        #OK\n       ", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize() * 10;\n        d.height = font.getSize();\n        return d;\n    }\n    \n    @Override\n    public void setFont(Font font) {\n        super.setFont(font);\n        if (font != null) {\n            FontMetrics fm = font.getFontMetrics(getFont());\n            setLineHeight(fm.getHeight());\n        }\n    }\n    \n    @Override\n    public void setLineHeight(int lineHeight) {\n        super.setLineHeight(lineHeight);\n        if (lineHeight > 0) {\n            setLineWidth(0);\n        }\n    }\n    \n    @Override\n    public void setLineWidth(int lineWidth) {\n        super.setLineWidth(lineWidth);\n        if (lineWidth > 0) {\n            setLineHeight(0);\n        }\n    }\n    \n    @Override\n    public void setLineColor(Color color) {\n        super.setLineColor(color);\n        setLineWidth(0);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth) {\n        super.setLineColor(color, lineWidth);\n        setLineHeight(0);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth, int lineHeight) {\n        super.setLineColor(color, lineWidth, lineHeight);\n    }\n    \n    @Override\n    public void setLineWidth(int lineWidth) {\n        super.setLineWidth(lineWidth);\n        setLineColor(getLineColor(), lineWidth);\n    }\n    \n    @Override\n    public void setLineWidth(int lineWidth, int lineHeight) {\n        super.setLineWidth(lineWidth, lineHeight);\n        setLineColor(getLineColor(), lineWidth, lineHeight);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth, int lineHeight) {\n        super.setLineColor(color, lineWidth, lineHeight);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth) {\n        super.setLineColor(color, lineWidth);\n    }\n    \n    @Override\n    public void setLineColor(Color color) {\n        super.setLineColor(color);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth, int lineHeight) {\n        super.setLineColor(color, lineWidth, lineHeight);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth) {\n        super.setLineColor(color, lineWidth);\n    }\n    \n    @Override\n    public void setLineColor(Color color) {\n        super.setLineColor(color);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth, int lineHeight, int lineHeight2) {\n        super.setLineColor(color, lineWidth, lineHeight, lineHeight2);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth, int lineHeight2) {\n        super.setLineColor(color, lineWidth, lineHeight2);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth2) {\n        super.setLineColor(color, lineWidth2);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth, int lineHeight2) {\n        super.setLineColor(color, lineWidth, lineHeight2);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth2) {\n        super.setLineColor(color, lineWidth2);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineHeight2) {\n        super.setLineColor(color, lineHeight2);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth2, int lineHeight2) {\n        super.setLineColor(color, lineWidth2, lineHeight2);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth, int lineHeight2, int lineHeight3) {\n        super.setLineColor(color, lineWidth, lineHeight2, lineHeight3);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth2, int lineHeight2, int lineHeight3) {\n        super.setLineColor(color, lineWidth2, lineHeight2, lineHeight3);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth, int lineHeight2, int lineHeight3) {\n        super.setLineColor(color, lineWidth, lineHeight2, lineHeight3);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth2, int lineHeight2, int lineHeight3) {\n        super.setLineColor(color, lineWidth2, lineHeight2, lineHeight3);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth, int lineHeight2, int lineHeight3, int lineHeight4) {\n        super.setLineColor(color, lineWidth, lineHeight2, lineHeight3, lineHeight4);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth2, int lineHeight2, int lineHeight3, int lineHeight4) {\n        super.setLineColor(color, lineWidth2, lineHeight2, lineHeight3, lineHeight4);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth, int lineHeight2, int lineHeight3, int lineHeight4) {\n        super.setLineColor(color, lineWidth, lineHeight2, lineHeight3, lineHeight4);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth2, int lineHeight2, int lineHeight3, int lineHeight4) {\n        super.setLineColor(color, lineWidth2, lineHeight2, lineHeight3, lineHeight4);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth, int lineHeight2, int lineHeight3, int lineHeight4, int lineHeight5) {\n        super.setLineColor(color, lineWidth, lineHeight2, lineHeight3, lineHeight4, lineHeight5);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth2, int lineHeight2, int lineHeight3, int lineHeight4, int lineHeight5) {\n        super.setLineColor(color, lineWidth2, lineHeight2, lineHeight3, lineHeight4, lineHeight5);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth, int lineHeight2, int lineHeight3, int lineHeight4, int lineHeight5) {\n        super.setLineColor(color, lineWidth, lineHeight2, lineHeight3, lineHeight4, lineHeight5);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth2, int lineHeight2, int lineHeight3, int lineHeight4, int lineHeight5) {\n        super.setLineColor(color, lineWidth2, lineHeight2, lineHeight3, lineHeight4, lineHeight5);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth, int lineHeight2, int lineHeight3, int lineHeight4, int lineHeight5, int lineHeight6) {\n        super.setLineColor(color, lineWidth, lineHeight2, lineHeight3, lineHeight4, lineHeight5, lineHeight6);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int lineWidth2, int lineHeight2, int lineHeight3, int lineHeight4, int lineHeight5, int lineHeight6) {\n        super.setLineColor(color, lineWidth2, lineHeight2, lineHeight3, lineHeight4, lineHeight5, lineHeight6);\n    }\n    \n    @Override\n    public void setLineColor(Color color, int", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.cal_p2(phi=phi,ref_p=None,flag=flag)\n        self.all_in_all(phi=phi,ref_p=None,flag=flag)\n        #print_path=print_path\n        #if print_", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t\twindow.Activate();\n\t\t}\n\t\tprivate void ShowOrdersWindow()\n\t{\n\t\t\t_ordersWindow.Show();\n\t\t}\n\t\tprivate void ShowSecuritiesWindow()\n\t\t{\n\t\t\t_securitiesWindow.Show();\n\t\t}\n\t\tprivate void ShowStopOrdersWindow()\n\t\t{\n\t\t\t\t_stopOrdersWindow.Show();\n\t\t\t}\n\t\tprivate void ShowPortfoliosWindow()\n\t\t{\n\t\t\t_portfoliosWindow.Show();\n\t\t}\n\t\tprivate void ShowMyTradesWindow()\n\t\t{\n\t\t\t_myTradesWindow.Show();\n\t\t\t}\n\t\tprivate void ShowSettingsWindow()\n\t\t{\n\t\t\tvar settings = new SettingsWindow();\n\t\t\tsettings.ShowDialog();\n\t\t}\n\t\tprivate void ShowAboutWindow()\n\t\t{\n\t\t\tvar about = new AboutWindow();\n\t\t\tabout.ShowDialog();\n\t\t}\n\t\tprivate void ShowLogWindow()\n\t\t{\n\t\t\tvar log = new LogWindow();\n\t\t\tlog.ShowDialog();\n\t\t}\n\t\tprivate void ShowHelpWindow()\n\t\t{\n\t\t\tvar help = new HelpWindow();\n\t\t\thelp.ShowDialog();\n\t\t}\n\t\tprivate void ShowSettingsWindow()\n\t\t{\n\t\t\tvar settings = new SettingsWindow();\n\t\t\tsettings.ShowDialog();\n\t\t}\n\t\tprivate void ShowAboutWindow()\n\t\t{\n\t\t\tvar about = new AboutWindow();\n\t\t\tabout.ShowDialog();\n\t\t}\n\t\tprivate void ShowLogWindow()\n\t\t{\n\t\t\tvar log = new LogWindow();\n\t\t\t\tlog.ShowDialog();\n\t\t}\n\t\tprivate void ShowHelpWindow()\n\t\t{\n\t\t\tvar help = new HelpWindow();\n\t\t\thelp.ShowDialog();\n\t\t}\n\t\tprivate void ShowSettingsWindow()\n\t\t{\n\t\t\tvar settings = new SettingsWindow();\n\t\t\tsettings.ShowDialog();\n\t\t}\n\t\tprivate void ShowAboutWindow()\n\t\t{\n\t\t\tvar about = new AboutWindow();\n\t\t\tabout.ShowDialog();\n\t\t}\n\t\tprivate void ShowLogWindow()\n\t\t{\n\t\t\tvar log = new LogWindow();\n\t\t\tlog.ShowDialog();\n\t\t}\n\t\tprivate void ShowHelpWindow()\n\t\t{\n\t\t\tvar help = new HelpWindow();\n\t\t\thelp.ShowDialog();\n\t\t}\n\t\tprivate void ShowSettingsWindow()\n\t\t{\n\t\t\tvar settings = new SettingsWindow();\n\t\t\tsettings.ShowDialog();\n\t\t}\n\t\tprivate void ShowAboutWindow()\n\t\t{\n\t\t\tvar about = new AboutWindow();\n\t\t\tabout.ShowDialog();\n\t\t}\n\t\tprivate void ShowLogWindow()\n\t\t{\n\t\t\tvar log = new LogWindow();\n\t\t\tlog.ShowDialog();\n\t\t}\n\t\tprivate void ShowHelpWindow()\n\t\t{\n\t\t\tvar help = new HelpWindow();\n\t\t\thelp.ShowDialog();\n\t\t}\n\t\tprivate void ShowSettingsWindow()\n\t\t{\n\t\t\tvar settings = new SettingsWindow();\n\t\t\tsettings.ShowDialog();\n\t\t}\n\t\tprivate void ShowAboutWindow()\n\t\t{\n\t\t\tvar about = new AboutWindow();\n\t\t\tabout.ShowDialog();\n\t\t}\n\t\tprivate void ShowLogWindow()\n\t\t{\n\t\t\tvar log = new LogWindow();\n\t\t\tlog.ShowDialog();\n\t\t}\n\t\tprivate void ShowHelpWindow()\n\t\t{\n\t\t\tvar help = new HelpWindow();\n\t\t\thelp.ShowDialog();\n\t\t}\n\t\tprivate void ShowSettingsWindow()\n\t\t{\n\t\t\tvar settings = new SettingsWindow();\n\t\t\tsettings.ShowDialog();\n\t\t}\n\t\tprivate void ShowAboutWindow()\n\t\t{\n\t\t\tvar about = new AboutWindow();\n\t\t\tabout.ShowDialog();\n\t\t}\n\t\tprivate void ShowLogWindow()\n\t\t{\n\t\t\tvar log = new LogWindow();\n\t\t\tlog.ShowDialog();\n\t\t}\n\t\tprivate void ShowHelpWindow()\n\t\t{\n\t\t\tvar help = new HelpWindow();\n\t\t\thelp.ShowDialog();\n\t\t}\n\t\tprivate void ShowSettingsWindow()\n\t\t{\n\t\t\tvar settings = new SettingsWindow();\n\t\t\tsettings.ShowDialog();\n\t\t}\n\t\tprivate void ShowAboutWindow()\n\t\t{\n\t\t\tvar about = new AboutWindow();\n\t\t\tabout.ShowDialog();\n\t\t}\n\t\tprivate void ShowLogWindow()\n\t\t{\n\t\t\tvar log = new LogWindow();\n\t\t\tlog.ShowDialog();\n\t\t}\n\t\tprivate void ShowHelpWindow()\n\t\t{\n\t\t\tvar help = new HelpWindow();\n\t\t\thelp.ShowDialog();\n\t\t}\n\t\tprivate void ShowSettingsWindow()\n\t\t{\n\t\t\tvar settings = new SettingsWindow();\n\t\t\tsettings.ShowDialog();\n\t\t}\n\t\tprivate void ShowAboutWindow()\n\t\t{\n\t\t\tvar about = new AboutWindow();\n\t\t\tabout.ShowDialog();\n\t\t}\n\t\tprivate void ShowLogWindow()\n\t\t{\n\t\t\tvar log = new LogWindow();\n\t\t\tlog.ShowDialog();\n\t\t}\n\t\tprivate void ShowHelpWindow()\n\t\t{\n\t\t\tvar help = new HelpWindow();\n\t\t\thelp.ShowDialog();\n\t\t}\n\t\tprivate void ShowSettingsWindow()\n\t\t{\n\t\t\tvar settings = new SettingsWindow();\n\t\t\tsettings.ShowDialog();\n\t\t}\n\t\tprivate void ShowAboutWindow()\n\t\t{\n\t\t\tvar about = new AboutWindow();\n\t\t\tabout.ShowDialog();\n\t\t}\n\t\tprivate void ShowLogWindow()\n\t\t{\n\t\t\tvar log = new LogWindow();\n\t\t\tlog.ShowDialog();\n\t\t}\n\t\tprivate void ShowHelpWindow()\n\t\t{\n\t\t\tvar help = new HelpWindow();\n\t\t\thelp.ShowDialog();\n\t\t}\n\t\tprivate void ShowSettingsWindow()\n\t\t{\n\t\t\tvar settings = new SettingsWindow();\n\t\t\tsettings.ShowDialog();\n\t\t}\n\t\tprivate void ShowAboutWindow()\n\t\t{\n\t\t\tvar about = new AboutWindow();\n\t\t\tabout.ShowDialog();\n\t\t}\n\t\tprivate void ShowLogWindow()\n\t\t{\n\t\t\tvar log = new LogWindow();\n\t\t\tlog.ShowDialog();\n\t\t}\n\t\tprivate void ShowHelpWindow()\n\t\t{\n\t\t\tvar help = new HelpWindow();\n\t\t\thelp.ShowDialog();\n\t\t}\n\t\tprivate void ShowSettingsWindow()\n\t\t{\n\t\t\tvar settings = new SettingsWindow();\n\t\t\tsettings.ShowDialog();\n\t\t}\n\t\tprivate void ShowAboutWindow()\n\t\t{\n\t\t\tvar about = new AboutWindow();\n\t\t\tabout.ShowDialog();\n\t\t}\n\t\tprivate void ShowLogWindow()\n\t\t{\n\t\t\tvar log = new LogWindow();\n\t\t\tlog.ShowDialog();\n\t\t}\n\t\tprivate void ShowHelpWindow()\n\t\t{\n\t\t\tvar help = new HelpWindow();\n\t\t\thelp.ShowDialog();\n\t\t}\n\t\tprivate void ShowSettingsWindow()\n\t\t{\n\t\t\tvar settings = new SettingsWindow();\n\t\t\tsettings.ShowDialog();\n\t\t}\n\t\tprivate void ShowAboutWindow()\n\t\t{\n\t\t\tvar about = new AboutWindow();\n\t\t\tabout.ShowDialog();\n\t\t}\n\t\tprivate void ShowLogWindow()\n\t\t{\n\t\t\tvar log = new LogWindow();\n\t\t\tlog.ShowDialog();\n\t\t}\n\t\tprivate void ShowHelpWindow()\n\t\t{\n\t\t\tvar help = new HelpWindow();\n\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                   for n in xrange(params[0]['nbins'])]\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n               ", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.removeContactFromRoster(contact);\n        }\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedListener, null);\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener,\n            OnMoreMessagesLoaded onMoreMessagesLoadedListener2) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        if (onMoreMessagesLoadedListener2 == null) {\n            onMoreMessagesLoadedListener2 = onMoreMessagesLoadedListener;\n        }\n        if (queryInProgress(contact, onMoreMessagesLoadedListener)) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedListener, onMoreMessagesLoadedListener2);\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener,\n            OnMoreMessagesLoaded onMoreMessagesLoadedListener2) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        if (onMoreMessagesLoadedListener2 == null) {\n            onMoreMessagesLoadedListener2 = onMoreMessagesLoadedListener;\n        }\n        if (queryInProgress(contact, onMoreMessagesLoadedListener)) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedLoadedListener, onMoreMessagesLoadedListener2);\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener,\n            OnMoreMessagesLoaded onMoreMessagesLoadedListener2) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        if (onMoreMessagesLoadedListener2 == null) {\n            onMoreMessagesLoadedListener2 = onMoreMessagesLoadedListener;\n        }\n        if (queryInProgress(contact, onMoreMessagesLoadedListener)) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedListener, onMoreMessagesLoadedListener2);\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        if (queryInProgress(contact, onMoreMessagesLoadedListener)) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedListener, null);\n    }\n    public void query(XmppConnection connection, Contact contact) {\n        if (queryInProgress(contact, null)) {\n            return;\n        }\n        query(connection, contact, null, null);\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener,\n            OnMoreMessagesLoaded onMoreMessagesLoadedListener2) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        if (onMoreMessagesLoadedListener2 == null) {\n            onMoreMessagesLoadedListener2 = onMoreMessagesLoadedListener;\n        }\n        if (queryInProgress(contact, onMoreMessagesLoadedListener)) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedListener, onMoreMessagesLoadedListener2);\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        if (queryInProgress(contact, onMoreMessagesLoadedListener)) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedListener, null);\n    }\n    public void query(XmppConnection connection, Contact contact) {\n        if (queryInProgress(contact, null)) {\n            return;\n        }\n        query(connection, contact, null, null);\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        if (queryInProgress(contact, onMoreMessagesLoadedListener)) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedListener, null);\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener2) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        if (onMoreMessagesLoadedListener2 == null) {\n            onMoreMessagesLoadedListener2 = onMoreMessagesLoadedListener;\n        }\n        if (queryInProgress(contact, onMoreMessagesLoadedListener)) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedListener, onMoreMessagesLoadedListener2);\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener2) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        if (onMoreMessagesLoadedListener2 == null) {\n            onMoreMessagesLoadedListener2 = onMoreMessagesLoadedListener;\n        }\n        if (queryInProgress(contact, onMoreMessagesLoadedListener)) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedListener, onMoreMessagesLoadedListener2);\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener2) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        if (onMoreMessagesLoadedListener2 == null) {\n            onMoreMessagesLoadedListener2 = onMoreMessagesLoadedListener;\n        }\n        if (queryInProgress(contact, onMoreMessagesLoadedListener)) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedListener, onMoreMessagesLoadedListener2);\n    }\n    public void query(XmppConnection connection, Contact contact) {\n        if (queryInProgress(contact, null)) {\n            return;\n        }\n        query(connection, contact, null, null);\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        if (queryInProgress(contact, onMoreMessagesLoadedListener)) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedListener, null);\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener2) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        if (onMoreMessagesLoadedListener2 == null) {\n            onMoreMessagesLoadedListener2 = onMoreMessagesLoadedListener;\n        }\n        if (queryInProgress(contact, onMoreMessagesLoadedListener)) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedListener, onMoreMessagesLoadedListener2);\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded onMoreMessagesLoadedListener2) {\n        if (onMoreMessagesLoadedListener == null) {\n            return;\n        }\n        if (onMoreMessagesLoadedListener2 == null) {\n            onMoreMessagesLoadedListener2 = onMoreMessagesLoadedListener;\n        }\n        if (queryInProgress(contact, onMoreMessagesLoadedListener)) {\n            return;\n        }\n        query(connection, contact, onMoreMessagesLoadedListener,", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\", rgb2g)\n            else:\n                im1L = im1.convert(\"L\", rgb2b)\n            h1 = im1L.histogram()\n        else:\n            #im1.mode == \"L\":\n            h1 = im1.histogram()\n        #compute transform\n        if channel == \"I\":\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #compute transform that converts values of image 0 to values of image 1\n            #", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\twhile (true) {\n\t\t\t\t\trsp = tag.readRecord(sfi);\n\t\t\t\t\tif (rsp.isOkey()) {\n\t\t\t\t\t\taddLog24(rsp, ret);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void configApplication(Application app) {\n\t\tapp.setProperty(SPEC.PROP.SERIAL, app.getProperty(SPEC.PROP.SERIAL));\n\t\tapp.setProperty(SPEC.PROP.DATE, app.getProperty(SPEC.PROP.DATE));\n\t\tapp.setProperty(SPEC.PROP.VERSION, app.getProperty(SPEC.PROP.VERSION));\n\t}\n\tprotected abstract Application createApplication();\n\tprotected abstract void parseLog24(Application app, ArrayList<byte[]> l) throws IOException;\n\tprotected abstract void parseInfo21(Application app, Iso7816.Response... data) throws IOException;\n\tprotected abstract void configApplication(Application app) throws IOException;\n}\n", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "           return \"Unknown block type %u\" % self[\"block_type\"].value\n", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tif (socketAdapter != null) {\n\t\t\tsocketAdapter.dispose();\n\t\t}\n\t\tsocketAdapter = null;\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       path = environ.get('PATH_INFO', '')\n        if path:\n            for app in self.apps:\n                if path.startswith(app[0]):\n                    return app[1](environ, start_response)\n        return self.default_app(environ, start_response)\n\nclass Server:\n    \"\"\"WSGI server class.\"\"\"\n    def __init__(self, bind_addr, wsgi_app, numthreads=10", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tprint \"Loading model from %s\" % sys.argv[ 1 ]\n\t\tprint \"Loading data from %s\" % sys.argv[ 2 ]\n\t\tprint \"Training model from %s\" % sys.argv[ 3 ]\n\t\tmodel =", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) == 0)\n            {\n                res = EnhanceResult.Success;\n            }\n        }\n        public static void CheckResult(ref EnhanceResult res, int chance, int mod)\n        {\n            if (res != EnhanceResult.Success)\n                return; // we've already failed..\nNext line of code:\n            if (Utility.Random(chance + mod) == 0)\n            {\n                res = EnhanceResult.Success;\n            }\n        }\n        public static void CheckResult(ref EnhanceResult res, int chance, int mod, int mod2)\n        {\n            if (res != En", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           entries[entry_name] = rdltypes.UserEnum(entry_value, displayname, desc)\n        return entries\n    #---------------------------------------------------------------------------\n    def parse_field_definition(self) -> rdltypes.FieldDefinition:\n        \"\"\"\n        Pars", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"No Modules Found!\");\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Fatal Error:\\nUnable to locate coniguration file for FOG Service!\");\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (writeQuiet())\n            {\n                try\n                {\n                    String strConfig = \"\";\n                    for (int i = 0; i < arChkBx.Length; i++)\n                    {\n                        if (arChkBx[i].Checked)\n                        {\n                            strConfig += arChkBx[i].Text + \" = 1\\r\\n\";\n                        }\n                    }\n                    if (strConfig.Length > 0)\n                    {\n                        strConfig = strConfig.Trim();\n                        if (strConfig.Length > 0)\n                        {\n                            File.WriteAllText(CONFIGPATH, strConfig);\n                            MessageBox.Show(\"Configuration file saved!\");\n                        }\n                        else\n                        {\n                            MessageBox.Show(\"No configuration file to save!\");\n                        }\n                    }\n                    else\n                    {\n                        MessageBox.Show(\"No configuration file to save!\");\n                    }\n                }\n                catch (Exception ex)\n                {\n                    MessageBox.Show(ex.Message);\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Configuration file not saved!\");\n            }\n        }\n        private void btnDone_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n        private void btnCancel_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n        private Boolean writeFile(String str, String strPath)\n        {\n            try\n            {\n                if (File.Exists(strPath))\n                {\n                    File.Delete(strPath);\n                }\n                File.WriteAllText(strPath, str);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show(ex.Message);\n                return false;\n            }\n        }\n        private void pnlServices_Resize(object sender, EventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_Paint(object sender, PaintEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDown(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseMove(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseLeave(object sender, EventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseEnter(object sender, EventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDoubleClick(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseClick(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownDown(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpDown(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp(object sender, MouseEventArgs e)\n        {\n            pnlServices.Refresh();\n        }\n        private void pnlServices_MouseDownUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"] ?? true;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(!this.textureArray[textureHash].getImage().isSelected())\n                {\n                    this.textureArray[textureHash].getImage().select", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if not exposedHeaders:\n        exposedHeaders = []\n    exposedHeaders.append(header)\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n    return response\ndef ensure_cors_header(request, response):\n    \"\"\"\n    Adds the Access-Control-Allow-Origin header to the response.\n    \"\"\"\n    if request.META.get('HTTP_ORIGIN'):\n        response['Access-Control-Allow-Origin'] = request.META.get('HTTP_ORIGIN')\n    else:\n        response['Access-Control-Allow-Origin'] = '*'\n    return response\ndef ensure_cors_headers(request, response):\n    \"\"\"\n    Adds the Access-Control-Allow-Origin, Access-Control-Allow-Methods,\n    Access-Control-Allow-Headers, and Access-Control-Max-Age headers to the response.\n    \"\"\"\n    ensure_cors_header(request, response)\n    response['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'\n    response['Access-Control-Allow-Headers'] = 'Content-Type, X-Requested-With, Accept, Origin, Authorization, X-CSRFToken, X-HTTP-Method-Override, X-HTTP-Method, X-CSRF-Token, X-CSRF-Token'\n    response['Access-Control-Max-Age'] = '3600'\n    return response\ndef ensure_cors_preflight(request, response):\n    \"\"\"\n    Adds the Access-Control-Allow-Origin header to the response.\n    \"\"\"\n    if request.META.get('HTTP_ORIGIN'):\n        response['Access-Control-Allow-Origin'] = request.META.get('HTTP_ORIGIN')\n    else:\n        response['Access-Control-Allow-Origin'] = '*'\n    return response\ndef ensure_cors_preflight_headers(request, response):\n    \"\"\"\n    Adds the Access-Control-Allow-Origin, Access-Control-Allow-Methods,\n    Access-Control-Allow-Headers, and Access-Control-Max-Age headers to the response.\n    \"\"\"\n    ensure_cors_header(request, response)\n    response['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'\n    response['Access-Control-Allow-Headers'] = 'Content-Type, X-Requested-With, Accept, Origin, Authorization, X-CSRFToken, X-HTTP-Method-Override, X-HTTP-Method, X-CSRF-Token, X-CSRF-Token'\n    response['Access-Control-Max-Age'] = '3600'\n    return response\ndef ensure_cors_preflight_p3p(request, response):\n    \"\"\"\n    Adds the Access-Control-Allow-Origin header to the response.\n    \"\"\"\n    if request.META.get('HTTP_ORIGIN'):\n        response['Access-Control-Allow-Origin'] = request.META.get('HTTP_ORIGIN')\n    else:\n        response['Access-Control-Allow-Origin'] = '*'\n    return response\ndef ensure_cors_preflight_p3p_headers(request, response):\n    \"\"\"\n    Adds the Access-Control-Allow-Origin, Access-Control-Allow-Methods,\n    Access-Control-Allow-Headers, and Access-Control-Max-Age headers to the response.\n    \"\"\"\n    ensure_cors_header(request, response)\n    response['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'\n    response['Access-Control-Allow-Headers'] = 'Content-Type, X-Requested-With, Accept, Origin, Authorization, X-CSRFToken, X-HTTP-Method-Override, X-HTTP-Method, X-CSRF-Token, X-CSRF-Token'\n    response['Access-Control-Max-Age'] = '3600'\n    return response\ndef ensure_cors_preflight_p3p_p3p(request, response):\n    \"\"\"\n    Adds the Access-Control-Allow-Origin header to the response.\n    \"\"\"\n    if request.META.get('HTTP_ORIGIN'):\n        response['Access-Control-Allow-Origin'] = request.META.get('HTTP_ORIGIN')\n    else:\n        response['Access-Control-Allow-Origin'] = '*'\n    return response\ndef ensure_cors_preflight_p3p_p3p_headers(request, response):\n    \"\"\"\n    Adds the Access-Control-Allow-Origin, Access-Control-Allow-Methods,\n    Access-Control-Allow-Headers, and Access-Control-Max-Age headers to the response.\n    \"\"\"\n    ensure_cors_header(request, response)\n    response['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'\n    response['Access-Control-Allow-Headers'] = 'Content-Type, X-Requested-With, Accept, Origin, Authorization, X-CSRFToken, X-HTTP-Method-Override, X-HTTP-Method, X-CSRF-Token, X-CSRF-Token'\n    response['Access-Control-Max-Age'] = '3600'\n    return response\ndef ensure_cors_preflight_p3p_p3p_p3p(request, response):\n    \"\"\"\n    Adds the Access-Control-Allow-Origin header to the response.\n    \"\"\"\n    if request.META.get('HTTP_ORIGIN'):\n        response['Access-Control-Allow-Origin'] = request.META.get('HTTP_ORIGIN')\n    else:\n        response['Access-Control-Allow-Origin'] = '*'\n    return response\ndef ensure_cors_preflight_p3p_p3p_p3p_headers(request, response):\n    \"\"\"\n    Adds the Access-Control-Allow-Origin, Access-Control-Allow-Methods,\n    Access-Control-Allow-Headers, and Access-Control-Max-Age headers to the response.\n    \"\"\"\n    ensure_cors_header(request, response)\n    response['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'\n    response['Access-Control-Allow-Headers'] = 'Content-Type, X-Requested-With, Accept, Origin, Authorization, X-CSRFToken, X-HTTP-Method-Override, X-HTTP-Method, X-CSRF-Token, X-CSRF-Token'\n    response['Access-Control-Max-Age'] = '3600'\n    return response\ndef ensure_cors_preflight_p3p_p3p_p3p_headers(", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n        /// <summary>\n        /// Remove expired drivers from the in use pool\n        /// </summary>\n        /// <returns></returns>\n        /// <remarks>\n        /// Closing driver is a potentially lengthy operation involving network\n        /// IO. Therefore we do not close expired drivers while holding inUsePool.SyncRoot\n        /// lock. We just remove the old drivers from the inUse queue and return\n        /// them to the caller. The caller will need to close them (or let GC close\n        /// them)\n        /// </remarks>\n        internal List<Driver> RemoveOldConnections()\n        {\n            List<Driver> oldDrivers = new List<Driver>();\n            DateTime now = DateTime.Now;\n            lock ((inUsePool as ICollection).SyncRoot)\n            {\n                // The drivers appear to be ordered by their age, i.e it is\n                // sufficient to remove them until the first element is not\n                // too old.\n                while (inUsePool.Count > minSize)\n                {\n                    Driver d = inUsePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n        /// <summary>\n        /// Remove expired drivers from the idle pool\n        /// </summary>\n        /// <returns></returns>\n        /// <remarks>\n        /// Closing driver is a potentially lengthy operation involving network\n        /// IO. Therefore we do not close expired drivers while holding \n        /// idlePool.SyncRoot lock. We just remove the old drivers from the idle\n        /// queue and return them to the caller. The caller will need to close \n        /// them (or let GC close them)\n        /// </remarks>\n        internal List<Driver> RemoveOldIdleConnections()\n        {\n            List<Driver> oldDrivers = new List<Driver>();\n            DateTime now = DateTime.Now;\n            lock ((idlePool as ICollection).SyncRoot)\n            {\n                // The drivers appear to be ordered by their age, i.e it is\n                // sufficient to remove them until the first element is not\n                // too old.\n                while (idlePool.Count > minSize)\n                {\n                    Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n        /// <summary>\n        /// Remove expired drivers from the in use pool\n        /// </summary>\n        /// <returns></returns>\n        /// <remarks>\n        /// Closing driver is a potentially lengthy operation involving network\n        /// IO. Therefore we do not close expired drivers while holding \n        /// inUsePool.SyncRoot lock. We just remove the old drivers from the inUse\n        /// queue and return them to the caller. The caller will need to close \n        /// them (or let GC close them)\n        /// </remarks>\n        internal List<Driver> RemoveOldConnections()\n        {\n            List<Driver> oldDrivers = new List<Driver>();\n            DateTime now = DateTime.Now;\n            lock ((inUsePool as ICollection).SyncRoot)\n            {\n                // The drivers appear to be ordered by their age, i.e it is\n                // sufficient to remove them until the first element is not\n                // too old.\n                while (inUsePool.Count > minSize)\n                {\n                    Driver d = inUsePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n        /// <summary>\n        /// Remove expired drivers from the idle pool\n        /// </summary>\n        /// <returns></returns>\n        /// <remarks>\n        /// Closing driver is a potentially lengthy operation involving network\n        /// IO. Therefore we do not close expired drivers while holding \n        /// idlePool.SyncRoot lock. We just remove the old drivers from the idle\n        /// queue and return them to the caller. The caller will need to close \n        /// them (or let GC close them)\n        /// </remarks>\n        internal List<Driver> RemoveOldIdleConnections()\n        {\n            List<Driver> oldDrivers = new List<Driver>();\n            DateTime now = DateTime.Now;\n            lock ((idlePool as ICollection).SyncRoot)\n            {\n                // The drivers appear to be ordered by their age, i.e it is\n                // sufficient to remove them until the first element is not\n                // too old.\n                while (idlePool.Count > minSize)\n                {\n                    Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n        /// <summary>\n        /// Remove expired drivers from the in use pool\n        /// </summary>\n        /// <returns></returns>\n        /// <remarks>\n        /// Closing driver is a potentially lengthy operation involving network\n        /// IO. Therefore we do not close expired drivers while holding \n        /// inUsePool.SyncRoot lock. We just remove the old drivers from the inUse\n        /// queue and return them to the caller. The caller will need to close \n        /// them (or let GC close them)\n        /// </remarks>\n        internal List<Driver> RemoveOldConnections()\n        {\n            List<Driver> oldDrivers = new List<Driver>();\n            DateTime now = DateTime.Now;\n            lock ((inUsePool as ICollection).SyncRoot)\n            {\n                // The drivers appear", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var]\n    # List-like format.\n    elif isinstance(var, (list, tuple)):\n        if len(var) != 2:\n            raise ValueError('{0} must be a list of two numbers'.format(name))\n        var", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(MOB)\nQUEST.addKillCount(MOB)\nQUEST.addQuestItem(SI_ORE)\nQUEST.addQuestItem(REWARDS)\nQUEST.addFaction(3001)\nQUEST.addLevel(58)\nQUEST.addLevelReward(REWARDS)\nQUEST.addStartNpc(WK_ROMP)\nQUEST.addOnTalk(Quest.onTalk)\nQUEST.addOnKill(Quest.onKill)\nQUEST.addOnEvent(Quest.onEvent)\nQUEST.addOnQuestComplete(Quest.onQuestComplete)\nQUEST.addOnQuestAbandon(Quest.onQuestAbandon)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest.onQuestUnlock)\nQUEST.addOnQuestUnlock(Quest", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\tstring[] str = new string[] { \"[\", num.ToString(\"D2\"), \":\", num1.ToString(\"D2\"), \"]\" };\n\t\t\t\t\tempty = string.Concat(str);\n\t\t\t\t}\n\t\t\t\t\telse", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           _sCurProgram = this;\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Attributes = new AttributeCollection(this);\n        }\n        public void Dispose()\n        {\n            if (Active) {\n                Dispose(true);\n            }\n        }\n        public void Dispose(bool disposing)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose()\n        {\n            if (Active) {\n                Dispose(false);\n            }\n        }\n        public void Dispose(bool disposing)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9, bool disposing10)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9, bool disposing10, bool disposing11)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9, bool disposing10, bool disposing11, bool disposing12)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9, bool disposing10, bool disposing11, bool disposing12, bool disposing13)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9, bool disposing10, bool disposing11, bool disposing12, bool disposing13, bool disposing14)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9, bool disposing10, bool disposing11, bool disposing12, bool disposing13, bool disposing14, bool disposing15)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9, bool disposing10, bool disposing11, bool disposing12, bool disposing13, bool disposing14, bool disposing15, bool disposing16)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9, bool disposing10, bool disposing11, bool disposing12, bool disposing13, bool disposing14, bool disposing15, bool disposing16, bool disposing17)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9, bool disposing10, bool disposing11, bool disposing12, bool disposing13, bool disposing14, bool disposing15, bool disposing16, bool disposing17, bool disposing18)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9, bool disposing10, bool disposing11, bool disposing12, bool disposing13, bool disposing14, bool disposing15, bool disposing16, bool disposing17, bool disposing18, bool disposing19)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9, bool disposing10, bool disposing11, bool disposing12, bool disposing13, bool disposing14, bool disposing15, bool disposing16, bool disposing17, bool disposing18, bool disposing19, bool disposing20)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9, bool disposing10, bool disposing11, bool disposing12, bool disposing13, bool disposing14, bool disposing15, bool disposing16, bool disposing17, bool disposing18, bool disposing19, bool disposing20, bool disposing21)\n        {\n            if (disposing) {\n                if (Active) {\n                    Dispose(false);\n                }\n            }\n        }\n        public void Dispose(bool disposing, bool disposing2, bool disposing3, bool disposing4, bool disposing5, bool disposing6, bool disposing7, bool disposing8, bool disposing9, bool disposing10, bool disposing11, bool disposing12, bool disposing13, bool disposing14, bool disposing15,", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       for rxn in self.reactions:\n            rxn._model = self\n        for met in self.metabolites:\n            met._model = self\n        for gene in self.genes:\n            gene._model = self\n    def _trimmed(self):\n        \"\"\"Returns a copy of the model with all reactions and genes\n        trimmed to the ones in the model.\n        \"\"\"\n        trimmed_model = self.copy()\n        trimmed_model._trimmed = True\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.solution = None\n        trimmed_model.sol", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (java.util.Iterator iter = beans.iterator(); iter.hasNext(); )\n\t\t{\n\t\t\tcoll.add((TumourGroupListVo)iter.next());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static TumourGroupListVoCollection buildFromBeanCollection(ims.clinicaladmin.vo.beans.TumourGroupListVoBeanCollection beans)\n\t{\n\t\tTumourGroupListVoCollection coll = new TumourGroupListVoCollection();\nNext line of code:\n\t\tfor (int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tcoll.add(beans.get(i));\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static class TumourGroupListVoComparator implements Comparator\n\t{\n\t\tprivate static final String COMPARE_TO = \"compareTo\";\n\t\tpublic TumourGroupListVoComparator(SortOrder order)\n\t\t{\n\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tsetDirection(SortOrder.DESCENDING);\n\t\t\t}\n\t\t}\n\t\tpublic TumourGroupListVoComparator(SortOrder order, boolean caseInsensitive)\n\t\t{\n\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t\t{\n\t\t\t\tsetDirection(SortOrder.DESCENDING);\n\t\t\t}\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tprivate SortOrder direction = SortOrder.ASCENDING;\n\t\tprivate boolean caseInsensitive = true;\n\t\tpublic void setDirection(SortOrder direction)\n\t\t{\n\t\t\tthis.direction = direction;\n\t\t}\n\t\tpublic SortOrder getDirection()\n\t\t{\n\t\t\treturn direction;\n\t\t}\n\t\tpublic boolean isCaseInsensitive()\n\t\t{\n\t\t\treturn caseInsensitive;\n\t\t}\n\t\tpublic void setCaseInsensitive(boolean caseInsensitive)\n\t\t{\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic boolean isCaseInsensitive()\n\t\t{\n\t\t\treturn this.caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object obj1, Object obj2)\n\t\t{\n\t\t\tif (obj1 == null && obj2 == null)\n\t\t\t\treturn 0;\n\t\t\tif (obj1 == null)\n\t\t\t\treturn -1;\n\t\t\tif (obj2 == null)\n\t\t\t\treturn 1;\n\t\t\tif (obj1 instanceof TumourGroupListVo == false && obj2 instanceof TumourGroupListVo == false)\n\t\t\t\treturn 0;\n\t\t\tif (obj1 instanceof TumourGroupListVo == true && obj2 instanceof TumourGroupListVo == true)\n\t\t\t{\n\t\t\t\tTumourGroupListVo vo1 = (TumourGroupListVo)obj1;\n\t\t\t\tTumourGroupListVo vo2 = (TumourGroupListVo)obj2;\n\t\t\t\tif (vo1.getId() == null)\n\t\t\t\t\treturn -1;\n\t\t\t\tif (vo2.getId() == null)\n\t\t\t\t\treturn 1;\n\t\t\t\tif (vo1.getId().equals(vo2.getId()) == false)\n\t\t\t\t\treturn vo1.getId().compareTo(vo2.getId());\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn this.direction.compare(obj1, obj2);\n\t\t}\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcx = lines[selectedLine].x;\n\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\th = lines[selectedLine].height;", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       new LayoutAnimationController(set);\n        mListView.setLayoutAnimation(controller);\n    }\n    \n    /**\n     * Set the list loading animation.\n     */\n    private void setAnimation(boolean isLoading) {\n    \tif (isLoading) {\n    \t\tsetAnimation();\n    \t} else {\n    \t\tmListView.setLayoutAnimation(null);\n    \t}\n    }\n    \n    /**\n     * Set the list loading animation.\n     */\n    private void setAnimation() {\n    \tsetAnimation(true);\n    }\n    \n    /**\n     * Set the list loading animation.\n     */\n    private void setAnimation(boolean isLoading) {\n    \tif (isLoading) {\n    \t\tsetAnimation();\n    \t} else {\n    \t\tmListView.setLayoutAnimation(null);\n    \t}\n    }\n    \n    /**\n     * Set the list loading animation.\n     */\n    private void setAnimation(boolean isLoading, boolean isEmpty) {\n    \tif (isLoading) {\n    \t\tsetAnimation();\n    \t} else {\n    \t\tmListView.setLayoutAnimation(null);\n    \t}\n    }\n    \n    /**\n     * Set the list loading animation.\n     */\n    private void setAnimation(boolean isLoading, boolean isEmpty) {\n    \tif (isLoading) {\n    \t\tsetAnimation();\n    \t} else {\n    \t\tmListView.setLayoutAnimation(null);\n    \t}\n    }\n    \n    /**\n     * Set the list loading animation.\n     */\n    private void setAnimation(boolean isLoading, boolean isEmpty, boolean isEmptyFolder) {\n    \tif (isLoading) {\n    \t\tsetAnimation();\n    \t} else {\n    \t\tmListView.setLayoutAnimation(null);\n    \t}\n    }\n    \n    /**\n     * Set the list loading animation.\n     */\n    private void setAnimation(boolean isLoading, boolean isEmpty, boolean isEmptyFolder) {\n    \tif (isLoading) {\n    \t\tsetAnimation();\n    \t} else {\n    \t\tmListView.setLayoutAnimation(null);\n    \t}\n    }\n    \n    /**\n     * Set the list loading animation.\n     */\n    private void setAnimation(boolean isLoading, boolean isEmpty, boolean isEmptyFolder) {\n    \tif (isLoading) {\n    \t\tsetAnimation();\n    \t} else {\n    \t\tmListView.setLayoutAnimation(null);\n    \t}\n    }\n    \n    /**\n     * Set the list loading animation.\n     */\n    private void setAnimation(boolean isLoading, boolean isEmpty, boolean isEmptyFolder) {\n    \tif (isLoading) {\n    \t\tsetAnimation();\n    \t} else {\n    \t\tmListView.setLayoutAnimation(null);\n    \t}\n    }\n    \n    /**\n     * Set the list loading animation.\n     */\n    private void setAnimation(boolean isLoading, boolean isEmpty, boolean isEmptyFolder) {\n    \tif (isLoading) {\n    \t\tsetAnimation();\n    \t} else {\n    \t\tmListView.setLayoutAnimation(null);\n    \t}\n    }\n    \n    /**\n     * Set the list loading animation.\n     */\n    private void setAnimation(boolean isLoading, boolean isEmpty, boolean isEmptyFolder) {\n    \tif (isLoading) {\n    \t\tsetAnimation();\n    \t} else {\n    ", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey == 0)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n                else\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey + 1;\n                }\n            }\n            ARow.FieldKey = HighestNumber;\n        }\n        /// <summary>\n        /// manual code when deleting a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void DeleteRowManual(ref PartnerEditTDSPPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = 0;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PartnerEditTDSPPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual code when editing a row\n        /// </summary>\n        /// <param name=\"ARow\"></param>\n        private void EditRowManual(ref PPartnerInterestRow ARow)\n        {\n            ARow.FieldKey = ARow.FieldKey;\n        }\n        /// <summary>\n        /// manual", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tint[] \t\tscoresRef \t= new int[length];\nNext line of code:\n\t\tint \t\tscore \t\t= 0;\nNext line of code:\n\t\tint \t\tindex \t\t= 0;\nNext line of code:\n\t\tint \t\t\tindexTmh \t= 0;\nNext line of code:\n\t\tint \t\tindexSignal \t= 0;\nNext line of code:\n\t\tint \t\t\tindexNotTmh \t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh \t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh2 \t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh3 \t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh4 \t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh5 \t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh6 \t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh7 \t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh8 \t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh9 \t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh10\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh11\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh12\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh13\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh14\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh15\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh16\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh17\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh18\t= 0;\nNext line of code:\n\t\tint \t\tindexNonTmh19\t= 0;\nNext line of code:\n\t\tint \t\tindexNonTmh20\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh21\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh22\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh23\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh24\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh25\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh26\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh27\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh28\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh29\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh30\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh31\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh32\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh33\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh34\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh35\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh36\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh37\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh38\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh39\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh40\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh41\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh42\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh43\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh44\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh45\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh46\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh47\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh48\t= 0;\nNext line of code:\n\t\tint \t\tindexNonTmh49\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh50\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh51\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh52\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh53\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh54\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh55\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh56\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh57\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh58\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh59\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh60\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh61\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh62\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh63\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh64\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh65\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh66\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh67\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh68\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh69\t= 0;\nNext line of code:\n\t\tint \t\t\tindexNonTmh7", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
