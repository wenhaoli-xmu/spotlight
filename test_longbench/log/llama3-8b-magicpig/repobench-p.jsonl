{"pred": "    private final transient KademliaConfiguration config;\n    private final transient KademliaRoutingTable routingTable;\n    private final transient KademliaConfiguration config;\n    private final transient KademliaConfiguration config;\n    private final transient KademliaConfiguration config;\n    private final transient KademliaConfiguration config;\n    private", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        // mEffects.add(new NoEffect());\n        mEffects.add(new NoEffect());\n        mEffects.add(new FlowAbsEffect());\n        mEffects.add(new FlowAbsGaussEffect());\n        mEffects.add(new FlowAbsSmoothEffect());\n        mEffects.add(new FlowAbsBilateralFilterEffect());\n        mEffects.add(new", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Encryption):  # noqa: D101\n    input_widths = [8, 8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, x, y):\n        return tuple([x + y])\n\n\nclass Cipher1(Cipher):  # noqa: D", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "    private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private boolean mParameterPanelVisible;\n\n    public EffectManager(Activity activity, SpectaculumView spectaculumView) {\n        mActivity = activity;\n        mSpectaculumView = spectaculumView;\n        mEffects = new ArrayList<Effect", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    public void addReaderListener(ReaderListener listener) {\n        readerListeners.add(listener);\n    }\n\n    public void addOnStartedListener(Consumer<Snapshot> listener) {\n        onStarted", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务元数据管理器\n     */\n    private TaskMetaInfoManager taskMetaInfoManager;\n\n    /**\n     * 任务监听器管理器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 任务配置", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tCounter counter = new Counter();\n\t\t\tCounter problemCounter = new Counter();\n\t\t\tCounter solutionCounter = new Counter();\n\t\t\tCounter solutionCounter2 = new Counter();\n\t\t\tCounter solutionCounter3 = new Counter();\n\t\t\tCounter solutionCounter4 = new Counter();\n\t\t\tCounter solutionCounter5 = new", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "            DebugManager.getInstance().storePushId(regId);\n            DebugManager.getInstance().storePrivatePublicKeyToExternalStorage(rsa.getPrivateKeyInBase64(), rsa.getPublicKeyInBase64());\n            DebugManager.getInstance().storeDeviceId(deviceId);\n            DebugManager.getInstance().storeMessageKeysToExternalStorage();\n            return true;\n", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN, SESSION_ID);\n    assertEquals(new U2fSignRequest(\"U2F_V2\", SERVER_CHALLENGE_SIGN, APP_ID_SIGN, SESSION_ID),\n        signRequest);\n  }\n\n  @Test", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            self.acctA = RadiusAccounting(self.global_config['_radius_client'], self.cId, self.remote_ip, self.source, \\\n              self.global_config['sip_address'], self.global_config['sip_port'], self.global_config['sip_proxy'], \\\n              self.global_config['sip_proxy_port'], self.global_config['", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "    __typeid__ = 0x01\n    def __init__(self, uri):\n        self.uri = uri\n    def __bytearray__(self):\n        return bytearray(self.uri)\n    def parse(self, packet):\n        self.uri = packet.read_string()\n        return self\n    def __repr__(self", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "            return\n\n          if cstr_node.binary:\n            cstr_node.lhs = convert_ast_constraint(children[0])\n            cstr_node.rhs = convert_ast_constraint(children[1])\n            process_children(cstr_node.lhs, children[0])\n            process_children(cstr_node.rhs, children[1])\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);\n                intent.putExtra(\"force_fullscreen\", true);\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, Bundle args) {\n       ", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "        String message = AppSettings.getFindPeopleAllowedMessage();\n        String email = AppSettings.getUserEmail();\n        String name = AppSettings.getUserName();\n        String avatarUrl = AppSettings.getUserAvatarUrl();\n        String login = AppSettings.getUserLogin();\n        PostLocationDataBody data = new PostLocationDataBody(login, latitude", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "        self.assertEqual(\n            InterLayerPipeline(\n                self.network, self.resource, self.alloc, self.cstr_symargs,\n                self.cstr_symvals, self.cstr_topbat_idx, self.cstr_num_sp_fbs,\n                self.cstr_topbat, self.cstr_topofm, self.cstr", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "    class User(BaseModel):\n        id = Column(String, hash_key=True)\n        name = Column(String)\n        email = Column(String)\n        joined = Column(DateTime)\n        by_email = GlobalSecondaryIndex(hash_key=\"email\", projection=\"all\")\n\n        def __new__(cls, id, name, email, joined", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "            yield result\nfrom.xpath30_parser import DecimalFormat\nfrom.xpath30_parser import DecimalFormats\nfrom.xpath30_parser import DecimalFormatsType\nfrom.xpath30_parser import DecimalFormatType\nfrom.xpath30_parser import DecimalFormatType\nfrom.xpath30_parser import DecimalFormatType\nfrom.", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                    new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new MapColorsTransformation(),\n                    new RGBAdjustTransformation(),\n                    new RGBAdjustTransformation(),\n                    new RGBAdjustTransformation(),\n                    new RGBAdjustTransformation(),\n                    new RGBAdjustTransformation(),\n                    new RGBAdjustTransformation(),\n                    new RGBAdjustTransformation(),\n                    new RGB", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "    private static final ButterKnife.Action<View> SHOW = (view, index) -> view.setVisibility(View.VISIBLE);\n    private static final ButterKnife.Action<View> HIDE = (view, index) -> view.setVisibility(View.GONE);\n    private static final ButterKnife.Action<View> SHOW = (view, index) -> view.setVisibility(View.VISIBLE);\n", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                writeResponse(SUCCESS, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean - Failure Response", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "        wild.set_message(wild_report)\n        await wild.insert()\n        await ctx.send(f\"Reported {wild.pkmn.label} at {wild.location}!\")\n        await ctx.message.delete()\n        await wild_report.add_reaction(MyEmojis.RESPONSE)\n        await wild_report.add_reaction(MyEmojis.RESP", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "    data = SNLIData(vocab=vocab, **c['data'])\n    # Load model\n    if c['model'] =='simple':\n        model = NLISimple(\n            mlp_dim=c['mlp_dim'],\n            emb_dim=c['emb_dim'],\n            vocab=vocab,\n            **c", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.amplitude == 50.\n  assert doppler.period_s == 3.\n  assert doppler.phaseShift == ", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivity(intent);\n                finish(ActivityAnimation.SLIDE_LEFT);\n            } else if (raffle.isValid() &&!isMan) {\n                Participant participant = raffle.getFortunate", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "                assert self.redlock.locked() > self.redlock.auto_release_time\n        time.sleep(self.redlock.auto_release_time * 2)\n        assert not self.redis.exists(self.redlock.key)\n\n    def test_extend_with_context_manager(self):\n        assert not self.redis.exists(self.redlock.key)\n        with self.assertRaises", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "        return ConeSettings(self, \"Sound\")\n\n    @property\n    def threed_cone_settings(self):\n        \"\"\"The inside and outside angles of the 3D projection cone and the\n        outside volume.\n\n        :type: ConeSettings\n        \"\"\"\n        return ConeSettings(self, \"Sound\")\n\n    @property", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "    @calg.register(CompressionAlgorithm)\n    def calg_compression(self, val):\n        self._calg = CompressionAlgorithm(val)\n\n    @property\n    def compressed(self):\n        return self._compressed\n\n    @compressed.register(bytes)\n    def compressed_bytes(self, val):\n        self._compressed = val", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        cellSize = findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n        #cellSize = findCellSize(imgshape, maxLabel = maxLabel, verbose = verbose, out = out, **parameter);\n        #cellSize = findCellSize(imgshape, maxLabel = max", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "            Assets.perfectTapSound.play();\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play();\n        } else if (accuracy == Accuracy.NICE) {\n            Assets.niceTapSound.play();\n        } else if (accuracy == Accuracy.BAD) {\n            Assets.noHitTap", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "            for (Transaction t : transactionIterator) {\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n\rNext line of code:\n            System.out.println(print);\r\n        }\r\n    }\r\n\rNext line of code:\n    private boolean checkFileValid(File file) {\r\n        return", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                if (query instanceof InsertMeta) {\n                    ((InsertMeta) query).postProcess();\n                }\n                if (query instanceof DeleteMeta) {\n                    ((DeleteMeta) query).postProcess();\n                }\n                if (query instanceof DropMeta) {\n                    ((DropMeta) query).postProcess();\n                }\n           ", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                    algorithm_parameter_name=AlgorithmParameterName.KYE,\n                    algorithm_parameter_value=b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                            if (env.combExpCheck[i]) {\n                                env.numCombExpCheck++;\n                            }\n                        }\n                    }\n                }\n            }\n        } // USE_CEC\n\n        if (Config.USE_CEC) {\n            if (env.numCombExpCheck > 0) {\n                if (Config.USE", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "    url(r'^save-pipeline-config$', ajax_save_pipeline_config, name=\"ajax-save-pipeline-config\"),\n    url(r'^run-pipeline-config$', ajax_run_pipeline_config, name=\"ajax-run-pipeline-config\"),\n    url(r'^toggle-pipeline-config$', ajax_toggle_pipeline_config, name=\"ajax-toggle-pipeline", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tString notEnoughData;\n\t\t\n\t\tResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData)\n\t\t{\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = tags;\n\t\t\tthis.colors = colors;\n\t\t\tthis.not", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "        if self._db_name is None:\n            raise PyOrientBadMethodCallException(\n                \"Database name is not set\", []\n            )\n        if self._db_type is None:\n            raise PyOrientBadMethodCallException(\n                \"Database type is not set\", []\n            )\n        if self._", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "    public void then(ThenStepFactory thenStepFactory) {\n        this.thenStepFactory = thenStepFactory;\n    }\n\n    @Override\n    public void then(Then<$SystemUnderTest,?> thenStep) {\n        thenStepFactory.thenStep(thenStep);\n    }\n\n    @Override\n    public void then", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "    try {\n      return process.await();\n    } catch (CommandFailureException e) {\n      if (expectedExitCodes == null || Arrays.binarySearch(expectedExitCodes, e.exitCode()) >= 0) {\n        return e.result().toString();\n      } else {\n        throw new IosDeviceException(\n            Real", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\ttextColor = Color.parseColor(\"#\" + options.getString(Keys.TEXT_COLOR, \"FFFFFF\"));\n\t}\n\t\n\tprivate void setFontStyle() {\n\t\tfontStyle = Typeface.DEFAULT;\n\t\tif (options.getString(Keys.FONT_STYLE, \"0\").equals(\"1\")) {\n\t\t\tfontStyle = Typeface.MONOSPACE;\n\t\t}", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = Message.MessageBuilder.buildMessage(request.getParameter(\"FromUserName\"), request.getParameter(\"ToUserName\"));\n\t\tAbstractEvent event = message.asEvent();\n\t\tif (event instanceof SubscribeEvent) {\n\t\t\tSubscribeEvent subscribeEvent = (SubscribeEvent) event;\n\t\t\trobot.subscribe(subscribeEvent.getFromUserName(),", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "    async def city(self, ctx):\n        \"\"\"Returns the city of the raid party\"\"\"\n        raid_party = self.get_raid_party_for_channel(ctx)\n        return raid_party.city\n\n    @command(pass_context=True, category='Bot Info', aliases=[\"raid-timezone\", \"rtz\"])\n    async def timezone(self", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25))\n        self.assertEqual(date_string_to_date(\"11/12/2012\"), datetime(2012, 12, 11))\n        self.assertEqual(date_string_to_date(\"09/02/", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor('config.json', os.path.dirname(config_file))\n        config_actor.start()\n        gevent.sleep(1)\n        # start database actor\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.start()\n        gevent.sleep(1)\n\n        # start hone", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                            ShareUtil.shareText(mActivity, picture.getComment_ID() + \" \" + picture\n                                  .getComment_author() + \" \" + picture.getComment_date() + \" \" + picture\n                                  .getComment_ID() + \" \" + picUrl);\n                            break;\n                        case 1:\n                            if (", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\tsavemgh_v2(outdata, masking_array, \"pFWER_%s\" % opts.tmifile[0], affine_array)\n\t\t\t\t\telif opts.outtype[i] =='nii':\nNext line of code:\n\t\t\t\t\t\tsavenifti_v2(outdata, masking_array, \"pFWER", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                OhmletActivity.class,\n                OhmletActivity.ohmletFragment.class,\n                OhmletActivity.ohmletFragment.ohmletFragment.class,\n                OhmletActivity.ohmletFragment.ohmletFragment.ohmletFragment.class,\n                OhmletActivity.", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDH: ECDHSignature,\n                PubKeyAlgorithm.ElGamal: ElGSignature,\n                PubKeyAlgorithm.ElGamalEncrypt: ElGSignature,\n                PubKeyAlgorithm.ElGamalEncryptOrSign: El", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is not None:\n                yield item\n    else:\n        for item in context.iter_self():\n            if is_schema_node(item):\n                self.add_xsd_type(item)\n            elif item is context.root:\n                # item", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter\n    }\n\n  def __init__(self, next_provider, sink_properties, global_properties):\n    super(HeapBalancerSink, self).__init__(next_provider, sink_properties, global_properties)\n    self._heap = []\n    self._downed = []\n    self._downed_lock", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "        nc._send_message_with_protocol('hello', protocol)\n        protocol.send_string.assert_called_once_with('hello')\n\n    def test_send(self):\n        \"\"\"\n        Ensures that the message is translated into a dictionary and passed\n        into the protocol object in the expected way.\n        \"\"\"\n        nc = NetstringConnector(self", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "        assertEquals(\"query\", \"select * from table\", ((StatementExecution) qe).getQuery());\n        // end::query[]\n    }\n\n    public void statementExecution() {\n        // tag::statement[]\n        ProxyTestDataSource ds = new ProxyTestDataSource(actualDataSource);\n\n        //... perform application logic with database...\n\n       ", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testTotalQueryCount() {\n        StatementExecution se = new StatementExecution();\n        se.setSuccess(true);\n\n        CallableExecution ce = new CallableExecution();\n       ", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "                log.info(\"Waiting for next ADR message time\")\n                yield txsleep(scheduled - current)\n            # Send the ADR request\n            log.info(\"Sending LinkADRReq to %s\", device.deveui)\n            yield self._sendLinkADRReq(device)\n        \n        # Clear the ADR processing", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        utterance, log_likelihood, num_frames = return_queue.get(timeout=1", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "# 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "        FragmentObservable<ChatSettingsInfo> obs = ObservableRegistry.getObservable(this.getClass());\n        obs.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable<ChatSettingsInfo> obs = ObservableRegistry.getObservable(this.getClass());\n        obs.remove(this);\n    }\n\n   ", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\nfints/segments/base.py\nclass FinTS3SegmentMeta(type):\n    def __new__(mcs, name, bases, attrs):\n        cls = super().__new__(mcs, name, bases, attrs)\n\n        if", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "            jd = self.img_handle.jd\n\n        else:\n\n            # Get time from the first frame\n            if self.config.first_frame is None:\n                self.config.first_frame = self.config.first_frame\n\n            # Get the time of the first frame\n            jd = self.config.first_frame.jd\n\n        # Convert the reference", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "        if (mAdapter!= null) {\n            mAdapter.notifyDataSetChanged();\n        }\n    }\n\n    private void refreshMyRoomsList() {\n        if (mAdapter!= null) {\n            mAdapter.notifyDataSetChanged();\n        }\n    }\n\n    private void refreshMyRoomsList(final List<RoomSummary> roomSummaries) {\n        if (", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "        self.bingo_card_writer = BingoCardWriter()\n        self.bingo_card_manager = BingoCardManager(self.dbi)\n        self.bingo_data_generator = BingoDataGenerator()\n        self.bingo_data = self.bingo_data_generator.generate_bingo_data()\n        self.bingo_card_url = self.bingo_data_generator", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "        chim_detect = ChimeraDetector(raw_bp_graphs[run_stages[-1]],\n                                      run_stages, target_sequences)\n\n    #running assembly graph refinement\n    if args.scaffold:\n        logger.info(\"Running assembly graph refinement\")\n        for stage in run_stages:\n            if stage.name == \"refine", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);\n    }\n\n    /**\n     * Gets the current version of the plugin.\n     *\n    ", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                MiPushClient.registerPush(FragmentPreferences.this, mi_APP_ID, mi_APP_KEY);\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HwPush\":\n                if(shouldInit()) {\n                HMSAgent.connect(FragmentPreferences.this, new HMSAgent.ConnectHandler", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(OBJECT_NAME));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectInstance>>(OBJECT_INSTANCE));\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "    public PersonalVulnsWindow() {\n        initComponents();\n        // Set up the tree\n        DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"vulns\");\n        vulntree = new JTree(root);\n        vulntree.setCellRenderer(new VulnerabilityViewTreeCellRenderer());\n        vulntree.set", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "    /**\n     * It creates the chart panels for the given metric.\n     *\n     * @param metric The metric for which the chart panels will be created.\n     * @param datasetGenerator The generator that will produce the datasetGenerator\n     * for the chart panels.\n     */\n    private void createChartPanels(int", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "        if (packet.getType() == PacketType.UPGRADE) {\n            if (transport == Transport.POLLING) {\n                SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());\n                scheduler.scheduleCallback(key, new Runnable() {\n                    @Override\n                    public void run() {\n", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "        VideoCapturer videoCapturer = VideoCapturer.create(appRtcClient.videoConstraints());\n        if (videoCapturer == null) {\n          logAndToast(\"No video capturer found.\");\n          return;\n        }\n        VideoSource videoSource = factory.createVideoSource(videoCapturer);\n        VideoTrack localVideo", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "            contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, -1L);\n            contentValues.put(JobStorage.COLUMN_LAST_RUN, -1L);\n            contentValues.put(JobStorage.COLUMN_FLEX_MS, -1);\n            contentValues.put(JobStorage.COLUMN_FLEX_SUPPORT, false);\n            contentValues.put(JobStorage.COLUMN_EXACT, false);\n           ", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "    private CheckBoxPreferenceHideTime preferenceHideTime;\n    private CheckBoxPreferenceHideScore preferenceHideScore;\n\n    private DialogPreferenceBackgroundColor preferenceBackgroundColor;\n    private DialogPreferenceCardBackground preferenceCardBackground;\n    private DialogPreferenceTextColor preferenceTextColor;\n    private DialogPreferenceOnlyForThisGame dialogPreferenceOnlyForThisGame;\n\n    private CheckBox", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "    return obj\n    def __init__(self, obj, basedir=None, snapshot_time=60, log_time=60):\n        self.obj = obj\n        self.basedir = basedir\n        self.snapshot_time = snapshot_time\n        self.log_time = log_time\n        self.system_data_path =", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "        if self.config.debug_gdb:\n            docker_config.add_extra_flags(['-e', 'GDBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus'])\n            docker_config.add_extra_flags(['-e', 'QT_QPA_PLATFORM=wayland'])\n            docker_config.add_extra_flags(['-e", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "    final String[] SectionURLs = { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\" };\n    final String[] SectionURLs = { \"0\", \"1\", \"2\", \"3\",", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "        FragmentObservable<SearchContactFragment, SearchContactFragment.DataClass> obs =\n                ObservableRegistry.getObservable(this.getClass());\n        obs.notifyFragments(new SearchContactFragment.DataClass());\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                           Bundle savedInstanceState) {\n        View view = inflater.inflate(R", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\rNext line of code:\n\rNext line of code:\n\rNext line of code:\n\rNext line of code:\n\rNext line of code:\n\rNext line of code:\n\rNext line of code:\n\rNext line of code:\n\rNext line of code:\n\rNext line of code:\n\rNext line of", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "        simulator_data = fdm_pb2.SimulatorData()\n        simulator_data.time = 0.0\n        simulator_data.gps.latitude = 0.0\n        simulator_data.gps.longitude = 0.0\n        simulator_data.gps.altitude = 0.0\n        simulator_data.gps", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "            textareaMessage.setText(new String(httpMessage.getRes().getByteResponse()));\n        } else {\n            textareaMessage.setText(new String(httpMessage.getReq().getByteRequest()));\n        }\n        textareaMessage.revalidate();\n        textareaMessage.repaint();\n        textareaMessage.setCaretPosition(0);\n        textareaMessage.setHighlighter(null", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "    assert simple_table_status(description) == expected_status\n    assert simple_table_status(description) == expected_status\n    assert simple_table_status(description) == expected_status\n    assert simple_table_status(description) == expected_status\n    assert simple_table_status(description) == expected_status\n    assert simple_table_status(description) == expected", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "    def _load_file(self, fileobj):\n        \"\"\"Load the IFF file from the fileobj\"\"\"\n        return IffFile(IffChunk, fileobj)\nNext line of code:\n    def _pre_load_header(self, fileobj):\n        \"\"\"Seek to the ID3 chunk\"\"\"\n        try:\n            file", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "    visitBooleanOp(new VisitCheckOp3(n), opToOccur.get(op));\r\n    return null;\n  }\r\n\r\n  visitProxOp(new VisitCheckOp3(n), query);\r\n\r\n  return null;\r\n}\r\n\r\n/**\n * f0 -> <AND> f1 -> CheckOrd4Search() f2 -> ( Ord", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                    new DiffusionTransformation(),\n                    new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new EqualizeTransformation(),\n                    new ExposureTransformation(),\n                    new GainTransformation(),\n                    new InvertAlphaTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new KaleidoscopeTransformation().setSides(", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "            for i in range(1, self._header[1]):\n                exception_class += self._decode_field( FIELD_STRING )\n                exception_message += self._decode_field( FIELD_STRING )\n\n            raise PyOrientCommandException(\n                exception_class.decode('utf-8'),\n                exception_message.decode('utf-8')\n", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "    api = DERBMDATA(args.apikey)\n    if args.fromdate is None:\n        print(\"A from date should be supplied using the --fromdate flag. Format is YYYY-MM-DD.\")\n        return None\n    if args.todate is None:\n        print(\"A to date should be supplied using the", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if-else\n\t\t\titems.add( item );\n\t\t} // for\n\t\treturn items;\n\t}\n\n\t// ================================================\n\n\t/**\n\t * Returns the list of comments for", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "        new TaskName()), StaticString.WHITESPACE,\n        new Spinner(Spinner.SPINNER_SLASHES), StaticString.WHITESPACE,\n        new Percentage(), StaticString.WHITESPACE,\n        new Fraction(), StaticString.WHITESPACE,\n        new Status()\n    });\n    ProgressMonitor monitor", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "public static FormFor formFor(Object resource, Object... fields) {\n\t\treturn new FormFor(resource);\n\t}\nNext line of code:\npublic static FormFor formFor(Object resource, Object... fields) {\n\t\treturn new FormFor(resource);\n\t}\nNext line of code:\npublic static FormFor formFor(Object resource", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "        events.append(Event(e))\n        return events\n\n    def list_events_for_device(self, device_id, params=None):\n        data = self.call_api(\n            \"devices/%s/events\" % device_id, type=\"GET\", params=params\n        )\n        events = list()\n        for e in data[\"events\"]:\n", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "    Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example:\n     * <pre> assertThat(ds.getBatchPrepareds(),", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "            if (Preferences.get(this).isPremiumRequestEnabled()) {\r\n                if (Preferences.get(this).isPremiumRequest()) {\r\n                    if (Preferences.get(this).isCropWallpaper()) {\r\n                        if (mWallpaper!= null) {\r\n                            WallpaperDownloader.download(this, mWallpaper, mWallpaperProperties);\r\n                       ", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "  private static final Pattern GET_SLOP_AND_BOOST = Pattern.compile(\r\n     \"^\\\"(.*)\\\"(?::(\\\\d+))?\\\\^(\\\\d+(?:\\\\.\\\\d+)?)$\");\r\n  private static final Pattern GET_BOOST = Pattern.compile(\"^\\\"(.*)\\\"(?::(\\\\d+", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\t#ARG_CHECKER.check(args,mode='converting')\n\t\t#ARG_CHECKER.check(args,mode='converting')\n\t\t#ARG_CHECKER.check(args,mode='converting')\n\t\t#ARG_CHECKER.check(args,mode='converting')\n\t\t#ARG_CHECKER.check(args", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "        self.beginning_datetime = filenameToDatetime(self.vidinfo.filename)\n\n        # Get the middle time of the video\n        self.middle_datetime = self.beginning_datetime + datetime.timedelta(seconds=self.vidinfo.fps/2)\n\n        # Get the end time of the video\n        self.end_datetime = self.begin", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "    ilm = ilms.Ilm(ilmvals=ILMVALS, bkgvals=BKGVALS, zscale=0.89)\n    # 3. image\n    image = models.Image(p, ilm, objects, zscale=0.89)\n    # 4. add", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);\n\t}\n}\njava/squeek/spiceoflife/foodtracker/FoodGroup.java\npublic class FoodGroup\n{\n\tpublic static final String FOOD_GROUP_IDENTIFIER = \"foodgroup\";\n\tpublic static final String FOOD_GROUP_NAME = \"name\";\n\tpublic", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "        if request.user.is_authenticated:\n            if request.user == post.user:\n                can_delete = True\n            else:\n                can_delete = post.can_delete()\n        else:\n            can_delete = False\n        if request.user.is_authenticated:\n            if request.user == post.user:\n                can_edit = True\n            else", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "    def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = [0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "        if item is None:\n            yield context.root\n        elif is_xpath_node(item):\n            if is_processing_instruction_node(item):\n                yield item\n            else:\n                for child in item:\n                    yield child\n        else:\n            raise self.error('XPTY0004', 'invalid kind test')\n    else:\n", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "Timeline/Handlers/Puffle.py\n@PacketEventHandler.onXT('s', 'p#pa', WORLD_SERVER)\r\ndef handlePuffleAdopt(client, puffle, sendPacket = True):\r\n    puffleById = {i.id: i for i in client['data'].puffles}\r\n    puffle = p", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "    I.set_tile(im.tile)\n    I.set_values(P.param_positions(), P.param_radii())\n    I.set_values(P.param_positions(), P.param_radii())\n    I.set_values(P.param_positions(), P.param_radii())\n    I.set_values(P.param_positions(), P.param_radii())\n    I.set_values(P", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "            manager = mp.Manager()\n            return_queue = manager.Queue()\n            error_dict = manager.dict()\n            stopped = Stopped()\n            procs = []\n            for i, args in enumerate(jobs):\n                function = compile_information_func\n                p = KaldiProcessWorker(i, return_queue, function, error_dict", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "    platepar.rotation_from_horizon = RMS.Astrometry.ApplyAstrometry.rotationWrtHorizon(platepar)\n\n    # Update the platepar\n    platepar.updateRefRADec()\n\n    # Update the platepar\n    platepar.updateRefRADec()\n\n    # Update the platepar\n    plate", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "        contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 10_000L);\n        contentValues.put(JobStorage.COLUMN_FLEX_MS, 10_000L);\n        contentValues.put(JobStorage.COLUMN_LAST_RUN, 60_000L);\n        contentValues.put", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "        Log.d(\"ChatSettingsRemove\", \"onStart\");\n        if (chat == null) {\n            Log.d(\"ChatSettingsRemove\", \"chat is null\");\n            chat = DatabaseManager.INSTANCE.getChatDAO().get(chatId);\n        }\n        if (chat == null) {\n            Log.d(\"ChatSettingsRemove", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "        model = Progress\n        fields = ['component', 'area', 'year', 'fiscal_year', 'value']\n", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "            setBottomInfo();\n        }\n    }\n\n    @Override\n    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n        if (isChecked) {\n            if (buttonView.getId() == R.id.root) {\n                for (CheckBox checkBox : checkBoxes) {\n                    checkBox.setChecked(false);\n               ", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "            @Override\n            protected void onFailure(final Throwable cause) throws Exception {\n                context.setConnectionState(new DisconnectedConnectionState());\n            }\n        }).then(new ExecuteOn<Void>() {\n            @Override\n            public void onSuccess(final Void value, final Completable<? super Channel> result) {\n                final Channel channel =", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "        new RegistrationParam(success, email, password, message));\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/ui/fragments/ChatListFragment.java\npublic class ChatListFragment extends Fragment implements NotifiableFragment<ChatListFragment.ChatListParam> {\n\n    private static final", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "    private final double alpha;\n    private final double beta;\n    private final double gamma;\n    private final double delta;\n    private final double epsilon;\n    private final double lambda;\n    private final double rho;\n    private final double tau;\n    private final double phi;\n    private final double psi;\n    private final double", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "    private List<FilterType> filterTypes;\n    private List<FilterType> filterTypes1;\n    private List<FilterType> filterTypes2;\n    private List<FilterType> filterTypes3;\n    private List<FilterType> filterTypes4;\n    private List<FilterType> filterTypes5", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "  assert isinstance(args.gps_sv[0].getMessage(), ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      '--message-type', 'one']\n  args = parser", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "        graphics.draw_colored_triangles(tris, fills)\n        if self.style.fill_rule == 'evenodd':\n            graphics.draw_colored_triangles(tris, fills, fill_rule='evenodd')\n        if self.style.fill_rule == 'nonzero':\n            graphics.draw_colored_triangles(tris, fills, fill_rule", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"app\")) {\n\t\t\t\t\ta = new AppData(data);\n\t\t\t\t} else {\n\t\t\t\t\ta = new ShortcutData(data);\n\t\t\t\t}\n\t\t\t\tapps.add(a);\n\t\t\t\tneedSave = true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tToast.makeText(contextRef.get", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow && ClipBoardAction.isShowInStatusBar) {\n                    isClipBoard", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "        self.beg_alt = np.degrees(altAz2AltAz(self.beg_vect[0], self.beg_vect[1], self.beg_vect[2], self.lat, self.lon, self.jd_array[0])[0])\n        self.end_alt = np.degrees(altAz2AltAz", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol sym = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());\n\t\tMMethod m = new MMethod(sym);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void exitFunction(@NotNull FunctionContext ctx) {\n\t\tsuper.exitFunction(ctx);\n\t\tCollection<ParseTree>", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "    /**\n     * Called when the visitor is about to enter a node with children.\n     * @return Determines whether the node's children will be visited.\n     */\n    boolean enter(Node node);\n\n    /**\n     * Called when the visitor is about to visit a node.\n     * @return Determines whether the node will be", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "    private CodeGeneratorFactory codeGeneratorFactory;\n\n    public OpenAPIProcessor() {\n        super(SourceVersion.RELEASE_8);\n    }\n\n    @Override\n    public Set<String> getSupportedAnnotationTypes() {\n        return Collections.singleton(\"com.cosium.openapi.annotation.OpenApi\");\n    }\n\n    @Override\n    public Source", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "        bind(GerritPushExtension.class);\n        bind(GerritRestApi.class).toProvider(GerritApiProvider.class);\n        bind(GerritToolWindowFactory.class);\n        bind(GerritToolWindow.class).to(GerritToolWindow.class);\n        bind(GerritToolWindow.class).to", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                    if (snapshots.get(i).getName().startsWith(zxid)) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            if (snapFile == null) {\r\n                System.err.println(\"No snapshot file found for zxid \" + zxid);\r\n                exit", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "            entries = [e for e in entries if txn_matches(e, query)]\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.has_unassigned_split]\n        elif filter_type is FilterType.Income:\n            entries = [e for e in entries if any(get", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "        ('segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment',", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Observable.just(query);\n\t\t\t\t})\n\t\t\t\t.map(query -> new SearchSuggestion(query, query))\n\t\t\t\t.subscribe(searchSuggestionsAdaper::add);\n\t\t// Set up rate button\n\t\tRxView.clicks(rateButton)\n\t\t\t\t.compose(bindToLifecycle())\n", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "    rad = 0.5 * np.random.randn(POS.shape[0]) + 4.5  # 4.5 +- 0.5 px particles\n    rad = 0.5 * np.random.randn(POS.shape[0]) + 4.5  # 4.5", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "        result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)\n\n\ndef apply_or(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                stringBuilder.append(\"\\n\\n\").append(i + 1).append(\". \").append(RequestFragment.sSelectedRequests.get(i));\r\n            }\r\n            stringBuilder.append(\"\\n\\n\").append(R.string.icon_request_body);\r\n            mEmailBody = stringBuilder.toString();\r\n            return true;\r\n        } catch (Exception e) {\r\n            LogUtil", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "        return isinstance(instance, (int, float, Decimal, Duration, AbstractDateTime))\n        return isinstance(instance, (int, float, Decimal, Duration, AbstractDateTime, AnyAtomicType))\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        return issubclass(subclass, (int, float", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "            return SearchMenuPage()\n        if pageletId == 'SearchHistoryPage':\n            return SearchHistoryPage(self._createSearchHistory(context))\n        if pageletId == 'Mediathek':\n            return Mediathek(self._createSearchHistory(context))\n        if pageletId == 'RubricPage':\n           ", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "                if not pattern.checkDataFileExistence():\n                    errmsg += \"Pattern %s:  Data file does not exist!\\n\"%pattern.name\n            else:\n                if not pattern.checkDataFileExistence():\n                    errmsg += \"Pattern %s:  Data file does not exist!\\n\"%pattern.name\n\n           ", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\n    filter_class = ThemeFilter\n    ordering_fields = ('id', 'code',", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\nNext line of code:\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\nNext line of code:\n    private ContentItem", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generator = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\tgenerator.generateQuestionnaire(new File(basePathDDI2FO + \"/ddi.xml\"), \"test\");\n\t}\n}\nsrc/main/java/fr/insee/eno/service/Next line of code.java\npublic class", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                        user.setPw(\"password\");\n                        new ChangePasswordTask(user).execute(\"1\");\n                    }\n                });\n        // \"Cancel\" button to cancel the dialog\n        alert.setNegativeButton(R.string.Cancel,\n                new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n                        // Canceled", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()), name=\"package-new\"),\n    url(r'^view/(?P<package_name>[\\w\\-\\+]+)$', staff_member_required(TranStatusPackageView.as", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "  encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.l1Index == NormalRateConfig.GPS.L1.INDEX\n  assert encoder.l2Index == NormalRateConfig.GPS.L", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "    return tgAsDict[constants.TierName.TIER1].entryList\n    return tgAsDict[constants.TierName.TIER1].entryList\n    return tgAsDict[constants.TierName.TIER1].entryList\n    return tgAsDict[constants.TierName.TIER1", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        done, no_feats, unvoiced = return_queue.get(timeout=1)\n                        if stopped.stop_check():\n                            break\n                    except", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "            dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n            dataset = UAV123(root_dir, version=version, return_meta=True)\n            self._check_dataset(dataset)\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NFS')\n", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "    int getTagValue(FixTag tag);\n    int getTagValue(FixTag tag, int defaultValue);\n    int getTagValue(FixTag tag, int min, int max);\n    int getTagValue(FixTag tag, int min, int max, int defaultValue);\n    int getTagValue(F", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "            yield chunk_idx, bounds\n            # yield chunk_idx, bounds, data_chunk(data, bounds)\n            # yield chunk_idx, bounds, data_chunk(data, bounds, data_t=data_t)\n            # yield chunk_idx, bounds, data_chunk(data, bounds, data_t=data_t,\n            #                                     data_m", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tresult.setQueryNode(AlvisIRAnyQueryNode.INSTANCE);\n\t\t\treturn result;\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIR", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\tprivate Validator validator;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t\tvalidator = new ValidatorImpl();\n\t}\n\t\n", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "        registry.put((byte) (ATTRIBUTE ^ RESPONSE_MASK), new MarshalledResponseHandler<Attribute>(ATTRIBUTE));\n        registry.put((byte) (ATTRIBUTE_LIST ^ RESPONSE_MASK), new MarshalledResponseHandler<AttributeList>(ATTRIBUTE_LIST));\n        registry.put((byte) (BOOLEAN ^ RESPONSE_MASK), new MarshalledResponseHandler", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                        String langCode = languageDetector.detectLanguage(content, lang);\n                        if (langCode == null) {\n                            log.info(\"Couldn't detect language for tweet: \" + origContent);\n                            continue;\n                        }\n                        if (langCode.equals(lang)) {\n                            String id = DAO.getCollectionForClass(Tweet.class", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "        return '\\n'.join(lines)\npybufrkit/templatedata.py\nclass DataNode(object):\n    \"\"\"\n    This is the base class of all data nodes. It provides the common\n    functionality for all data nodes.\n    \"\"\"\n\n    def __init__(self, descriptor):\n        self.descriptor = descriptor", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "        help=\"\"\"network delay [milliseconds].\n        valid range is 0ms to 60min.\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 100ms\n        \"\"\".format(\n            _get_unit_help_msg()\n        ),\n    )\n    group.add_argument(\n        \"--", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "        return Contact.objects.filter(telerivet_contact_id=self.phone_number)\n    def get_contact(self):\n        return Contact.objects.get(telerivet_contact_id=self.phone_number)\n\n    def get_contact_or_create(self):\n        try:\n            return self.get_contact()\n        except Contact.DoesNotExist:\n            return self.create_contact()\n\n    def", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "    pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));\n\n    // Convert live projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        liveProjects.apply(ParDo.named(\"Convert live projects to GCPResourceState\")\n          ", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "        self.rule = DetectSoft404()\n        self.rule.set_engine(self.engine)\n        self.rule.set_kb(self.kb)\n        self.rule.set_child_heuristics(self.heuristics)\n        self.rule._is_home = lambda url: url == \"http://example.com/\"\n        self.rule._fetch_sample = self", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "        ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ffibuilderRX.compile(tmpdir=cls.tmpdirnameRX.name, verbose=VERBOSE)\n        spec", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "        conditions.append(AndCondition())\n    if \"or\" in operations:\n        conditions.append(OrCondition())\n    if \"not\" in operations:\n        conditions.append(NotCondition())\n    if \"eq\" in operations:\n        conditions.append(Condition(ComparisonMixin, column, value))\n    if \"ne\" in", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "        assert get_square(0, 0) == 0\n        assert get_square(0, 1) == 1\n        assert get_square(0, 2) == 2\n        assert get_square(1, 0) == 3\n        assert get_square(1, ", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "    private final IJavaProject javaProject;\n\n    private final GeneratorModel model;\n\n    private final GeneratorWizardMainPage mainPage;\n\n    private final GeneratorWizardBasePage settingsPage;\n\n    private final GeneratorWizardBasePage filterPage;\n\n    private final GeneratorWizardBasePage staticBindingsPage;\n\n    private final GeneratorWizardBasePage", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "      self._timeout = Deadline(sink_properties.timeout)\n    self._timeout_sink = None\n    self._timeout_sink = None\n    self._timeout_sink = None\n    self._timeout_sink = None\n    self._timeout_sink = None\n    self._timeout_sink = None\n    self._timeout_sink", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate boolean debugImages = false;\n\tprivate boolean debugImages = false;\n\tprivate boolean debugImages = false;\n\tprivate boolean debugImages = false;\n\tprivate boolean debugImages = false;\n\tprivate boolean debugImages = false;\n\tprivate boolean debugImages = false;\n\tprivate boolean debugImages = false;\n\tprivate boolean debugImages = false;\n\tprivate", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "    -> cmdLine.arguments().stream().filter(arg -> arg.startsWith(\"-\")).collect(Collectors.toList()));\n    cmdLine.arguments().removeAll(files);\n    cmdLine.arguments().add(\"-sourcepath\");\n    cmdLine.arguments().add(input.toString());\n    cmdLine.arguments().add(\"-subpackages\");\n    cmdLine.arguments().add(output", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "        return RespostaSAT.analisar(retorno)\n\n    def consultar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sat`.\n\n        :return: Uma resposta SAT padrão.\n        :rtype: satcfe.resposta.padrao.Resposta", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPEAKER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICRO", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "    if gopts.event_log:\n      git_trace2_event_log = EventLog(gopts.event_log)\n    if gopts.git_trace2_event_log:\n      git_trace2_event_log = EventLog(gopts.git_trace2_event_log)\n    if gopts.git_trace2_event_log:\n      git_trace2_event_log", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "    @Named(\"default\")\n    Prefs providePrefs(SharedPreferences prefs) {\n        return new Prefs(prefs);\n    }\n\n    @Provides @Singleton\n    Gson provideGson() {\n        return new Gson();\n    }\n\n    @Provides @Singleton\n    PersistentData providePersistentData() {\n        return new Persistent", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "        assertThat(ds, totalQueryCount(5));\n        assertThat(ds, totalQueryCount(5, is(5)));\n    }\n\n    @Test\n    public void testTotalCount() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution());  //", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "        return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckOutCommand()\n    {\n        return new SvnJavaCheckOutCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "        verifiers.put(\"Local Files Exist\", new LocalFilesExistVerifierImpl());\n        verifiers.put(\"Remote Files Exist\", new RemoteFilesExistVerifierImpl());\n        verifiers.put(\"Syntactically Valid Schema Names\", new ValidSchemaNameVerifierImpl());\n    }\n\n    public void createBatchListeners() {\n        user", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "            showProgress(false);\n            Toaster.getInstance().toast(R.string.error_incorrect_password, Toast.LENGTH_LONG);\n        }\n    }\n\n    private boolean yasmeDeviceCheck() {\n        // check if device is registered\n        if (DatabaseManager.INSTANCE.getDeviceDAO().getDeviceByUserId(DatabaseManager.INSTANCE.getUserId())!= null", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "     * @throws DrupalLoginException if there's an error logging in the user (e.g. username/password mismatch)\n     * @throws DrupalFetchException if there's an error during the request.\n     */\n    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n    ", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "        self.textArea.addMessage(splitMessage(text), self.chum)\n        self.textArea.addMessage(splitMessage(text), self.chum)\n        self.textArea.addMessage(splitMessage(text), self.chum)\n        self.textArea.addMessage(splitMessage(text), self.chum)\n        self.textArea.addMessage(splitMessage", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "            (r'/login', LogInHandler),\nNext line of code:\n            (r'/logout', LogOutHandler),\nNext line of code:\n            (r'/register', RegisterHandler),\nNext line of code:\n            (r'/problem/([a-zA-Z0-9_]+)/(.*?)/([", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAnd", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "                throw new ProtTestInternalException(\"Unknown information criterion\");\n        }\n\n        return informationCriterion.compute();\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade.ProtTestFacade#runEstimator(pal.alignment.Alignment, pal.tree.Tree, es.uvigo.d", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "    return Pair(e1, e2, e1.type.sig * e2.type.sig)\n\n\n@with_info(st_term)\ndef app(expr1, expr2):\n    \"\"\"Turn a pair of simply typed arguments\n    into an application.\n    \n    Arguments:\n    - `expr1`: an expression or int or float", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "    void inject(AnalyticsTracker analyticsTracker);\n    void inject(AudioBookManager audioBookManager);\n    void inject(AudioBookPlayer playbackService);\n    void inject(ConfigurationContentProvider configurationContentProvider);\n    void inject(PlaybackService playbackService);\n    void inject(DemoSamplesInstallerService demoSamplesInstallerService);\n    void inject(", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "    private List<ExpenseCategory> expenseCategories;\n    private List<ExpenseCategory> expenseCategoriesToDisplay;\n    private List<Expense> expenses;\n    private List<Expense> expensesToDisplay;\n    private List<ExpenseCategory> expenseCategoriesToDisplay;\n    private List<Expense> expensesToDisplay;\n    private", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "    def test_response_content_type_missing_raises_5xx():\n    def test_response_content_type_missing_raises_5xx():\n        response = Response()\n        with pytest.raises(ResponseValidationError):\n            validate_response(response, Mock())\n    def test_response_content_type_missing_raises_5xx():\n        response = Response()\n        with pytest.raises", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t@Override\n\tpublic void enterAnnotateCommand(ConsoleCommandParser.AnnotateCommandContext ctx) {\n\t\tAnnotateCommandContext annotateCommandContext = (AnnotateCommandContext) ctx;\n\t\tToken cmd = annotateCommandContext.cmd;\n\t\tToken STR = annotateCommandContext.STR;\n\t\tList<Token>", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "            except TextGridParseError as e:\n                self.return_dict[\"textgrid_error_files\"].append(e)\nNext line of code:\n            except Exception as e:\n                self.return_dict[\"error_files\"].append(e)\nNext line of code:\n                self.return_dict[\"error_files\"].append(e)\nNext line of code", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "        AccelerometerResource,\n        \"/aircraft/sensors/accelerometer\",\n        resource_class_args=(sensors.accelerometer,)\n    )\n\n    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "        self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrue())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n        self.assertAlmostEqual(gps.altitude, fdmexec.GetPropagate().GetAltitudeASLmeters())\n        self.assertAlmostEqual", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "    'count         Count the instances of each class with matching class name.',\n    'create        Create an instance of a class in a namespace.',\n    'delete        Delete an instance of a class.',\n    'enumerate     List the instances of a class.',\n    'get           Get an instance of a class.',\n    '", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t/**\n\t * 后台主页\n\t * \n\t * @return\n\t */\n\t@RequestMapping(value = \"/manage\", method = RequestMethod.GET)\n\tpublic ModelAndView manage() {\n\t\tModelAndView mv = new ModelAndView(\"manage\");\n\t\tUsers user = (Users) SecurityUtils.get", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                            logError(\"AWS Lambda exception: \" + t.getMessage());\n                        }\n                        else if(exceptionClass.equals(OperationException.class)){\n                            logError(\"AWS Lambda exception: \" + t.getMessage());\n                        }\n                        else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logError(\"AWS Lambda exception: \" + t.getMessage());\n", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                       join_keyword=\"JOIN\")\n\n    def test_full_e2e_gujarati_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full flow for sign up + cancel in Gujarati...\")\n        self.run_e2e_flow_for_language(language=\"Gujarati\",\n                                       person_name=u'\\u", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester passiveLocationUpdateRequester;\n  protected LocationUpdateRequester activeLocationUpdateRequester;\n  protected LocationUpdateRequester activeLocationUpdateRequesterGps;\n  protected LocationUpdateRequester activeLocationUpdateRequesterNetwork;\n  protected", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "        print \"\\n[INFO] MobSF will perform Dynamic Analysis on Android Virtual Device\"\n        avd_path = os.path.join(DYNAMIC_TOOL_DIR, 'android_avd')\n        reference_name = 'android-23'\n        dup_name = 'MobSF'\n        emulator = 'emulator-' + str(SETTINGS", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_Header(Layer):\n    constructorList = [\n        Bit('RRC', 1, Pt=1, Repr='bin'),\n        Bit('RRC', 1, Pt=0, Repr='bin'),\n        Bit('RRC', 1, Pt=0, Repr='", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tadjac_lh = CreateAdjSet(faces_lh, num_vertex_lh)\n\t\t\tadjac_rh = CreateAdjSet(faces_rh, num_vertex_lh)\n\t\t\tadjac = np.array([adjac_lh, adjac_rh])\n\t\telse:\n\t\t\tadj", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "      result.append(\" IS \").append(Operator.EQ.getValue());\r\n    } else if (exp.getOperator() == Operator.EQ) {\n      result.append(\" = \");\n    } else if (exp.getOperator() == Operator.NEQ) {\n      result.append(\"!= \");\n    } else if (exp.getOperator()", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "        final CacheList list = new CacheList();\n        list.setName(listName);\n        cacheService.storeCacheList(list);\n        sessionContext.setData(CACHE_LIST, list);\n      }\n    }\n  }\n\n  @FXML\n  public void loadCaches(ActionEvent actionEvent) {\n    final Optional<String> listNameOption =", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "class CP_Data(Layer):\r\n    constructorList = [\r\nclass CP_ACK(Layer):\r\n    constructorList = [\r\nclass CP_ERROR(Layer):\r\n    constructorList = [\r\n### Relay Protocol ###\r\nclass RP_Data(Layer):\r\n    constructorList = [\r\nclass RP_ACK(Layer):\r\n    constructorList = [\r\nclass RP_ERROR(L", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                        new TimeEntryOvertimeAggregation()\n                )\n        );\n\n        user.setValue(userSession.getUser());\n        group.setValue(userSession.getUser().getGroup());\n        groupsDl.setParameter(\"user\", userSession.getUser());\n        groupsDl.load();\n\n        status.setValue(TimeEntryStatus.NEW);\n        status.setOptions(TimeEntryStatus.values", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "            (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.ElGamal): ElGPub,\n            (True", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "                             self._expansion_num, 0, ExpansionInfo.BOARDTYPE)\n\n    @property\n    def num_chans(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                             self._expansion_num, 0, ExpansionInfo.NUMEXPCHANS)\n\n    @", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "        self.key_size = read_u16le(f)\n        self.references = {}\n        for i in range(count):\n            key = read_u32le(f)\n            ref = read_u16le(f)\n            self.references[key] = ref\n\n    def write_index(self):\n        s = self.parent.dir.open('w", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "            user = create_inactive_user(email, full_name)\n            user.save()\n\n            # Send email to user with activation link\n            subject = _('Activate your account')\n            template = 'accounts/activate_email.txt'\n            url = request.build_absolute_uri(\n                reverse('accounts:activate', kwargs={'user_id': user", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "        if draft:\n            return await Utilities.message(ctx.channel, f\"A draft already exists for {draft_channel.mention} with code **{draft.draft_code}**\")\n        else:\n            return await Utilities.error(ctx.channel, f\"No draft found for {draft_channel.mention}.\")\n\n    @_draft.command(aliases", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "            ex = Hitbtc('bccbtc')\n        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n            ex = Hitbtc('bcceth')\n        elif name == \"%s_BCC_USD\" % constant.EX_HITBITC:\n            ex = Hitbtc('bccusd')\n       ", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "            if context.item is not None:\n                self.add_xsd_type(context.item)\n            yield context.item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is not None:\n                yield item\n\n    else:\n        # XSD typed selection\n        for item in", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "    helpTestQueryData(0, 10);\n    helpTestQueryData(1, 10);\n    helpTestQueryData(9, 10);\n    helpTestQueryData(10, 10);\n    helpTestQueryData(11, 10);\n    helpTestQueryData(20, ", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tif (elt.hasAttribute(AlvisIRConstants.XML_SEARCH_EXPANDER_PROPERTIES)) {\n\t\t\tProperties properties = XMLUtils.loadProperties(getFileAttribute(basedir, elt, AlvisIRConstants.XML_SEARCH_EXPAND", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                    MiPushClient.init(getApplicationContext(), mi_APP_ID, mi_APP_KEY);\n                    MiPushClient.registerPush(getApplicationContext(), SYS);\n                    deviceMiToken = MiPushClient.getToken(getApplicationContext());\n                    //stopGcmPush();\n                    //Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n           ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "    private final KadConfiguration config;\n    private final int attempts;\n    private int attempt;\n    private boolean success;\n    private boolean timeout;\n    private boolean error;\n    private boolean done;\n    private boolean connected;\n    private boolean responseReceived;\n    private boolean responseSent;\n    private boolean replyReceived;\n    private boolean", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "                tablefmt = table_format\n            output.append(tabulate(rows, headers, tablefmt, numalign, stralign))\n    return '\\n'.join(output)\n\n\ndef format_status_message(status, message):\n    if status:\n        return '%s: %s' % (status, message)\n    else:\n        return", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "        return words_api(wordnik_api, token)\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@Inject\n\tprivate ConnectorIssues connectorIssues;\n\t@Inject\n\tprivate ConnectorProjects connectorProjects;\n\t@Inject\n\tprivate ConnectorComments connectorComments;\n\t@Inject\n\tprivate ConnectorWorkLog connectorWorkLog;\n\t@Inject\n\tprivate ConnectorIssues connectorIssues2;\n\t@Inject\n\tprivate ConnectorIssues connectorIssues3;\n\t@Inject", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "        self.assertIsInstance(handle, HANDLE)\n        self.assertTrue(handle.value)\n        self.assertEqual(handle.value, 0)\n        self.assertEqual(handle.name, None)\n        self.assertEqual(handle.name, None)\n        self.assertEqual(handle.name, None)\n        self.assertEqual(handle.name, None)\n        self.assertEqual(handle.name, None)\n        self", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "        this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Observable<DirectorInfo> info() {\n", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                    return parserHolder.getParser().parse(annotation, roundEnv, originatingElements, elementUtils);\n               })\n              .flatMap(Collection::stream)\n              .collect(Collectors.toList());\n\n        if (parsedPaths.isEmpty()) {\n            return;\n        }\n\n        SpecificationGenerator specificationGenerator = specificationGeneratorFactory.build(fileManagerFactory);\n        specificationGenerator", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "    protected PageParser pageParser;\n\n    protected FetcherHandler fetcherHandler;\n\n    protected Fetcher fetcher;\n\n    protected FetcherHandler fetcherHandler;\n\n    protected Fetcher fetcher;\n\n    protected FetcherHandler fetcherHandler;\n\n    protected Fetcher fetcher;\n\n    protected FetcherHandler fetcherHandler;\n\n", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "            actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n            actionPopupGroup.addSeparator();\n            actionPopupGroup.add(new SaveAction(this));\n        }\n\n        PopupHandler.installPopupHandler(editTableView, actionPopupGroup", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "    private GuiButton addChannel;\n    private GuiButton removeChannel;\n    private GuiButton forgetChannel;\n    private GuiButton selectChannel;\n    private GuiButton noneChannel;\n    private GuiButton channelAlias;\n    private GuiButton channelPrefix;\n    private GuiButton channelCommand;\n    private GuiButton channelHidePrefix;\n", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "                return new BtnQuickNotice();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATIONS_CODE:\n                return new BtnClearAllNotifications();\n            case ConstantStr.FUNC_CLEAR_MEM_CODE:\n                return new BtnClearBackground();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "        form.setText(Messages.configurationEditorWebModuleDialogTitleEdit);\r\n        form.setText(Messages.configurationEditorWebModuleDialogTitleEdit);\r\n        form.setText(Messages.configurationEditorWebModuleDialogTitleEdit);\r\n        form.setText(Messages.configurationEditorWebModuleDialogTitleEdit);\r\n        form.setText(Messages.configurationEditorWebModuleDialogTitleEdit);\r\n        form.setText(Messages.configurationEditorWebModuleDialogTitle", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "        type = Type()\n        type.name = \"foo\"\n\n        self.assertEqual(\"foo\", type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\n        type = Type()\n        type.name = \"bar\"\n\n        self.assertEqual(\"my_bar\", type.get_sample())\n\n    def test_object_get_sample(self", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusCommand.class, StatusChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessage", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "        if _cluster_type not in CLUSTER_TYPES:\n            raise PyOrientBadMethodCallException(\n                _cluster_type + 'is not a valid data cluster type', []\n            )\n        self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n       ", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "    query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'frob': frob,\n        'format': 'json',\n        'nojsoncallback': 1,\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('http', 'flickr.com", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPPutFailedException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPPutFailedException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\",", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "        k -= 1\n        cond_stack_size += get_stack_effect(bytecode[k][2], bytecode[k][3])\n      except IndexError:\n        break\n    condition_bytecode = condition_bytecode[1:]\n    condition_bytecode = [bytecode[0]] + condition_bytecode\n    condition_bytecode =", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "    List<CreditCard> creditCards = new ArrayList<>();\n    List<DailyExpense> dailyExpenses = new ArrayList<>();\n    List<BigDecimal> dailyExpensesAmounts = new ArrayList<>();\n    BigDecimal totalAmount = new BigDecimal(0);\n    BigDecimal totalAmountInCredits = new BigDecimal(0);\n    BigDecimal total", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\nall_platform_slugs = tuple([(slug, slug) for slug in all_platform_slugs])\n\nclass LanguageAdmin(admin.ModelAdmin):\n    list_display = ('lang_name', 'lang_status')\n    list", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t} else if (type == TAB_MY_RATINGS) {\n\n\t\t\tif (syncSubscription!= null)\n\t\t\t\tsyncSubscription.unsubscribe();\n\t\t\tstatusText.setVisibility(View.GONE);\n\t\t\temptyText.setVisibility(View.GONE);\n\t\t\trateButton.hide();\n\t\t\tlistAddButton.show();\n\n\t\t\t// Show the user's ratings", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "    return self.__parser._parser_name\n\n    def parse(self, ping_message: Sequence[str]) -> PingStats:\n        \"\"\"\n        Parse ping command output.\n\n        Args:\n            ping_message (Sequence[str]):\n                Ping command output.\n\n        Returns:\n            |PingStats|:\n\n        Raises:\n            |ParseError|", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "        } else {\r\n            //get chat from server\r\n            try {\r\n                chat = ChatTask.getInstance().getChat(chatId);\r\n            } catch (Exception e) {\r\n                Log.e(this.getClass().getSimpleName(), \"get chat from server failed\");\r\n            }\r\n        }\r\n        if (chat == null) {\r\n            Log.e", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic int selectedTile = 0;\n\tpublic int selectedTile2 = 0;\n\tpublic int selectedTile3 = 0;\n\tpublic int selectedTile4 = 0;\n\tpublic int selectedTile5 = 0;\n\tpublic int selectedTile6 = 0;\n\tpublic int selectedTile7 = 0;\n\tpublic int", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "    account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string.letters + string.digits) for i in range(20))\n            while", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "        assertThat(qe, isStatementOrBatchStatement());\n        assertThat(qe, isPrepared());\n        assertThat(qe, batchPrepared());\n        assertThat(qe, isPreparedOrBatchPrepared());\n        assertThat(qe, isCallable());\n        assertThat(qe, batchCallable());\n        assertThat(qe, is", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "    } else if (Utils.getXmlNodeValue(doc, TAG_MESSAGE)!= null) {\n      log(\"server response is: \" + Utils.getXmlNodeValue(doc, TAG_MESSAGE), null);\n      successful = false;\n      serverMessage.setMessage(Utils.getXmlNodeValue(doc, TAG_MESSAGE));\n      uploadFinished();\n      return;\n    }", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "    merged_assembly_points_by_ids = merge_assembly_points(assembly_points_by_sources=assembly_points_by_sources)\n    merged_assembly_points_by_ids = merge_assembly_points(assembly_points_by_sources=assembly_points_by_sources)\n    merged_assembly_points_by_ids = merge_assembly_points(assembly_points_by_sources=", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.thermometer,)\n    )\n\n   ", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "        embed = Embeds.make_embed(header=\"Clembot Configuration\", header_icon=Icons.CONFIGURATION,\n                        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (!level.isInstalled()) {\n\t\t\t\t\t\tLevelsManager levelsManager = getLevelsManager();\n\t\t\t\t\t\tlevelsManager.downloadLevelAsync(level, new Runnable() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t// Install\n\t\t\t\t\t\t\t\tlevelsManager.installAsync(outputFile, name, author, apiId, new", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "    private final WeeklyCaptionProvider captionProvider;\n\n    /** Caption format provuder for the weekly view */\n    private final WeeklyCaptionProvider weekCaptionProvider;\n\n    /** Caption format provuder for the monthly view */\n    private final MonthlyCaptionProvider monthCaptionProvider;\n\n    /** Caption format provuder for the monthly view */\n    private", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "        this.vms = new SpringVms(restTemplate, root, tasks, deployments);\n    }\n\n    @Override\n    public Observable<InputStream> fetchLogs(FetchLogsRequest request) {\n        return jobs.fetchLogs(request);\n    }\n\n    @Override\n    public Observable<Task> stopJob(StopJobRequest request", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "    new DefaultPublicKeyLocator(\n        new IdentityServerDescriptorProvider(),\n        new JsonServerInfoResolver() {\n          @Override\n          public JsonServerInfo resolve(URI serverDescriptor) {\n            return JsonServerInfo.getDocument(SERVER_INFO_DOCUMENT);\n          }\n        });\n\n    locators = new VerifierProviders();\n    loc", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                } catch (FilesNotFoundException e) {\n                    // This is expected\n                } catch (Exception e) {\n                    fail(e.getMessage());\n                }\n            }\n\t\t} catch (Exception e) {\n\t\t\tfail(e.getMessage());\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tclient.deleteObject(containerName, filename);\n\t\t\t", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                    TrackHistoryEntry entry = new TrackHistoryEntry();\n                    entry.title = liveInfo.getTitle();\n                    entry.endTime = new Date(0);\n                    entry.startTime = currentTime;\n                    dao.insert(entry);\n                }\n            });\n        }\n    }\n\n    @Override\n    public void onPlayerError(int errorCode) {\n        if (", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "    ProjectsFragment.ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener,", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                        Intent intent = new Intent(mContext, IconPreviewActivity.class);\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_ICON, home.getIcon());\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_TITLE, home.getTitle());\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_SUBTITLE, home.getSubtitle());\r\n                        intent.putExtra(IconPreviewFragment.EXTRA_IMAGE", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "        encoding = app_configs.get(\"default_encoding\", Default.ENCODING)\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = app_configs.get(\"proxy_server\", Default.PROXY_SERVER)\n\n    convert_configs = load_convert_config(\n        logger, ctx.obj[Context.CONVERT_CONFIG], subcommand=\"url\"\n", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "plexapi/playqueue.py\nclass PlayQueue(PlexObject):\n    \"\"\"Control a PlayQueue.\n\n    Attributes:\n        TAG (str): 'PlayQueue'\n        TYPE (str): 'playqueue'\n        identifier (str): com.plexapp.plugins.library\n        items (list): List of :class:`~plex", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "        self.assertEqual(\n            _environment_to_string({u\"i\": u\"j\", u\"k\": u\"l\"}),\n            u\"i=j\\0k=l\\0\\0\")\n\n    def test_type_check_for_environment_value(self):\n        self.assertEqual(\n            _environment_to_string({u\"m\": u", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "    if gopts.gitdir:\n      cmd.gitdir = gopts.gitdir\n    if gopts.gitdir is None:\n      cmd.gitdir = os.path.join(self.repodir, '.git')\n    if gopts.gitdir is not None:\n      cmd.gitdir = os.path.abspath(gopts.gitdir", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "                // 执行成功，执行监听器。\n                for (RunnerTaskListener runnerListener : runnerListenerList) {\n                    runnerListener.onSuccess(taskData);\n                }\n            } catch (TaskPartnerException e) {\n                // 执行失败，执行监听器。\n                for (RunnerTaskListener runnerListener : runner", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "        entry = Entry.create(\"http://example.com\", arguments={\"timeout\": 1})\n        engine = Engine()\n        await engine.perform(entry, [])\n        self.assertEqual(entry.response, None)\n        self.assertEqual(entry.result, None)\n        self.assertEqual(entry.arguments, {\"timeout\": 1})\n        self.assertEqual(entry.result,", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "        //用户的密码\n        String password = utils.getPassword();\n        //用户的性别\n        String sex = utils.getSex();\n        //用户的年级\n        String grade = utils.getGrade();\n        //用户的学院\n        String college = utils.getCollege();\n        //用户的专业\n       ", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "        Qdisc.attach(self.__con)\n        Qdisc.create()\n\n        self.__device = device\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__export_path = export_path\n        self.__is_parse_filter_id = is_parse_filter_id\n        self.__tc_command_output", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "            state[\"inventory\"] = [self.serialize_mudobj(mudobj) for mudobj in inv]\n        except AttributeError:\n            state[\"inventory\"] = []\n\n    def add_livings_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            livings =", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  \rNext line of code:\n  \rNext line of code:\n  \rNext line of code:\n  \rNext line of code:\n  \rNext line of code:\n  \rNext line of code:\n  \rNext line of code:\n  \rNext line of code:\n  \rNext line of code:\n  ", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t\tthis.surveyName = null;\n\t}\n\t\n\tpublic ParameterizedGenerationService(PipelineGenerator pipelineGenerator, ValorizatorParameters valorizatorParameters, Validator validator, SchemaValidator schemaValidator, boolean cleaningFolder, String surveyName", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "        try {\n            decoder = (DataDecoder) Class.forName(dataDecoder).newInstance();\n        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {\n            System.err.println(\"Error while creating decoder: \" + ex.getMessage());\n            exit(1);\n        }\r\n        DataDirHelper dataDirHelper = null;\r\n        try", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "            self.params[\"root_dispersion\"] = self.root_dispersion\n        except UncertainTimeError:\n            log.error(\"We couldn't find a way to measure the clock's accuracy.\")\n            log.error(\"Switzerland won't work without a good clock.\")\n            sys.exit(1)\n        except:\n            log.error", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "        cursorById.close();\n        // Test a query with a where clause\n        String[] movieProjection = {\n                MovieColumns._ID,\n                MovieColumns.MOVIE_MOVIEDB_ID,\n                MovieColumns.TITLE,\n                MovieColumns.BACKDROP_PATH,\n                MovieColumns.ORIGINAL_LAN,\n                MovieColumns.OR", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n        self.UpdatePage()\n        self.parent.UpdateInscrits()\n        self.parent.UpdateFraisGarde()\n        self.parent.UpdateFraisGarde()\n        self.parent.UpdateFrais", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "        self.assertEqual(len(list(node_children(self.elem)), 2)\n        self.assertEqual(len(list(node_children(self.elem, with_root=False)), 1)\n        self.assertEqual(len(list(node_children(self.elem, with_root=True)), 2)\n        self.assertEqual(len(list(node_children(self.elem, with_root=False, with_tail=True", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.main);\r\n\t\tmapView = (MapView) findViewById(R.id.mapview);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(true);\r\n\t\tmapView.setStreetView(true);\r\n\t\tmapView.setTraffic(true);\r\n\t\tmapView.setMyLocationEnabled(true);\r\n\t\tmap", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_POISON:\n                    mushroom = new MushroomPoison(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "            ConfigCommandProcessor(\n                ConfigVlanCommandProcessor(self.switch_configuration),\n                ConfigVRFCommandProcessor(self.switch_configuration),\n                ConfigInterfaceCommandProcessor(self.switch_configuration)\n            )\n        )\nclass Cisco3750SwitchCore(BaseCiscoSwitchCore):\n    def new_command_processor(self):\n        return EnabledCommandProcessor(\n            Config", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "  assert isinstance(config, LowRateConfig)\n  assert config.GPS.L1.NAME == 'GPS_L1'\n  assert config.GPS.L2.NAME == 'GPS_L2'\n  assert config.GPSGLONASS.L1.NAME == 'GPSGLONASS_L1'\n  assert config.GPSGLON", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\nsatcfe/cliente.py\nclass ClienteSATLocal(ClienteSAT):\n    \"\"\"Cliente SAT local, isto é, que se comunica com o equipamento SAT\n    localmente conectado.\n\n    :param bibli", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n    # TODO: this is a hack to get the site fractions in the right order\n    # TODO: this is a hack to get the site fractions in the right order\n    # TODO: this is a hack to", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "    api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_conditions\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(PositionResource, \"/fd", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "    def __init__(\n        self,\n        use_mp: bool = True,\n        debug: bool = False,\n        verbose: bool = False,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n        self.debug = debug\n        self.verbose = verbose\n        self.use_mp = use_mp\n", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "    public static final String TextBlockObject = \"String\";\n    public static final String TextBlockObject = \"String\";\n    public static final String TextBlockObject = \"String\";\n    public static final String TextBlockObject = \"String\";\n    public static final String TextBlockObject = \"String\";\n    public static final", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n}\n", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "        return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private void installActions() {\n        installTreeActions();\n        installToolBarActions();\n    }\n\n    private void installToolBarActions() {\n        installToolBarAction(new AddServerAction(this));\n        installToolBarAction(new RemoveServerAction(this));\n        installToolBar", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1(\"TODOs\").classs(\"title\").txt(\"TODOs\");\n\t\t// Input().classs(\"new-todo\").att(Css.placeholder, \"What needs to be done?\").att(Css.autofocus, \"autofocus\");\n\t\t// Input().classs(\"", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "                if(output!=null) {\n                    Intent intent = new Intent(CropImageActivity.this, CropImageActivity.class);\n                    intent.putExtra(\"image\", output);\n                    intent.putExtra(\"cropAspectX\", cropAspectX);\n                    intent.putExtra(\"cropAspectY\", cropAspectY);\n                    intent.putExtra(\"cropAspectRatio\", C", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n        mActivity = (MainActivity) activity;\n    }\nNext line of code:\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        setRetainInstance(true);\n", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "    assert validate_key_condition(model, index, key)\n    assert key in model.Meta.keys\n    assert key not in model.Meta.projection\n    assert key not in model.Meta.indexes\n    assert key not in model.Meta.indexes.values()\n    assert key not in model.Meta.indexes.keys\n    assert key", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "            GCActivitySet gcActivitySet, GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace, int id, String gcActivityName) {\n        dataset.addGCActivityName(id, gcActivityName);\n    }\n\n    public", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "            '/properties':                  RestAppPropertys,\n        }\n        for r in self.resources:\n            self.api.add_resource(self.resources[r], r)\n        self.api.add_resource(RestApi, '/api')\n        self.api.add_resource(RestApi, '/api/')\n        self.api.add_resource(RestApi,", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "        self._settings_ini = settings_ini\n        self._tree_model = FileTreeModel()\n        self._tree_view = tree_view\n        self._settings_ini = settings_ini\n        self._settings_ini.set_safe('GENERAL', 'ROOT_DIRECTORY', directory)\n        self._settings_ini.set_safe('GENERAL', '", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n        ),\n    )\n    group.add_argument(\n        \"--reordering\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        packet re", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "    private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n    private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n    private", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        void dateClick(CalDate date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface DateDoubleClickListener {\n        /**\n         * Triggered when a date was double clicked\n         *\n         * @param date\n         *            The date and time that was clicked", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "        self._db_type = db_type\n        return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_pass(self, passw):\n        self._pass = passw\n        return self\n\n    def set_client_id(self, client_id):\n       ", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "            Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onPing(client);\n            break;\n        }\n\n        case NOOP: {\n            Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onPing(client);\n            break;\n        }\n\n        case CONNECT: {\n            Namespace namespace = namespacesHub.get", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem> contentItemList = new ArrayList<Content", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tGenerator generator = setGenerator(pipeline.getIn2Out());\n\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tGenerationService generationService = new GenerationService(preprocessors, generator, postprocessors);\n\t\treturn generationService;\n\t}\n\n\tprivate Postprocessor[] setPostProcessors", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "    // Read projects from the CRM API.\n    PCollection<GCPProject> liveProjects =\n        this.pipeline.apply(\"Read projects from the CRM API\",\n            new LiveProjectSource(org));\n    // Convert the projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>>", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "        name = Column(String)\n        expiry = Column(Timestamp)\n        by_name = GlobalSecondaryIndex(hash_key=\"name\", read_units=5)\n        by_expiry = GlobalSecondaryIndex(hash_key=\"expiry\", write_units=10)\n        by_range = GlobalSecondaryIndex(hash_key=\"range\", read_units=5,", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                          dim, vocab, lookup)\n            else:\n                raise NotImplementedError()\n            children.append(self._def_reader)\n        else:\n            self._def_reader = None\n\n        if not self._disregard_word_embeddings:\n           ", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "    private final AcceptCallback _acceptCallback = new AcceptCallback()\n    {\n        @Override\n        public void statusChanged(AcceptCallbackState state)\n        {\n            switch (state)\n            {\n                case Undefined:\n                    break;\n                case Accessible:\n                    break;\n                case Connected:\n                    break;\n            }\n", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "    private int videoQuality;\n    private String videoPath;\n    private String videoName;\n    private String videoThumbPath;\n    private String videoThumbName;\n    private String videoThumbUri;\n    private String videoUri;\n    private String videoMimeType;\n    private String videoTitle;\n    private String videoDescription;\n   ", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "    RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOutDownLeft(RotateOutDownLeft.class),\n    RotateOutDownRight(RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "            form.fields['zona'].queryset = self.request.user.perfil.zonas_permitidas.all()\n            form.fields['jurisdiccion'].queryset = self.request.user.perfil.jurisdicciones_permitidas.all()\n            form.fields['region'].queryset = self.request.user.perfil.reg", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n\n    }\n}\ncommons/src/main/com/mbrlabs/mundus/commons/env/lights/DirectionalLight.java\npublic class DirectionalLight extends BaseLight {\n\n    public Vector3 direction = new Vector3(0, -1", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\t// TODO: This is not working. I need to read the whole matrix in memory\n\t\t//return this.handle.int32().readMatrixBlock(path, (int)dim[0], (int)dim[1], 0, 0);\n\t\t//return this.handle.int32().read", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plus(ActorDetailsModule actorDetailsModule);\n    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfidixMethodCheckException e) {\n\t\t\tthrow new SocketViewException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark.\n\t *\n\t * @throws SocketViewException\n\t *             if socket communication fails\n\t */\n\tpublic void runBenchmark() throws SocketView", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "    sync_stats_manager = SyncStatsManager()\n    trans_platform_sync_manager = TransplatformSyncManager()\n    release_schedule_sync_manager = ReleaseScheduleSyncManager()\n    job_manager = YMLBasedJobManager()\n    pipeline_manager = CIPipelineManager()\n    pipeline_config_manager = PipelineConfigManager()\n    trans_platform_manager =", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo\n\t\t\t\t\t.getMoreSuitableEndpoint(endpointType);\n\t\t\tif (endpoint == null) {\n\t\t\t\tthrow new APIWrapperException(\n\t\t\t\t\t\t\"Problem finding a suitable endpoint for the given city.\",\n\t\t\t\t\t\tError.NOT_SUITABLE_ENDPOINT_FOUND, null);\n\t\t\t}\n\t\t\tlogManager", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "        if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue creada con éxito.')\n                return render(request,'relevamiento/mensaje.html')\n", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "      self._cstr = root\n      return\n    op = root.data[0]\n    if op == CMP_IMPLICIT_NOT_EMPTY:\n      self._cstr = root\n      return\n    if op == CMP_TYPE_CHECK:\n      self._cstr = root\n      return\n    if op == COMP", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "  private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<WaitAction>          waitActionSupportHandler          = new ActionSupportHandler<WaitAction>(WaitAction.class);\n  private ActionSupportHandler<", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tJoinResult result = JoinResult.CANCELLED;\n\t\tif (this.isSpectating()) {\n\t\t\tresult = JoinResult.CANCELLED;\n\t\t}\n\t\telse if (this.isDead()) {\n\t\t\tresult = JoinResult.CANCELLED;\n\t\t}\n\t\telse if (this.getRound()!=", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "    assert_array_equal(fold([MIN_HASH_VALUE], 1), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 2), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 3), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 4", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "        else:\n            result = str(value)\n    return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('xs:double?', 'xs:string', 'xs:string', 'xs:string')))\ndef evaluate_format_number_function(self, context=None):\n    value = self.get_argument(context", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item is None:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._root_item:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._doc:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._doc.get_parameters():\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "        array.items = [object1, object2, object3]\n        object1.properties[\"a\"] = \"a\"\n        object2.properties[\"a\"] = \"b\"\n        object3.properties[\"a\"] = \"c\"\n        object1.pattern_properties[\"a\"] = \"a\"\n        object2.pattern_properties", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "          byte[] dataBytes = buildRawData(clientConfig, dataSource);\n          byte[] dataBytes = buildRawData(clientConfig, dataSource);\n          byte[] dataBytes = buildRawData(clientConfig, dataSource);\n          byte[] dataBytes = buildRawData(clientConfig, dataSource);\n          byte[] dataBytes = buildRaw", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n  to_map_and_back(AFO, AmplitudePoly(A", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "                allOf(\n                        hasJsonPath(\"hits.total\", is(100)),\n                        hasJsonPath(\"hits.hits._source._id\", is(\"csw-record-0\")),\n                        hasJsonPath(\"hits.hits._source._source\", is(\"csw-record-0\")),\n                        hasJsonPath(\"hits.hits._", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "            (True, PubKeyAlgorithm.FormerlyElGamalEncrypt): ElGPub,\n            (True, PubKeyAlgorithm.FormerlyElGamalSign): ElGPub,\n            (True, PubKeyAlgorithm.RFC4880ElGamalEncryptOrSign): ElGPub,\n            (True,", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\n\t\t// Registra el escritor de GeoJSON\n\t\tJPEParser", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                        res = Authorization.this.getResults(\n                            context.<String>get(Global.SearchContext.FILTER),\n                            context.<ExtMap>get(Global.SearchContext.SEARCH_CONTEXT)\n                        );\n                    } catch (SQLException e) {\n                        context.put(ContextKeys.EXIT_STATUS, SQL_ERROR);\n                        context.<List<Throwable>>get(Context", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "    url(r'^users/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new_user'),\n    url(r'^users/(?P<pk>[-\\w]+)/$', edit_user, name='edit_user'),\n    url(r'^users/(?P<pk>[-\\", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                            if (PreferenceManager.getDefaultSharedPreferences(getActivity())\n                                  .getBoolean(SettingsActivity.KEY_PREF_PLAY_SHUFFLE_TEST, true)) {\n                                stack.shuffle();\n                            }\n                            if (PreferenceManager.getDefaultSharedPreferences(getActivity())\n                                  .getBoolean(SettingsActivity.KEY_PREF_PLAY_SHUFFLE_TEST, true)) {\n                                stack.shuffle();\n                            }\n", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "    DropDownMenu dropDownMenu;\n    DropMenuAdapter dropMenuAdapter;\n    private static final int MENU_COUNT = 2;\n    private static final int MENU_COUNT1 = 1;\n    private static final int MENU_COUNT2 = 2;\n    private static final int MENU_COUNT3 = 3;\n   ", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "        obj.updateBlockShape();\n        obj.updateBlockLabels();\n        obj.updateBlockSockets();\n        obj.updateBlockTags();\n        obj.updateBlockImages();\n        obj.updateBlockComment();\n        obj.updateBlockCollapseLabel();\n        obj.updateBlockWidget();\n        obj.updateBuffImg();\n        obj.updateBlockLinks();\n        obj", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "        f = derivative.XDA([d1, d2, d3])\n        i, j = self._find_preimage(f, d3)\n        assert i == d1.val\n        assert j == d2.val\n        assert f.eval(Constant(i, DP_WIDTH), Constant(j, DP_WIDTH)) ==", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the commands\n\t\tfor (BaseCommand command : commands) {\n\t\t\tgetCommand(command.getBaseCommand()).setExecutor(command);\n\t\t}\n\t\t\n\t\t// Register the listeners\n\t\tPluginManager pm = getServer().getPluginManager();\n\t\tpm", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "        connection.sendPacket(new Challenge(challengeData));\n    }\n\n    private void parseFailure(Element doc) throws IOException {\n        String condition = doc.getName();\n        if (\"sasl\".equals(condition)) {\n            connection.sendPacket(new Failure(condition));\n        } else {\n            connection.sendPacket(new Failure(condition));\n        }\n    }\n\n", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Hight = HightCipher\nLea = LeaCipher\nShacal1 = Shacal1Cipher\nShacal2 = Shacal2Cipher\nFeal = FealCipher\nXtea = XteaCipher\nTea = TeaCipher\nChaskey = ChaskeyCipher", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "    private FastScroller mFastScroller;\n    private TextView mEmptyView;\n    private boolean mShowToolbar;\n    private boolean mShowFastScroller;\n    private boolean mShowEmptyView;\n    private boolean mShowEmptyViewOnEmptyList;\n    private boolean mShowEmptyViewOnEmptyList;\n   ", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "            if(mSelectedEffect instanceof FlowAbsEffect) {\n                ((FlowAbsEffect) mSelectedEffect).setEffect((FlowAbsEffect) effect);\n            } else {\n                ((FlowAbsSubEffect) effect).setEffect((FlowAbsEffect) mSelectedEffect);\n            }\n        }\n        mSelectedEffect = effect", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "        Bit('R', ReprName='Reserved', Pt=6, BitLen=2, Repr='hex'),\n        Bit('M', ReprName='Message Type', Pt=8, BitLen=6, Repr='hum',\n            Dict=ESM_dict, Trans=True),\n        Bit('", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "            refresh();\n        }\n    };\n    private AlbumEditorDialog.OnAlbumEditedListener mOnAlbumEditedListener = new AlbumEditorDialog.OnAlbumEditedListener() {\n        @Override\n        public void onAlbumEdited() {\n            refresh();\n        }\n    };\n    private OnArtistPickedListener mOnArtistPickedListener", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "                except TextGridParseError as e:\n                    self.textgrid_read_errors[e.file_name] = e\n                except Exception as e:\n                    self.error_files.append((file_name, e))\n        self.log_debug(f\"Finished loading corpus in {time.time() - begin_time} seconds\")\n        if self.stopped", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addRemittUser(user);\n\t}\n\n\t@GET\n\t@Path(\"users\")\n\t@Produces(\"application/json\")\n\t@Override\n\tpublic UserDTO[] listRemittUsers() {\n\t\treturn UserManagement.listRemittUsers();\n\t}\n\n", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the HTTP headers that were used to make the request.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"http-headers\")\n    Observable<HttpHeader> httpHeaders(@Query(Constants", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "    public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(message.properties());\n    }\n\n    @Override public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.option(), message.value());\n    }\n  }\n\n  private static final class LineConsumer implements Runnable {\n    private", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "    assert almost_eq(erb(freq, Hz=1), bandwidth, tol=1e-3)\n    assert almost_eq(erb(freq, Hz=1), bandwidth, tol=1e-3)\n    assert almost_eq(erb(freq, Hz=1), bandwidth, tol=1e-3)\n   ", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "            if is_undefined_length:\n                # If the sequence is of undefined length, then the last item\n                # in the sequence is the Sequence Delimiter\n                # (PS 3.5-2008 7.5.1.1.1 (p. 41))\n                # The Sequence", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "    try {\n      for (ICommentProcessor commentProcessor : this.commentProcessors) {\n        commentProcessor.setCommentProcessorRegistry(this);\n        commentProcessor.setFailOnInvalidExpression(failOnInvalidExpression());\n        commentProcessor.setExpressionResolver(expressionResolver);\n        commentProcessor.setExpressionUtil(expressionUtil);\n        commentProcessor.setPlaceholder", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(application, prefs, searchCriteria.values(), page, 20);\n    }\n    @Override\n    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatterns", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "    @flags.register(NotationDataFlags)\n    def flags_int(self, val):\n        self._flags += NotationDataFlags & val\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags = self.bytes_to_int(val)\n\n    @sdproperty\n    def name", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "            self.addMessage(serverMsg, False)\n            if self.chum.blocked:\n                self.addMessage(lm, True)\n                self.addMessage(serverMsg, False)\n                return\n            if self.chum is not self.chumopen:\n                self.addMessage(lm, True)\n                self.addMessage(server", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "    def check_arg(arg, type_, env):\n        arg = check(arg, env)\n        with env.errors.location(arg.location):\n            unify(arg.__type__, type_)\n        return arg\n    return arg\n    return arg\n    return arg\n    return arg\n    return arg\n    return arg\n    return", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "    if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime10)):\n            return GregorianMonthDay(value.month, value.day, value.tz", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "    # TODO: this is a hack to get around the fact that we don't have a way to\n    # get the number of parameters in a model. We should fix this.\n    if ridge_alpha is None:\n        ridge_alpha = 1.0e-100\n    if features is None:\n       ", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "    private void pausePlayerAndSHowVpaid(@NonNull PlayerUIController controller,\n            @NonNull PlayerAdLogicController componentController, @NonNull FsmPlayer fsmPlayer,\n            @NonNull AdMediaModel adMedia) {\n\n        if (controller == null || componentController == null || fsmPlayer == null || adMedia", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "            PressureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\n            ProximitySensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 8 || type == 0) {\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\n       ", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "    Call<Suggestions> getSearchSuggestions(@QueryMap Map<String, String> serviceIds,\n                                          @Query(\"q\") String tag,\n                                          @Query(\"limit\") int limit);\n\n    @FormUrlEncoded\n    @POST(\"anonid\")\n    Call<AnonIdResponse> getAnonId(@Field", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "        return Stream(model=model, engine=self)\n        return Stream(model=model, engine=self)\n        return Stream(model=model, engine=self)\n        return Stream(model=model, engine=self)\n        return Stream(model=model, engine=self)\n        return Stream(model=model, engine=self)\n        return Stream(model=model, engine=self)\n       ", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "        if parsed_args.output is not None:\n            with open(parsed_args.output, \"w\") as f:\n                f.write(\"accuracy: %2.2f%%\\n\" % (100 * accuracy))\n                f.write(\"uar: %2.2f%%\\n\" % (100 * uar", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t/**\n\t * 用户资料显示页面\n\t * @param username\n\t * @", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "    def __init__(self, graph, strict=True):\n        self.graph = graph\n        self.strict = strict\n        self.props = {}\n        self._subquery = None\n        self._params = {}\n        self._class_props = []\n        self._class_props = []\n        self._params = {}\n       ", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "    def __init__(self,\n                 architecture: RNNArchitecture,\n                 inputs: tf.Tensor,\n                 initial_state: Optional[tf.Tensor],\n                 keep_prob: Optional[tf.Tensor],\n                 input_noise: Optional[tf.Tensor]):\n        super().__init__(architecture, inputs, initial_state, keep_prob, input_noise", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "all_platform_slugs.extend(TRANSIFEX_SLUGS)\nNext line of code:\nall_platform_slugs.extend(ZANATA_SLUGS)\nNext line of code:\nall_platform_slugs.extend(DAMNEDLIES_SLUGS)\nNext line of code:\nall_platform_slugs.extend(WEBLATE", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableDefinitionNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(PropertyNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "src/main/java/br/com/caelum/vraptor/html/tags/Html.java\npublic class Html implements Tag {\n\tprivate final Attribute[] attributes;\n\tprivate NestedElement[] children = new NestedElement[0];\n\tprivate final TagTransformer tagTransformer = new DefaultTagTransformer();\n\n\tpublic Html(Attribute... attributes) {\n\t\tthis.attributes", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "        final int numberOfRows = benchRes.getNumberOfRuns();\n        final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Method\", '=', Alignment.Left);\n        table.addHeader(\"Class\", '=', Alignment.Left);\n        table.addHeader(\"Unit\", '=', Alignment.Left);\n        table.addHeader(\"Mean", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "      for edge in self.graph.out_edges(node):\n        visitor.visit(edge)\n      return visitor.edges\n\n    def get_parent_loop(node):\n      class BwdEdges(EdgeVisitor):\n        def __init__(self):\n          EdgeVisitor.__init__(self)\n          self.edges = []\n\n        def visit(self, edge):\n         ", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.traindata, this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.out.println(\"Unknown tree type\");\n\t\t\t\tSystem.exit(-1);\n\t\t}\n\t\t\n\t\tthis.T = this.tree.getSize();\n\t\tthis.Tarray = new int[this.T];\n", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "    from.xpath30_helpers import parse_width, parse_datetime_picture, parse_time_picture, parse_date_picture, parse_duration_picture, parse_decimal_picture, parse_number_picture, parse_timezone_picture, parse_date_time_picture, parse_duration_time_picture, parse_date_time_duration_picture, parse_date_time_duration_timezone_picture, parse_date", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                    else if (Event.EVENT_TYPE_STATE_ROOM_POWER_LEVELS.equals(event.type)) {\n                        Log.e(LOG_TAG, \"Updating room power levels.\");\n                        RoomState roomState = JsonUtils.toRoomState(event.content);\n                        updatePowerLevels(roomState.power_levels);\n                    }\n                    else if (Event.EVENT_TYPE_STATE_ROOM_MEMBER", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\t\n\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDI32ToDDI33Preprocessor ddi32ToDDI33 = new DDI32ToDDI33Preprocessor();\n\t\n\t//", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n        self.releves_choice.SetSelection(self.releves_choice.GetCount() - 1)\n        self.releves_choice.SetSelection(0)\n        self.releves_choice.SetSelection(0)\n       ", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "            H += dot(crossmat(c), m * H_trans) + dot(I, H_rot)\n            H += dot(crosstens(c), m * H_trans) + dot(I, H_rot)\n        return H\n\n    def compute_angular_momentum_jacobian(self, p):\n        \"\"\"\n        Compute", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "        View view = getView();\n        if (view!= null) {\n            view.setVisibility(View.VISIBLE);\n        }\n        if (queuedProjectResult!= null) {\n            final QueuedProject queuedProject = queuedProjectResult.getQueuedProject();\n            if (queuedProject!= null) {\n                final Pattern pattern = queuedProject", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "                new MigrateCommand(),\n                new RefreshCommand());\n        // Register the Metrics\n        metrics.addCustomChart(new Metrics.SimplePie(\"economy\", () -> \"Lite\"));\n        // Register the Catalogs\n        game.getServiceManager().setProvider(this, Currency.class, new CurrencyRegistryModule());\n    }\n\n    private void", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "            _log.info('Initializing a zero prior for the parameters.')\n        else:\n            raise ValueError(\"Prior must be a dict or PriorSpec or None\")\n        prior_specs = build_prior_specs(prior, params)\n        return prior_specs\n\n    def _fit(self, symbols, datasets, prior, chains_per_parameter=", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "      return Const.fromValue(arg)\n    elif op == LOAD_NAME:\n      return Ref.fromName(arg)\n    elif op == LOAD_ATTR:\n      return Ref.fromName(arg)\n    elif op == LOAD_GLOBAL:\n      return Ref.fromName(arg)\n    elif op == LOAD_FAST:\n      return Ref.fromName(arg)\n   ", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics;\n\tprivate final FringeLayer fringe;\n\tprivate final PingPongEq<SpriteAnimation> animations = new PingPongEq<>();\n\tprivate final PingPongEq<SpriteBatch> batch = new PingPongEq<>();\n\tprivate final PingPongEq<EntityView> viewsEq = new PingPongEq<>();\n", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new TempSensorView();\n                    o = tview.getView();\n                    ((TempSensorPresenter) tview.get", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> jooq() {\n\t\tDSLContext dsl = dslContext;\n\t\tTable<TAuthor> author = AUTHOR;\n\t\tTable<TBook> book = BOOK;\n\t\tTableField<TAuthor, Long> id = author.ID;\n\t\tTableField<TAuthor,", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\t@Override\n\tpublic void execute(SQLTranslation exp, ForestReader in, ForestWriter out) {\n\t\tSQLQuery query = new SQLQuery(false);\n\t\tquery.setTables(new SQLTable(schema.getEntity(\"root\").getKey()));\n\t\tquery.setLimit(1);\n\t\tquery.setSubTag(\"root\");\n\t\tquery.setVar(\"", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "        if app_info['mainactivity'] == '':\n            print u'\\n[INFO] App Doesn\\'t have a Main Activity'\n            return\n        else:\n            print u'\\n[INFO] App has a Main Activity'\n            # TODO: 该方法暂时不支持非activity组件\n           ", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a genome.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a genome\n     */\n    Genome parseGenome(InputStream inputStream);\n\n    /**\n    ", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "                Symbol.typed(bar_type, 'bar'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_list():\n    inc_type = Func[[IntType], IntType]\n    bar_type = ListType[TypeVar", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, queryType(is(QueryType.SELECT)));\n\n        assertThat(pe, queryType(is(QueryType.SELECT)));\n        assertThat(pe, queryType(is(QueryType.INSERT", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "def on_insert_sketch(self):\ndef on_insert_part_in_drawing(self):\ndef on_insert_draw_in_drawing(self):\ndef on_insert_dim_ann_in_drawing(self):\ndef on_revolve_area(self):\ndef on_extrude_area(self):\ndef on_create_nurbs_surface(self):\ndef on_show_surfs", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                            return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return new ApiException(cause);\n            }\n        };\n        _config = config;\n        // Create the adapter\n        mLoginAdapter = new RestAdapter.Builder()\n               .setEndpoint(BASE_LOGIN)\n               .set", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(String.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Number.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Boolean.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Character.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Byte.class, new Default", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_LOWER_CASE, false)) {\n\t\t\tlabelFactory = new LowerCaseFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "    url(r'^(?P<slug>[\\w\\-\\+]+)/edit$', staff_member_required(UpdateCIPipeline.as_view(), login_url=LOGIN_URL),\n        name=\"update-ci-pipeline\"),\n    url(r'^(?P<slug>[\\w\\-\\+]+)/delete$', staff_member_required", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                        intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        intent.putExtra(Extras.EXTRA_SIZE, new Point(image.getWidth(), image.getHeight()));\r\n                        intent.putExtra(Extras.EXTRA_POSITION, position);\r\n                        intent.putExtra(Extras.EXTRA_RESUMED, true);\r\n                        intent.putExtra(Extras.EXTRA_SIZE, new Point(image.getWidth(), image.getHeight()));\r\n", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "    person = account_for_vimeo_id(access_token_data['user_id'], person=person)\n    account = account_for_vimeo_id(access_token_data['user_id'], person=person)\n    account.authinfo = access_token\n    account.save()\n\n    return HttpResponseRedirect(reverse('home'))\n\n\ndef signin_mlkshk(request", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "                #   mag_corr = platepar.mag_0 + platepar.mag_lev*np.log10(test_px_sum/platepar.F_scale**2)\n                #   ra, dec = cyTrueRaDec2ApparentRaDec(platepar.RA_d, platepar.dec_d, platepar.JD,", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "    grid = _gen_grid(data, options)\n    # Compute likelihood for each point in grid\n    likelihood = _grid_likelihood(data, options, grid)\n    # Compute posterior\n    posterior = _compute_posterior(likelihood, options)\n    # Compute marginal posterior distributions\n    metrics = _compute_metrics(poster", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "            Board.this.rollDices();\n          }\n        else\n          Board.this.rollDices();\n      }\n    });\n    rollBtn.setX(getX() + (boardbg.getWidth() - rollBtn.getWidth()) / 2);\n    rollBtn.setY(getY() + (boardbg.getHeight() - rollBtn.getHeight()) /", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "        self.assertListEqual(list(etree_iter_paths(root)), [\n            (root, '/a'),\n            (root[0], '/a/b1'),\n            (root[0][0], '/a/b1/c1'),\n            (root[0][1], '/a/b1/c2'),\n            (root", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "        self.rule.set_engine(self.engine)\n        self.rule.set_kb(self.engine.kb)\n        self.rule.set_child_heuristics(self.engine.heuristics)\n        self.rule.set_kb(self.engine.kb)\n        self.rule.load_kb(self.engine.kb)\n        self.engine.kb.soft_404_responses = {}\n       ", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "    cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n            emitente=Emitente(\n                    CNPJ=_opcao('--cnpj-emitente'),\n                   ", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a profile.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a profile\n     */\n    Profile parseProfile(InputStream inputStream);\n\n    /**\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "            EtsiResponse resp = this.client.sendRequest(req);\n            if (resp == null) {\n                System.out.println(\"Signature request failed.\");\n                return;\n            }\n            \n            // 5. Get SignatureValue\n            byte[] sigValue = resp.getSignatureValue();\n            if (sigValue == null)", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Analysis:\n\t\t\treturn get_icon(\"analysis\")\n\t\telif type(obj) is Proformer:\n\t\t\treturn get_icon(\"proformer\")\n\t\telif type(obj) is Document:\n\t\t\treturn get_icon(\"", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "            RotationVectorSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 12 || type == 0) {\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 13 || type == 0) {\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\n", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<String> schedule;\n\tprivate List<String> leaders;\n\tprivate List<String> players;\n\tprivate List<String> games;\n\tprivate List<String> playersLeaders;\n\tprivate List<String> playersLeaders2;\n\tprivate List<String> playersLeaders3;\n\tprivate List<String> playersLeaders4;\n\tprivate List<String> playersLeaders5;\n\tprivate", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "        AppliveryLog.log(\"Sending feedback\");\n        Feedback feedback = new Feedback(\n                userFeedback.getType(),\n                userFeedback.getMessage(),\n                userFeedback.getScreen(),\n                userFeedback.getScreenCapture(),\n                new DeviceInfo(new AndroidDeviceDetailsInfo().getDeviceDetailsInfo()),\n                new AppData(packageInfo.getPackageName(), package", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "            table_index[table_name] = table_index.get(table_name, 0) + 1\n            object_index[key] = object_index.get(key, 0) + 1\n            request[table_name] = request.get(table_name, {})\n            request[table_name][key] = request[table_name].get(key", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "                print('Fingerprint: {0}'.format(format_fingerprint(fingerprint)))\n                print('Description: {0}'.format(description))\n                print('Created at:  {0}'.format(created_at))\n                print('Key art:')\n                print(draw_art(fingerprint))\n            else:\n                print('Fingerprint: {", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\n", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "        return RespostaExtrairLogs.analisar(retorno)\n        return RespostaSAT.extrair_logs(retorno)\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat`.\n\n        :return: Uma resposta SAT", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "        self.assertEqual(node_document_uri(ElementTree.XML('<A/>')), None)\n        self.assertEqual(node_document_uri(ElementTree.XML('<A/>', base_url='http://example.com/')), None)\n        self.assertEqual(node_document_uri(ElementTree.XML('<A/>', base_url='http://example.com/')), None)\n       ", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_ASC:\n                    Arrays.sort(sorted, new ItemDurationComparator(true));\n                    break;\n                case DURATION_DESC:\n                    Arrays.sort(sorted", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "            raise e\n        self.training_done = True\n        self.training_complete = True\n        self.training_time = time.time() - begin\n        self.logger.info(f\"Training for {self.identifier} took {self.training_time} seconds\")\n        self.logger.info(f\"Training for {self.identifier} completed successfully\")\n\n", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "    private final OAuth2Requester requester;\n    private final OAuth2URL[] urls;\n    private final OAuth2URL authorizeUrl;\n    private final OAuth2URL tokenUrl;\n    private final OAuth2URL currentUrl;\n    private final OAuth2URL guildsUrl;\n    private final OAuth2URL userUrl;\n", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "    private final Errands errands;\n    private final Vms vms;\n    private final Jobs jobs;\n    private final Tasks tasks;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "    public HiMuteStatus getMuteStatus(HiSide side)\n    {\n        return _chat.getMuteStatus(side);\n    }\n\n    public int getChatMessageCount()\n    {\n        return _chat.getChatMessageCount();\n    }\n\n    public ChatMessage getChatMessage(int index)\n    {\n        return _", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "        return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "    public void onChannelStatusChanged(ChannelStatusEvent event) {\n        if (event.getChannel().equals(this.channel)) {\n            this.setChannelStatus(event.getStatus());\n        }\n    }\n\n    public void setChannelStatus(@Nullable ChannelStatus status) {\n        if (status == null) {\n            this.setChannelStatus(ChatVisibility", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "          DATA[looptest], 1.0E-6, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Sad = BlackFormula2.price_Sad_Automatic(DATA[looptest][0], DATA[looptest][1], DATA[looptest][2], DATA", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "            VotingModule.class\n        };\n\n\n    /**\n     * Map of loaded modules, keyed by their class\n     */\n    private HashMap<Class, Module> modules = new HashMap<Class, Module>();\n\n\n    /**\n     * Get a reference to a loaded module\n     * @param name The name of the module, as returned", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "     * @see #newDownloadQueue(int)\n     */\n    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize the number of thread pool.\n     * @return {@link Download", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "  public void init(MutableConfig config) {\n    config.set(\"packager\", \"packager\");\n    config.set(\"packager.version\", \"0.0.1\");\n    config.set(\"packager.mainClass\", \"com.github.forax.pro.plugin.packager.Main\");\n  }\n\n  @Override\n  public", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "     * @return query set configuration {@link QuerySetConfig}\n     */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        NodeList querySetNodes = element.getElementsByTagName(QUERY_SET_TAG);\n        for (int i = 0;", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "                        S['realsubmittime'] = ret['realsubmittime']\n                        S['realrunid'] = ret['realrunid']\n                        S['originProb'] = ret['originProb']\n                        S['originOJ'] = ret['originOJ']\n                        S['language'] =", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "            left_foot_task = DOFTask(\n                self.robot, self.robot.left_foot, self.swing_foot.left_foot,\n                weight=swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_stance.right", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "    from arxpy.bitvector.core import Constant, Variable, bitvectify\n    from arxpy.bitvector.extraop import PopCount, Reverse, PopCountSum2, PopCountSum3, PopCountDiff, LeadingZeros\n    from arxpy.bitvector.operation import (\n        BvAnd", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew SOFSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DQTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DHTSegment(aJPEG).encode(aOutput).log", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "            if (sl!= null) {\n                try {\n                    SqlSession session = sqlSessionFactory.openSession();\n                    try {\n                        LastschriftenMapper mapper = session\n                              .getMapper(LastschriftenMapper.class);\n                        HibiscusExporter exporter = new HibiscusExporter(\n                               config, sql", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "    from montreal_forced_aligner.helper import run_mp\n    from montreal_forced_aligner.utils import get_mfa_version\n    from montreal_forced_aligner.abc import TopLevelMfaWorker\n    from montreal_forced_aligner.alignment.base import CorpusAligner\n    from montreal", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "        Lore lore = LoreLoader.getLore(key);\n\n        if (lore == null) {\n            sender.addChatMessage(new ChatComponentText(\"Could not find lore '\" + ident + \"' in category '\" + category + \"'\"));\n            return;\n        }\n\n        PlayerHandler.getCollectedLore(entityPlayer).addL", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "    private static final Logger LOGGER = LoggerFactory.getLogger(FinanceService.class);\n    private static final DateTimeFormatter SUMMARY_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\n    private final PasswordEncoder passwordEncoder;\n    private final UserDAO userDAO;\n    private final BudgetDAO budgetDAO;\n    private final BudgetTypeDAO budget", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Util instance = new Util();\n\tprivate static final Util instance = new Util();\n\tprivate static final Util instance = new Util();\n\tprivate static final Util instance = new Util();\n\tprivate static final Util instance = new Util();\n\tprivate static final Util instance = new Util();\n\tprivate static final Util instance = new Util();\n\tprivate", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    SlideIn(SlideIn.class),\n    SlideInDown(SlideInDown.class),\n    SlideInLeft(SlideInLeft.class),\n    SlideInRight(Slide", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "        problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level >= 1:\n        smart_print(\"SMT problem:\")\n        smart_print(problem)\n\n    if verbose_level >= 2:\n        smart_print(\"SMT problem size:\", problem.formula_size())\n\n    if verbose_level >= 3", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "            h5 =  LocalHost5\n            h6 =  LocalSSHHost1\n            h7 =  LocalSSHHost2\n            h8 =  LocalSSHHost3\n            h9 =  LocalSSHHost4\n            h10 = LocalSSHHost5\n        return H\n\n    def", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "            return re.search(\"tcset\", command) is not None\n\n        return filter(tc_command_filter, self.__command_history)\n\n    def get_tc_command_output(self):\n        return self.__tc_command_output\n\n    def get_tc_command_output_with_history(self):\n        return self.__tc_command_output, self.__command_history", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n  assert isinstance(encoder, GLONASS", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n\n        Cursor cursor = db.query(ExpenseManagerContract.ExpenseTable.TABLE_NAME, null,\n                ExpenseManagerContract", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "    private MonthCalendarHelper monthCalendarHelper;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private OnMonthChangeListener onMonthChangeListener;\n    private OnDayChangeListener onDayChangeListener;\n    private OnMonthChangeListener onMonthChangeListener;\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "    my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(30) == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "                isinstance(t1.__instance__, UnionMeta)\n            ):\n                for t in t1.__instance__.values:\n                    unify(t, t2, backref)\n            else:\n                raise\n\n    elif isinstance(t1, UnionMeta):\n        for t in t1.__types__:\n            unify(t, t2", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "    def __init__(self, auth=None, no_prompt=False, **kwargs):\n        \"\"\"\n        Initialize blinkpy.\n\n        :param auth: dictionary of login data\n        :param no_prompt: Should any user input prompts be suppressed? True/FALSE\n        :param kwargs: additional keyword arguments\n        \"\"\"\n       ", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\tif isinstance(model_item.data, Edge):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, Text):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, Attribute):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "      self._varz.message_bytes_sent(0)\n      self._varz.message_bytes_recv(0)\n      self._varz.transport_latency(0)\n      self._varz.transport_latency(0)\n      self._varz.transport_latency(0)\n      self._varz.transport_latency(0)\n      self", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "        ThreadDumpRuntime runtime = new ThreadDumpRuntime();\n        runtime.fromStream(new ByteArrayInputStream(out.toString().getBytes()));\n        assertThat(runtime.getThreads().size(), equalTo(1));\n        ProcessThread thread = runtime.getThreads().iterator().next();\n        assertThat(thread.getName(), equalTo(\"remotely-observed-thread\"));\n        assertThat", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "        data.setAuxiliary(auxiliaryData);\n        return data;\n    }\n\n    @Test\n    void testAppendUpdate2() throws Exception {\n        try (SimpleDataStore<PLDTestData> dataStore = new SimpleDataStoreImpl<>(this.testDir + \"/cache.db\", \"test\", PLDTestData.class", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" 个\");\n            }\n        });\n    }\n}\nmedialoader/src/main/java", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "        return new RoxanaPropertiesMockBuilder()\n               .withLocale(\"pt_BR\")\n               .withResponseStrategy(ResponseStrategy.FULLY)\n               .build();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() throws Exception {\n        return new ResponseProcessorManager(getRoxanaProperties(), getTranslator());\n", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "    self._ping_msg = MethodCallMessage(self._service, 'Ping', None)\n    self._ping_msg.properties[Deadline.EVENT_KEY] = Deadline(1, self._ping_timeout)\n    self.AsyncProcessRequest(None, self._ping_msg, None, {})\n    self._last_ping = time.time()\n   ", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "      assert almost_eq(freq2lag(v), 1 / v)\n      assert almost_eq(lag2freq(v), 1 / v)\n\n  def test_almost_eq(self):\n    assert almost_eq(1, 1)\n    assert not almost_eq(1, 1.0000000000000001)\n", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "            Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy20Service.class,\n            Proxy21Service.class,\n            Proxy22Service.class,\n            Proxy23Service.class,\n            Proxy24Service", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "        self._cache = dict()\n        self.by_guild = dict()\n        self.bot = bot\n        self.dbi = bot.dbi\n        self.utilities = Utilities()\n        TimezoneSpellHelper.set_dictionary(list(pytz.all_timezones))\n        self._cache = dict()\n        self.by_guild =", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "    if self.symbol == 'eq':\n        return operands[0] == operands[1]\n    elif self.symbol == 'ne':\n        return operands[0]!= operands[1]\n    elif self.symbol == 'lt':\n        return operands[0] < operands[1]\n    elif self.symbol == 'le", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "        String welcome = String.format(getString(R.string.welcome), Utils.getPrefs(getActivity(), Constants.USER_PREFS_PN));\n        welcomeString.setText(welcome);\n        return header;\n    }\n\n    private void selectGroupItem(int groupPosition, Integer childPosition) {\n        if (childPosition == null) {\n            // Si", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "            // Notify the fragment to start the chat activity\n            ObservableRegistry.getObservable(classToNotify).notifyFragment(new ChatRegisteredParam(success, newChatId));\n        }\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/controller/Toastable.java\npublic interface Toastable {\n   ", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "        request.setTradeType(\"NATIVE\");\n        request.setDeviceInfo(\"123456\");\n        request.setOutTradeNo(SDKUtils.genOutTradeNo());\n        request.setTotalFee(1);\n        request.setSpBillCreateIp(\"192.168.1.1\");\n        request.setNotifyUrl(asyncNotifyUrl", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "        List<Parameter> parameters = new ArrayList<>();\n        parameters.add(Parameter.create(STRING_PARAMETER_NAME_01, RANDOM_STRING_PARAMETER_VALUE_01));\n        parameters.add(Parameter.create(STRING_PARAMETER_NAME_02, RANDOM_STRING_PARAMETER_VALUE_02));\n        MessageMapperEnum messageMapperEnum = new MessageMapperEnum() {\n            @", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "    public int readCodeInteger() throws IOException {\n\t\tint d1 = in.read1();\n\t\tint tag = d1 & 0x07;\n\t\tif (tag == CODEINT4_TAG)\n\t\t\treturn readSmallIntValue(d1);\n\t\telse\n\t\t\tthrow new IOException(\"Not a code-int: \"+", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "        self.quota = quota.Quota(self)\n        self.management = management.Management(self)\n        self.quota = quota.Quota(self)\n        self.management = management.Management(self)\n        self.mgmt_clusters = management.MgmtClusters(self)\n        self.mgmt_flavors = management.MgmtFlavors(self)\n        self", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "            MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class(self.__timezone)\n                break\n            except ParseError:\n                pass\n\n        if not isinstance(self.__parser, PingParser):\n            raise ParseError(reason", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "        m.videoSetFrameRate.setText(Integer.toString(Integer.parseInt(m.videoSetFrameRate.getText())));\rNext line of code:\n        m.videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\rNext line of code:\n        m.videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\rNext line", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "            self._probe = probe\n        else:\n            self._probe = load_probe()\n        # Load the spike detection parameters.\n        self._kwargs = kwargs\n        self._kwargs['channels_per_group'] = _channels_per_group(self._probe)\n        self._kwargs['probe_adjacency_list'] = _probe", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.buildPingUri(context);\n        final BoundRequestBuilder boundRequestBuilder = preparePost", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "      self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def __init__(self, bytecode, co, filename, line_offset, column_offset):\n    self._decl = co.co_name\n    self._bytecode = bytecode\n    self._co = co\n    self", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "        FragmentObservable.getInstance().registerFragment(this);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        scanButton = (Button) getView().findViewById(R.id.scan_button);\n        scanButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                IntentInt", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "  public void visit(final InExp exp) throws QueryException {\n    final String baseVariableName = getVariableName(exp.getColumn(), \"var\");\n    if (exp.isNegative()) {\n      result.append(\" \").append(WHERE).append(\" \");\n      result.append(\"NOT \").append(\"IN\").append(\" \");\r\n      accept", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile ddi = new File(basePath + \"/simple.ddi\");\n\t\t\tFile xforms = new File(basePath + \"/simple.xforms\");\n\t\t\tFile xformsExpected = new File(basePath + \"/simple.xforms.expected\");\n\t\t\tFile xformsDiff = new File(basePath + \"/simple.xforms.diff\");\n", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "        np.allclose(\n            np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vast sandbox\nNext line of code:\n        state = stateFactory.createState(VpaidState.class);\n\n        assertThat(state instanceof TestVpaidState, is(true", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void accept(final FixTag tag, final CharSequence value) {\n\t\tfinal Validity validity = validities.get(tag);\n\t\tif (validity!= null) {\n\t\t\tvalidity.validate(value);\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void accept(final FixTag tag, final Double value) {\n\t\tfinal Valid", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "        self.assertEqual(\"Your child\", replace_blank_name(name=None, language=\"English\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name=None, language=\"Hindi\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name=None, language=\"Gujarati\"))\n        self.assertEqual(\"Your child\", replace_blank", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                              .givenArgument(() -> GIVEN_STRING)\n                              .whenSutRuns(SystemUnderTest::failWithParameter)\n                              ", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "        # if there is still some bits to map, map them\n        if rem:\n            # map the rest bits\n            self._map_rest(rem)\n            # check if there is still some bits to map\n            if self._consumed + self._offset < len(string)*8:\n                # map", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "        # Make sure we're not looking at abstract models\n        validate_not_abstract(model)\n\n        # Make sure we're not looking at abstract models\n        validate_not_abstract(model)\n\n        # Make sure we're looking at models\n        validate_is_model(model)\n\n        # Make sure we're not looking at abstract models\n", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n        raise ErroRespostaSATInvalida(\n                'Resposta não é uma resposta SAT: {!r}'.format(conteudo))\n    def _http_post(self, funcao, **kwargs):\n        \"\"\"Realiza uma", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "    with pytest.raises(InvalidModel):\n        engine.bind(123)\n    with pytest.raises(InvalidModel):\n        engine.bind(\"abc\")\n    with pytest.raises(InvalidModel):\n        engine.bind(123, skip_table_setup=True)\n    with pytest.raises(InvalidModel):\n        engine.bind(\"abc\", skip_table_setup", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "    assert u6.dimensions == energy\n    assert u6.base_value == 1.0\n\n    # test that we can create a unit from a string\n    u7 = Unit(\"m\")\n    assert u7.dimensions == length\n    assert u7.base_value == 1.0\n\n    # test", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "                 'root/cimv2:TST_Person.name=\"Mike\"'],\n      'rc': 0,\n      'test': 'linesnows'},\n     ASSOC_MOCK_FILE, OK],\n\n    ['Verify instance command references --no, returns paths, explicit ns',\n     ['references', 'TST_P", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "        loadModules();\n        // Load commands\n        loadCommands();\n        // Load the economy service\n        economyService = new LiteEconomyService();\n        // Load the currency service\n        currencyEconService = new CurrencyService();\n        // Load the player service\n        playerEconService = new PlayerDataService();\n", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "        tag = TAG()\n        self._call_fmod(\"FMOD_Sound_GetTag\", byref(tag), index, name)\n        return tag\n\n    @property\n    def num_tags(self):\n        \"\"\"Number of tags available.\n\n        :type: int\n        \"\"\"\n        return self._call_fmod(\"", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                    public void startEditActivity(DomainObject item, ExternalController controller, int titleResId, int okButtonResId, int cancelButtonResId) {\n                        EditActivity.startEditActivity(MainActivity.this, titleResId, item, controller, okButtonResId, cancelButtonResId);\n                    }\n\n                    @Override\n", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<GalleryItemProxy>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<ImgurResponseWrapper<List<String>>> listAccountImageIds", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "        resource = ThermometerResource(aircraft.sensors.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.sensors.thermometer.temperature, thermometer_data[\"temperature\"], 3)\n\nclass InertialNavigationSystemResourceTests(TestCase):\n    def test_get_inertial_navigation_system", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "    column = User.age\n    value = 3\n    expected_ref = \"#n0\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0\": expected_action.value}\n\n    ref, action = reference_tracker._value_ref(column, value)\n\n    assert ref == expected", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "            return false;\r\n        }\r\n        \r\n        if (result.getResult() == null) {\r\n            return false;\r\n        }\r\n        \r\n        if (result.getResult() == 0) {\r\n            return true;\r\n        } else if (result.getResult() == 1) {\r\n            return false;\r\n        } else if (result.getResult()", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "            vote_obj = VotePost.objects.filter(user=request.user, post=post)\n            if vote_obj.exists():\n                vote = vote_obj[0]\n            else:\n                vote = VotePost(user=request.user, post=post)\n        else:\n            vote = None\n        comments = Comment.objects.filter(post=post).filter(deleted", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "    @NonNull\n    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending gifs\n     *\n     * @param serviceIds a {@link Map} of a collection of ids for better content delivery experience\n     * @param limit", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "            of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::failed);\n            of(mConnectionWpsListener).ifPresent(ConnectionWpsListener::isSuccessful);\n            of(mWifiStateListener).ifPresent(WifiStateListener::isSuccess);\n        }\n    };\n\n    @NonNull\n    private final WifiStateReceiver mWifi", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "        }\n        if(type == 6 || type == 0) {\n            LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 8 || type == 0", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "        for (PlaySession ps : stack.getPlaySessions()) {\n            ps.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "class SegmentVadArguments(NamedTuple):\n    \"\"\"Arguments for the :class:`~montreal_forced_aligner.segmenter.SegmentVadFunction`\"\"\"\n\n    vad_path: str\n    segmentation_options: MetaDict\n    log_directory: str\n    return_info: bool\n    return_q: mp.Queue\n", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "    private final Vms vms;\n    private final Jobs jobs;\n    private final Deployments deployments;\n    private final Tasks tasks;\n    private final Errands errands;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n    def get_length(self, unit=TIMEUNIT.RAWBYTES):\n        \"\"\"Get the length of the sound in the given unit.\n\n        :param unit: Unit to return length in.\n", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "                section\n            )\n            nbits_encoded += bufr_message.length.nbits\n\n        if wire_template_data:\n            bufr_message.template_data.value.wire()\n\n        return bit_writer.get_bits()\npybufrkit/decoder.py\nclass Decoder(object):\n    \"\"\"\n    This class is the decoder for BUFR messages", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "        if logged_by == logged_against:\n            raise PermissionDenied\n\n        # Log moderation event\n        log_comment = request.POST['comments']\n        log_moderator = logged_by.moderator\n        log_moderator_event(AbuseReport.DISMISS, logged_against,\n                            logged_by, log_comment", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "    public void listenToBenchmarkResult(final BenchmarkResult paramResult) {\n        final NiceTable table = new NiceTable(3);\n        table.addHeader(\"Method\", '=', Alignment.Left);\n        table.addHeader(\"Min\", '=', Alignment.Right);\n        table.addHeader(\"Max\", '=', Alignment.Right);\n        for (final Class", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "        // Parsing the command line arguments\n        ApplicationOptions options = new ApplicationOptions();\n        options.setApplicationProperties(APPLICATION_PROPERTIES);\n        options.setApplicationName(\"ProtTest\");\n        options.setApplicationVersion(versionNumber);\n        options.setApplicationDate(versionDate);\n        options.setApplicationURL(URL_HOMEPAGE);\n        options", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(URL(\"http://www.example.com/recordings\"), BEEP(true), MUTE(true), ID(\"1234\"), NAME(\"John Doe\"), EVENT(\"record\"), SEND_TONES(true), EXIT_TONE(\"http://www.example.com/exit_tone.mp3\"));\n\t\tNext line of", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "                listaDeRespostas.getPropriedades().getPrazo() == null) {\n            listaDeRespostas.setPropriedades(new PropriedadesDaListaDeRespostas());\n            listaDeRespostas.getPropriedades().setEstado(EstadoDaListaDeRespostas.S", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tProgramManager.getInstance().setProgramList(connector.getResultDoc());\n\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(ProgramTrack.class);\n\t\t\t\tadapter.notifyDataSetChanged();\n\t\t\t\tmViewPager.setAdapter(adapter);\n\t\t\t\tmViewPager.setOnPageChangeListener(mPageChangeListener", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "    @Mock\n    AdInterface adServerInterface;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    CuePointsRetriever cuePointsRetriever;\n\n    @Mock\n    PlayerUIController controller;\n\n    @Mock\n    PlayerAdLogicController componentController;\n\n   ", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tappEvent.setEvent(AppEvent.Event.EXIT) ;\n\t\t\t\t\tappEvent.notifyObservers() ;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error occurred while setting the close request handler\", e);\n\t\t}\n\t\t\n\t\t// create the client\n\t\t// TODO:", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "    String className = type.getSimpleName().toString() + INJECT_ADAPTER_SUFFIX;\n    TypeSpec typeSpec = TypeSpec.classBuilder(className)\n       .addModifiers(PUBLIC)\n       .addSuperinterface(Binding.class)\n       .addSuperinterface(constructor!= null? constructor.getReturnType() : SET_OF_BINDINGS)\n       ", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "        new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\n        }\r\n        /**\n         * 打开/关闭透传消息\r\n         * @param enable 打开/关闭\n         */\n        public static void enableReceiveNormalMsg(boolean enable) {\r\n            new EnableReceiveNormalMsgApi().enableReceiveNormalMsg", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 0\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 1\n\n\ndef test", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "    elif is_comment_node(elem) and context.parent_map.get(elem) is None:\n        return f'/comment()[{context.position}]'\n    elif node_nilled(elem) and context.parent_map.get(elem) is None:\n        return f'/element({node_name(elem)})[{context.position}]'\n    elif node_n", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "    return first_record(self, fill)\n\n    def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\nNext line of code:\n    return last_record(self, fill)\n\n    def fillna(self, reverse=False, fillvalue=None):\n        \"\"\"Fill", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "                TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n            else if (message.getType() == MessageType.SMART_REPLY)\n            {\n                SmartReplyMessage m = (SmartReplyMessage)message;\n\n                if (m.getOptionsType() == Smart", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tEXOG.append(dmy_leftvar)\n\t\tEXOG.append(dmy_rightvar)\n\t\tEXOG.append(dmy_covariates)\n\t\tEXOG.append(time_var)\n\t\tEXOG.append(column_product(time_var, dmy_mediator))\n\t\tEXOG.append(column_product(time_var,", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "        ThreadDumpThread thread = sut.thread(\"thread\");\n        assertThat(thread.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(thread.getThreadLock(), nullValue());\n        assertThat(thread.getStackTrace().getElements().size(), equalTo(1));\n        assertThat(thread.getStackTrace().getElements().get(0).getFileName(),", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "                DatePicker picker = new DatePicker(this);\n                picker.setRange(2000, 2050);\n                picker.setSelectedItem(mRecord.getRecordTime().get(Calendar.YEAR),\n                        mRecord.getRecordTime().get(Calendar.MONTH),\n                        mRecord.getRecordTime().get(Calendar.DAY_OF_MONTH));\n                picker.setOnDatePickListener", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "        GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 5 || type == 0) {\n            LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\n            PressureSensorCollector.flushDBCache(deviceID);\n        }\n       ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "    private MomoFragment momoFragment;\n    private SetOtherFragment setOtherFragment;\n    private ViewPager mViewPager;\n    private TabLayout mTabLayout;\n    private Toolbar mToolbar;\n    private AlertDialog.Builder mDialog;\n    private AlertDialog mDialogFunc;\n    private AlertDialog mDialogMomo;\n    private AlertDialog m", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "        self.link.start()\n        self.listener.start()\n        self.reporter.start()\n        self.cleaner.start()\n        self.fm.start()\n        self.tracerouter = Tracerouter.Tracerouter()\n        self.tracerouter.start()\n        self.quit_event.wait()\n        self.tracerouter.join()\n        self.fm.join", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "    assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.deltas[4].id == \"delta-5\"\n    assert deltas.deltas[4].", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "        return RestfulModelCollection(Webhook, self)\n\n    def _validate_open_hours(self, emails, open_hours, free_busy):\n        if open_hours:\n            if not isinstance(open_hours, list):\n                raise ValueError(\n                    \"open_hours must be a list of lists. \"\n                    \"Each list must contain ", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "    (N)  (N)  (N)  (N)  (N)  (N)  (N)  (N)  (N)  (N)  (N)  (N)  (N)  (N)  (N)  (N)", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "            non_equilibrium_thermochemical_error = calculate_non_equilibrium_thermochemical_probability(parameters=parameters, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_thermochemical_error = 0\n        _log.debug('Multi-phase error: %s', multi_phase_error", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "            Str('identity', Len=1, Repr='hum'),\r\n            Str('identity', Len=1, Repr='hum'),\r\n            Str('identity', Len=1, Repr='hum'),\r\n            Str('identity', Len=1, Repr='hum'),\r\n            Str('identity', Len=1", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "        TcClassParser(self.__con).parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n        self.__logger.debug(\"parse tc class: {}\".format(device))\n        self.__logger.debug(\"parse tc class: {}\".format(self.__tc_command_output", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "        result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)\n\n    \ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "pyramid_swagger/tween.py\ndef get_swagger_objects(settings, route_info, registry):\n    \"\"\"Returns appropriate swagger handler and swagger spec schema.\n\n    :param settings: a :class:`Settings` object\n    :param route_info: a :class:`pyramid.urldispatch.Route` object\n", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
