{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl!= null )\n\t\t\t\t\t{\n\t\t\t\t\t\tNetState ns = pl.Mobile.NetState;\n\t\t\t\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, **data.copy())\n\t\t\tA_, Y_, Z_ = self.next(A, Y_, Z_)\n\t\t\tif A_ is None:\n\t\t\t\tcontinue\n\t\t\tself._init(Y_, Z_)\n\t\t\tA_ = best(A_)\n\t\t\tw = self.get_graph_score(A", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            # Open the file for writing\n            format = Format('wav', 'pcm16')\n            a = Sndfile(fd, 'w', format, 1, 22050)\n            #", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "    if e.text == language:\n        return el.find_element_by_css_selector(\"span\").text\n    return None\n    def like_facebook(self):\n        self.click_by_css(self._LIKE_FACEBOOK)\n    def like_twitter(self):\n        self.click_by_css(self._POST_TWITTER)\n    def like_email(self):\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue style = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", style.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", style.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n\t\t\t\treturn null;\n\t\t\t}\n    \t\t\n    ", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "        for a in self.answers:\n            ret += \" %s\\n\" % a\n        return ret\nclass _AnagramData(_QAData):\n    def ask_string(self):\n        return \"Anagram: %s\" % self.question\n    def hint_string(self):\n        ret = \"\"\n        for a in", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                    mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(R", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "            for (int i = 0; i < chain.length; i++) {\n                s.println(\"  \" + i + \": \" + chain[i]);\n            }\n        }\n    }\n}\n/*\n * CertificateRequest... CLIENT --> SERVER\n *\n * Server asks client for a certificate, and specifies which\n * certificate types", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "            sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public void setSpaceListener (LocalSpace<Object,SpaceListener> sl) {\n        this.sl = sl;\n    }\n    public void notifyListeners (Object key, Object", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tRedButton btnAlchemy = new RedButton(Messages.get(this, \"alchemy\")) {\n\t\t\t\t@Override\n\t\t\t\tprotected void onClick() {\n\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\thide();\n\t\t\t\t}\n\t\t\t};\n\t\t\tbtnAlchemy", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        request = self.dispatcher.dispatch(self.rfile.read(int(environ.get('CONTENT_LENGTH', 0)))\n        response = self.dispatcher.dispatch(self.rfile.read(int(environ.get('CONTENT_LENGTH', 0)))\n        start_response('200 OK', [('Content-Type', 'text/xml'), ('Content-Length', str(len(response", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "        mark = \"setRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def lock_status(self, status", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "            return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_extract_archive(self, login, password, status_id, params, session):\n       ", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (z.SecurityZone == SecurityZone.Untrusted, \"Union\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Union_SameIdentity ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "        return [trustManager.getAcceptedIssuers() for trustManager in self.trust_managers]\n        return [trustManager.getAcceptedIssuers() for trustManager in self.trust_managers]\ndef ssl_wrap_socket(sock, keyfile, certfile, ca_certs, server_hostname, ssl_version, do_hand", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Returns the forward to use for the domain administration page.\n     *\n     * @param mapping the action mapping\n     * @param domain the domain we're working on\n     *", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "            self.__tmp_dir, 'datastream.pipe')\n        self.__datastream_transport, self.__datastream_protocol = await self.__event_loop.create_unix_connection(\n            functools.partial(DataStreamProtocol, self.__event_loop),\n            self.__datastream_address)\n        self.__datastream_fd = self.__datastream_transport", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, 0));\n\t\t\t\t\t//jumpID = Convert.ToInt32(store.GetValue(iter, 0));\n\t\t\t\t\t//string jumpType = store.GetValue(iter, 2);\n\t\t\t\t\t//string jumpType = store.GetValue(iter, ", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            Arg arg = args[i];\n            if (arg.isResource()) {\n                argValues[i] = getMessage(defaultMessages, locale, arg.getKey());\n            } else {\n                arg", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<String, String>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic String create(String string, ConfigurationSection conf)\n\t\t\t{\n\t\t\t\treturn string;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic ConcurrentMap<String, String> getLoaded", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHELL_HEIGHT,\n\t\t\t\t\t\t\"Window height\", getFieldEditorParent()));\n\t\t\t\taddField(new BooleanFieldEditor(SHELL_LENGHT,\n\t\t\t\t\t\t\"Window", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "                m_Owner.SpellTarget = null;\n            }\n        }\n    }\n}", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "        for state in states:\n            if state.key is not None:\n                self._new[state] = state\n            else:\n                self._deleted[state] = state\n        self._flushing = False\n    def _flush(self, states, expire=True, attributes=True):\n        \"\"\"Flush all pending changes to", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed = new ArrayList<IField>(3);\n\t\t\t\tname2Field.put(name, named);\n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "    if not self.request.path.endswith(\"/\"):\n        self.redirect(self.request.path + \"/\")\n    return method(self, *args, **kwargs)\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n            self.redirect(self", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.Write (\"<div class=\\\"aspnet_MultiView\\\">\");\n\t\t\twriter.Write (\"<div class=\\\"aspnet_MultiView_Container\\\">\");\n\t\t\twriter.Write (\"<div class=\\\"aspnet_MultiView_Container_Views\\\">\");\n\t\t\tfor (int n=0; n<Views.Count; n++) {\n", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "    parser.add_argument(\n        '-o', '--outpath', help='Path to store pickle files.', required=True )\n    parser.add_argument(\n        '-v', '--verbose', help='Verbose mode', action='store_true' )\n    args = parser.parse_args()\n    if args.verbose:\n        print >> sys.stdout", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.PossibleSkills)\n                        {\n                            if (i.SkillBonuses.GetSkill(1) ==", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "        builds.append({\n            'os': 'os_linux',\n            'os_pretty': 'Linux',\n            'arch': 'x86',\n            'arch_pretty': '32-bit',\n            'download_link': make_download_link(\n                'firefox', build, version, 'os_linux', locale,\n                force", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.getByProjectTypeIssueType(projectID, issueTypeID);\n\t\t} else {\n\t\t\tstateBeansList = StatusBL.loadAll();\n\t\t}\n\t\tif (stateBeansList!=null &&!stateBeansList.isEmpty", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Parent is CallExpressionSyntax callExpression) {\n                    if (callExpression.Expression is IdentifierNameSyntax identifierName) {\n                        if (identifierName.Identifier.ValueText == \"ByRef\") {\n                            toReplace.Add(argument, argument.WithType(SyntaxFactory", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        split_test = self._update_partition_id(0)\n        # Verify that the verticals are correct.\n        self.assertEqual(2, len(split_test.children))\n        vertical_0 = self.get_item_from_modulestore(split_test.children[0], verify_is_draft=True)\n        vertical_1 = self.get_item_from", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            for (int k = 0; k < metrics.Length; ++k) {\n                int[] m = (int[])metrics[k];\n                if (m[2] == 0)\n                    continue;\n                tmp.Add(m);\n            }\n            metrics = (Object[])tmp.ToArray(typeof(int[]));\n            metrics", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1) continue;\n\t\t\t\t\t\tif (cgn.depth == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// top-level cell\n\t\t\t\t\t\t\tcgn.x = 0;\n\t\t\t\t\t\t\tcgn.y = 0;\n\t\t\t\t\t\t\tcgn.y", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "        task = new ListenableFutureTask<>(callable);\n        task.addListener(new FutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(Bitmap result) {\n            bitmapReference = new SoftReference<>(result);\n          }\n          @Override public void onFailure(Throwable error) {\n            Log.w(TAG, error);\n          }\n       ", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n            }\n        });\n    }\n}\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "    prerequisite = NavigateToSibling('Details')\n    def step(self):\n        self.prerequisite_view.navigation.select('Policy Profiles')\nclass NodeAddTagsForm(NodeEditTagsForm):\n    save_button = NodeEditTagsForm.save_button\n    cancel_button = NodeEditTagsForm.cancel_button\n    @property\n    def is", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.onPose(timestamp, pose);\n\t\t}\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "                if (Enabled)\n                    ImageUrl = EnabledImageURL;\n                else\n                    ImageUrl = DisabledImageURL;\n                if (Visible)\n                    base.RenderControl(writer);\n            }\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tdamage = compound.getInteger(\"Damage\");\n\t}\n\t\n\t@Override\n\tpublic NBTTagCompound writeToNBT(NBTTagCompound compound)\n\t{\n\t\tcompound.setInteger(\"Damage\", damage);\n\t\t\n\t\treturn super.writeToNBT(compound);\n\t}\n}", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "        return \"Effect{\" + \"probability=\" + probability + \", scopes=\" + scopes + '}';\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group':'private',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n      'reporttime':", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "        p = Person.objects[0]\n        o = Organization.objects[0]\n        e = Person.objects[1]\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(e.employer, o)\n        self.assertEqual(o.employees[0], e)\n       ", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "                    interact(self._plot_line, x=widget_x, y=widget_y, sel_dim=sel_dim)\n                else:\n                    raise ValueError('interactive mode not supported')\n            else:\n                raise ValueError('interactive mode not supported')\n        else:\n            self._plot_line(x=x, y=y, sel_dim=", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (ignored.Contains(path))\n                {\n                    _logger.Debug(\"Ignoring change to {0}\", path);\n                    continue;\n                }\n                if (toScan.Add(path))\n                {\n                    _logger.Debug(\"Scanning {0}\", path);\n                    _logger.Debug(\"Scanning {0}\", path);\n                    _logger", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K,? super E,? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            isDiscussable = contobj.isDiscussable()\n            canReply = canreply(contobj)\n           ", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t}\n\t\tpublic sbyte Z\n\t\t{\n\t\t\tget { return m_Z; }\nNext line of code:\n\t\t}\n\t}\n\tpublic class TileList\n\t{\n\t\tprivate readonly List<Tuple<ushort, sbyte>> m_List;\n\t\tpublic TileList()\n\t\t{\n\t\t\tm_List = new", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": voice enabled for parcel\",\n                    //                  scene.RegionInfo.RegionName, land.Name, land.LocalID, avatarName);\n                    channelUri = scene.LandChannel", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriod payPeriod=new PayPeriod();\n\t\t\tpayPeriod.DateStart=DateTime.Parse(textDateStart.Text);\n\t\t\tpayPeriod.DateStop=DateTime.Parse(textDateStop.Text);\n\t\t\tpayPeriod.DatePaycheck=DateTime.Parse(textDatePaycheck.Text);\n\t\t\tif(IsNew", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert the time to python datetimes\n        new_time_column_header = []\n        for i, t in enumerate(column_headings['Time']):\n            dt = datetime.datetime.strptime(t, NAMEII_TIMESERIES_DATETIME_FORMAT)\n", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "    if not user:\n        return {'success': False,'msg': _('User %s not authorized to create members') % user}\n    return {'success': True}\ndef group_member_create(context, data_dict):\n    return _group_or_org_member_create(context, data_dict)\ndef organization_member_create(context, data_dict", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tString label = example.getValue(predictionAttribute);\n\t\t\t\tdouble confidence = example.getValue(predictionAttribute);\n\t\t\t\t// assigning data\n\t\t\t\toutcomes[parentIndex] = node.getChild(label).getPartitionId();\n\t\t\t\tconfidences[parentIndex] = confidences[parentIndex] * confidence;\n\t\t\t\tresultIndex++;\n\t\t\t}\n\t\t\t//", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            return new SearchResults[segments.Length];\n        }\n        /// <summary>\n        /// Performs a search for an array of translation units.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"translationUnits\">The array of translation units to search", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "            codePoint = (ch - 0xD800) * 0x400 + (string.charAt(offset++) - 0xDC00) + 0x10000;\n         }\n         if (codePoint < 0x110000) {\n            return _range.contains(codePoint)? offset : -1;\n", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        ValidationResults results = ValidationResults.SUCCESS;\n        if (studyFormName!= null) {\n            if (studyFormName.equals(GenericValidator.EMPTY_STRING)) {\n                results = ValidationResults.SUCCESS;\n            } else {\n                if (studyFormName.equals(AccessionNumberUtil.getStudyFormName(accessionNumber)))", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod!= ModData.Manifest.Id)\n\t\t\t\t{\n\t\t\t\t\tLog.Write(\"server\", \"Rejected connection from {0} because mod mismatch: {1}!= {2}\",\n", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    xbmc.executebuiltin(\"Notification(\"+localtxt3+\",\"+localtxt2+\", 5000,", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "  plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plotType' in pD:\n    return S_ERROR( \"Missing plot type!\" )\n  plotType = pD[ 'plotType' ]\n", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\t// Check if we have enough refineries\n\t\t\tif (playerPower.ExcessPower < Info.MinimumExcessPower)\n\t\t\t\treturn;\n\t\t\t// Check if we have enough power to build a new production building\n\t\t\tif (playerPower.ExcessPower < Info.MinimumExcessPower)\n\t\t\t\treturn;\n\t\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        // We need to update the system catalog with the plan\n        // We will need to update the system catalogs with this new information\n        // If this is an adhoc query then there won't be any plan\n        // We will need to update the system catalogs with this new information\n        // If this", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Anchor = ((System.Windows.Forms.AnchorStyles", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte)parity;\n\t\t\tdcb.ByteSize = (byte)data_bits;\n\t\t\tdcb.StopBits = (byte)bits;\n\t\t\tdcb.XonChar = 0x11;\n\t\t\tdcb.XoffChar = 0", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "        page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n        self.assertEquals(page.context['user'], admin)\n    def test_user_with_cobrand_not_admin(self):\n        cobrand = Cobranding.objects.create(user", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    _keep_tempdir = parser.parse_args().keep_tempdir\n    unittest.main()\nif __name__ == '__main__':\n    main()\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tnewListIndex = 0\n\t\t\tfor entry in newList:\n\t\t\t\tif entry[0] == self.newAPList[newListIndex][0]:\n\t\t\t\t\tcurrentListEntry = self.newAPList[newListIndex]\n\t\t\t\t\tself.newAPList.remove(currentListEntry)\n\t\t\t\t\tself.newAPList.insert(newListIndex,", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                float w = fontX + (fCode.Length - 1) * x;\n                float h = fontY + barHeight;\n                return new Rectangle(0, 0, w, h);\n            }\n        \n        /** Draws the barcode.\n        * @param canvas the canvas on which to draw the barcode", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return results;\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  The list cannot include any whitespace.\n   */\n  public static String[] getStringArray(Properties props, String key, String[] defaultValue) {\n    String[] results = getStringArray(props, key);\n    if (results ==", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "        y_points = np.arange(-90.0, +90.0, 2.0)\n        sample_points = [\n            (\"longitude\", x_points),\n            (\"latitude\", y_points),\n        ]\n        result = traj_interpolate(test_cube, sample_points, method=\"nearest\")\n        expected = [\n            ", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            if (currPacket == null)\n            {\n                return;\n            }\n            if (currPacket.Frame == null)\n            {\n                return;\n            }\n            if (currPacket.Frame.IsBasic)\n            {\n                return;\n            }\n            Clipboard.SetText(currPacket.Frame.ToString());\n        }\n        private void toolStripButtonRevert", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "    print'red'\n    print '\\033[0m'\n    print 'end'\n    print 'yellow'\n    print '\\033[1;33;40m'\n    print 'yellow'\n    print '\\033[0m'\n    print 'end'\n    print 'green'\n    print '\\033[1", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 300);\n            this.Controls.Add(this.treeView1);\n            this.Name = \"DummySolutionExplorer\";\n            this.Text = \"Dummy", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "        if not isinstance( original, wrapper.FunctionType ):\n            raise TypeError( \"\"\"Not a function type\"\"\" )\n        if not original.DLL is self.GL:\n            raise TypeError( \"\"\"Not a GL function\"\"\" )\n        return self.constructFunction(\n            original.__name__,\n            original.DLL,\n            resultType = original", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            final DataOutputStream dos = new DataOutputStream(baos);\n            emptyStreams.writeTo(dos);\n            dos.close();\n            baos.close();\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException {\n        boolean hasEmptyFiles = false;\n        for", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                    if (alphaLevel == 0)\n                        started = false;\n                    else\n                        alphaLevel--;\n                }\n                else\n                {\n                    if (alphaLevel == 255)\n                        inRamp = false;\n                    else\n                        alphaLevel++;\n                }\n                repaint();\n                try\n                {\n                    Thread.sleep", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_not_allow_move_files_if_max_idletime_configured_and_not_paused()\n        {\n           ", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n            }\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "                     '(1.0 = no oversampling)\\n'])\n        f.writelines(['F) 0.0\t\t\t# PSF oversampling radius '\\\n                     '(in pixels)\\n'])\n        f.writelines(['G) 0.0\t\t\t# PSF oversampling radius '\\\n                     '(in", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x08:\n                    /* C */\n                    i = b & 0x03;\n                    i +=", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        return self._course_key\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tchance = Float.parseFloat(splitNumber[0]);\n\t\t}\n\t\tint amount = 0;\n\t\tif(splitNumber.length > 1) {\n\t\t\tamount = Integer.parseInt(splitNumber[1]);\n\t\t}\n\t\tif(amount == 0) {\n\t\t", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "        for cert_file in os.listdir(config_directory):\n            if cert_file.endswith(\".pem\"):\n                os.remove(config_directory + \"/\" + cert_file)\n        return 0, \"Meter \" + name + \" deleted\"\ndef download_request(module, name, apiid, apikey, cert_type):\n    # Download the", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.lblPrivacy.Location = new System.Drawing.Point(6, 29);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(370, 26);\n            this.lblPrivacy.TabIndex = 1;\n            this.lblPrivacy.Text = \"This will help us improve the", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for plugname, plug in self.loaded_plugins:\n        Next line of code:\n            try:\n                plug.collect()\n            except KeyboardInterrupt:\n                raise\n            except:\n                if self.raise_plugins:\n                    raise\n                else:\n                    self._log_plugin_exception(plugname)\n        Next line of code:\n            plug", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "    getRoomFullName.produce = lambda s: s.getRoom().getFullName()\n    getRoomFullName.convert = Conversion.roomFullName\n    def getRoomBookingList(self):\n        \"\"\" Session Room Booking List \"\"\"\n    getRoomBookingList.convert = Conversion.roomBookingList\n    def getRoomBookingList(self):\n        \"\"\"", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                            throw new MessageWriterException(e);\n                        }\n                        return true;\n                    }\n                };\n                try {\n                    messageWriter.write(fileTextField.getText());\n                } catch (MessageWriterException e) {\n                    setErrorMessage(e.getMessage());\n                    return;\n                }\n            } else {\n                try {\n                    MessageImporter messageImporter = new", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tif (value instanceof Integer) {\n\t\t       \t\t\t\tlayer = ((Integer) value).intValue();\n\t\t       \t\t\t}\n\t\t       \t\t}\n\t\t    \t}\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    \treturn layer;\n    }\n    \n    protected String getView(Object options) throws Exception {\n", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession == null ||!currentSession.isOpened()) {\n            return;\n        }\n        if (userInfoSession == null ||!userInfoSession.equals(currentSession)) {\n            userInfoSession = new Session.Builder(currentSession).setDefaultAudience(SessionDefaultAudience.FRIENDS).build();\n            userInfoSession.addCallback", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion e : emotions)\n\t\t\tsum += e.chance;\n\t\tfor (Emotion e : emotions)\n\t\t\te.chance /= sum;\n\t}\n}\n", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                    'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test exporting as an xml string.\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "    C = cos(phi1Rad)\n    A = a*sqrt(1-eccSquared)\n    B = a*sqrt(1-eccSquared+mu*(2*eccSquared-eccSquared*eccSquared))\n    alpha = A*C + B*sin(phi1Rad)\n    beta = B*C - A", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = ReportUser.objects.create(\n                user = request.user,\n                reported_user = user,\n                reason = form.cleaned_data['reason'],\n                message = form.cleaned_data['message'],\n            )\n            messages.success(request, \"Report submitted!\")\n", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "    label = \"Add series\"\n    @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return \"Add series to %s\" % self.context.title\n    @property\n    def next_url(self):\n        \"\"\"The URL to redirect to after a successful form submission.\"\"\"\n        return canonical", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { }\n\t\t\t}\n\t\t}\n#endif\n\t}\n}\n", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return the value of the datatype\n     */\n    public Object getValue()\n    {\n        return value;\n    }\n    /**\n     * @param value\n     */\n    public void setValue(Object value)\n    {\n        this", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "                if flag == 'tag':\n                    new_positional_tags_list.append((flag, TagRegex(True, regex)))\n                else:\n                    new_positional_tags_list.append((flag, regex))\n            return new_positional_tags_list\n    def parse_tag_regex(tag_regex):\n        if tag_regex is None:\n            return None", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "                return new object[0];\n            }\n            public override bool IsAbstract { get { throw new NotImplementedException (); } }\n            public override bool IsClass { get { throw new NotImplementedException (); } }\n            public override bool IsInterface { get { throw new NotImplementedException (); } }\n            public override bool IsPublic { get { throw", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "        0x06: 'OBD-II as defined by the CARB and the EPA',\n        0x07: 'OBD as defined by the EPA and OBD-II as defined by the CARB',\n        0x08: 'OBD-II as defined by the CARB and OBD", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tready_pipe, ready_pipe = os.pipe()\n\t\tself.bus.add_signal_receiver(self.on_prompt, signal_name='Prompt',\n\t\t                            dbus_interface='org.freedesktop.Secret.Prompt',\n\t\t                            sender_keyword='sender')\n\t\tself.bus.add_signal_receiver(self.on_session, signal_name='OpenSession',\n\t\t                           ", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(Rune), 1044353, 1, 1044253);\n                this.ForceNonExceptional(index);\n                this.SetNeededExpansion(index,", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        # If we are in a debug mode and there is an exception we want to\n        # keep the context around so that the debugger can access it.\n        if self.preserved:\n            self.preserved = False\n            self._preserved_exc = exc\n            return\n        # If there is an exception", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "    response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\ndef _pubsub_callback(session, cluster_id):\n    return session.query(\n        HTTPSOAP.id, HTTPSOAP", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ReleaseEntity> getReleasesForResourceGroup(ResourceGroupEntity resourceGroup) {\n        return releaseLocator.getReleasesForResourceGroup(resourceGroup);\n    }\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "        dx = (ray_trafo.geometry.det_init_axes[0] * ray_trafo.range.meshgrid[1] +\n              ray_trafo.geometry.det_init_axes[1] * ray_trafo.range.meshgrid[2])\n    else:\n        dx = (ray_trafo.geometry.det_init_axes[0] *", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "        return regx\n    def _buildRE2(self, regx):\n        \"\"\" Return the Proxyfied RE string \"\"\"\n        if self.isEnabled():\n            regx = re.sub('//1', self.option, regx).replace('&', '&amp;')\n        return regx\n    def _buildRE3", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (type == FontSize.AsUnit)\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\treturn font_size_names[(int) type];\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (null);\n\t\t}\n\t\tpublic static FontUnit Parse (string s, IFormatProvider fmt)\n\t", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add the blocks\n\t\t\tbyte[] output = new byte[GetOutputBlockSize()];\n\t\t\tArray.Copy", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar o = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(o.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(o.Properties[0].Value.Type, Is.EqualTo(TokenType.String));\n\t\t\tAssert.That(o.Properties[0].Value.ToString(), Is.EqualTo(\"must be", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "                for (int w = 0; w < width; w++) {\n                    if (h > 0 && w > 0) {\n                        edges.add(new T2(w, h));\n                    }\n                    if (h > 0 && w < width - 1) {\n                        edges.add(new T2", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    ds = dclab.rtdc_dataset.RtdcDataset(ds)\n    ds.config[\"setup\"][\"channel width\"] = 20\n    ds.config[\"setup\"][\"flow rate\"] = 0.04\n    ds.config[\"setup\"][\"temperature\"] = 23.0\n    ds.config[\"setup\"][\"", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        final String[] args1 = new String[] { \"file:///tmp/1\", \"file:///tmp/2\" };\n        final String[] args2 = new String[] { \"file:///tmp/1\", \"file:///tmp/2\" };\n        final String[] args3 = new String[] { \"", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile!= null) {\n\t\t\t\treturn performInstallation(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Checks if the files are installed.\n\t * \n\t * @return true/false\n\t */\n", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.Uninitialize();\n\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_inverse, self.x_model, self.parameter_values)\n    @property\n    def x_data_cor_mat(self):\n        \"\"\"2D array of shape ``(N,", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        if (m_toStringRepr == null) {\n            m_toString", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                  noCanonicalIdAccountIds.add(walrusObject.getOwnerId());\n                } else {\n                  accountIdAccountMap.put(walrusObject.getOwnerId(), owningAccount);\n                }\n            }\n            // Get the owning user if its not already set\n            if (adminUser == null) {\n              if (userIdUserMap", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "            add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        #endregion\n        #region Private methods\n        private void SelectFolder(FolderTreeNode nodeToSelect)\n        {\n            if (nodeToSelect == null)\n                return;\n            if (node", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        final ImportVmTemplateParameters parameters = createParameters(name, isImportAsNewEntity);\n        final ImportVmTemplateCommand command = new ImportVmTemplateCommand(parameters);\n        final List<ConstraintViolation<ImportVmTemplateCommand>> violations = ValidationUtils.validate(command);\n        final String expectedMessage = \"The name of the template", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.LeftAttach = ((uint)(1));\n\t\t\tw10.RightAttach = ((uint)(2));\n\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+Table", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n                self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sTOTALSTATUS' % POSTPROC_ENVIRO_ID] = \\\n                self.totalstatus\n       ", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\tmb.SetImplementationFlags(MethodImplFlags.Runtime | MethodImplFlags.HideBySig);\n\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)\n\t\t{\n\t\t\treturn DefineMethod(name", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "      return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n    public", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                    vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(i, x));\n            }\n        }\n    }\n    /**\n     * Returns the vertex of the quad at index <code>i</code> and\n     * <code>index</code> in the quad.\n     * \n    ", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (showDateData.equals(\"false\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATEMODIFIED);\n        }\n        return result;\n    }\n    /**\n     * Returns the name of the column that is used to sort the document list.<p>\n     * \n    ", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tif (inputField.text.Length > 0)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputField.text;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdisplayText.text = inputText.text;\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnEnabledChanged(EventArgs e)\n    {\n      Invalidate();\n      base.OnEnabledChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnMouseUp(MouseEventArgs e)\n    {\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser.Length > 0)\n                {\n                    if (!Users.Contains(lastUser))\n                    {\n                        Users.Add(lastUser);\n                    }\n                }\n            }\n            foreach (string user in Users)\n            {\n                DataTable v = AErrors.Clone();\n", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.LastMousePos.X < EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Up | ScrollDirection.Left;\n\t\t\tif", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            if (CriteriaCodesUsed.Exists(element => element == \"ROLE\"))\n            {\n                if (CriteriaCodesUsed.Exists(element => element == \"VOL\"))\n                {\n                    if (CriteriaCodesUsed.Exists(element => element == \"OTHER\"))\n                    {\n                        VerificationResult = new TScreenVerificationResult(new TVerificationResult(this", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "                stream.Read (buffer, 0, buffer.Length);\n                // Appending as blob.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "        return not self._reqs\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return CopyRange || CopyCustom; }\t\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t\t\treturn;\n\t\t\t\t_customRange = value;\n\t\t\t\tNotifyPropertyChanged(\"Custom", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\tget { return cacheDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\nNext line of code:\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic string[] GetSupportedMimeTypes", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "            if (bugAnnotation.getBugInstance()!= bugInstance) {\n                throw new RuntimeException(\"BugInstance \" + bugInstance + \" has a BugAnnotation \" + bugAnnotation + \" that does not belong to it\");\n            }\n        }\n    }\n    /**\n     * For debugging: print a BugInstance and all of", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic class MeatPie : Food\n\t{\n\t\t[Constructable]\n\t\tpublic MeatPie() : base( 0x9f0 )\n\t\t{\n\t\t\tStackable = false;\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 5;\n\t\t}\n\t\tpublic MeatPie", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady() && Q.GetLineFarmLocation(minions, Q.Width).MinionsHit >= ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t *", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "        fb = self._retr_file(filename)\n        if fb == '':\n            return {}\n        tree = xml.etree.cElementTree.fromstring(fb)\n        pollen = {}\n        for child in tree:\n            if child.tag == 'tns:Ort':\n                for grandchild in child:\n                    if grandchild", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(field_def, field_model_def)\n        self.assertEquals(\n            field_def['rules']['marc'][0]['function'],\n            field_model_def['rules']['marc'][0]['function'])\n        self.assertEquals(\n            field_def['rules']['marc'][0]['function'],\n            field_model_def['rules", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new object[] {\"10\", \"E1\"});\n                // narrow to int\n                env.UndeployAll();\n                var stmtTextCreateTwo = namedWindow\n                  ? \"create window MyInfraW2#keepall as (f1 int, f2 string)\"\n                    : \"create table My", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "        c = self.copy()\n        return c.__imul__(other)\n    \n    def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__idiv__(other)\n    \n    def __idiv__(self", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "class website_menu(website):\n    def load_menus(self, cr, uid, context=None):\n        if request and request.website:\n            return request.website.load_menus(cr, uid, context=context)\n        return super(website_menu, self).load_menus(cr, uid, context=context)\n    def load_menus(self, cr", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "            value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n        if (oldValue!= value) {\n            c.firePropertyChange(BasicHTML.propertyKey, oldValue, value);\n        }\n    }\n    /**\n     * Get the html renderer for the given", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "    s = create(filename, content)\n    assert s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert not s.name_is_worker\n    assert not s.name_is_window\n    assert not s.name_is_reference", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.namedquery = namedQueryReference;\n\t\t}\n\t\tpublic void Loader(Action<ISqlLoaderMapper> sqlLoaderMapping)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tmapping.Sql", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tforeach ( PlayerState pl in m_Members )\n\t\t\t{\n\t\t\t\tpl.Serialize( writer );\n\t\t\t}\n\t\t\twriter.WriteEncodedInt( (int) m_FactionItems.Count );\n\t\t\tforeach ( FactionItem item in m_FactionItems )\n", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        invocationQueue.removeFirst();\n    }\n    private void moveForward() {\n        if (currentInvocation().callee().isExact()) {\n            popInvocation();\n            if (currentInvocation().callee().isExact()) {\n                popInvocation();\n            }\n        }\n        if (currentInvocation().callee().isExact()) {\n           ", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                self.args['pytest'] = pytest\n            if sprout_appliances:\n                self.args['sprout'] = sprout_appliances\n        if self.args['pr']:\n            self.args['branch'] = self.get_dev_branch(self.args['pr'])\n        if self.args['dev_pr']:\n            self", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "                if (phi) {\n                    ValueNode phiNode = getCachedPhi(entry.getKey(), value);\n                    for (int i = 1; i < states.size(); i++) {\n                        ValueNode otherValue = states.get(i).readCache.get(key);\n                        if (otherValue!= value) {\n                            effects.add", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "        if (mCallback!= null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCallDataUsageRequest */\n    public void handleCallDataUsageRequest(int event, long amount)", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendLocalizedMessage(1156691); // You have found a wall map of Eodon.\n\t\t\t\tfrom.SendLocalizedMessage(1156692); // You have found a wall map of Eodon.\n\t\t\t\tfrom.SendLocalizedMessage(1156693); // You have found a wall map of Eodon.\n\t\t\t\tfrom.SendLocalizedMessage", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   'models',\n    'Bibxxx',\n    'BibrecBibxxx',\n    'BibxxxMixin',\n    'BibrecBibxxxMixin',\n    'utils',\n    'intbitset',\n    'utils',\n    'db',\n    'intbitset',\n    'db',\n    '", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "        raise NotImplementedError()\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def __str__(self):\n        \"\"\"Return the string representation of the mo file\"\"\"\n        return _strjoin('\\n', [e.__str__(self", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res['OK']:\n      gLogger.error( \"Failed to determine problematics for transformation %s\" % transID )\n      return res\n    if not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput' )\n      if not res", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\t// FreenetURI furi = new FreenetURI(action);\n\t\t\t// if(furi.getScheme()!= null || furi.getHost()!= null || furi.getPort()!= -1 || furi.getUserInfo()!= null)\n\t\t\t// \tthrow new CommentException(l10n(\"invalidFormURI\"));\n", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        yield self.run_fake_single_build(gsp, buildResult)\n        result = makeReviewResult(str({'name': u'Builder0','result': buildResult}),\n                                  (GERRIT_LABEL_VERIFIED, verifiedScore))\n", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.scheme = 'http://www.google.com'\n    self.category.term = 'test'\n    self.category.label = 'test label'\n    self.assert_(self.category.scheme == 'http://www.google.com')\n    self.assert_(", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "                Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = new HashMap<String, AnnotationMirror>();\n            for (Map.Entry<String, AnnotationMirror> entry : r1.entrySet()) {\n                AnnotationMirror anno = entry.getValue();\n                if (r2.containsKey(entry.getKey())) {\n                    Annotation", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "class MATERIAL_PT_nodes(MaterialButtonsPanel, PropertyPanel, Panel):\n    bl_label = \"Node Editor\"\n    COMPAT_ENGINES = {'BLENDER_RENDER', 'BLENDER_GAME'}\n    def draw(self, context):\n        layout = self.layout\n        mat = context.material\n        if mat.use_nodes:\n           ", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_timer_irq_enabled = map16.TimerIrqEnabled;\n                mapper16_timer_irq_counter = map16.TimerIrqCounter;\n            }\n            //", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "            _jMnuRoot.add(new JMenuItem(\"Open Document\"));\n            _jMnuRoot.add(new JMenuItem(\"Open Document\"));\n            _jMnuRoot.add(new JMenuItem(\"Open Document\"));\n            _jMnuRoot.add(new JMenuItem(\"Open Document\"));\n            _jMnuRoot.add(new JMenuItem(\"Open Document", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t//----------------\n\t\t// Weapon\n\t\t//----------------\n\t\t// Page 1\n\t\tAdd(\"Weapon\", 70026); // Sword\n\t\tAdd(\"Weapon\", 70027); // Sword\n\t\tAdd(\"Weapon\", 70028); // Sword\n\t\tAdd(\"Weapon\", 70029", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = Frame.H;\n\t\t\tif (Height > 0) {\n\t\t\t\theight = Height;\n\t\t\t}\n\t\t\tif (height < min) {\n\t\t\t\theight = min;\n\t\t\t}\n\t\t\treturn height;\n\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\treturn SizeWidthToFitWithMin", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "        return self.tweet_id\n", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "# lexers['php'] = PhpLexer(startinline=True)\n# Add PHP to the list of languages that the first code block of a file or\n# document may be in (it must still be preceded by a blank line)\n# Next line of code:\n# lexers['php'].aliases.extend(('php',", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                 ORDER BY sdate, stime ''', (i,))\n    row_count = cursor.fetchall()\n    print \"Row count is: \", row_count\n    print \"Row count is: \", len(row_count)\n    print \"Row count is: \", len(row_count[0])\n    print \"Row count is:", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "        r = conn.run(\"db_set_last_snapshot\", project_id, timestamp)\n        print(\"db_set_last_snapshot\", r)\n        if r['err']:\n            print(\"db_set_last_snapshot\", r)\n            raise RuntimeError(\"db_set_last_snapshot\", r)\n    # Close the connection\n    conn.close()\ndef", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"I'm not sure what you're talking about.<br/>I'm just a simple shepherd.\");\n\t\t\t\tbreak;\n\t\t\tcase \"deian_01\":\n\t\t\t\tMsg(\"I'm not sure what you're talking about.<br/>I'm just a simple shepherd.\");\n\t\t\t\tbreak;\n\t\t\tcase \"de", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()\n        self.codetail = ('name',)\n        self", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "class HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __init__(self, uuid, name, status, result):\n        self.uuid = uuid\n        self.name = name\n        self.status = status\n        self.result = result\n        self.finish = None\n        self.start =", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                startActivity(intent);\n            }\n        }\n    }\n}", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "    for key in primary.keys():\n        pkg = primary.items[key]\n        print(\"Package: \" + build_nevra(pkg.name, pkg.epoch, pkg.version, pkg.release, pkg.arch))\n    raise AssertionError(\"primary.xml contains packages\")\n@behave.step(\"filelists in \\\"{path}\\\" contains only packages\")\n", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def get_source_files (self):\n        \"\"\"Get the list of source files that would be installed if this\n        command were run.  This is the same as", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject value = disassembledValues[j];\n\t\t\t\tif (value == null)\n\t\t\t\t{\n\t\t\t\t\t// lazy property is not present in the cache\n\t\t\t\t\t// so we need to initialize it from the", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        '-N', job_name,\n        '-o', log_name + '.out',\n        '-e', log_name + '.err',\n        '-l', 'h_rt=24:00:00',\n        '-l','mem_free=1G',\n        '-l', 'h_vmem=' + str(request", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")] \n        public ActionResult SaveEventDelegate(DelegateViewModel model)\n        {\n            var errors = new", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                        var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "                else:\n                    self.error(_(\"Unknown error: %s\") % res['error_code'])\n            #if not premium_url:\n            #    self.logWarning(_(\"API download failed, trying normal download\"))\n            #    premium_url = self.load(self.url, post={\"download\": \"normal\"}, decode=True)\n            #", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t// If no resources were found, search from the current position instead.\n\t\t\tif (path == null)\n\t\t\t{\n\t\t\t\tsearchFromLoc = self.Location;\n\t\t\t\tsearchRadius = harvInfo.SearchFromProcRadius;\n\t\t\t\tsearchRadiusSquared = searchRadius * searchRadius;\n\t\t\t\tpath = PathSearch.Search(self", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                       self.logger.error(\"service %s restart failed\" % service_name)\n                       return False\n                    self.logger.info(\"restarting %s\" % service_name)\n                    return True\n                else:\n                    self.logger.error(\"unknown DHCP module: %s\" % which_dhcp_module)\n                    return False\n        else", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        return Event.newBuilder().setSource(source).setSequenceNumber(seqNo.incrementAndGet());\n    }\n    @Override\n    public void sendEvent(Event evt) {\n        if (evt.hasSequenceNumber()) {\n            if (evt.getSequenceNumber()!= seqNo.get()) {\n                throw new IllegalArgumentException(\"Event sequence number mismatch", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            PpmContext context1 = context;\n            PpmState state1 = context1.Statistics[context1.NumberStatistics];\n            if (state1.Symbol!= symbol)\n            {\n                gotoLoopEntry = true;\n                goto Next line of code;\n            }\n            if (state1.Frequency < state.Frequency", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "                return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Sequence VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false, false, true, 0, false, '\\0', 1", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[3]);\n\t\t\tif(! sessionValuesArray.Contains(sessionID))\n\t\t\t\tsessionValuesArray.Add(sessionID);\n\t\t}\n\t\tif(sessionValuesArray.Count == 0) {\n\t\t\t//no tests in any session\n\t\t\t//show a message\n\t\t\tnew Dialog", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 10)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00', self.read(o))\n    def test_larger_than_file_middle(self):\n        o = self.file(b'abcdefghij')\n        insert_bytes", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "    <td><?cs var:sdk.win64_bundle_bytes?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum?></td>\n  </tr>\n  <tr>\n    <td>Linux 32/64-bit (x86)</td>\n    <td>\n  <a onClick", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    plt.plot(cr['combined'][app][VC]['durations'], label='Individual %ss' % (stat))\n    plt.plot(csi_95[0], csi_95[1], label='95%% CI')\n    plt.legend()\n    plt.show()\ndef plot_app_stats(cr, app, test", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "        self._testUIDGIDSwitch(1, 0, 1, 1, [0, 1, 0, 1], [1, 0])\n        # This test is skipped because it is not possible to switch to a\n        # different GID when the current effective UID", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.drawRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.isArmed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[1])\n  if winner!= 0:\n    failures += \"Inference failed with k=3\\n\"\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public boolean writeHeaderValue(ObjectMirror mirror, int offset, Value value) {\n        if (offset == lengthOffset) {\n            return false;\n", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "            if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(Parent.Directory, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }\n            return null;\n        }\n        /// <summary", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\"\"\"\ndef str_format(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    \n    >>> str_format('{%a%}', a=2)\n    2\n    >>> str_format('{% a %}', a=", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        n = m + i16 - 2;\n        i27 = i26 + i16 - 1;\n        i29 = i28 + i16 - 1;\n        i25 = 1;\n        if ((paramInt1!= 0? 0 : 1)!= 0)\n       ", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t\t\tif( s.name == name ) {\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Lulu\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lulu\",\n                    SpellName = \"LuluQ\",\n                    Slot = SpellSlot.Q,\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getTenantId()).thenReturn(\"test.tenant\");\n\t}\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        proc = subprocess.Popen(['ls', 'nonexistingfile'])\n        self.assertRaises(OSError, proc.communicate)\n    def test_popen_returns_error_code(self):\n        import subprocess\n        proc = subprocess.Popen(['ls', 'nonexistingfile'])\n        self.assertEquals(2, proc.returncode)\n    def test_p", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertyService.Start(propertiesName, ConfigDirectory, DataDirectory);\n\t\t\tResourceService.Start(DataDirectory);\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t[Serializable]\n\t\tpublic class ConstraintCollection : CollectionBase {\n\t\t\t//private static readonly object syncRoot = new object ();\n\t\t\t//private static readonly object syncRoot = new object ();\n\t\t\t//private static readonly object syncRoot = new object ();\n\t\t\t//private static readonly object syncRoot = new", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n    def retranslateUi(self, Dialog):\n        _translate = QtCore.QCoreApplication.translate\n        Dialog.setWindowTitle(_translate(\"Dialog\", \"Preferences\"))\n        self.settings_ui_groupbox.setTitle(_translate(\"Dialog\", \"UI\"))\n        self.zoom", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                return false;\n            }\n            String stationId = wxs.getString( wxs.getColumnIndex( Wxs.STATION_ID ) );\n            mStationId = stationId;\n            String[] wxColumns = new String[] {\n                    Wxs.WX_SENSOR_ID,\n                    Wxs.WX_SENSOR_TYPE,\n                    Wxs.W", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tISessionFactoryImplementor factory = s.SessionFactory;\n\t\t\t\tISessionFactoryImplementor factory2 = s.SessionFactory;\n\t\t\t\t// factory and factory2 are the same object\n\t\t\t\t// but the statistics are different\n\t\t\t\t// because the query is executed in a different session\n\t\t\t\t//", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)\n                {\n                    if ((uiByteValue & 0x8000) > 0)\n                    {\n                        uiCRCITTSum = (uint)(uiCRCITTSum ^ 0x1021);\n                   ", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn hasSpeedModule()? 1 : 0;\n\t}\n\t@Override\n\tpublic void push(Pose pose, PushReaction pushReaction) {\n\t\tif (pushReaction == PushReaction.DESTROY)\n\t\t\tkill();\n\t\telse\n\t\t\tsuper.push(pose, pushReaction);\n\t}\n\t@Override\n\tpublic", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "            return new IHyperlinkDetector[] { \n                    new JavaHyperlinkDetector(), \n                    new ReferencesHyperlinkDetector() };\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonNativeHeaderHyperlinkDetector(controller), \n                new CeylonJavaBackendHyperlinkDetector(controller), \n", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "        self.aspectWidget = Object3DAspect(self)\n        self.scaleWidget = Object3DScale(self)\n        self.privateWidget = Object3DPrivateInterface(self)\n        self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(self.aspectWidget)\n        self.l.addWidget(self.scaleWidget)\n        self.l.addWidget", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set\n\t\t\t\t\t{\n\t\t\t\t\t\tstring s = info.GetText();\n\t\t\t\t\t\tif ( s.Length== 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tm_Mobile.SendMessage( \"You must enter a value.\" );\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint x, y;\n\t\t\t\t\t\tif (!int.TryParse( s", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                     for (Object valueChoice : valueChoices)\n                     {\n                        if (selectConverter.convert(valueChoice).equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                  }\n                  if (chosenObj!= null)\n                  {\n                     result = chosenObj;\n                  }\n                  else\n                 ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (i!=j)\n\t\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\tif (k>0)\n\t\t\t\t\t\t\tsb.append(\"\\n\");\n\t\t\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+k+\"\\t\"+fractionWithAmount[i][j][k]", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int lineIndex = unpricedLine.Value;\n                                //check", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskType {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic string TaskName {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        final int groupMode = 0700;\n        final int otherUserId = new Random().nextInt(SecurityManagerImpl.MAX_USER_ID);\n        final int otherMode = 0700;\n        final int otherGroupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int otherGroupMode = ", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v / viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn v / viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport, Vector3 offset)\n\t", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint(XDRStruct):\n    __slots__ = ['key', 'value']\n    def __init__(self, key=None, value=None):\n        self.key = key\n        self.value = value\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack_uint(obj.key", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tRemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// sends a message to a specific client\n\t\t/// </summary>\n\t\t/// <param name=\"msg\">message to be sent</param>\n\t\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "            switch (type) {\n                case Step:\n                    logDataSet(list);\n                    notifyStepsReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, convertToStepBucketList(list));\n                    break;\n                case Activity:\n                    logDataSet(list);\n                    notifyActivitiesReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  if is_method:\n    print'   object,'\n  if exec_count:\n    print'   method,'\n  if bind_count:\n    print'   a%d,' % bind_count\n  for i in xrange(bind_count):\n    print'   a%d,' % i\n  if exec_count:\n   ", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    \"\"\"\n    response = HttpResponse(\n        mimetype='application/json',\n        content=simplejson.dumps(\n            [\n                range_item_dict(item)\n                for item in items\n            ]\n        )\n    )\n    response['Content-Disposition'] = (\n        'attachment; filename=\"{0}.json\"'.format(filename)\n    )\n", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                        new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        final ASTSearchOptimizer optimizer = new ASTSearchOptimizer();\n        optimizer.optimize(given, bsets);\n        assertEqual(expected, given);\n    }\n    /**\n     * Given\n", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        if \"set_is_active\" in request.REQUEST:\n            return self._handle_set_is_active()\n        return super(UserDetailView, self).post(request, *args, **kwargs)\n", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }\n    #region IAssemblyReference Members\n    /// <summary>\n", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            var w = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var p = new DenseVector(input.Count);\n            var q = new DenseVector(input.Count);\n            var s = new DenseVector(input.Count);\n            var t = new DenseVector(input.Count);\n            var y =", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the mean of an array of sorted numbers\n\t * @param sortedNumbers Array of sorted numbers\n\t *", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "                if reference_set_map[v]!= -1:\n                    sample_count[v, reference_set_map[v]] -= 1\n                v = parent[v]\n        for edge in edges_in:\n            parent[edge.child] = edge.parent\n            v = edge.child\n            while v!= -1:\nNext line of code:\n", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        for key, value in mapping_json[self.enrich_index]['mappings']['properties'].items():\n            if key in csv_mapping:\n                if key == 'ocean-unique-id':\n                    continue\n                if key == 'ocean-unique-id':\n                    continue\n                if key == 'ocean-unique", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots && slot.Value.LockTeam)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\tif (slot.Value.Locked)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\tif (slot.Value.Value == null)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\tif (slot.Value.Value.IsBot)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        return frame_header + padding_bytes + self.data\nclass DataFrameHeader(object):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            var b = cluster.BoundaryCurve.BoundingBox;\n            var b2 = cluster.RectangularBoundary.BoundingBox;\n            if (b!= b2)\n                throw new Exception(\"cluster \" + cluster.DebugId + \" has inconsistent boundary\");\n            foreach (var c in cluster.Clusters)\n                CheckClusterConsistency(c", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeCosine = btCos(m_maxSlopeRadians);\n}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn m_maxSlopeRadians;\n}\nvoid btKinematicCharacterController::setInterpolateUp(bool interpolateUp)\n{\n\tm_interpolateUp = interpolateUp;\n}\nbool bt", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        if (initializers!= null) {\n            for (ExpressionTree initializer : initializers) {\n                if (canBeLeaked(initializer)) {\n                    checker.report(Result.failure(\"unique.leaked\"), initializer);\n                }\n            }\n        }\n        return super.visitNewArray(node, p);\n    }\n    private boolean", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound1 == null", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute!= null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = Context.CreateType(typeAttribute.Value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the methods of this comment item.\n\t\t/// </summary>\n\t\tprotected void CreateMethods()\n\t\t{\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tinstrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t\t// must be write lock\n\t\t\tverify(classCache, times(1)).executeWithWriteLock(Matchers.<Callable<?>> any());\n\t\t\tverify(instrumentationApplier, times(1)).getSensorAssignment();\n", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (postdominators == null) {\n\t\t\tif (other.postdominators!= null)\n\t\t\t\treturn false;\n\t\t} else if (!postdominators.equals(other.postdominators))\n\t\t\treturn false;\n\t\tif (isImplicit!= other.isImplicit)\n\t\t\treturn false;\n\t\tif (", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "            int min2 = wideRExtent[end][r.leftChild];\n            int min = (min1 < min2? min1 : min2);\n            if (min > narrowL) {\n              continue;\n            }\n            int max1 = wideLExtent[end][rightState];\n            int max2 =", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "                'rsync',\n                '--archive',\n                '--delete',\n                '--exclude=pg_xlog',\n                '--exclude=pg_clog',\n                '--exclude=pg_xlog/archive_status',\n                '--exclude=pg_xlog/archive_status',\n                '--exclude=pg_xlog/archive_status',\n                '--exclude=pg", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunning = false;\n\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.RuntimesChanged -= DbgProcess_RuntimesChanged", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.\n\t * @param   value   Value of the parameter.\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif (!(aThat instanceof Contact) ) {\n\t\t\t return false;\n\t\t}\n\t\tContact that = (Contact) aThat;\n\t\tif ( this.getContactDate() == null ) {\n\t\t\t if ( that.getContactDate()!= null ) {\n\t\t\t\t\t return false;\n\t\t\t }\n\t\t} else if", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t    if n == 0:\n\t      status = 'w'\n\t    else:\n\t      status = 'a'\n\t    with open(name, status) as f_ID:\n\t      f_ID.write(str(body_types[i]) + '\\n')\n\t      for j in range(body_types[i]):\n\t\torientation = bodies[body_offset +", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        if cdata is None:\n            return\n        if cdata[0] is None:\n            return\n        if cdata[0].ndim == 0:\n            return\n        if cdata[0].ndim == 1:\n            if cdata[0].dtype == 'int64", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "from django import forms\nfrom django.forms import ValidationError\nfrom django.contrib.auth.models import Group\nfrom community.models import Community, CommunityPage, RequestCommunity\nfrom community.utils import get_groups\nfrom users.models import SystersUser\nfrom django import forms\nfrom django.forms import ValidationError\nfrom django.contrib.auth.models import Group", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "            event_key = event_key.with_wrapper(wrap)\n        event_key.base_listen(**kw)\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it is composed into a\n        core :class:`.Select` object.\n        This event is intended to allow changes to", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "            show_tag = etree.SubElement(xml_object,'show')\n            show_tag.text = ';'.join(self.show_tag_list)\n        return xml_object\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "        for change in data_model_changes:\n            if change.axis.id in self.current_filter:\n                self.current_filter[change.axis.id] = change.new_value\n                self.update_filtered_data()\n                self.current_filter[change.axis.id] = change.new_value\n                self.update_filtered_data()\n                self.current_filter[change", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class!= null && type!= null)\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"cannot use both 'type' and 'class' attributes for ldtoken\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (Class!= null && Method!= null)\n\t\t\t{\n\t\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t// \n\t\t\t// objYText\n\t\t\t// \n\t\t\tthis.objYText.Location = new System.Drawing.Point(", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assertEqual(c.comments,\n                         \"syncmail parser for freshcvs\\n\\nThis is a", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n            String key = entry.getKey();\n            if (key == null || key", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\t}\n\t\t@Override\n\t\tpublic boolean onWanded(EntityPlayer player, ItemStack wand) {\n\t\t\tif(!isPassiveFlower())\n\t\t\t\treturn false;\n\t\t\tif(!player.isSneaking()) {\n\t\t\t\tif(!supertile.getWorld().isRemote) {\n\t\t\t\t\tif(!supertile.getWorld().", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "            intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCase3(ArrayList<Community> newCommunities, THashSet<Community> commonComs,", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                                #if flags[flagname][version][docformat]!= minfo['flags'][flagname][version][docformat]:\n                                #    are_equal = False\n                                #    logger.info(\"ERROR: Document %s: Expected flag %s %s %s and got %s\" % (str(doc", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tguiThread.Abort();\n\t\t\tguiThread.Join();\n\t\t\tguiThread=null;\n\t\t\t//guiThread.Dispose();\n\t\t\t//guiThread=null;\n\t\t\t//guiThread.Abort();\n\t\t\t//guiThread=null;\n\t\t\t//guiThread.Abort();\n\t\t\t//guiThread=null;\n\t\t\t//gui", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Converts the specified date to a Datable object.\n   * @param date the date to convert.\n   * @param endHour", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceEventName = SourceEventName;\n\t\tsourceEventBinding.TargetEventName = SourceEventName;\n\t\tsourceEventBinding.SourceComponent = DataSource.Component;\n\t\tsourceEventBinding.TargetComponent = this;\n\t\tsourceEventBinding.SourceMethod = \"OnSourceEvent\";\n\t\tsourceEventBinding.TargetMethod = \"On", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "            ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class,\n                    containerName, this);\n            ObjectMapper mapper = new ObjectMapper();\n            JsonNode jsonNode = mapper.readTree(jsonData);\n            JsonNode node = jsonNode.get(\"node\");\n            JsonNode spanPort = jsonNode", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images b = new Images();\n\t\tprivate static final int ROOT = 1021;\n\t\tprivate static final class Utils\n\t\t{\n\t\t\tprivate static final Class<?> imsformclass = Class.forName(\"ims.framework.delegates.FormFile\");\n\t\t", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n    }\n    public int randomChoice(List l) {\n        return randomChoice(l.size());\n    }\n    public int randomChoice(List l, int maximum) {\n        return randomChoice(l.size(), maximum);\n    }\n    public int randomChoice(int size, int maximum) {\n        return rnd", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "                    la = LinkAnnotation()\n                    la.subject = man_obj.uuid  # the subordinate is the subject\n                    la.subject_type = man_obj.item_type\n                    la.project_uuid = man_obj.project_uuid\n                    la.source_id = 'label-match'\n                    la.predicate_uri ='skos:closeMatch'\n                    la", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"        .shrinktofit= \")\n              .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"        .mergecells = \")\n              .Append(StringUtil.ToHexString(MergeCells)).Append(\"\\n\");\n            buffer.Append(\"        .readingorder= \")\n              ", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains extra characters,\n\t\t\t\t// including half-width katakana.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (extraToJis [value])) |\n\t\t\t\t\t\t(((int) (extraToJis [value + 1", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    if   obj.mnemonic==\"LD_A\"  : dst = env.A[a]\n    elif obj.mnemonic==\"LEA\"   : dst = env.A[a]\n    elif obj.mnemonic==\"LD_D\"  : dst = env.E[a]\n    elif obj.mnemonic==\"LD_DA\" : dst =", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.openStream();\n\t\t\treturn loadProperties(stream, close);\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new RuntimeException(\"Error loading properties from \" + location, e);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif (stream!= null)\n\t\t\t{\n\t\t\t\ttry\n", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "            return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator()\n        {\n            return this == SPECTATOR;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n        ", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (\"BA\");\n\t\t\tSecurityIdentifier everyoneSid = new SecurityIdentifier (\"WD\");\n\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor (false, false, ControlFlags.None, userSid, groupSid", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "                else:\n                    error = \"response status error\"\n        if error:\n            print_w(\"[fingerprint] Lookup failed: \" + error)\n        # emit progress\n        self.__idle(self.__progress_cb, float(len(results)) / len(releases))\n        for index, release in iteritems(releases):\n           ", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        if (PhotonEditor.Current!= null)\n        {\n            if (PhotonEditor.Current.RpcList!= null)\n            {\n                foreach (string rpc in PhotonEditor.Current.RpcList)\n                {\n                    if (rpc.StartsWith(\"RPC_\"))\n                    {\n                        additionalRpcs.Add(rpc);\n                    }\n                }\n           ", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        return rootLayout;\n    }\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        full_msgid.setText(message.id);\n        full_subj.setText(message.subject);\n        full_from_to.setText(message.from);\n        full_date.setText(message.date);\n        full_repto.setText(message.re", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            op_cc = np.linalg.inv(op_cc)\n            if time_reversal:\n                return psit_G.conj() * np.exp(1j * np.pi * op_cc[2, 2])\n            else:\n                return psit_G * np.exp(1j * np.pi * op_cc[", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp, utkastRequest);\n        assertEquals(OK", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILBasicBlock child in block.Body) {\n\t\t\t\t\tif (prevChildAsBB!= null) {\n\t\t\t\t\t\tprevChildAsBB.Body.AddRange(flatBody);\n\t\t\t\t\t\tprevChildAsBB = null;\n\t\t\t\t\t}\n\t\t\t\t\tflatBody.Clear();\n\t\t\t\t\tforeach (ILNode childNode in child.Body) {\n\t\t\t\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll == ragdoll) {\n\t\treturn;\n\t    }\n\t    if (IsRagdoll) {\n\t\t//we're already a ragdoll, so we need to stop being one\n\t\t//this is a bit of a hack, but it works\n\t\t//we'll", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "    def __init__(self, config={}):\n        super().__init__(config)\n        self.topology = ClassFactory( [ Polygon ] )\n        self.topology_id = 0\n        self.topology_type = TopologyType.given\n        self.topology_dim = TopologyType.given\n        self", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "        out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff] = (byte)num;\n    }\n", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            super( source, new Predicate<PatternMatch>()\n            {\n                public boolean accept( PatternMatch match )\n                {\n                    return match( match, objectVariables );\n                }\n            } );\n        }\n        private boolean match( PatternMatch match,\n            Map<String, PatternNode> objectVariables )\n        {\n            for (", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "        elif key == 'type':\n            if value == 'bool':\n                value = float\n            elif value == 'date':\n                value = str\n            elif value == 'integer':\n                value = int\n            elif value == 'percent':\n                value = float\n            elif value =='string':\n                value", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            if (frameToClose!=null) {\n              frameToClose.setIcon(false);\n              frameToClose = null;\n            }\n            if (ClientSettings.ICON_ENABLE_FRAME!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_ENABLE_FRAME)));\n          } else {\n            if (ClientSettings.ICON", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx)\n    {\n      for (int x = 0; x < p.getRasterWidth();", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    db.execSQL(\"UPDATE \" + Db.Table1.TABLE_NAME + \" SET \" + Db.Table1.ID_GROUP + \" = \" + newId + \" WHERE \" + Db.Table1.ID_GROUP + \" = \" + deleteId);\n                    //Update budget items\n                    db.execSQL(\"UPDATE \" + Db.Table4.TABLE", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "                else\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n                m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n        #endregion\n    }\n}", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/accounts/profile/'\n##################\n# AUTHENTICATION #\n##################\nAUTHENTICATION_BACKENDS = ('django.contrib.auth.backends.ModelBackend',)\nLOGIN_URL = '/accounts/login/'\nLOGIN_REDIRECT_URL = '/accounts/profile/'\n##################\n# AUTHENTICATION #\n##################\nAUTH_USER_MODEL = 'auth.User'\n##################\n# AUTH", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t// Cancel the production of the given number of items\n\t\t\tif (queue.Count == 0)\n\t\t\t\treturn;\n\t\t\tvar item = queue[0];\n\t\t\tif (item.Item!= itemName)\n\t\t\t\treturn;\n\t\t\tif (item.NumberToBuild > numberToCancel)\n\t\t\t\titem.NumberToBuild -= numberTo", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "        infoText += \" file\" if numberOfFiles==1 else \" files\"\n        infoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file\" if numberOfHiddenFiles==1 else", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = re_m4.sub('%%', code)\n        # replace all @var@ by the value of the variable\n        code = re_m4.sub(self.generator.env.get, code)\n        self.generator.env.set(self.outputs[0], code)\n        self.generator.env.save()\n        self.generator.env.save()\n", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "        result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] + chemical[ 1 ][ idx - 1 ]\n\t\t\t\t\t\t\t\t\t- 4 * chemical[ 1 ][ idx ] + chemical", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(\n                        typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            case ColumnType.STRING:\n                columnTypes.add(typeManager.next", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn true;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Procedure</param>\n\t\tprotected override bool ReceberAutoIncrement", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, int[] propertyIndexes, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        if self.trusted_key == 'enable':\n            trusted_key = 'trusted-key'\n        else:\n            trusted_key = 'no trusted-key'\n        if self.auth_type == 'text':\n            auth_type = 'password'\n        else:\n            auth_type = 'encrypted'\n        if self.auth_mode =='md", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            self.store.update_item(component.location, editing_user)\n        after_edit = datetime.datetime.now(UTC)\n        # Check that the component was last edited by editing_user after the edit\n        check_node(component.location, after_edit, after_create, editing_user, after_edit, after_create, editing_user)\n        # Check", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        digest.update((byte) (TEXT_CODE & 0xff));\n        updateWithCharBuf();\n    }\n    public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {\n    }\n    public void processingInstruction(String target, String data) throws SAXException {\n        digest.update((byte", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "    return aetypes.Range(dict['start'], dict['end'])\n    return aetypes.Range(dict['start'], dict['end'], dict['length'])\ndef mkinsertionloc(dict):\n    return aetypes.InsertionLoc(dict['before'], dict['after'])\ndef mkobjectfrommodule(dict, modulename):\n   ", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            formatters = new Collection<MediaTypeFormatter>();\n            Type type = null;\n            if (api == null)\n            {\n                throw new ArgumentNullException(\"api\");\n            }\n            if (api.ParameterDescriptions.Any(p => p.ParameterType == typeof(HttpRequestMessage)))\n            {\n                type = typeof(HttpRequestMessage);\n            }\n", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "                value = entry.get_active_text()\n            if value:\n                if event.keyval == gtk.keysyms.F3:\n                    self.on_create_line()\n                else:\n                    self.on_open_remote(record, column.name, True, value)\n            else:\n                self.on_open_remote(record, column.name, False, value)\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /*\n     * (non-Javadoc)\n     * @see org.springframework.core.Ordered#getOrder()\n     */\n    public int getOrder()\n    {\n        return PriorityOrdered.HIG", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            f.next()\n        except StopIteration:\n            # No more lines to read\n            f.close()\n            f = None\n        else:\n            # There are lines to read\n            f.close()\n    if f is not None:\n        # Remove blank lines from file\n        f = open(path, \"w", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.IUnknown)] object pUnk\n            );\n        [PreserveSig]\n        int QueueEventParamVar(\n            [In] Media", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "        var principal = spm.getSecurablePrincipal( directedAclKeys.getPrincipal() );\n        var targetPrincipal = spm.getSecurablePrincipal( directedAclKeys.getTarget() );\n        var role = spm.getSecurablePrincipal( directedAclKeys.getRole() );\n        var organization = spm.get", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element matches what is expected.\n        Arguments:\n        element Element object.\n        Returns:\n        True if the tag matches what is expected.", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "        clone._is_id = node._is_id\n    elif node.nodeType == Node.ENTITY_NODE:\n        clone = newOwnerDocument._create_entity(node.name, node.publicId,\n                                               node.systemId)\n    elif node.nodeType == Node.ENTITY_REFERENCE_NODE:\n        clone = newOwnerDocument.createEntityReference(node.nodeName", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* @generated\n\t*/\n\t@Test\n\tpublic void testValidateEMSSceneSection", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.NameComponent, endOffset)) {\n\t\t\t\t// The keyName is a name.\n\t\t\t\tkeyLocator.setKeyName(new Name());\n\t\t\t\tdecodeName(keyLocator.getKeyName(), new int[1], new int[1], decoder);\n\t\t\t} else if (decoder.peek", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the camera\n        camera = new Rectangle((int)myPlayer.x, (int)myPlayer.y, spritew, spriteh);\n        viewx =", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setColor( color );\n        GameEngine.model().getGame().addJoin( action );\n        hide();\n      }\n    } );\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n    m_panel.add( m_btnCancel );\n    m_panel.add( m_btnOk );\n    //", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            msgs = [e[\"msg\"] for e in err[\"errors\"]]\n            raise RuntimeError(\", \".join(msgs))\n    filename = get_filename(r.headers)\n    with open(filename", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tif (response == null)\n\t\t\t\t{\n\t\t\t\t\tfailureReason = SR.ErrorMergeOrder;\n\t\t\t\t\tmergedOrder = null;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tmergedOrder = response.Order;\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "    return [met.elements.get(\"C\", 0) * coeff for met, coeff in reaction.metabolites.items()]\n    if len(set(met.elements.get(\"C\", 0) * coeff for met, coeff in reaction.metabolites.items()))!= 1:\n        raise ValueError(\"Cannot calculate yields for", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(\n            store__pootle_path=pootle_path,\n            store__user__in=[user, user.groups.all()]\n        )\nclass Unit(CachedTreeItem, CachedTreeItemMixin, CachedMethods, models.Model):\n    \"\"\"A single translation unit.\n    \"\"\"\n    #", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "                ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True, null=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Student',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                    self.logger.debug(\"Got ARP request for {} on port {}\".format(dstip, portnum))\n                    self.logger.debug(\"Sending ARP reply for {} on port {}\".format(dstip, portnum))\n                    arp = poxpkt.payload\n                    arp.opcode = pktlib.arp.REPLY\n                    arp.protod", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (m_IgnoreChanges)\n      return;\n    if (m_RecentItems.size() >= m_MaxCount)\n      m_RecentItems.remove(0);\n    m_RecentItems.add(item);\n    updateMenu();\n    notifyRecentItemListenersOfAdd(item);\n  }\n  /**\n   * Removes the item", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            if (target is ShadowKnight)\n                return false;\n            if (target is ShadowKnight)\n                return false;\n            if (target is ShadowKnight)\n                return false;\n            if (target is ShadowKnight)\n                return false;\n            if (target is ShadowKnight)\n                return false;\n            if (target", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "        if (halfTradePeriodDate == null && takeOfferDate!= null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n    }\n    public Date getTakeOfferDate() {\n        return take", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t} else if (p.typ == Node.iter) {\n\t\t\ta = LeadingAny(p.sub);\n\t\t\tif (a == null) a = LeadingAny(p.sub.next);\n\t\t} else if (p.typ == Node.opt) {\n\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff)  >>  0);\n\t\t\tWriteReport(buff);\n\t\t\t// signal the read report finished\n\t\t\tif(!mReadDone.WaitOne(3000, false))\n\t\t\t\tthrow new WiimoteException(\"Timed out waiting", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(direction, caseInsensitive);\n\t\t}\n\t\tpublic int compare(Object obj1, Object obj2)\n\t\t{\n\t\t\tMskJointVo voObj1 = (MskJointVo)obj1;\n\t\t\tMskJointVo voObj2 = (MskJointVo)obj2;\n\t\t\treturn direction*(vo", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn String.Format( \"{0:yyyyMMdd_HHmmss}\", DateTime.Now );\n\t\t}\n\t}\n}", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void UpdateItemInCollectionOnTheSecondLevel", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (k++; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (k++; i < N1 + N2 + N3 + N4; i++, k +=", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "        add_view = self.parent.create_view(AddComputeChargebackView)\n        add_view.fill(\n            {\n                'description': description,\n                'currency': currency,\n                'fields': fields\n            },\n            on_change=add_view.add_button,\n            no_change=add_view.cancel_button\n        )\n        return rate\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.WriteData( offset, length, src, discardWholeBuffer );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Writing to hardware buffer is not supported.\" );\n\t\t\t}\n\t\t}\n\t\t/// <", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "from Components.Sources.StaticText import StaticText\nfrom Components.ActionMap import ActionMap\nfrom Components.Label import Label\nfrom Components.Button import Button\nfrom Components.Pixmap import Pixmap\nfrom Components.Sources.StaticText import StaticText\nfrom Components.ActionMap import ActionMap\nfrom Components.Label import Label\nfrom Components", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "            else {\n                String[] filters = filterStr.split(\";\");\n                for (String filter : filters) {\n                    String[] parts = filter.split(\":\");\n                    if (parts.length!= 2) {\n                        throw new IllegalArgumentException(\"tcpAcceptFilter \" + filter);\n                    }\n                    String ip = parts[0];\n                   ", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                // Write the decoded row\n                for (int i = 0; i < bytesPerRow; i++) {\n                    fout.WriteByte(curr[i]);\n                }\n                // Swap the current and previous rows\n                byte[] temp = curr;\n                curr = prior;\n                prior = temp;\n                // Read the next", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n       ", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "                    for elt in m_product.get_product().get_basis():\n                        output += str(elt) + \"\\n\"\n                except ValueError:\n                    output += \"no such product\\n\"\n        _file = open(filename, 'w+')\n        _file.write(output)\n        _file.close()\n    def make_product_database(self", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \"", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( m.isEmpty() ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfor ( Object o : m.entrySet() ) {\n\t\t\t\tfinal Entry e = (Entry) o", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member removing an auction\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "        return action_message\n    @api.multi\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns the modified attendance.\n        \"\"\"\n        self.ensure_one()\n        attendance = self.last_attendance_id\n        if not attendance:\n            attendance = self.env['hr.attendance'].create", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\t// WDEV-3953\n\t\t//if (orderInvestigationLiteVo.getSpecimenIsNotNull() && orderInvestigationLiteVo.getSpecimen().getSpecimenIndexIsNotNull() && orderInvestigationLiteVo.getSpecimen().getSpecimenIndex().getSpecimenTypeIsNotNull())\n", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The item's index in the list view.\n        /// </summary>\n        public int Index { get { return index; } }\n        /// <summary>\n        /// The list view this item belongs to.\n        ///", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "        if maker.isinstance(widget, 'Tab'):\n            if not debugtab:\n                self.terminator.tab_new(cwd, profile)\n            else:\n                self.terminator.debug_tab_new(cwd, profile)\n        else:\n            self.terminator.tab_new(cwd, profile)\n        self.terminator", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                    string name = nameArraySizeFragment;\n                    if ( nameArraySizeFragment.Contains( \"[]\" ) ) {\n                        name = nameArraySizeFragment.Replace( \"[]\", string.Empty );\n                    }\n                    if ( name.Contains( \"[]\" ) ) {\n                        name = name.Replace( \"[]\", string.Empty );\n                   ", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\tif (base_type!= null)\n\t\t\t\t\treturn base_type.IsValueType;\n\t\t\t\tif (IsEnum)\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsClass {\n\t\t\tget {\nNext line of code:\n\t\t\t\tif (base_type!= null)\n\t\t\t\t\treturn base_type.IsClass", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "                throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}\n", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "        self._context = OpenSSL.SSL.Context(_openssl_versions[protocol])\n        self._context.set_options(OpenSSL.SSL.OP_NO_SSLv2)\n        self._context.set_options(OpenSSL.SSL.OP_NO_SSLv3)\n        self._context.set_options(OpenSSL.SSL.OP_NO_COMPRESSION", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.LabelProp = global::Mono.Unix.Catalog.GetString (\"_Plural Forms:\");\n\t\t\tthis.label8.UseUnderline = true;\n\t\t\tthis.hbox3.Add (this.label8);\n\t\t", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                headbook.set_tab_reorderable(old_num, True)\n                headbook.set_tab_reorderable(new_num, True)\n        headbook.set_tab_reorderable(0, True)\n        headbook.set_tab_reorderable(1, True)\n        headbook.set_tab_reorderable(2, True", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-right\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_0),\n    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\" + this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", jtaDataSource=\" + this.jtaDataSource + \", nonJtaDataSource=\" + this.nonJtaDataSource + \",", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    IEditorPart editorPart = getEditorPart();\n    if (editorPart!= null)\n    {\n      IEditorInput input = editorPart.getEditorInput();\n      if (input instanceof IFileEditorInput)\n      {\n        IFileEditorInput fileEditorInput = (IFileEditorInput)input;\n        return", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(802, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(75, 20);\n\t\t\tthis.butAttach.TabIndex = 8;\n\t\t\tthis.butAttach.Text = \"Attach\";\n\t\t\tthis.butAttach", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "        if (sb!= null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n    /**\n     * Returns the prefix for the given marker id.\n     * \n     * @param markerId the marker id\n     * @return the prefix\n     */\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2_Legacy ()\n\t\t{\n\t\t\tbyte[] key = Encoding.Default.GetBytes (\"Jefe\");\n\t\t\tbyte[] data = Encoding.Default.GetBytes", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch (EnumSwitcher.values()[0]) {\n\t        case option_1:\n\t        case option_2:\n\t            current_sum = 4;\n\t            break;\n\t        case option_3:\n\t            current_sum = 4;\n\t            break;\n\t        default:\n\t            current_sum = 4;\n\t            break;\n\t    }\n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "        return null;\n      String javaHome = (String) java.GetValue(\"JavaHome\");\n      if (javaHome == null)\n        return null;\n      return javaHome;\n    }\n    private static String GetJavaHome(String javaHome)\n    {\n      if (javaHome!= null)\n        return javaHome;\n     ", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = l.split()[1]\n        return [None, None]\n    def find_env(self, name):\n        # attempt to find env variable by name\n        for l in self.lines:\n            if re.match(r'export\\s+%s\\s*=' % name, l):\n                return [l]\n       ", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# -------------------------------------------------\n# old - remove after recreating meshes through import\n# -------------------------------------------------\n# import bpy\n# from. import BLbpy_prop_array, BLbpy_prop_collection, BLCacheFile, BLObject, BLset, BLTexture, BLVector, BLCurveMapping, BLImage\n# from.", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            if(rankCounts == null)\n            {\n                rankCounts = new double[totalBuckets];\n                pepLenRankCounts.put(peptideLength, rankCounts);\n            }\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                if(rankCounts[i] == 0)\n", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "        for (int i : vertex.neighbors()) {\n            neighbors.add(i);\n        }\n        assertEquals(3, neighbors.size());\n        assertTrue(neighbors.contains(1));\n        assertTrue(neighbors.contains(2));\n        assertTrue(neighbors.contains(3));\n    }\n    @Test\n    @DisplayName(\"neighbors() should return an", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                    self.cap[self.choice-1].show()\n                    print(\"\")\n                    print(self.grn+\"[+] Packet \"+self.choice+\" shown\"+self.blk)\n                    print(\"\")\n                    print(self.grn+\"[+] Press enter to continue\"+self.blk)\n                    self.get_input(\">>>\")\n                    os.system('clear", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 9);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 198;\n            // \n            // label3\n", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': \"'created_scan_set'\", 'to': u\"", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "                return false;\n            }\n        }\n        return true;\n    }\n    private void preprocessGlobalTypes(Schema schema) {\n        if (schema.getGlobalTypes().size() > 0) {\n            for (int i = 0; i < schema.getGlobalTypes().size(); i++) {\n                ComplexType", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_second_validate(self, cr, uid, ids, context=None):\n        self.holidays_second_validate_notificate(cr, uid, ids, context=context)\n", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "            set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the <see cref=\"IBusinessObject\"/> that is currently selected\n        /// </summary>\n        /// <value>The <see cref=\"IBusinessObject\"/> that is currently selected</value>\n        IBusinessObject", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "            return String.Format(\"Mixer Line {0} {1} {2} {3}\", mixerLine.dwLineID, Name, TypeDescription, TargetName);\n        }\n    }\n}", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 =\n\t\t\t\tdomainFactory.getDomainObject(ims.core.admin.domain.objects.CareContext.class, valueObject.getCareContext().getID_CareContext());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\t//This is to overcome a potential MixedCase-Insensitive bug.\n\t\tif", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            [\"cargo\", \"build\"] + opts,\n            cwd=base_path,\n            env=env,\n            verbose=verbose)\n        if android:\n            # Build the Android APK\n            with cd(self.android_support_dir()):\n                status = call(\n                    [\"cargo\", \"build\", \"--target\", \"arm-linux-and", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble p = counts[0];\n\t\t\tdouble n = counts[1];\n\t\t\tdouble estP = counts[2];\n\t\t\tdouble estN = counts[3];\n\t\t\tdouble p = counts[0];\n\t\t\tdouble n = counts[1];\n\t\t\tdouble estP =", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "                Stashed.SetStashDiffs(gitStash);\n            }\n            Stashes.Enabled = true;\n            Stashes.Focus();\n            Stashes.SelectedIndex = 0;\n            Stashes.Enabled = true;\n            Stashes.Focus();\n            Stashes.SelectedIndex = 0;\n            Loading.Visible = false;\n            Stashes", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "    assert lattice.cbuffer.get_object(bm1_index).out_address!= 0\nNext line of code:\n    assert lattice.cbuffer.get_object(bm2_index).out_address!= 0\nNext line of code:\n    assert lattice.cbuffer.get_object(bm0_index).out_address == \\\n        output", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.host.equals(that.host) && this.port == that.port\n            && this.realm.equals(that.realm)", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult result) {\n            object[] array = this.EndInvoke(result);\n            return ((int)(array[0]));\n        }\n    }\n}\n", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \", \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleStringAusMehrerenChargennr(\n\t\t\tList<SeriennrChargennrMitM", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n\t\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tdefault : \n\t\t\t\t\tbase.CSet(feature, value);\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "    log.setup(args.log_file)\n    archive_index = EncryptedArchiveIndex(args.index_file)\n    if not os.path.exists(args.index_file):\n        log.msg('Index file does not exist - creating new index')\n        archive_index = EncryptedArchiveIndex(args.index_file)\n        archive_index.save()\n    else:\n       ", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        self.mosi_bits = mosi\n        self.miso_bits = miso\n        self.ss, self.es = ss, es\n        # Handle the current state.\n        if self.state == 'IDLE':\n            self.handle_command_token(mosi)\n        elif self.state == 'HANDLE CMD%d' %", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "          limit_backward = v_3;\n          // literal, line 200\n          if (!(eq_s_b(1, \"a\"))) {\n            break lab0;\n          }\n          // ], line 200\n          ket = cursor;\n          // <-, line 200\n          slice_from(\"a\\u015Fi", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                if (cls == null)\n                    return;\n                Object[] args = new Object[0];\n                if (cls.isPrimitive())\n                    args = new Object[1];\n                else\n                    args = new Object[1];\n                args[0] = dins.readBytes();\n                o = cls.getConstructor(args", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                return result, extension.get_critical()\n        return None, None\n    def _get_key_usage(self):\n        return self._get_extension('keyUsage')\n    def _get_extended_key_usage(self):\n        return self._get_extension('extendedKeyUsage')\n    def _get_basic_constraints(self):\n        return self._", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = s.find (i->first)!= s.end ();\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\tif (s.size () == 1) {\n\t\t\t\t\t/* We are the only slot left, so we can just call the slot */\n\t\t\t\t\ti->second ();\n\t\t\t\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    #    X = Interval(0x10000, 0x10000 + 0x1000)\n    #    X = Interval(0x10000, 0x10000 + 0x1000)\n    #    X = Interval(0x10000, 0x100", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = la.pos; int col = la.col;\n\t\t\twhile (StartOf(13)) {\n\t\t\t\tif (la.kind == 29) {\n\t\t\t\t\tGet();\n\t\t\t\t\tSemText();\n\t\t\t\t} else if (la.kind == 30) {\n\t\t\t\t\tGet();\n\t\t\t\t\tSemText();\n\t\t\t\t}", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "            edi_doc['__import_module'] = 'purchase'\n            edi_doc['product_qty'] = edi_doc['product_uom_qty']\n            edi_doc['product_uom'] = edi_doc['product_uom_id']\n            edi_doc.pop('product_uom_qty', None)\n            edi_doc.pop('product_uom", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n}", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "                permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testGetPermissions() throws Exception\n    {\n        // virtual permission should override actual permissions\n        List<PermissionEntry> permissions =", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "            match_property('ID_VENDOR', 'Linux Foundation')\n        for device in devices:\n            assert device['ID_VENDOR'] == 'Linux Foundation'\n    @pytest.mark.match\n    def test_list_devices_with_match(self, context):\n        devices = list(context.list_devices(\n            match_property('ID_VENDOR', 'Linux Foundation", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "    device = Device(deviceToken)\n    user = device.newUser(loginId, password)\n    user.mainmenu()\n    user.endTutorial()\n    user.cardUpdate()\n    user.cardCategoryUpdate()\n    user.cardComboUpdate()\n    user.menu = user.menu\n    user.menu.menulist()\n    user.menu.fairy", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "        elif (index_elements[0] == \"Fit:\"):\n            rv['fitScatter'] = float(index_elements[1])\n        elif (index_elements[0] == \"Mode:\"):\n            rv['mode'] = index_elements[1]\n        elif (index_elements[0] == \"Stokes:", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "            if (m_Keys.Count == 0)\n                ItemID = 0;\n            else\n                ItemID = 0x10000000 + m_Keys[0].ItemID;\n        }\n        private class InternalTarget : Target\n        {\n            private KeyRing m_From;\n            public InternalTarget", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            Tuner tuner = new TunerHdhr(device, addDevice);\n            tunerList.add(tuner);\n            // DRS 20181025 - Added 1 - Added model to HDHR tun", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {\n      jobs.put(Version.DAY_BY_DAY_STICKERS, new DayByDayStickersMigration", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split.length < 2) {\n        throw new IllegalArgumentException(\"Line \" + lineCount + \" in RegexNER mapping file is not properly formatted. It should be of the form: regex\\ttype\\t[overwritableTypes]\\tpriority\");\n      }\n      String regex = split[0];\n      String", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            for p in sub_path:\n                if os.path.exists(os.path.join(p, n)):\n                    return os.path.join(p, n)\n            # see if we find it using the path in env[include[0]]\nNext line of code:\n            for p in path[include[0]]:\n                if os.path", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "        ctx = Context()\n        [ctx.push(x) for x in keys]\n        def make_it(feat, idx):\n            f = Feature(ctx, idx)\n            geom, attrs = feat\n            f.set_geometry_from_wkt(geom)\n            for k, v in attrs.iteritems():\n                f[k] =", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "        if self.want.port in [None, '*'] and self.have.port!= '*':\n            raise F5ModuleError(\n                \"Specifying an IP address requires that a port number be specified\"\n            )\nNext line of code:\n        if self.want.port in [None, '*'] and self.have.port!= '*", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "    @property\n    def is_displayed(self):\n        return self.title.text == 'Add Automate Method'\n    @property\n    def is_valid(self):\n        return self.validate_button.is_enabled\n    def fill(self, values):\n        if not self.is_valid:\n            self.validate_button.click()\n        if self", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "            throw new Exception(\"Action class not found: \" + className);\n        }\n        return result;\n    }\n    public IAction getClassByName(String className) throws Exception {\n        return getActionByName(className);\n    }\n    public IAction getActionByName(String className) throws Exception {\n        return getActionObject(className);\n   ", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_request_error(\n            \"update_thread\",\n            {\"thread_id\": \"dummy\", \"course", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "            if env.get('WINDOWS_MANIFEST_RESOURCE_ID', 0):\n                manifestSrc = manifestSrc.replace('.manifest', '.rc')\n            if os.path.exists(manifestSrc):\n                env['MSVC']['MTSHLIBCOM'] = embedManifestDllAction\n                env['MSVC']['MTSHLIBCOM']", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "            new Thread() {\n                public void run() {\n                    try {\n                        errorStatus[0] = execute();\n                    } catch (OperationCanceledException e) {\n                        errorStatus[0] = Status.CANCEL_STATUS;\n                    }\n                }\n            }.start();\n        } catch (CoreException e) {\n            error", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\treturn true;\n\t}\n\t\n\tpublic void check(StepMetaInterface smi, RowMetaInterface rmi, Spoon spoon, JobMeta jmi) throws KettleException\n\t{\n\t\tmeta=(AggregateRowsMeta)smi;\n\t\tmeta.check(rmi, spoon);\n\t}\n\t\n\tpublic StepMetaInterface get", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "    assert f('+5..', last) == (d(2014,1,30, 22,21), now)\n    assert f('-5..', last) == (d(2014,1,31, 19,47), now)\n    # the last two lines are commented out because", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //WalkingRange\n            int swalkingrange = Utility.ToInt32(swalkingrange);\n            if (swalkingrange == 0)\n                swalkingrange = 1;\n            //HomeRange\n           ", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "        self._open_session_list.append(session)\n        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestError(\"Guest system log is not as expected.\")\n        self._cleanup_open_session()\n    def _session_cmd_close(self, session, cmd):\n       ", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        final Future<Boolean> rc2 = service.submit(pub);\n        assertThat(rc.get(), is(5));\n        assertThat(rc2.get(), is(true));\n        service.shutdown();\n    }\n}\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) {\n           ", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn 1;\n\t\t\tif (value <= 0x3FFF)\n\t\t\t\treturn 3;\n\t\t\tif (value <= 0x1FFFFFFF)\n\t\t\t\treturn 5;\n\t\t\tthrow new ArgumentOutOfRangeException(\"UInt32 value can't be compressed\");\n\t\t", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        if len(au_flags) == 1 and au_flags[0] == '-R':\n            au_flags.pop(0)\n        else:\n            au_flags.insert(0, '-R')\n        self.fm.execute_console(\"mkdirp\", \"tmp\")\n        self.fm.execute_console(\"mkdirp\", \"tmp/", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tActivator.CreateInstance (null, null);\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, null", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        fr = Locale.objects.get(code='fr')\n        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 2)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs)\n        self.assertIn(self", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            if \"url\" in cmd.parameters:\n                userstate.url = cmd.parameters[\"url\"]\n            if \"url_title\" in cmd.parameters:\n                userstate.url_title = cmd.parameters[\"url_title\"]\n            if \"url_description\" in cmd.parameters:\n                userstate", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "        PlayerGroup group = player.getPlayerGroup2();\n        if (group!= null) {\n            group.onEvent(new ChangeLeaderEvent(group, player));\n        }\n    }\n    public static void changeLeader(Player player, Player newLeader) {\n        PlayerGroup group = player.getPlayerGroup2();\n        if (group!= null", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        if colsz is None:\n            colsz = [0] * len(self.cols)\n        if align == \"<\":\n            align = \"left\"\n        elif align == \">\":\n            align = \"right\"\n        elif align == \"^\":\n            align = \"center\"\n        if squash_c:\n            for c in", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "        column, tree_model, tree_iter = self._setup_column(1, True)\n        tree_model.append(self._create_store_map(1, True, 15, 2))\n        column._update_cell_based_on_data(None, column.quantity_renderer, tree_model, tree_iter)\n        self.assertEqual(\"22\",", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    } while (parent instanceof GridColumn);\n\tparent.setBean(column);\n\treturn EVAL_PAGE;\n    }\n    @Override\n    public int doEndTag() throws PageException {\n\treturn EVAL_PAGE;\n    }\n}\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "                if (element.Attributes[\"Dialog\"]!= null) {\n                    Dialog = new DialogEntry();\n                    Dialog.LoadXML(element.Attributes[\"Dialog\"].InnerText);\n                }\n                Perception = Convert.ToByte(element.Attributes[\"Perception\"].InnerText);\n                Respawn = Convert.ToBoolean(element.Attributes[\"Respawn\"].InnerText);\n                Remains =", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                        m_key[i] = new ExodusActivation();\n\t\t\t\t\telse if ( m_Peerless == PeerlessList.MelisandeTrammel || m_Peerless == PeerlessList.MelisandeFelucca )\n\t\t\t\t\t\tm_key[i] = new MelisandeActivation();\n\t\t\t\t\telse if ( m_P", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans.length == 0)\n\t\t\treturn coll;\nNext line of code:\n\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection build", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "                new Version(1, new int[]{6, 18}, new ECB(1, 10), new ECB(1, 12), new ECB(1, 14), new ECB(1, 16)),\n                new Version(2, new int[]{6, 22}, new ECB(2", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pbKey2 = kdf.DeriveKey(p, pbMsg);\n\t\t\tif(!MemUtil.ArraysEqual(pbKey2, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon2-1\");\n\t\t\t// ======================================================\n\t\t\t// From the official Argon2 1.3 reference", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the cost.\n\t * @param manaToSend How much mana is to be sent.\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# A sample logging configuration. The only tangible logging\n# performed by this configuration is to send an email to\n# the site admins on every HTTP 500 error when DEBUG=False.\n# See http://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING =", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Adds the current state of the Lights frame to the end of the output queue\n\t\t///", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage!= null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList!= null))\n                return false", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "            dc.index = p.readInt();\n            dc.chId = p.readInt();\n            dc.number = p.readString();\n            dc.numberPresentation = p.readInt();\n            dc.uusInfo = p.readInt();\n            dc.isMultiparty = p.readInt()!= 0;\n            dc.isHold = p.readInt()!= 0;\n", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomainSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(\n\t\t\t\t\t\tMetadataEnumType.DOCUMENT)) {\n\t\t\t\t\tfor (Licence licence : availableLicences) {\n\t\t\t\t\t\tif (licence.isDomain", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                int index = y * xSizeP + x;\n                newVertices[index] = new Vector3(x, y, 0);\n                newVertices[index] = new Vector3(x, y, 0);\n               ", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\nNext line of code:\n\t\t\tint testInt3 = rand.nextInt(5000);\nNext line of code:\n\t\t\tint testInt4 = rand.nextInt(5000);\nNext line of code:\n\t\t\tint testInt5 = rand.nextInt(5000);\nNext", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void setSelectionAndNextOccurrence(final String text, final boolean caseSensitive)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "            out.writeBoolean(false);\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeInt(found.objectId);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n    private void logging2(String msg) {\n        System.out.println(msg);\n    }\n    private static class RemoteRef {\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                        16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        0, 0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPARENCY_NONE, 0);\n                pixel_x += 2;\n            }\n            /**\n             *", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                       .Distance(position.To2D()) <= spell.RealRadius)\n                                {\n                                    result.Add(minion);\n                                }\n                            }\n                            break;\n                        case CollisionableObjects.YasuoWall:\n                            if (position.Distance(_yasuoWallCastedPos) <= spell.RealRadius)\n                            {\n                                result.Add(ObjectManager.Get", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        if (x.equals(y)) return true;\n        if (graph.isAdjacentTo(x, y)) return true;\n        for (Node z : graph.getAdjacentNodes(x)) {\n            if (existsInducingPathInto(y, z, graph)) return true;\n        }\n        return false;\n    }\n    public", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    if (pop[i] is PlaceBase)\n                        plcs.Push(pop[i] as PlaceBase);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (!super.matches(other)) {\n            return false;\n        }\n        if (this.attachmentId == null) {\n            if (other.attachmentId!= null) {\n                return false;\n            }\n        } else if (!this.attachmentId.equals(other.attachmentId)) {\n            return false;\n        }\n        if (this", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                        Mobile mobile = mobiles[i];\n                        if (mobile.Deleted || mobile.IsDead ||!SpellHelper.ValidIndirectTarget(mobile, m_Item) ||!mobile.CanBeHarmful(m_Item.From, false))\n                            continue;\n                        if (mobile == m_Item.From)\n                            continue;\n                        if (", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.Remove(History.Keys.First());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (message)\n\t\t\t{\n\t\t\t\tInvokeUserMessage(this, user, msg);\n\t\t\t}\n\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId) {\n    return mock.getAvailCompoIds(sClientSpaceId);\n  }\n  @Override\n  public String[]", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog.show(mActivity.getFragmentManager(), BrowserActivity.TAG_DIALOG);\n                    return true;\n                case R.id.actionrename:\n                    for (", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "        this.close();\n    }\n    public void close() {\n        if (this.channel!= null && this.channel.isOpen()) {\n            this.channel.close();\n        }\n    }\n    public boolean g() {\n        return this.channel!= null && this.channel.isOpen();\n    }\n    public void a(EnumProtocol enumprotocol) {\n       ", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                ll = z_index_dict[z_key][1]\n                z_value = z_dict[z_key][per]\n                z_err_value = z_dict[z_key][per+1]\n                z_arr[p_index, kk, ll] = z_value\n                z_err_arr[p_index, kk, ll] = z_err", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "      return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany, recipients.size());\n  }\n}\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "            env[\"PATH\"] = \":\".join(extra_path) + \":\" + env[\"PATH\"]\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib) + \":\" + env[\"LD_LIBRARY_PATH\"]\n        if not self.config[\"tools\"][\"system-rust\"]:\n            env[\"RUST", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "            for path, test_items in iteritems(type_paths):\n                for test in test_items:\n                    source_files[test] = source_files.get(test, [])\n                    source_files[test].append(tests_root)\n                    tests[test].add(test_cls(path, test))\n        for test, tests_root in iteritems(source_files):\n", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "        if (compiledScript!= null) {\n            compiledScript = null;\n        }\n    }\n    private static Binding createBindingForCompilation() {\n        final Binding binding = new Binding();\n        binding.setVariable(\"org.freeplane\", new Object() {\n            public String toString() {\n                return \"Freeplane\";\n            }\n", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "            throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n            throw new NotSupportedException();\n        }\n        ///", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "      for i in range(energy.shape[0]):\n        grad_E = energy[i]*grad_var+energy_var*grad[i,0]+grad_means\n        grad_E = np.reshape(grad_E, (-1,3))\n        transformed_grad.append(grad_E)   \n      transformed_grad = np.asarray(transformed_grad)\n", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(!caseInsensitive )\nNext line of code:\n\t\treturn this.toString().compareTo(obj.toString());\nNext line of code:\n\t\tif (obj instanceof ims.ocrr.vo.OrderInvestigationRefVo)\n\t\t{\n\t\t\tims.ocrr.vo.OrderInvestigationRefVo compareObj = (ims.ocrr.vo.Order", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertEquals(found.size(), 3);\n        assertEquals(found.get(0).getTags(), asList(\"search-tag1\", \"search-tag2\"));\n        assertEquals(found.get(1).getTags(), asList(\"search-tag1\", \"search-tag2\"));\n        assertEquals(found.get(2).getTags(), asList", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter p = new ParameterImpl();\n        p.setParameterCode(\"DEPTH\");\n        p.setParameterValue(depth);\n        crawlParameters.add(p);\n        //EXCLUSION REGEXP\n        p = new ParameterImpl();\n        p.setParameterCode(\"EXCLUSION_REGEXP\");\n        p.setParameterValue(exclusionRegexp);\n        crawlParameters.add", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// $capture\n\t\t\tif (candidate.IsPlaceholder())\n\t\t\t\treturn MatchesPlaceholder(candidate, pattern, ref captures, out unmatchedAttrs);\n\t\t\t// $capture1, $capture2,...\n\t\t\tif (candidate.IsCall(S.Dollar))\n\t\t\t{\n\t\t\t\tif (candidate.Args.Count!= pattern.Args.Count)\n", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                    if (colisionList.Count() == 0)\n                    {\n                        extendedWillHit++;\n                        extendedFarmLocation = objAiBase.Position;\n                    }\n                }\n                if (extendedWillHit >= zedMenu.GetParamSlider(\"koreanzed.laneclearmenu.useq\"))\n                {\n                    actionQueue", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t// Context Menu\nNext line of code:\n\t\t// Context Menu\nNext line of code:\n\t\t// Context Menu\nNext line of code:\n\t\t// Context Menu\nNext line of code:\n\t\t// Context Menu\nNext line of code:\n\t\t// Context Menu\nNext line of", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "    return re.search(pattern, frozen_output) is not None\ndef python_prereqs_installation():\n    \"\"\"\n    Installs Python prerequisites\n    \"\"\"\n    if no_prereq_install():\n        print(NO_PREREQ_MESSAGE)\n        return\n    prereq_cache(\"Python prereqs\", PYTHON_REQ_FILES, python", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'm2o': self.env.ref('test_testing_utilities.m2o')\n        })\n        f = Form(r)\n        with self.assertRaises(AssertionError):\n            f.m2o = self.env['test_testing_utilities.m2o'].create({'name': 'a'})\n        with self.assertRaises(Ass", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    assert Sum(x, (x, 1, 2)).doit() == 3\n    assert Sum(x, (x, 1, 2)).doit() == 3\n    assert Sum(x, (x, 1, 2)).doit() == 3\n   ", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                this._notifyAction = action;\n                this._newItemList = ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._notifyAction = action;\n                this._oldItemList = ArrayList.ReadOnly(changedItems);\n                this._oldStartingIndex =", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "            streamWriter.close();\n            writer.close();\n            Document testDocument = parser.parse(new InputSource(new StringReader(writer.toString())));\n            objectToXMLDocumentTest(testDocument);\n        }\n    }\n    public void testObjectToXMLStreamWriterWithNamespaceResolver() throws Exception {\n        if(XML_OUTPUT_FACTORY!= null && staxResult", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                    c.Campus = Token2Csv();\n                    break;\n                case Param.Campus2:\n                    c.Campus2 = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.Campus3 = Token2Csv();\n                    break;\n                case Param.Campus4:\n                    c.Campus4", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Entry: {0}\", i);\nConsole.WriteLine (\"Width: {0}\", ide.width);\nConsole.WriteLine (\"Height: {0}\", ide.height);\nConsole.WriteLine (\"ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"Reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"Planes: {", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "                if (l.status & Label.JSR) {\n                    // this block is a JSR block, it must be added to the\n                    // successor of the RET block\n                    l.status &= ~Label.JSR;\n                    l.successor = JSR.successor;\n                    JSR.successor = l;\n               ", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(StackObject.To", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.select(PageSupport.getPosition(position));\n\t\t}\n\t\tprivate Position getPosition() {\nNext line of code:\n\t\t\treturn PageSupport.getPosition(comboLabelPosition.getSelectionIndex());\n\t\t}\n\t\t@Override\n\t\tpublic void widgetSelected(SelectionEvent e) {\n\t\t\tif(e.getSource() == comboLabelPosition", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\",currImageValue\n        self.assertEqual( int(currImageValue), int(lastImageValue)-1, \"Failed to decrement the", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "        K = pow(self.f, self.x, self.p)\n        # okay, build up the hash H of\n        # (V_C || V_S || I_C || I_S || K_S || min || n || max || p || g || e || f || K)  # noqa\n        hm", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "            tree.setFolder(overallNodeName, connectionData, disableTreeSelection);\n        }\n    }\n    /**\n     * Sets the node.\n     *\n     * @param node the node\n     * @param connection the connection\n     */\n    public void setNode(DatabaseNode node, DatabaseConnection connection) {\n        node", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                           (self.employee_id, from_date, to_date, code))\n                return self.cr.fetchone()[0] or 0.0\n        class InputOutput(BrowsableObject):\n\"\"\"            \"\"\"a class that will be used into the python code, mainly for usability purposes\"\"\"\n\"\"\"            def sum(self, code, from", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        dlnmdlnm = np.log(cosmo.Delta_m(1.0)) - np.log(cosmo.Delta_m(marr[0]))\n        dlnmdlnm = np.log(cosmo.Delta_m(marr[-1])) - np.log(cosmo.Delta_m(marr[-2]))\n", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        d.width = font.getSize() * 2;\n        d.height = font.getSize();\n        return d;\n    }\n    /**\n     * @see org.tigris.gef.presentation.FigText#setBounds(int, int, int, int)\n     */\n    @Override\n    public void setBounds(int x", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "        self.cal_p2(phi=phi,ref_p=None,flag=flag)\n        #print self.p2\n        #print self.edge\n        #print self.p2\n        #print self.face\n        #print self.T\n        #print self.r\n        #print self.p3\n        #", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.WindowState = window.WindowState == WindowState.Normal? WindowState.Minimized : WindowState.Normal;\n\t\t}\n\t\tprivate void ShowOrHideOrders(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tShowOrHide(_ordersWindow);\n\t\t}\n\t\tprivate void ShowOrHideStopOrders(object sender,", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                    for n in xrange(params[0]['nbins'])]\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params[1]['bins'] = [\n                    params[", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            contact.onMoreMessagesLoaded(query);\n        }\n    }\n    public void onMoreMessagesLoaded(Query query) {\n        synchronized (queries) {\n            if (queries.contains(query)) {\n                return;\n            }\n            queries.add(query);\n        }\n        queryMessageArchiveManagement(query.connection, query);\n    }\n    public void", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "                im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\", rgb2g)\n            else:\n                im", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++) {\n\t\t\t\trsp = tag.readRecord(sfi + i);\n\t\t\t\tif (!rsp.isOkey())\n\t\t\t\t\tbreak;\n\t\t\t\taddLog24(rsp, ret);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void parse", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "\"\"\"\nclass Parser(Parser):\n    TAGS = {\n        0: \"header\",\n        1: \"file\",\n        2: \"recovery\",\n        5: \"new_recovery\"\n    }\n    def createFields(self):\n        for tag, name in self.TAGS.items():\n            yield Block(self,", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t}\n\t}\n\t/**\n\t * This is the TL1 command that is sent to the remote NE. It is the\n\t * responsibility of the user to create the command and send it to the TL1\n\t * engine.\n\t * \n\t * @param command\n\t *          the command to", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "        path = environ['PATH_INFO']\n        for path_prefix, app in self.apps:\n            if path.startswith(path_prefix):\n                return app(environ, start_response)\n        return self.not_found(environ, start_response)\n    def not_found(self, environ, start_response):\n        \"\"\"Return 404 Not Found response", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model( Data( sys.argv[ 1 ] ), sys.argv[ 2 ] )\n\t\tmodel.trainmodel()\n\t\tmodel.score()\n\t\tprint model.score()\n\t\tprint model.network\n\t\tprint model.topological\n\t\tprint model.probs\n\t\tprint model.bicvalues\n\t\tprint model.sizevalues", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (Utility.Random(100) < chance)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n        public static void Initialize()\n        {\n            _SpecialTable = new Dictionary<Type, CraftSystem>();\n            _SpecialTable[typeof(ClockworkLeggings)]", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "            if displayname is None:\n                displayname = entry_name\n            if desc is None:\n                desc = \"\"\n            entries[entry_value] = (entry_name, displayname, desc)\n        return typemaps.create_user_enum(type_name, entries)\n    #---------------------------------------------------------------------------\n    def AU_to_bytes(self,", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                    pnlServices.Visible = false;\n                    pnlDone.Visible = true;\n                    pnlDone.Text = \"No FOG Services Found\";\n                }\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (isConfigFilePresent())\n            {\n                if (isConfigured())\n                {\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n       ", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                for(int tri = 0; tri < this.trianglesUsed[textureHash]; tri++)\n                {\n                    if(this.trianglesAllocated[textureHash] < 3)\n                    {\n                        this.trianglesAllocated[textureHash] += 3;\n                        this.vertexArray[textureHash]", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    if header not in exposedHeaders:\n        exposedHeaders = '{}, {}'.format(exposedHeaders, header)\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n    return response\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                    Driver driver = idlePool.Peek();\n                    if (driver.IdleSince.AddSeconds(settings.IdleConnectionTimeout) > now)\n                        break;\n                    oldDrivers.Add(idlePool.Dequeue());\n                }\n            }\n            return oldDrivers;\n        }\n        /// <summary>\n        /// This method is called when the pool", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "        var = [var, var]\n    # List-like format.\n    else:\n        var = list(var)\n    # Ensure that all elements are numbers.\n    for i, val in enumerate(var):\n        if not isinstance(val, (int, float)):\n            raise ValueError('All elements of {0} must be", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(MOBS)\nQUEST.addKillRate(MOBS, DROP_RATE)\nQUEST.addKillRate(MOBS, DROP_RATE)\nQUEST.addKillRate(MOBS, DROP_RATE)\nQUEST.addKillRate", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - ((double)num * 60 * 60 + (double)num1 * 60)) * 100);\n\t\t\t\t\tstring[] str = new string[] { num.ToString(\"D2", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "            _sCurProgram = this;\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = GL.CreateProgram();\n            VertexDataSize = 0;\n            VertexDataStride = 0;\n           ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "        for x in [self.metabolites, self.genes, self.reactions]:\n            for y in x:\n                y._model = self\n    def trim(self, remove_orphans=True, remove_genes=True, remove_reactions=True):\n        \"\"\"Remove genes and reactions that are not used in the model.\n", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\treturn coll;\n\t}\n\tpublic static ims.clinicaladmin.vo.TumourGroupListVoCollection buildFromBeanCollection(ims.clinicaladmin.vo.beans.TumourGroupListVoBean[] beans)\n\t{\n\t\tTumourGroupListVoCollection coll = new TumourGroupListVoCollection();\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\t\th = lines[selectedLine].height;\n\t\t\t\tfoundBottom = false;\n\t\t\t\twhile(!foundBottom){\n\t\t\t\t\tfoundBottom = true;\n\t\t\t\t\tfor(int i=0; i!=lines.length; i++){\n\t\t\t\t\t\tif(lines[i].contains(cx, cy+h)", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "            new LayoutAnimationController(set, 0.25f);\n        mListView.setLayoutAnimation(controller);\n    }\n    \n    /**\n     * Fill the list with the given list of items.\n     * @param items\n     */\n    private void fillList(List<WeaveBookmarkItem> items) {\n    \t//Log", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "                if (PartnerInterestRow.IsFieldKeyNull())\n                {\n                    continue;\n                }\n                if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.SetFieldKey", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tchar[] \tstructure \t= protein.getStructure();\n\t\t\n\t\tif (pssm.getLength()!= structure.length)\n\t\t{\n\t\t\tErrorUtils.printError(HelixIndexer.class, \"PSSM and structure annotation length do not match for \" + protein.getName(), null);\n\t\t\t\n\t\t\treturn;\n\t\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
