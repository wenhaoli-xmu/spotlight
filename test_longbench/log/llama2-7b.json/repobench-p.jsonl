{"pred": "   private final transient KademliaRoutingTable routingTable;\n    private final transient JKademliaRoutingTable routingTableJ;\n\n    private final transient KademliaId nodeId;\n    private final transient InetAddress inetAddress;\n    private", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       // Spectaculum-Core filtersNext line of code:\n        // Spectaculum-Core filtersNext line of code:\n        // Spectaculum-Core filtersNext line of code:\n        // Spectaculum-Core filtersNext line of code:\n        // Spectac", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Encryption):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, x, y):\n        x = RotateLeft(x ^", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n\n    private boolean mParameterListVisible;\n\n    private boolean mParameterListToggleEnabled;\n\n    private boolean mParameterListToggleChecked;\n\n    private boolean mParameterListToggleCheckedByUser;\n\n    private boolean", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "       commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessageCommand.class, MessageEvent::from", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    */\n    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * ‰ªªÂä°Êï∞ÊçÆÁÆ°ÁêÜÂô®\n     */\n    private TaskMetaInfoManager taskMetaInfoManager;\n\n    /**\n     * ‰ªªÂä°Êï∞ÊçÆ\n     */\n    private TaskData", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tif (args.dryRun()) {\n\t\t\t\tintegrityCheck.dryRun(args.vaultLocation(), args.vaultName(), passphrase);\n\t\t\t} else {\n\t\t\t\tintegrityCheck.check(args.vaultLocation", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           //save device to storage\n            DebugManager.getInstance().saveDevice(deviceToBeRegistered);\n\n            //send notification to the user\n            if (classToNotify != null) {\n                classToNotify.sendNotification(deviceId);\n            }\n\n            return true", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new SignRequest(SERVER_CHALLENGE_SIGN,\n        APP_ID_SIGN, SESSION_ID),", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "           if self.acctA == None:\n                self.acctA = self.uaA.getAccounting()\n            if self.acctO == None:\n                self.acctO = self.uaA.getAccounting()\n            if self.acctA !=", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def __init__(self, uri):\n        self.uri = uri\n\n\nclass FlagList(Signature):\nNext line of code:\n\n    def __init__(self, flags):\n        self.flags = flags\n\n\nclass ByteFlag(Signature):\nNext line of", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "           if cstr_node.binary:\n              cstr_node.lhs = convert_ast_constraint(children[0])\n              cstr_node.rhs = convert_ast_constraint(children[1])\n            else:\n              cstr_node.lhs = convert", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setDataAndType(Uri.parse(url), \"video/mp4\");\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       String message = mLocationSwitch.isChecked() ? \"I'm here!\" : \"I'm not here!\";\n        String email = mEmail.getText().toString();\n        String name = mName.getText().toString();\n        String avatarUrl = mAvatarUrl.", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       # pylint: disable=no-self-use\n        self.assertRaises(TypeError, InterLayerPipeline,\n                          [InputLayer(1, 1),\n                           ConvLayer(1, 1, 1, 1, 1, ", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   def __new__(cls, *args, **kwargs):\n        init_called = True\n        return super().__new__(cls)\n\n    class User(BaseModel):\n        pass\n\n    user = User(id=\"user_id\", email=\"user@domain.com\")\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "\n@method(infix('?', bp=32))\ndef select_optional_map_operator(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for context.item in context.inner_focus_select(self", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "   private static final ButterKnife.Action<View> HIDE = (view, index) -> view.setVisibility(View.GONE);\n    private static final ButterKnife.Action<View> SHOW = (view, index) -> view.setVisibility(View", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               writeResponse(SUCCESS, correlationId);\n\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n               ", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       wild.create_task_tuple(wild.create_report())\n\n        await wild_report.add_reaction('üëç')\n        await wild_report.add_reaction('üëé')\n\n        await wild_report.add_reaction('", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   if c['vocab_text']:\n        vocab_text = Vocabulary(c['vocab_text'])\n    else:\n        vocab_text = None\n\n    # Load data\n    if c['data']:\n        data = SNL", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.coeffs == (50. /", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n               ", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "       assert self.redlock.acquire()\n        assert self.redlock.locked()\n        assert self.redlock.acquire()\n        assert self.redlock.locked()\n        assert self.redlock.acquire()\n        assert self.redlock.locked()\n       ", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "       return ConeSettings(self._get_func(\"FMOD_Sound_Get3DConeSettings\"), \"Sound\")\n\n    def get_channel_count(self):\n        \"\"\"Get the number of channels in the sound.\n\n        :rtype: int\n        \"\"\"\n       ", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "   def __init__(self, calg, data):\n        self._calg = calg\n        self._data = data\n\n    def __len__(self):\n        return len(self._data)\n\n    def __copy__(self):\n        return CompressedData(self._", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "       #cellIntensity = numpy.array([img[centers[i,0], centers[i,1], centers[i,2]] for i in range(centers.shape[0])]);\n        #cellIntensity = numpy.array([img[centers[", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           if (accuracy == Accuracy.PERFECT) {\n                Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 200f);\n            } else if (accuracy == Accuracy.GREAT) {\n                As", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           while (transactionIterator.hasNext()) {\r\n\r\n                Transaction t = transactionIterator.next();\r\n\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n\r\n            }\r\n\r\n            if (start", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               if (query.queryType == RequestType.SELECT) {//classifyColumnsToDimAndMetrics\n                    Either<String, Tuple2<List<String>, List<String>>> dataSourceDescRes = coordinator.aboutDataSource(stmnt.dataSource, reqHeaders);", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "       ),\n        )\n        )\n\n        message.segments.append(\n            HNVSD1(\n                data=SegmentSequence(\n                    PinTanDummyEncryptionMechanism.encrypt(\n                        message.segments[0].header.type", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           if (env.combExpMaxRegNum == 1) {\n                                env.combExpMaxRegNum = 0;\n                            } else {\n                                env.combExpMaxRegNum--;\n                            }\n                        }\n                    }\n                }\n", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "   url(r'^pipeline-config$', login_required(PipelineConfigurationView.as_view(), login_url=LOGIN_URL),\n        name=\"ajax-pipeline-config\"),\n    url(r'^pipeline-config-details$', login_required(", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tpublic ResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData) {\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = tags;\n\t\t", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self._storage_type = storage_type\n        return self\n\n\n#\n# DB OPEN\n#\n# Opens a database in the OrientDB Server instance.\n#\n# Request: (database-name:string) <-- before 1.0rc1 this was empty (", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   @Override\n    public <$Argument3> AndGivenThreeArguments<$SystemUnderTest, $Argument, $Argument2, $Argument3> andArgument(\n            CheckedSupplier<$Argument3> givenStep) {\n        preparation.recordGivenStep(givenStep", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "   try {\n      return process.await(expectedExitCodes);\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(this, e);\n    }\n  }\n\n  /**\n   * Waits for a process to terminate and returns the result of", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (null == textColor) {\n\t\t\ttextColor = Themer.getColor(contextRef.get(), R.attr.colorPrimary);\n\t\t}\n\t}\n\t\n\tprivate void setFontStyle() {Next line of code:\n\n\t\tif (", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = XmlUtil.parseMessage(xml);\n\t\tif (message == null) {\n\t\t\treturn \"error\";\n\t\t}\n\n\t\tif (message.getMsgType() == Message.TYPE_TEXT) {\n\t\t\tString text = message.", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   # Ëé∑ÂèñËøêË°åÊó∂ÁâπÂæÅ\n    app_info = get_app_info(file_path)\n    if app_info is None:\n        return\n    \n    # Ëé∑ÂèñËøêË°åÊó∂ÁâπÂæÅ\n    app_info = get_app", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @channel_checks.raid_report_enabled()\n    async def cmd_raidcity(self, ctx, *city_name):\n        \"\"\"\n        **!raid-city city-name** - sets the city for the raid party\n\n        \"\"\"\n\n        city = await", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertTrue(date_string_to_date(\"25/11/2015\"))\n        self.assertTrue(date_string_to_date(\"11/12/2012\"))\n        self.assertTrue(date_string_to_", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file, self.work_dir)\n        config_actor.start()\n        gevent.sleep(1)\n\n        # startup session database\n        database_actor = DatabaseActor(999, delay_seconds=2)\n", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           if (TextUtil.isNull(picture.getComment_author())) {\n                                holder.tv_author.setVisibility(View.GONE);\n                            } else {\n                                holder.tv_author.setVisibility(View.VISIBLE);\n                            }\n", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\twrite_tm_filetype(\"pFWER_%s\" % opts.tmifile[0],\n\t\t\t\t\t\t\timage_array = positive_data,\n\t\t\t\t\t\t\tmasking_array = masking_array,", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               OAuthActivity.class,\n                OAuthFragment.class,\n                OAuthActivity.OAuthFragment.OAuthFragmentAdapter.class,\n                OAuthActivity.OAuthFragment.OAuthFragmentAdapter.class,\n                OAuthActivity.OAuthFragment.OAuthFragmentAdapter.", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "       self.update_hlen()\n\n    def parse(self, packet):\n        super(SignatureV4, self).parse(packet)\n        self.sigtype = SignatureType(packet[0])\n        del packet[0]\n\n        self.pubalg =", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   else:\n        # XSD typed selection\n        for item in context.iter_self():\n            if context.item is not None and context.is_principal_node_kind():\n                if isinstance(item, (TypedAttribute, TypedElement)):\n                    yield item", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter,\n      'downed_nodes': Counter,\n      'downed_nodes_size': Counter,\n      'downed_nodes_count': Counter,\n      'downed_nodes_count_since_last_reset': Counter", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send_message_with_protocol(protocol, 'foo bar baz')\n        protocol.send_string.assert_called_once_with('11:foo bar baz,')\n\n    def test_send_message_with_protocol_bad_length(self):\n", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       // ... perform application logic with database ...\n\n        // each execution\n        qe = ds.getQueryExecutions().get(1);\n        assertTrue(qe.isSuccess());\n        assertTrue(qe.isBatch());\n        assertTrue(\"is statement\", qe instanceof", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionCount() {\n        StatementExecution se = new StatementExecution();", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               log.info(\"Sending ADR MAC Command\")\n                command = self._createLinkADRRequest(device)\n                yield self._sendMACCommand(device.deveui, command)\n                continue\n            \n            # Send the ADR message\n            yield self._sendAD", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                   ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# IEEE 802.15.4 PHY format\n#\n# These are from IEEE 802.15.4 spec\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       if (chat == null) {\n            chat = DatabaseManager.INSTANCE.getChat(getActivity());\n        }\n        if (chat == null) {\n            Log.e(getClass().getSimpleName(), \"Chat not found\");\n            return;\n        }\n", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\nNext line of code:\n\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "           jd = self.img_handle.current_frame\n\n        else:\n\n            jd = self.current_frame\n\n        # Add reference time to JSON file\n        json_dict['time'] = jd\n\n\n        # Add the picks to the JSON file\n", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       if (mPublicRoomsListList == null) {\n            mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n        }\n\n        if (mPublicRoomsListList.size() == 0) {\n            mPublicRoomsListList.add", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "       self.guild_metadata = GlobalConfigCache.by_config_name['guild-metadata']\n        self.bingo_card_manager = BingoCardManager(self.guild_metadata)\n        self.bingo_card_writer = BingoCardWriter(self.", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(target_sequences,\n                                       phylogeny,\n                                       args.threads)\n\n    #initializing scaffolder\n    scfldr.set_debug_dir(os.path.join(debug_", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "               }\n                Log.e(MYTAG, \"‰ΩøÁî®MiPushÊé®ÈÄÅ\");\n                break;\n            case \"HuaweiPush\":\n                Log.e(MYTAG, \"‰ΩøÁî®HuaweiPushÊé®ÈÄÅ\");\n                break;\n            default:", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<QueryExp>(QUERY_EXP));\n        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new Marsh", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   /**\n     * Creates new form PersonalVulnsWindow\n     */\n    public PersonalVulnsWindow() {\n        initComponents();\n        initVulnTree();\n        initVulnTreeListeners();\n        initVulnTreeRenderer();\n        initV", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   private void createMetricChartPanel(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, false);\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.getType() == PacketType.EVENT) {\n            if (packet.getSubType() == PacketType.DISCONNECT) {\n                client.getNamespace().onDisconnect(client);\n            } else if (packet.getSub", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       lMS.addTrack(new VideoTrack(appRtcClient.videoConstraints()));\n      }\n      videoSource = new VideoSource(lMS.nativeStream);\n      videoSource.start();\n      logAndToast(\"Local video source created.\");\n    }\n\n    {\n", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_BACKOFF_MS, -1L);\n            contentValues.put(JobStorage.COLUMN_BACKOFF_POLICY, JobRequest.BACKOFF_POLICY_NONE);\n            contentValues.", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   # create a new journal file\n    journal = DiskJournal(basedir, system_data_path)\n\n    # create a new publisher\n    publisher = Publisher(journal.subscribers)\n\n    # create a new snapshot timer\n    snapshot_timer = S", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "   def determine_executable(self, desktop_file):\n        if self.config.debug_gdb:\n            return 'gdb'\n        elif self.config.debug_valgrind:\n            return 'valgrind'\n        elif self.config.debug_gdb", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   List<Board> results = new ArrayList<>();\n    for (int i = 0; i < SectionNames.length; i++) {\n      results.addAll(LoadFavoriteBoardsInSection(SectionURLs[i]));\n    }\n\n    SaveBoardListToCache", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       if (savedInstanceState == null) {\n            users = DatabaseManager.INSTANCE.getUserDAO().getAll();\n            mAdapter = new UserAdapter(getActivity(), R.layout.user_item, users);\n            mAdapter.notifyDataSetChanged();\n            searchSpinner =", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tif (model.getTestBase() != null) {\r\n\t\tif (model.getTestBase().getTestMethod() != null) {\r\n\t\t\tif (model.getTestBase().getTestMethod().getMethod() != null) {\r\n\t\t\t\tif (model.", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       self.assertTrue(SimulatorDataMatcher().match(fdm_data))\n\n    def test_received_simulator_data_datagram_with_different_time(self):\nNext line of code:\n\n        self.assertTrue(SimulatorDataMatcher", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           if (httpMessage.getRes().getResponse() == null) {\n                BurpCallbacks.getInstance().print(\"setResponse(): Response NULL\");\n                return;\n            }\n            if (httpMessage.getRes().getResponse().length() == 0) {\n                Burp", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACTIVE\", None, ready),", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   def _write_header(self, fileobj, header):\n        fileobj.seek(0)\n        self._write_chunk(fileobj, header)\n\n    def _write_chunk(self, fileobj, chunk):\n        fileobj.seek(chunk.offset", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r\n\r\n      return null;\r\n    }\r\n\r\n    visitProxOp(new VisitOrd3(n), query);\r\n\r\n    return null;\r\n  }\r\n\r", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new InvertTransformation(),\n                    new MaskTransformation(0xffffff00),\n                    new MosaicTransformation(),\n                    new PixelateTransformation(),\n                   ", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "           self._header[0] = self._header[0] - 1\n            self._header[1] = self._header[1] - 1\n\n            self._header[0] = self._header[0] - 1\n            self._header[1] = self", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n\n    params = {\n        'FromSettlementDate': args.fromdate or date.today() - timedelta(days=1),\n        'ToSettlementDate': args.todate or args", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\t// get the album\n\t\t\t\tGalleryAlbum album = client.getApi().getAlbum( proxy.getAlbumId() );\n\t\t\t\titem = new GalleryItem( album );\n\t\t\t} else {\n\t\t\t\t// get the", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   assert dump_key(user, user_key) == user_key\n\n\ndef test_extract_key(engine):\n    user = User(id=\"foo\")\n    user_key = {\"id\": {\"S\": \"foo\"}}\nNext line of code:\n\n    assert", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new Percentage(100),\n        new Status(Status.SUCCESS),\n        new Fraction(100, 100),\n        new StaticString(\"Hello World\"),\n        new Spinner(SPINNER_SLASHES),\n        new TaskName", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static Form form(Object resource) {\n\t\treturn new Form(resource);\n\t}\nNext line of code:\n\n\tpublic static Form form(Object resource, Object... fields) {\n\t\treturn new Form(resource);\n\t}\nNext line of code:\n\n", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "           event = Event(e)\n            events.append(event)\n\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    def", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n    ", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           if (mWallpaper != null) {\r\n                WallpaperPropertiesLoaderTask task = new WallpaperPropertiesLoaderTask(this);\r\n                task.execute(mWallpaper);\r\n            }\r\n        } else if (id == R.id.menu_settings) {\r\n            Intent intent", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private final static Logger logger = Logger\r\n      .getLogger(QsolToQueryVisitor.class.getPackage().getName());\r\n\r\n  private final static Logger logger = Logger\r\n      .getLogger(QsolToQueryVisitor.class.getPackage().getName());\r\n", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif args.maf is None:\n\t\t\targs.maf=0.0\n\n\t\tif args.maf<0.0:\n\t\t\traise ValueError('MAF must be positive')\n\n\t\tif args.maf>1.0:", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n        # If the beginning time is not found, try to read it from the file\n        if self.beginning_datetime is None:\n            self.beginning_datetime = filenameToDatetime(", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   # 3. background\n    bg = objs.Sphere(np.array([0, 0, 0]), 0.0001)\n    bg.set_zpos(0.0)\n    bg.set_zscale(0.0001", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tif (FOOD_MODIFIER_ENABLED)\n\t\t{\n\t\t\tFoodModifier.onGlobalFormulaChanged();\n\t\t\tFoodHistory.get(player).onHistoryTypeChanged();\n\t\t\tFoodGroupRegistry.clear();\n", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       comments = post.comments.all()\n        comments_count = len(comments)\n        comments_count_html = '<span class=\"comments-count\">{}</span>'.format(comments_count)\n        comments_count_html = bleach.clean(comments_count_html", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tISelection selection = selectionLayer.getSelection();\n\t\t\t\t\t\tif (selection instanceof StructuredSelection) {\n\t\t\t\t\t\t\tStructuredSelection structuredSelection = (StructuredSelection) selection;\n\t\t\t\t\t\t\tif (", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = []\n\n    def __bytearray__(self):\n        _bytes = super(RevocationKey, self).__bytearray__()\n        _bytes +=", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "       if is_processing_instruction_node(item):\n            yield item\n\n\n@method(function('comment', nargs=(0, 1), label='kind test'))\ndef select_comment_kind_test(self, context=None):\n    if context is None:\n", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "def getAS2PuffleString(client, puffles):\n    puffles_as2_str = list()\n    for puffle in puffles:\n        p_id, p_type, p_sub_type, p_name, p_adopt, p", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "def make_image_1():\n    P = objs.PlatonicSpheresCollection(pos, rad)\n    H = psfs.AnisotropicGaussian()\n    I = ilms.BarnesStreakLegPoly2P1D(npts", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "           with tqdm.tqdm(total=len(jobs)) as pbar:\n                for job in jobs:\n                    compile_info_function = compile_information_func(job.log_path)\n                    for compile_info in compile_info_function(job", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   # Recompute the rotation wrt horizon\n    platepar.rotation_wrt_horizon = rotationWrtHorizon(platepar.RA_d, platepar.dec_d, platepar.JD, \\\n        platepar.lat, platepar.lon)\n\n", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_EXACT, true);\n        contentValues.put(JobStorage.COLUMN_EXTRAS, new Persistable", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       if (chatRem == null) {\n            chatRem = getActivity().findViewById(R.id.chat_remove);\n        }\n\n        if (mDelAdapter == null) {\n            mDelAdapter = new UserAdapter(getActivity(), R.layout.list_item_user", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['indicator', 'target', 'area', 'code']\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(lookup_expr='iexact')\n    description = django_filters.Char", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           if (fab.getVisibility() == GONE) {\n                uiHandler.postDelayed(showButton, 600);\n            }\n        }\n    }\n\n    @UiThread\n    protected void setBottomInfo() {\n        if (produces.size()", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "               return transport.connect(context, manager, true);\n            }\n        }).then(new ExecuteOn<Channel>(context) {\n            @Override\n            protected void doExecute(final Channel channel) throws Exception {\n                LOGGER.debug(\"Reconnecting channel...\");\n\n               ", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               new RegistrationParam(success, email, password, message));\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/ui/fragments/LoginFragment.java\npublic class LoginFragment extends Fragment implements Login", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final Map<RoadPoint, AtomicInteger> visitedRoadPoints;\n    private final Map<RoadPoint, AtomicInteger> visitedRoadPoints2;\n    private final Map<RoadPoint, AtomicInteger> visitedRoadPoints3;\n    private final Map<", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private String[] urls;\n    private String[] urls2;\n    private String[] urls3;\n    private String[] urls4;\n    private String[] urls5;\n    private String[] urls6;\n    private String[] urls7;\n    private String[] urls8;\n   ", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " assert isinstance(args.gps_sv[0].getMessage(), ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "       for i in range(len(fills)):\n            if len(fills[i]) == 0:\n                continue\n\n            if len(self.style.fill_rule) == 0:\n                self.svg.n_fills += 1\n                self.svg", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"[\")) {\n\t\t\t\t\tString[] parts = data.split(\"\\\\[\");\n\t\t\t\t\tif (parts.length == 2) {\n\t\t\t\t\t\ta = new AppData(parts[0],", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt = self.beg_vect.alt\n        self.end_alt = self.end_vect.alt\n\n        # Compute the great circle\n        self.gc = greatCircle(self.beg_alt, self.end_alt)\n\n", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(ctx.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void enterFunction(@NotNull Function", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "   /**\n     * Called when the visitor first reaches a node with children.\n     * @return Determines whether the node's children will be visited.\n     */\n    boolean enter(SimpleNode node);\n\n    /**\n     * Called when the visitor reaches a leaf node.", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "   private SpecificationGenerator specificationGenerator;\n    private CodeGeneratorFactory codeGeneratorFactory;\n    private CodeGenerator codeGenerator;\n\n    private final AtomicReference<Swagger> runtimeSwagger = new AtomicReference<>();\n\n    private final AtomicReference<String> baseGenerationPackage = new", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class).to(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class).to(GerritHttpAuthDataProvider.class);\n        bind(GerritPushExtension.class).to(G", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (snapshots.get(i).getName().startsWith(zxid)) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            if (", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "       if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.has_unassigned_split]\n        elif filter_type is FilterType.Income:\n            entries = [e for e in entries if any(getattr(s", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   ]\n    def __init__(self, name, data, parent=None, **kwargs):\n        Layer.__init__(self, name, data, parent, **kwargs)\n        self.Seg_dict = Seg_dict\n        self.Seg_dict_name = name\n        self", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   # 2. coverslip\n    coverslip = np.zeros(POS.shape[0], dtype=np.float32)\n    coverslip[0:10, 0:10] = 1.0\n    coverslip[10:20, ", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "       result, index = apply_fast_and(left.values, right.values,\n                                         left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request.getPackageName() == null) {\r\n                        mError = Extras.Error.ICON_REQUEST_PACKAGE_NULL;\r\n                        return false;\r\n                    }\r", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "       instance\n        ) and not isinstance(instance, bool)\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        return issubclass(subclass, int) or issubclass", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "       return SearchMenuPage()\n        if pageletId == 'RubricPage':\n            return RubricPage(self._createSearchHistory(context))\n        if pageletId == 'RubricsPage':\n            return RubricsPage(self._createSearchHistory(context))\n       ", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "               if pattern.datafile is None:\n                    errmsg += \"Pattern %s has no data file.\\n\"%pattern.name\n                    rvalue = False\n                    break\n\n            # 2.2 data file type\n            if pattern.datafile is not None:\n", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'type')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n\n   ", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(basePathDDI2FO, preprocessors, postprocessors);\n\t\t\n\t\tFile inputFile = new File(basePathDDI2FO + \"/input/input.md\");\n\t\tFile outputFile = new File(", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Send the email\n                        new UserLoginTask(activity, user, this.deviceProduct, this.getClass().getName())\n                                .execute(emailTmp);\n                    }\n                });\n\n        // \"Cancel\" button to cancel the operation\n        alert.set", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^$', RedirectView.as_view(permanent=True, url='/packages')),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()),\n        name=\"package-new\"),\n    url(", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, FourBandsBitEncoder)\n  assert encoder.bandIndexes[0] == NormalRateConfig.", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict[\"tierList\"][0][\"entries\"]\n\n\ndef run_read(fn):\n    \"\"\"\n    Mock read function and return the first tier's entry list\n\n    tg.save() mutates the textgrid's data, so the entry", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "   def __init__(self, use_mp: bool = True, **kwargs) -> None:\n        super().__init__(**kwargs)\n        self.use_mp = use_mp\n        self.error_dict = {}\n        self.return_queue = Queue()\n       ", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "           dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NFS')\n        dataset =", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   boolean isSet(FixTag tag, boolean validate);\n    Validity isValid(FixTag tag, boolean validate);\nNext line of code:\n\n    boolean isSet(FixTag tag);\n    Validity isValid(FixTag tag);\nNext line of code:", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "           yield self._create_chunk(bounds)\n\n        return\n\n    def _create_chunk(self, bounds):\n        \"\"\"Create a chunk.\"\"\"\n        start = bounds[0]\n        end = bounds[1]\n        n_samples = end - start\n        return data", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAndQueryNode.Operator operator, Void param) {\n\t\t\treturn new ExpansionResult();\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAndQueryNode.Operator", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate Validator validator;\n\t\n\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate File outputFolder;\n\t\n\tprivate File inputFolder;\n\t\n\tprivate File inputFile;\n\t\n\tprivate File outputFile;\n\t\n\tprivate File outputFolderForValidation", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));Next line of code:\n\n        registry.put((byte) (SEND_NOTIFICATION ^ R", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       //if the content is not empty, save it\n                        if (content.length() > 0) {\n                            FileSaver fileSaver = new FileSaver(content, lp.getLanguage(), \"twitter\", url, \"twitter\");\n                            fileSaver.", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "       elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n            lines.extend(self._render_descriptor_helper(descriptor.value, indent + INDENT_CHARS))\n\n        elif isinstance", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "       help=\"network latency time [millisecond].\n        the minimum latency time is 1 ms.\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 10ms\n        \"\"\".format(\n            \", \".join([\", \".join", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       if self.contacts.exists():\n            return self.contacts\n        else:\n            return self.contacts = Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_contact(self):\n        if self.contacts.exists():", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   PCollection<KV<GCPProject, GCPResourceState>> liveStates =\n        pipeline.apply(\"Read live states\",\n            Read.from(new LiveProjectSource(org)));\n\n    // Tag the state objects to indicate they're from a live repo and not checked-", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.rule = ContentSimhashSampling()\n        self.engine = Engine(self.rule)\n        self.engine.mock.reset_mock()\n\n    def test_similar_path_generator_returns_similar_paths(self):\n        self.assertEqual(self.", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(Condition(AndCondition(\n            conditions_for(*operations[1:], column=column))))\n    elif \"or\" in operations:\n        conditions.append(Condition(OrCondition(\n            conditions_for(*operations[1:], column=column))))\n   ", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       assert get_square_idx(1, 1) == 1\n        assert get_square_idx(1, 2) == 2\n        assert get_square_idx(1, 3) == 3\n        assert get_square_idx(1, 4)", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final ICompilationUnit testClass2;\n\n    private final ICompilationUnit testClass3;\n\n    private final ICompilationUnit testClass4;\n\n    private final ICompilationUnit testClass5;\n\n    private final ICompilationUnit testClass6;\n", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": " def AsyncProcessRequest(self, sink_stack, msg, stream, headers):\n    \"\"\"Process a request message, stream, and headers.\n\n    Args:\n      sink_stack - The SinkStack representing the processing state of the message.\n                   Implementors should push their", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate boolean debugSpatial = false;\nNext line of code:\n\n\tprivate boolean debugSpatialOrdering = false;\nNext line of code:\n\n\tprivate boolean debugSpatialEntities = false;\nNext line of code:\n\n\tprivate boolean debugSpat", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "   var files = docerConf.files().orElseGet(\n        () -> {\n          var files = new StableList<Path>();\n          var modulePath = docerConf.moduleDependencyPath();\n          var moduleSourcePath = docerConf.moduleSourcePath();\n          var", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "       return RespostaSAT.analisar(retorno)\n\n    def consultar_numero_sessao(self):\n        \"\"\"Sobrep√µe :meth:`~satcfe.base.FuncoesSAT.consultar_numero_s", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPEAKER_ACTION_", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   if gopts.event_log:\n      git_trace2_event_log.Write(gopts.event_log)\n\n    if gopts.git_trace2_event_log:\n      git_trace2_event_log.Write(gopts.git_trace", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Provides @Singleton\n    SharedPreferences provideSharedPreferences() {\n        return PreferenceManager.getDefaultSharedPreferences(app);\n    }\n\n    @Provides @Singleton\n    Gson provideGson() { return new Gson(); }\n\n    @Pro", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(4));\n    }\n\n    @Test\n    public void testTotalCountForOutOfIndex() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution()); ", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand();\n    }\n\n    /**\n     * {@", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       // create verifiers\n        VerifierProperty schemaNameVerifier = new ValidSchemaNameVerifierImpl();\n        VerifierProperty localFilesExistVerifier = new LocalFilesExistVerifierImpl();\n        VerifierProperty remoteFilesExistVerifier = new RemoteFilesExistVerifier", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           // Show an error message and clear the form.\n            showProgress(false);\n            passwordView.setError(getString(R.string.error_incorrect_password));\n            focusView = passwordView;\n        }\n    }\n\n    public void onPostLoginCancel() {", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    * @throws DrupalFetchException if there's an error during the request.\n     */\n    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (inv", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       self.chum.sendMessage(text)\n        self.chumopen = False\n        self.textInput.clear()\n        self.textInput.setFocus()\n        self.textInput.returnPressed.connect(self.sentMessage)\n        self.textArea.clear", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/login', LogInHandler),\n            (r'/problem', ProblemHandler),\n            (r'/status', StatusHandler),\n            (r'/submit", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explan", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "       }\n\n        return informationCriterion.getSelectionChunk();\n\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade.ProtTestFacade#getAlignment(java.", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(ty1, ty2, e1, e2)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a simply typed argument into a Fst.\n    \n    Arguments:\n    - `expr`: an expression", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(BatteryStatusIndicator batteryStatusIndicator);\n\n    void inject(EventBus eventBus);\n\n    void inject(Resources resources);\n\n    void inject(AudioManager audioManager);\n\n    void inject(ConfigurationContentProvider configurationContentProvider);\n\n    void inject(Audio", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   public ChartCategoryFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_chart_", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Mock(settings={})\n    response.content_type = None\n    with pytest.raises(ResponseValidationError) as excinfo:\n        handle_response(response)\n    assert excinfo.value.status_code == 500\n\n\ndef test_", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t/**\n\t * \n\t * @param ctx\n\t * @throws IOException\n\t */\n\t@Override\n\tpublic void exitAddOrDeleteEdge(AddOrDeleteEdgeCommandContext ctx) throws IOException {\n\t\tSDocumentGraph graph = atomicalConsole.getDocumentGraph();\n", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "           except TextGridParseError as e:\n                self.return_dict[\"parse_error_files\"].append(e)\n\n            except Exception as e:\n                self.return_dict[\"other_error_files\"].append(e)\n\n            self.finished_processing.stop", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "   api.add_resource(\n        PressureSensorResource,\n        \"/aircraft/sensors/pressure_sensor\",\n        resource_class_args=(sensors.pitot_tube,)\n    )\n\n    api.add_resource(\n        Pitot", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueKtsFPS())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n        self", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   '--ns, --namespace NAMESPACE Filter the result set by namespace',\n    '--ns, --namespace NAMESPACE Filter the result set by namespace',\n    '--ns, --namespace NAMESPACE Filter the result set by namespace',\n    '--ns, --namespace NAMESPACE", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t@RequestMapping(value = \"/manage/index\", method = RequestMethod.GET)\n\tpublic ModelAndView index(ModelAndView modelAndView) {\n\t\tmodelAndView.setViewName(\"manage/index\");\n\t\treturn modelAndView;\n\t}\n", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           AWSLambdaException awsLambdaException = (AWSLambdaException) t;\n                            if(awsLambdaException.getErrorCode() == null) {\n                                throw new RuntimeException(awsLambdaException.getMessage(), t);\n                            }\n                            logError(awsLambdaException.", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                      join_keyword=u'\\u0915\\u0940')\n\n    def test_full_e2e_english_signup_and_cancel_flow_with_pregnant_signup(self):\n        logging.info(\"running e", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequesterForPassive;\n  protected LocationUpdateRequester locationUpdateRequesterForActive;\n\n  protected FragmentManager fragmentManager;\n  protected FragmentTransaction fragmentTransaction;\n  protected PlaceListFragment place", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   if not adb:\n        adb = getADB()\n        if not adb:\n            raise Exception(\"[ERROR] Unable to get ADB\")\n    if not adb:\n        raise Exception(\"[ERROR] Unable to get ADB\")\n    if not adb:", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Bit):\n    constructorList = [\n        Int('RRC_version', Pt=0, Type='uint8', Repr='hex'),\n        Int('RRC_msg_type', Pt=0, Type='uint8', Repr='hex'),", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tadjacency = CreateAdjSet(v_lh, v_rh, faces_lh, faces_rh, opts.vertexdist[0], opts.vertextriangularmesh[0])\n\t\t\tadjacency = CreateAdjSet(v_", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "     result.append(\" = \");\n    } else {\n      result.append(\" \").append(exp.getOperator()).append(\" \");\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result.append(CLOSE_BRACK", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "     cacheService.storeCacheList(new CacheList(listName));\n      loadListsFromDBService.start();\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final Optional<String> listNameOption = Dialogs", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   def __init__(self, CallName='', ReprName='', \\\r\n                 T=0, V=0, Trans=False, Dict=None):\r\n    def __init__(self, CallName='', ReprName='', \\\r\n                 T=0, V", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       TimeEntryOvertimeAggregation.class\n                )\n        );\n\n        timeEntriesTable.getColumn(\"overtime\").setCaption(messageBundle.getMessage(\"timeentry.overtime\"));\n\n        timeEntriesTable.getColumn(\"overtime\").setCaption", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "           (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n            (True, PubKeyAlg", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "                                   ExpInfo.BOARDTYPE, self._expansion_num)\n\n    @property\n    def board_type_name(self):\n        return ul.get_board_type_name(self._board_num)\n\n    @property\n    def board_type_", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "       self.key_size = read_u16le(f)\n\n        self.objects = {}\n        for i in range(count):\n            key = read_u16le(f)\n            self.objects[key] = self.decode_object(f)\n", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "           user = create_inactive_user(email, full_name)\n            user.is_active = False\n            user.save()\n\n            # Send email to invite user\n            subject = _('Invitation to join %(site_name)s') % {\n                '", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       draft = await self.fetch_draft_for_channel(ctx.guild.id, ctx.channel.id)\n        if draft:\n            await Utilities.message(ctx.channel, f\"Draft {draft} has been dumped to the form.\")\n\n\n", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           ex = Hitbtc('bccbtc')\n        elif name == \"%s_ETH_BTC\" % constant.EX_HITBITC:\n            ex = Hitbtc('ethbtc')\n        elif name == \"%s_ETH_USD\" % constant", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is None:\n                pass  # '.' wildcard doesn'", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   DummySherpaServer server = new DummySherpaServer(10);\n    try {\n      Solutions solutions = helpExecuteQuery(server, 10);\n      Iterator<Map<String,RDFNode>> iter = solutions.iterator();\n      Assert.assert", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tresult.setDefaultField(getFileAttribute(basedir,", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   //deviceMiToken = MiPushClient.getInstance().getToken();\n                    //Log.e(MYTAG, \"‰ΩøÁî®MiPushÊé®ÈÄÅ\");\n                    break;\n                }\n                else {\n                    //Log.e(MYTAG, \"M", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n    private final KademliaRoutingTable routingTable;\n\n    private final int udpPort;\n\n    private final KadStatistician statistician;\n\n    private final int maxConcurrentMessagesTransiting;\n\n    private final", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "           tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "   @app.route('/api/words/<token>/<word>')\n    @as_json\n    def words_api_route(token, word):\n        return words_api(wordnik_api, token, word)\n\n\ndef create_app():\n    app =", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\t@Inject\n\tpublic TaskListByJQLActivity(Context context) {\n\t\tsuper(context);\n\t\tctx = context;\n\t}\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\t", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertIsInstance(handle, HANDLE)\n\n    def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False)\nNext line of code:\n\n        self.assertRaises", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.vms = new SpringVms(restTemplate, root);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n    }\n\n   ", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return parserHolder.parse(currentAnnotatedElement.get());\n                })\n                .collect(Collectors.toList());\n        LOG.debug(\"Parsed paths: {}\", parsedPaths);\n        Collection<Element> annotatedElements = roundEnv.getElementsAnnot", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   protected CrawlerRequest nextRequest;\n\n    protected CrawlerRequest currentRequest;\n\n    protected CrawlerRequest lastRequest;\n\n    protected CrawlerRequest firstRequest;\n\n    protected CrawlerRequest lastRequest;\n\n    protected CrawlerRequest firstRequest;", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           ActionManager actionManager = ActionManager.getInstance();\n            actionPopupGroup.getActions().addAll(actionManager.getAction(\"MongoEditorPopupGroup.addKey\"));\n            actionPopupGroup.getActions().addAll(actionManager.getAction(\"MongoEditorPopup", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiButton addChannel;\n    private GuiButton removeChannel;\n    private GuiButton editChannel;\n    private GuiButton saveChannel;\n    private GuiButton cancelChannel;\n    private GuiButton closeChannel;\n\n    private GuiButton addServer;\n", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_BACK_CODE:\n                return new BtnBackLight();\n            case ConstantStr.FUNC_CLEAR_BACKGROUND_CODE:\n                return new BtnClearBackground", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       Section section = toolkit.createSection(form.getForm(), Section.TITLE_BAR);\r\n        section.setText(Messages.configurationEditorActionAddWebModule);\r\n        section.setExpanded(true);\r\n        section.setBackground(toolkit.getColor(FormTool", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       self.assertEqual(\"string\", Type.Types.string.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\nNext line of code:\n\n        self.assertEqual(\"string\", Type.Types.string.get_sample())", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "       new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStartTimeCommand.class, StartEvent::fromCommand, this::queueEvent));\n        commandProcessor.", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datas", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'api_sig': settings.FLICKR_KEY[1],\n        'perms': 'write',\n        'frob': frob,\n    }\n\n   ", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\tfcpMessage = fcpClient.put(messageStream, insertKey);\n\t\t\t\t\tmessageInsert.log(this, 1, TimeUnit.HOURS, \"Time spent inserting message\");\n\t\t\t\t} catch(FCPException e) {", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       if bytecode[k][2] == OP_POP:\n          cond_stack_size -= 1\n          k -= 1\n        elif bytecode[k][2] == OP_POP_JUMP_IF_FALSE:\n          cond_stack_size -= ", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   //VIEWS\n    private ScrollView scrollView;\n    private TextView tvCreditCardName;\n    private TextView tvCreditCardType;\n    private TextView tvCreditCardLimit;\n    private TextView tvCreditCardExpiration;\n    private TextView tvCreditCardClos", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\n\nclass LanguageForm(forms.ModelForm):\n    class Meta:\n        model = Language\n        fields = ('lang", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\tprivate void openCustomList(CustomList customList) {\n\t\tif (customList != null)\n\t\t\tstartActivity(CustomListActivity.start(this, customList));\n\t}\n\n\tprivate void openBarcodeSearchResults(BarcodeSearchResultsAdapter adapter) {\n", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   def parse(self, ping_message: Sequence[str]) -> PingStats:\n        \"\"\"\n        Parse ping command output.\n\n        Args:\n            ping_message (Sequence[str]):\n                Ping command output.\n\n        Returns:\n            PingStats", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           //trying to get chat with chatId from server\r\n            try {\r\n                chat = MessageTask.getInstance().getChat(chatId);\r\n                // Assuming that the messages are sorted by id\r\n                latestMessageOnDisplay = new AtomicLong(0);\r\n            } catch (", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic Cubeshaft() {\n\t\tthis.level = new Level();\n\t\tthis.player = new Player(this.level);\n\t\tthis.renderer = new Renderer(this);\n\t\tthis.clouds = new Cloud(this.level);\n\t\tthis", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n        assertThat(qe, is(statementOrBatchStatement()));\n        assertThat(qe, is(prepared()));\n        assertThat(qe, is(batchP", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     if (serverRawResponse != null) {\n        log(\"server response received, cancelling the upload \" + getFileNames() + \" \" + serverRawResponse, null);\n        successful = true;\n        uploadFinished();\n      }\n    }\n  }\n\n  private", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points_by_ids = merge_greedily(assembly_points_by_sources, acyclic=args.c_merging_acyclic, min_cw=args.c_merging_cw_min)\n    logger.info(\"Mer", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "       PitotTubeResource,\n        \"/aircraft/sensors/pitot_tube\",\n        resource_class_args=(sensors.pitot_tube,)\n    )\n\n    api.add_resource(\n        PressureSensorResource,\n        \"/aircraft", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "                       fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.isInstalled()) {\n\t\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\t\tgetString(R.string.delete_levels),\n\t\t\t\t\t\t\t\tgetString(R.string.delete_levels", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private final WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /**\n     * Constructs a new calendar.\n     */\n    public Calendar() {\n        this(null);\n    }\n\n    /**\n     * Constructs a new calendar.\n     *\n", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root, tasks, deployments);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n   ", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   VerifierProvider rsaLocator = (signerId, keyId) -> Lists.newArrayList(new RSAPublicKeyVerifier(keyId));\n\n    locators = new VerifierProviders(hmacLocator, rsaLocator);\n    locatorsFromR", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n\n    protected int mItemViewLayoutId;\n    protected int mItemViewType;\n    protected int mItemViewTypeCount", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "               } catch (FilesNotFoundException e) {\n                    // Expected\n                }\n            }\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} \t\t\n\t}\n\t\n\t", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                   trackHistoryEntry = new TrackHistoryEntry(liveInfo.getTitle(), currentTime);\n                    dao.insert(trackHistoryEntry);\n                }\n            });\n        }\n    }\n\n    @Override\n    public void foundRadioStation(DataRadioStation station) {\n", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "   @SuppressLint(\"NewApi\")\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       ((CandyBarMainActivity) mContext).selectPosition(3);\r\n                        break;\r\n                    case WALLPAPERS:\r\n                        ((CandyBarMainActivity) mContext).selectPosition(4);\r\n                        break;\r\n                    case OTHER_APPS", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = Default.ENCODING\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = None\n\n    convert_configs = load_convert_config(\n        logger, ctx.obj[Context.CONVERT_CONFIG], subcommand=\"url\"", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "   def items(self, **kwargs):\n        \"\"\" Returns a list of :class:`~plexapi.media.Playable` objects.\n\n            Parameters:\n                **kwargs (dict): Keyword arguments to pass to :meth:`~plexapi.media.Playable.items`.", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(TypeError, _environment_to_string, 42)\n\n    def test_type_check_for_environment_value(self):\nNext line of code:\n\n        self.assertRaises(TypeError, _environment_to_", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   if gopts.interactive:\n      cmd.interactive = True\n\n    if gopts.editor:\n      cmd.editor = gopts.editor\n\n    if gopts.pager:\n      pager = RunPager(gopts.pager)\n      cmd.p", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // ÊâßË°å‰ªªÂä°ÂºÇÂ∏∏\n                if (taskData.getResultData() == null) {\n                    taskData.setResultData(new TaskDataException(\"‰ªªÂä°ÊâßË°åÂ§±Ë¥•\"));\n                    taskData.setState(TaskData.STATE", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       self.assertIsNone(r.match(None, None))\n\n    @async_test()\n    async def test_reject_404(self):\n        r = RejectStatusCode()\nNext line of code:\n\n        self.assertIsNone(r.", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //Áî®Êà∑ÁöÑÊÄßÂà´\n        stuSex = split[2];\n        //Áî®Êà∑ÁöÑÂπ¥ÈæÑ\n        stuAge = split[3];\n        //Áî®Êà∑ÁöÑÁè≠Á∫ß\n        stuClass = split[4];\n       ", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "       self.__device = device\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__export_path = export_path\n        self.__is_parse_filter_id = is", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "       except AttributeError:\n            pass\n        else:\n            state[\"inventory\"] = inv\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            loc = obj.location     #", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": " public Query visit(BasicSearchType n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t}\n\n\t/**\n\t * Generates the parameters of the survey.\n\t * @param surveyName : the name of the survey\n\t * @return the ENOParameters\n\t * @throws EnoParametersException :", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       try {\r\n\r\n            if (dataDir == null) {\r\n                dataDir = DataDirHelper.getDataDir();\r\n            }\r\n\r\n            if (dataLogDir == null) {\r\n                dataLogDir = DataDirHelper.getDataLogDir();\r\n            }\r\n\r", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "       except UncertainTimeError:\n            log.error(\"We couldn't get a good estimate of the accuracy of your clock.  Switzerland isn't going to work!\")\n            sys.exit(1)\n\n    def get_from_queue(self):\n        # Wait til there", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       cursorById.close();\n\n        // Test the basic content provider query\n        Cursor movieCursor = mContext.getContentResolver().query(\n                MovieColumns.CONTENT_URI,\n                null,\n                null,\n                null,\n                null\n        );\n\n        //", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertEqual(etree_iter_nodes(self.elem),\n                         etree_iter_strings(self.elem))\n\n        self.assertEqual(etree_iter_nodes(self.elem),\n                         etree_iter_strings(self.elem))", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.activity_mapview);\r\n\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(false);\r\n\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "       return ConfigCommandProcessor(self.switch_configuration.vlan_configuration, self.switch_configuration.vrf_configuration, self.switch_configuration.interface_configuration))\n\n    def get_netconf_protocol(self):\n        return None\n\n    @staticmethod\n    def", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n\n  assert isinstance(config, NormalRateConfig", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def consultar_numero_sessao(self, numero_sessao):\n        \"\"\"Sobrep√µe :meth:`~satcfe.", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   # TODO: model exclusions handling\n    # TODO: better reference state handling\n    mod_srf = Model(dbf, comps, phase_name, parameters={'GHSER'+c.upper(): 0 for c in comps})\n    mod_srf.models =", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_condition\",\n                     resource_class_args", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   def get_word_frequency(self) -> Dict[str, float]:\n        \"\"\"\n        Calculate the relative word frequency across all the texts in the corpus\n\n        Returns\n        -------\n        dict[str, float]\n            Dictionary of words and their relative frequencies\n", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   private static final String EXTRA_CAMERA_FACING = \"cameraFacing\";\n    private static final String EXTRA_CAMERA_FACING_BACK = \"cameraFacingBack\";\n    private static final String EXTRA_CAMER", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\tpublic final StringUtil string = new StringUtil();\n\n\tprivate Util() {\n\t}\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       return mongoManager.getServerConfigurations();\n    }\n\n    private MongoTree createTree() {\n        return new MongoTree(mongoManager, notifier);\n    }\n\n    private void installActions() {\n        ActionGroup actionGroup = new DefaultActionGroup();\n       ", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1\n\t\tH1(Css.H1, \"TodoMVC\");\n\n\t\t// Input\n\t\tInput(Css.Input, \"Add Todo\");\n\n\t\t// Footer\n\t\tFooter(Css.Footer, \"", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               if(output != null) {\n                    Intent intent = new Intent(CameraActivity.this, CropActivity.class);\n                    intent.putExtra(CropActivity.EXTRA_BITMAP, output);\n                    startActivityForResult(intent, CROP_IMAGE_REQUEST", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "   @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        mActivity = (MainActivity) getActivity();\n\n        mRecyclerView = (RecyclerView) getView().findViewById(R.id.song_list);\n", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   search = Search(\n        engine=engine, model=model, index=index, key=key, filter=None, projection=\"all\", consistent=True, forward=False)\n    search.mode = \"query\"\n    search.prepare()\n    search.iterate()\n\n   ", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String gcActivityName)", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "       # Setup the API\n        self.api.add_resource(RestApi, '/api/v' + str(self.version))\n\n    def getProperties(self, app):\n        \"\"\"Returns the properties for an application\"\"\"\n        return yield app.getProperties()\n", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "       self._tree_view = tree_view\n        self._settings_ini = settings_ini\n        self._project_settings_dialog = ProjectSettingsDialog(settings_ini, directory, self._tree_view, self._df_manager, **kwargs)\n        self._project_settings_", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "   parser.parser.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"round trip packet reordering rate [%%]. the valid range is from {:d}\n        to {:d}. (default=%", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final static Map<Channel, ChannelStatus> CHANNELS = Maps.newHashMap();\n\n    private final static Map<Channel, ChannelStatus> CHANNELS = Maps.newHashMap();\n\n    private final static Map<Channel, ChannelStatus> CHANNELS", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "       void onDateClick(Date date);\n\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface DateItemClickListener {\n        /**\n         * Triggered when a date was clicked\n         *\n         * @param date\n", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_db_type(self, db_type):\n        self._db_type = db_type\n        return self\n\n    def set_db_type(self, db_type):\n        self", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onPing(client);\n            break;\n        }\n\n        case CONNECT: {\n            client.getBaseClient().schedulePingTimeout();\n            Namespace namespace =", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ActionBarPullToRefresh actionBarPullTo", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\n\t\treturn new GenerationService(pipeline.getInFormat(), pipeline.getOutFormat(), preprocessors, postprocessors);\n\t}\n\n\tprivate PreProcessor[]", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        pipeline.apply(\"Read live data\", Read.from(new LiveProjectSource(org)));\n    // Convert live states to GCPResourceState objects.\n    PCollection<KV<GCP", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "   return MyModel\n\n\n@pytest.fixture\ndef model_with_backups(model):\n    \"\"\"Return a clean model with backups enabled\"\"\"\n    model.Meta.backups = {\"enabled\": True}\n    return model\n\n\n@pytest.fixture", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "               self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                           dim, vocab, lookup,\n                                                           cache=self._cache)\n            else:\n                raise NotImplementedError()", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n    }\n\n    public void start()\n    {\n        _rxChatListenerSockets.clear();\n        _rxChatSockets.clear();\n        _tx", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private int videoQuality;\n    private String videoPath;\n    private String videoPath2;\n    private String videoPath3;\n    private String videoPath4;\n    private String videoPath5;\n    private String videoPath6;\n    private String videoPath7;\n   ", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n\n    RotateOut(RotateOut.class),\n    Rotate", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "       return self.render_to_response(self.get_context_data(form=form))\n\n    def get_form_class(self):\n        if self.object:\n            return UserFormEdicion\n        else:\n            return UserFormCreacion\n\n    def get", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "   public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setColor(fog.getColor());\n        descriptor.setStart(fog.getStart());\n        descriptor.setEnd(fog.getEnd", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void close()\n\t{\n\t\tif(this.handle != null)\n\t\t{\n\t\t\tthis.handle.close();\n\t\t\tthis.handle = null;\n\t\t}\n\t}\n\t\n\tpublic void closeAllHandles()\n\t{", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n}\npackage com.rashwan.reactive_popular_movies.feature.actorDetails.actorMov", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tfinal Map<BenchmarkMethod, Integer> vals = benchmark\n\t\t\t\t\t.getNumberOfMethodsAndRuns();\n\t\t\treturn view.initProgressView(vals);\n\t\t} catch (final SocketViewException e) {\n\t\t\tthrow e", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   def get_context_data(self, **kwargs):\n        \"\"\"\n        Get Context Data\n        :param kwargs: dict\n        :return: dict\n        \"\"\"\n        context = super(ManagersMixin, self).get_context_data(**kwargs)\n        context", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Building a wrapper from the given city: \" + city);\n\t\t\treturn activateLoginIfRequested(createMostSuitableWrapper(\n\t\t\t\t\tcity.getDiscoveryUrl", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue creada con √©x", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self._cstr = root\n    else:\n      self._cstr = root.rhs\n\n    self._live = None\n\n  def __repr__(self):\n    return 'Constraint(%s)' % self.tree\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<MessageAction>        messageActionSupportHandler        = new ActionSupportHandler<MessageAction>(MessageAction.class", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\n    assert_array_equal", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('xs:double?', 'xs:string', 'xs:string?', 'xs:string')))\ndef evaluate_format_number_function(self,", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item is None:\n\t\t\t\treturn default_flags\n\t\t\telse:\n\t\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\tprint(str(e))\n", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       response = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        response = Hydrator(version2, versions, []).hydrate_object(object_dto, object2)\n        response = H", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "       PipeReader reader = new PipeReader(catBytes, clientConfig);\n        PipeBundle bundle = new PipeBundle(reader);\n        Pipe pipe = new Pipe(bundle);\n        PipeReader reader2 = new PipeReader(pipe);\n        PipeReader reader", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UN", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "       containsString(\"\\\"_source\\\":{\\\"@timestamp\\\":\\\"2019-03-27T10:00:00Z\\\",\\\"id\\\":\\\"1\\\",\\\"type\\\":\\\"csw\\\",\\\"title\\\":\\\"DAB-Records-CSW\\\",\\\"version\\\":", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "       }\n\n        if self._pkalg in _c:\n            self.pub = _c[self._pkalg]()\n\n        else:\n            self.pub = self._pkalg\n\n    @pkalg.register(str)\n    @pkalg.register(six", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\n\t", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = Schema.get(\n                            new ExtMap().mput(Schema.InvokeKeys.ENTITY, context.get(Schema.InvokeKeys.ENTITY))\n                            .mput(Schema.InvokeKeys.ENTITY_KEYS, context.get(Schema.Invoke", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new-user'),\n    url(r'^users/edit/(?P<user_id>[-\\w]+)/$", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           }\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"play_session_settings\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        if (stack != null) {\n           ", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_mentality_health);\n        initView();\n        initData();\n        initListener();\n    }\n\n    private void initView", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateBuffImg()\n        obj.updateBlockLabel()\n        obj.updateCommentLabel()\n        obj.updateSocketTags()\n        obj.updateBlockShape()\n        obj.updateBlockWidget()\n        obj.updateCollapseLabel()\n        obj.updateBlockLink", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "       d1 = Constant(d1, DP_WIDTH)\n        d2 = Constant(d2, DP_WIDTH)\n        d3 = Constant(d3, DP_WIDTH)\n\n        d1 = Constant(d1, DP_WIDTH)\n        d2", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformContext(Context context);\n\t}\n\t\n\tprivate static class FlattenTransformer implements NodeTransformer {\n\t\tpublic Node transformConstant(ConstantNode node) {\n\t\t\treturn node;\n\t\t}\n\t\tpublic Node transformMultiConst", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\t// Add the listeners\n\t\tgetServer().getPluginManager().registerEvents(playerListener, this);\n\t\tgetServer().getPluginManager().registerEvents(blockListener, this);\n\t\t\n\t\t// Register the commands\n\t\tgetCommand(\"ancientgates\").", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       String challenge = PacketParserUtils.parseChallenge(doc);\n        if (challenge != null) {\n            connection.sendChallenge(challenge);\n        }\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        String successData = doc.", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\nclass TestCipher(unittest.TestCase):\n    def setUp(self):\n        self.smt_search = _get_smart_print()\n        self.smt_search.set_verbose_level(VERBOSE_LEVEL)\n       ", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private SongListAdapter mAdapter;\n\n    private Toolbar mToolbar;\n\n    private FastScroller mFastScroller;\n\n    private boolean mShowToolbar;\n\n    private boolean mShowFastScroller;\n\n    private boolean mShowPlaylistPicker;", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           if (mImmersiveSensorNavigation != null) {\n                mImmersiveSensorNavigation.deactivate();\n                mImmersiveSensorNavigation.detach();\n                mImmersiveSensorNavigation = null;\n            }\n            if (mImmersive", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       Bit('ESM_Cause', ReprName='ESM Cause', Pt=4, BitLen=4,\n            Dict=ESMCause_dict, Repr='hum'),\n        Bit('ESM_Type', ReprName='ESM Type', Pt=", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           mSongListAdapter.notifyDataSetChanged();\n        }\n    };\n\n    private PlaylistPicker.OnPlaylistSelectedListener mOnPlaylistSelectedListener = new PlaylistPicker.OnPlaylistSelectedListener() {\n        @Override\n        public void onPlaylistSelected(Playlist", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "       self.log_debug(f\"Parsed {len(self.files)} files in {time.process_time() - begin_time} seconds\")\n        self.log_debug(f\"Parsed {len(self.files)} files in {time.process_time()", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\t@Override\n\t\tpublic boolean addRemittUser(UserDTO user) {\n\t\t\treturn UserManagement.addUser(user);\n\t\t}\n\n\t@POST\n\t@Path(\"listusers\")\n\t@Produces(\"application/json\")\n\t@Override", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   /**\n     * Returns information about the API plan belonging to the given API key.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-info\")\n    Observable<ApiInfo> apiInfo(@Query(Constants.KEY) String apiKey);\n", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   @Override public void visit(LogMessage message) {\n      if (message.getLevel() == LogLevel.INFO) {\n        vmOptionsBuilder.put(message.getKey(), message.getValue());\n      } else if (message.getLevel() == LogLevel.WARN) {", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n   ", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "   if is_undefined_length:\n        # If we read a SQ of length 0, we need to read the next item\n        #   to determine the length of the sequence\n        seq = read_sequence_item(fp, is_implicit_VR, is_little", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   CoordinatesWalker walker = new BaseCoordinatesWalker(document) {\n      @Override\n      protected void onParagraph(ParagraphCoordinates paragraphCoordinates) {\n        runProcessorsForParagraph(paragraphCoordinates.getParagraph(), proxyBuilder);\n      }", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   @Override\n    protected void loadDataFromNetwork() throws Exception {\n        if (searchCriteria.isEmpty()) {\n            return;\n        }\n        final SearchPatternsRequest request = new SearchPatternsRequest(getActivity(), prefs, searchCriteria, page, pageSize);\n", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   @flags.register(NotationDataFlags)\n    def flags_int(self, val):\n        self._flags = NotationDataFlags(val)\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self._flags =", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "       self.textInput.clear()\n        self.textInput.setFocus()\n        self.textInput.returnPressed.connect(self.sentMessage)\n\n    def addMessage(self, msg, isNew):\n        if isNew:\n            self.history.add(msg", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "def check_string(arg, type_, env):\n    arg = check(arg, env)\n    with env.errors.location(arg.location):\n        unify(arg.__type__, type_)\n    return arg\n\n\ndef check_number(arg, type_, env):", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   if features is None:\n        features = {}\n    else:\n        features = features.copy()\n\n    # Get the data\n    data_quantities = get_data_quantities(dbf, comps, phase_name, configuration, symmetry)\n    # Get the data", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "   private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        if (controller == null || componentController == null || adMedia == null) {\n            ExoPlayer", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            TemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type ==", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,\n                                      @Query(\"tag\") String tag,\n                                      @Query(\"limit\") @IntRange(from = 1, to = 50) Integer limit);\n\n", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       stream = Stream(model, self)\n        stream.heartbeat()\n        return stream\n\n    def transaction(self, *, mode=\"read_write\", **kwargs):\n        \"\"\"Create a :class:`~bloop.transaction.Transaction` that provides a consistent view of the data", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "       self.log.info(\"confusion matrix:\")\n        self.log.info(ConfusionMatrixFormatter(confusion_matrix))\n\n        self.log.info(\"accuracy: %2.2f%% (+/- %2.2f%%)\" % (100 *", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\t@Autowired\n\tprivate SubmissionServices submissionServices;\n\t@Autowired\n\tprivate ChallengeServices challengeServices;\n\t@Autowired\n\tprivate CategoryServices categoryServices;\n\t@Autowired\n\tprivate CountryServices countryServices;\n\t@Autowired\n\tprivate BannedIp", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def get_vertex_by_id(self, vertex_id):\n        record = self.client.command('SELECT FROM {}'.format(vertex_id))\n        return self.vertex_from_record(record[0]) if record else None\n\n    def get_", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "   @scoped_subgraph\n    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences as input, and is initialized with zero initial states.\n\n       ", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nall_product_slugs = []\nNext line of code:\n\nfor product in Product.objects.all():\n    all_product_slugs.append(", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorSegmentNode", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static Head head(Attribute... attributes) {\n\t\treturn new Head(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final AbstractTabularComponent.Alignment alignment = benchRes.getAlignment();\n        final AbstractTabularComponent.Alignment[] alignments = new AbstractTabularComponent.Alignment[] {\n                AbstractTabularComponent.Alignment.Left,\n                AbstractTabularComponent.Alignment.Center,\n                Abstract", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     for edge in visitor.edges:\n        if edge.kind == ControlFlow.E_LOOP:\n          return edge.target\n      return None\n\n    def get_parent_loop_index(node):\n      class BwdEdges(EdgeVisitor):\n        def __", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "   def _get_serialization_params(self, context: XPathSchemaContext) -> dict:\n        \"\"\"\n        Get the serialization parameters from the context.\n\n        :param context: the context.\n        :return: the serialization parameters.\n        \"\"\"\n        params = {}", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   else if (Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type)) {\n                        Log.e(LOG_TAG, \"Updating room member.\");\n                        RoomState roomState = JsonUtils.toRoomState(event.content", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\t// PostProcessing\n\t\n\tprivate NoopPostprocessor noopPostprocessor = new NoopPostprocessor();\n\t\n", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "   def OnGenerationEtatsPresenceMensuel(self, _):\n        site = self.GetSelectedSite()\n        annee = self.presence_choice.GetClientData(self.presence_choice.GetSelection())\n        DocumentDialog(self, Etats", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "           H += dot(crossmat(c - p), m * J_rot) + dot(I, crosstens(H_rot))\n        return H\n\n    def compute_angular_momentum_jacobian_hessian(self, p):\n        \"\"\"", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       if (queuedProjectResult == null) {\n            return;\n        }\n\n        if (queuedProjectResult.getQueuedProject() == null) {\n            return;\n        }\n\n        if (queuedProjectResult.getQueuedProject().getPattern() == null", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "               new VirtualAddCommand(),\n                new VirtualRemoveCommand(),\n                new VirtualSetCommand(),\n                new VirtualPayCommand(),\n                new VirtualEconCommand(),\n                new VirtualBalanceCommand(),\n                new PayCommand(),\n                new BalanceCommand(),\n                new EconCommand(),\n", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "       if prior['name'] == 'zero':\n            prior = {'name': 'uniform', 'low': 0.0, 'high': 1.0}\n        else:\n            _log.warning('Unknown prior: %s', prior['name'])\n        return {'prior':", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const(data=arg)\n    elif op == LOAD_REF:\n      return Ref(data=arg)\n  elif op == LOAD_NAME:\n    return Ref(data=arg)\n  elif op == LOAD_ATTR:\n    return Ref(data=", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final SpriteBatch batch;\n\tprivate final Physics physics;\n\tprivate final FringeLayer fringeLayer;\n\tprivate final ControllerPlayer player;\n\tprivate final Controller controller;\n\n\tprivate final PingPongEq eq;\n\n\tprivate final Config config;\n\n\t", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tview", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> authorWithBooks() {\n\t\tList<AuthorWithBooks> list = new ArrayList<>();\n\t\tAtomicInteger aInteger = new AtomicInteger();\n\t\tAtomicLong aLong = new AtomicLong();\n\t\tjdbcTemplate.", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass, SQLQuery rootQuery) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t\tthis.rootQuery = rootQuery;\n\t}\nNext line of code:\n\n\tpublic SQLBatch(", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       # Ëé∑ÂèñapkÂåÖÁöÑ‰ø°ÊÅØ\n        app_info = get_manifest(adb)\n        # Ëé∑ÂèñapkÂåÖÁöÑÊâßË°åÊó∂ÁâπÂæÅ\n        app_info = get_manifest_data(adb)\n        \n        # Ëé∑Âèñ", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "   /**\n     * Parse the specified input stream and return genotypes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genotypes\n     */\n    List<Genotype> parseGenotypes(InputStream", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n            ]),\n        ]),\n        {'inc': inc_type},\n    )\n\n\ndef test_get():\n    inc_type = Func[[IntType], IntType]\n    bar_type = Record[", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, prepared());\n        assertThat(pe, batchPrepared());\n        assertThat(pe, prepared", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\tdef on_properties_selection_changed(self, selection):\n\t\tif len(selection) == 1:\n\t\t\tif type(selection[0]) is Part:\n\t\t\t\tself._properties_dock.set_item(selection[0])\n\t\t\t", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return new ApiException(cause);\n            }\n        };\n        _config = config;\n    }\n\n    /**", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(Token.class, new DefaultTokenRenderer());\r\n\t\tregisterRenderer(String.class, new DefaultStringRenderer());\r\n\t\tregisterRenderer(Locale.class, new DefaultLocale", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSubQueryType getFacetSubQueryType(SearchConfig search, Element elt) {\n\t\t", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<ci_pipeline_uuid>[\\w\\-\\+]+)/(?P<release_slug>[\\w\\-\\+]+)$',\n        PipelineHistoryView.as_view(), name=\"pipeline-history\"),\n    url(r'^(?", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       if (bitmap != null) {\r\n                            intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        }\r\n\r\n                        mContext.startActivity(intent);\r\n                    } catch (Exception e) {\r\n                        LogUtil.e(Log", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   account = account_for_vimeo_id(access_token.token, person=request.user.person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            random_name = ''.join(", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                #   (use a test pixel sum)\n                #   (use a test pixel sum)\n                #   (use a test pixel sum)\n                #   (use a test pixel sum)\n               ", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   # Generate grid of values for parameters (force to be equal length)\n    grid = _gen_grid(options['param_free'], options['density'])\n\n    # Generate grid of values for parameters (force to be equal length)\n    grid = _gen_grid(options", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollDices();\n          }\n      }\n    });\n    addActor(rollBtn);\n\n    doubleBtn = new TextButton(\"Double\", ts);\n    doubleBtn.addListener(new ClickListener() {\n      @Override\n      public void clicked(", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "       self.assertEqual(etree_iter_paths(root, '/a/b1/c1'),\n                         [('/a/b1/c1', 'c1')])\n        self.assertEqual(etree_iter_paths(root, '/a/b1", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "   def test_detect_soft404(self):\n        self.engine.add_rule(self.rule)\n        self.engine.add_rule(RejectRequest())\n        self.engine.add_rule(RejectStatusCode())\n        self.engine.add", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n           ", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "   List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a profile.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a profile\n     */\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           // 5. Get the response\n            EtsiResponse resp = this.client.sendRequest(req);\n            \n            // 6. Print the response\n            System.out.println(\"Response:\");\n            System.out.println(resp.toString());\n            \n            // ", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Feature:\n\t\t\treturn get_icon(\"feature\")\n\t\telif type(obj) is Proformer:\n\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate TeamLeaders teamLeaders;\n\tprivate TeamLeadersResponse teamLeadersResponse;\n\tprivate TeamScheduleResponse teamScheduleResponse;\n\tprivate TeamRosterResponse teamRosterResponse;\n\tprivate TeamSummaryResponse teamSummaryResponse;\n\tprivate Game game", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       if (userFeedback.isValid()) {\n            FeedbackUseCase feedbackUseCase = FeedbackUseCase.Companion.getInstance();\n            feedbackUseCase.sendFeedback(userFeedback, new Function0<Unit>() {\n                @Override\n                public Unit invoke", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           if key not in table_index:\n                table_index[key] = {}\n            if key not in object_index:\n                object_index[key] = {}\n            object_index[key][obj.__class__] = {}\n            object_index[key][obj.__", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               art = draw_art(key['fingerprint'])\n                print('{0} {1} {2}'.format(fingerprint, description, art))\n            else:\n                print('{0} {1}'.format(fingerprint, description))\n\n    async", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "       return RespostaExtrairLogs.analisar(retorno)\n\n    def atualizar_configuracao_de_rede(self, configuracao):\n        \"\"\"Sobrep√µe :meth:`~satcfe.base.FuncoesS", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), '/')\n        document = ElementTree.parse(io.StringIO(xml_test))\n        self.assertEqual(node_document_uri(document), '/')\n        self.assertIs", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:Next line of code:\n\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n               ", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   def _trainer_initialization(self) -> None:\n        \"\"\"\n        Initialize the trainer\n\n        Raises\n        ------\n        :class:`~montreal_forced_aligner.exceptions.TrainerInitializationError`\n            If there is an error", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final OkHttpClient httpClient;\n\n    private final OAuth2URL oAuth2URL;\n\n    private final OAuth2Requester oAuth2Requester;\n\n    private final OAuth2URL oAuth2URL;\n\n    private final OAuth2Requester o", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n    private final Jobs jobs;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "   public void setAudiologistInfo(AudiologistInfo audiologistInfo)\n    {\n        synchronized (_lockObject)\n        {\n            if (_state.getConnectionState() != FittingConnectionState.NOT_CONNECTED)\n            {\n                throw new IllegalState", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand( this );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand( this );\n    }\n\n    /**\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        super.drawComponent(mouseX, mouseY);\n        if (this.isEnabled()) {\n            if (this.isHovered()) {\n                this.drawCenteredString(this", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       DATA[looptest], EPSILON, FiniteDifferenceSchemes.BACKWARD);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new blackCall(), Next line", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class,\n            AthenaGM.class\n    };\n\n\n    /**\n     * Load all modules, registering their event listeners\n     */\n    public static void load() {\n        for (Class moduleClass : moduleClasses) {\n            try {\n               ", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    */\n    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize the number of concurrent download.\n     * @return {@link DownloadQueue", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " @Override\n  public void init(MutableConfig config) {\n    config.derive(Metadata.class, rawValues(Metadata::parse));\n    config.derive(WatcherRegistry.class, rawValues(WatcherRegistry::new));\n  }\n\n  @Override\n ", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    * @throws JMingoParserException {@link JMingoParserException}\n     */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {\n        Validate.notNull(element, \"parseQuerySetConfigTag::element cannot be null", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "                       ExeSQL(sql)\n                        # print('update status done')\n                        # print('sid: ',S['sid'])\n                        # print('status: ',S['status'])\n                        # print('----> ',S)\n                        # print('----", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "   def update_robot_ik(self):\n        prev_lf_task = self.robot.ik.tasks[self.robot.left_foot.name]\n        prev_rf_task = self.robot.ik.tasks[self.robot.right_", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\ndef test_simple_op():\n    for op in simple_op:\n        op_name = op.__name__\n        op_class = getattr(arxpy.bitvector.operation, op_name)\n        op_class_name = op_class.__name__\n", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP14Segment(aJPEG.mICCProfile).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew APP0Segment(aJPEG).encode(aOutput).log(aLog);\n\n\t", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           if (type == HibiscusExportType.SAMMEL) {\n                mapper.exportSammelLastschrift(sl);\n            } else if (type == HibiscusExportType.ALLE_EINZEL) {\n                mapper.exportAllE", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "\ndef generate_pronunciations_arguments(\n    log_path: str,\n    dictionaries: List[str],\n    text_int_paths: Dict[str, str],\n    word_boundary_paths: Dict[str, str],\n    ali_paths", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       ItemStack itemStack = new ItemStack(ItemLorePage.item);\n        ItemLorePage.setLore(itemStack, LoreKey.fromLore(LoreLoader.getLore(category, ident)));\n        entityPlayer.addItemStackToInventory(item", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private final UserDAO userDAO;\n    private final CategoryDAO categoryDAO;\n    private final BudgetDAO budgetDAO;\n    private final BudgetTypeDAO budgetTypeDAO;\n    private final TransactionDAO transactionDAO;\n    private final Rec", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\n\n\tprivate static final String[] EMPTY_STRING_ARRAY = new String[0];\n\n\tprivate static final String[] EMPTY_STRING_ARRAY_2 = new String[0];\n", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    ZoomIn(ZoomIn.class),\n    ZoomInDown(ZoomIn", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if issubclass(bvf_cipher, Cipher):\n        problem = SearchRkCh(ch, key_der_mode=der_mode, enc_der_mode=der_", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "       return H()\n\n    def test_get_hosts(self):\n        \"\"\"\n        Test that we can get hosts from a HostsContainer.\n        \"\"\"\n        hc = HostsContainer(hosts={'h1': LocalHost1, 'h2': LocalHost2, '", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           if command.startswith(\"tc\"):\n                return True\n\n        return [\n            command\n            for command in self.__tc_command_output.command_history\n            if tc_command_filter(command)\n        ]\n\n    def get_command_output(self", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    * @return a List of Expenses\n     */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0] * 25\n\n  def test_inf_input(self):\n    my_stream = white_noise", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               isinstance(t2, RecordMeta)\n            ):\n                t1.__instance__ = Record[field_refs(backref, t2.__items__)]\n                unify(t1, t2, backref)\n            else:\n                raise\n\n    elif isinstance(", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       host=\"blink.com\",\n        client_id=\"\",\n        client_secret=\"\",\n        account_id=\"\",\n        token=\"\",\n        region_id=\"\",\n        refresh_token=\"\",\n        refresh_token_expires=\"\",\n        refresh_token_", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\tdef createIndex(self, row, col, parent=None, *args, **kwargs):\n\t\tif parent is None:\n\t\t\treturn QModelIndex()\n\t\tif parent.internalPointer() is None:\n\t\t\treturn QModelIndex()\n\t\telse:", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     self._log.error('Serialization error: %s' % ex)\n      self.AsyncProcessResponse(sink_stack, None, stream, MethodDiscardMessage(msg.properties.get(Tag.KEY), 'Serialization error'))\n      return\n\n    self._varz", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       assertThat(out.toString(), equalTo(\"\"));\n        assertThat(exitValue, equalTo(0));\n        assertThat(stdout.toString(), startsWith(\"RuntimeThread[name=remotely-observed-thread,tid=12345,nid=1", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data, DrumOperation.APPEND_UPDATE);\n    }\n\n    @Test\n    void testAppendUpdate_with_duplicate_keys() throws Exception {\n        try (SimpleDataStore<PLDTestData> dataStore = new SimpleData", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"ËßÜÈ¢ë: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaPropertiesMockBuilder()\n                .withBusiness(new BusinessStrategyMockBuilder()\n                        .withResponseStrategy(ResponseStrategy.RETURN_ERROR)\n                        .build())\n                .build();\n    }\n\n    private ResponseProcessorManager getResponseProcessor", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._ping_ar = AsyncResult()\n    self._ping_ar.set_exception(\n      gevent.TimeoutError('Ping timeout'))\n    self._ping_ar.set_result(self._ping_msg)\n    self._socket.send(self._ping_", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert freq2lag(v) == lag2freq(v)\n\n\nclass TestCached(object):\n  def test_cached_is_cached(self):\n    f = cached(lambda x: x*2)\n    assert f(1) == ", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "   @commands.group(name=\"config\", aliases=[\"configs\"])\n    async def configs(self, ctx):\n        \"\"\"\n        Manage the bot's configuration.\n        \"\"\"\n        if ctx.invoked_subcommand is None:\n            await ctx.send(", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   if operands[0] == operands[1]:\n        return True\n    elif operands[0] < operands[1]:\n        return True\n    elif operands[0] > operands[1]:\n        return False\n    elif operands[0] <= operands", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(R.string.personalize_welcome);\n\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEvents.add(new Event(R.string.event_1, R.drawable", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Notify the fragment\n            InviteToChatFragment fragment = (InviteToChatFragment) getActivity();\n            fragment.notifyFragment(new ChatRegisteredParam(true, newChatId));\n\n            // Notify the user details fragment\n            UserDetailsFragment fragment", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n\n        Assert.assertNotNull(response);\n        Assert.assertTrue(response.getReturn_code().equals(\"SUCCESS\"));\n        Assert.assertTrue(response.getReturn_msg().equals(\"OK", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       List<Parameter> parameters = creator.createParameters(new ArrayList<>());\n\n        assertNotNull(parameters);\n        assertEquals(2, parameters.size());\n        assertEquals(STRING_PARAMETER_NAME_01, parameters.get(0).getName());\n        assert", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "   public int readSmallIntValue(int d1) throws IOException {\n\t\tint d2 = in.read1();\n\t\tint d3 = in.read1();\n\t\tint d4 = in.read1();\n\t\tint d5 = in.read1();", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "       self.quota = quota.Quotas(self)\n        self.mgmt_clusters = mgmt_clusters.MgmtClusters(self)\n        self.mgmt_flavors = mgmt_flavors.", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "       )\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class(self.__timezone)\n                break\n            except ParseError as e:\n                logger.debug(f\"{e.reason} {e.line_", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       if (Integer.parseInt(m.videoSetFrameRate.getText()) < 1)// set minimum\r\n        // to 1\r\n        {\r\n            JOptionPane.showMessageDialog(null, \"Frame rate must be greater than 1\");\r\n            return;\r\n        }\r\n", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self._probe = probe\n        else:\n            self._probe = _probe_adjacency_list(**kwargs)\n        self._store = SpikeDetektStore(self._tempdir)\n        self._store.delete_all('spikes')", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "   self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self):\n    \"\"\"\n      Analyzes the bytecode and creates the control flow graph.\n    \"\"\"\n    self._decl = None\n    self._blocks = []", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       IntentIntegrator integrator = new IntentIntegrator(this.getActivity());\n        integrator.initiateScan();\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": " public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    if ((inExp.getValue() == null)\n        || (inExp.getValue() instanceof Nullable)\n        && ((Nullable) inExp.getValue()).", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile baseFile = new File(basePath);\n\t\t\tFile targetFile = new File(basePath + \"/target\");\n\t\t\t\n\t\t\tAssertions.assertTrue(targetFile.exists());\n\t\t\tAssertions.assertTrue(targetFile.isDirectory", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "       self.assertEqual(\n            np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n            DiscreteDistribution([0, 1, 2, 3, 4, 5", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptString(final StringTag tag, final CharSequence value) {\n\t\tif (value == null) {\n\t\t\tthrow new InvalidValueException(tag, \"null\");\n\t\t}\n\t\tif (value.length() == 0) {\n\t\t\t", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "   def test_determine_name(self):\n        self.assertEqual(\"Harvey\", determine_name(name=\"Harvey\", language=\"English\"))\n        self.assertEqual(\"Harvey\", determine_name(name=\"Harvey\", language=\"Hindi\"))\n        self.assert", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfTheSystem();\n                                   ", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "# P1RestOctets\nclass P1RestOctets(RestOctets):\n    # name for padding at the end\n    rest_name = 'P1_Rest_padding'\n    # GSM padding: 0x2b (for CSN1)\n    L = [", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "       # Make sure we're looking at models\n        validate_is_model(model)\n\n        # Make sure we're looking at models\n        validate_is_model(model)\n\n        # Make sure we're looking at models\n        validate_is_model(model)", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "       return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def atualizar_sat(self):\n        \"\"\"Sobrep√µe :meth:`~satcfe.base.FuncoesSAT.atualizar", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   engine.bind(User)\n\n    Traceback (most recent call last):\n        ...\n    TypeError: bind() takes exactly 1 argument (0 given)\n\n\ndef test_bind_model_with_no_hash_key(engine):\n    \"\"\"Can't bind models that", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"Msun/pc**3\")\n    assert u7.dimensions == mass\n    assert u7.base", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "   'root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"',\n                 'root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"',\n                 'root/cimv2:TST_Person.name=", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load modules\n        List<Module> modules = new ArrayList<>();\n        modules.add(new SqlModule());\n        modules.add(new LoanModule());\n        modules.add(new CurrencyRegistryModule());\n        modules.add(new CurrencyService());\n        modules.add", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       if index == -1:\n            index = 0\n        if name is not None:\n            name = prepare_str(name, \"ascii\")\n        if index == -1:\n            index = 0\n        if name is not None:\n            name = prepare_str", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void startNewOrderActivity(Account account) {\n                        startActivity(NewOrderActivity.newIntent(MainActivity.this, account.getId()));\n                    }\n\n                    @Override\n                    public void startSettingsActivity() {\n                        start", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], ", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.age[3]\n    value = 3\n    expected_ref = \":v0[3]\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0[3]\": expected_action.value}", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           Alert alert = new Alert(AlertType.ERROR, \"Error adding queue:\\n\" + e.getDump().getStacktrace(), ButtonType.OK);\r\n            alert.showAndWait();\r\n            return false;\r\n        }\r\n        \r\n        if (result.getErrorCode()", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "       if request.user == post.user:\n            nodes = nodes.filter(deleted=False)\n        else:\n            nodes = nodes.filter(deleted=False, user=request.user)\n        comments = nodes.order_by('-created')\n        comments = chain", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of gifs to use in gif searching.\n     * Clicking on these gifs can perform searches with the gif itself as the", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::error);\n            of(mConnectionWpsListener).ifPresent(ConnectionWpsListener::error);\n            of(mConnectionWpsListener).ifPresent(ConnectionWpsListener::isSuccessful(false));", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "       for (PlaySession playSession : stack.getPlaySessionList()) {\n            playSession.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card :", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "   def __init__(self, args: SegmentVadArguments):\n        self.vad_path = args.vad_path\n        self.segmentation_options = args.segmentation_options\n\n    def run(self):\n        \"\"\"Run the function\"\"\"\n\n       ", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Deployments deployments;\n    private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n\n    def get_tag_list(self, index, name=None):\n        \"\"\"Retrieve a list of metadata tags.\n\n        '", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "               section.end_of_message)\n        else:\n            section = bufr_message.length\n\n        # If the template data is requested, wire it to the template data\n        # section.\n        if wire_template_data:\n            bufr_message.template_data", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = ReportAbuseForm(request.POST)\n\n        if form.is_valid():\n            abuse_report = AbuseReport.objects.create(\n                logged_against=logged_against,\n                logged_by=logged_by,\n", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   @Override\n    public void output(final AbstractResult paramAbstractResult) {\n        if (paramAbstractResult instanceof BenchmarkResult) {\n            final BenchmarkResult benchmarkResult = (BenchmarkResult) paramAbstractResult;\n            final AbstractMeter abstractMeter = benchmarkResult.getMeter", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       // Checking PhyML binary\n        if (!PhyMLv3AminoAcidRunEstimator.checkBinary())\n        {\n        \tfinalize(1);\n        }\n\n        // Checking PhyML binary\n        if (!PhyMLv3A", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(URL(\"http://www.example.com/record.mp3\"), true);\n\t\tNext line of code:\n\n\t\ttropo.record(URL(\"http://www.example.com/record.mp3\"), true, true);\n\t", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "       listaDeRespostas.getPropriedades().getEstado() == \n                EstadoDaListaDeRespostas.SALVA &&\n        listaDeRespostas.getPropriedades().getEstado() == \n                EstadoDaListaDeRespostas.S", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onReceive(byte[] response) {\n\t\t\t\tString json = new String(response,\"UTF-8\");\n\t\t\t\tProgramManager.getInstance().parseTrack(json);\n\t\t\t\tmHandler.obtainMessage(200).sendToTarget", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Mock\n    MediaModel adMedia2;\n\n    @Mock\n    MediaModel adMedia3;\n\n    @Mock\n    MediaModel adMedia4;\n\n    @Mock\n    MediaModel adMedia5;\n\n    @Mock\n    MediaModel adMedia6;\n", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tstage.close();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tstage.setTitle(APPLICATION_NAME);\n\t\t\tstage.setScene(new Scene(new DriveUploaderGUI(stage), 80", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String className = adapterName(type.getSimpleName().toString());\n    String superClassName = getApplicationSupertype(type);\n    String companionClassName = className + INJECT_ADAPTER_SUFFIX;\n\n    JavaFile javaFile = JavaFile.builder(processingEnv.getElement", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        /**\r\n         * ÊâìÂºÄ/ÂÖ≥Èó≠ÈÄöÁü•Ê†èÈÄöÁü•\r\n         * @param enable ÊâìÂºÄ/ÂÖ≥Èó≠\r\n         */\r", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n     ", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   if is_comment_node(elem):\n        return f'/comment({context.position})[{context.parent_map.get(elem)}]'\n\n    if is_schema_node(elem):\n        return f'/schema-element({context.position})[{context.", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\n    def dropnan(self):\n        \"\"\"Drop NaN values from the table\"\"\"\n        dropnan_table(self", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               TypingMessage m = (TypingMessage)message;\n\n                if (m.isTyping())\n                {\n                    _isTyping = true;\n                }\n                else\n                {\n                    _isTyping = false;\n                }\n            }\n           ", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tif opts.covariates:\n\t\t\tdmy_covariates = np.concatenate(covars,1)\n\t\telse:\n\t\t\tdmy_covariates = None\n\n\t\tEXOG = []\n\t\tEXOG", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       ThreadDumpThread main = sut.thread(\"main\");\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n\n        ThreadDumpThread main = sut.thread(\"main\");\n        assertThat(main.getStatus(), equalTo(", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               // Ëé∑ÂèñÊó∂Èó¥ÈÄâÊã©Âô®\n                DatePicker datePicker = new DatePicker(this);\n                // ËÆæÁΩÆÊó∂Èó¥ÈÄâÊã©Âô®ÁöÑÊó∂Èó¥\n                datePicker.setDate(mRecord.getRecordTime().getYear(), mRecord.getRecord", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private ViewPager mViewPager;\n    private Toolbar toolbar;\n    private TabLayout tabLayout;\n    private boolean isFirstTime = true;\n    private boolean isFirstTime2 = true;", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.tracerouter = Tracerouter.Tracerouter(self)\n        self.pcaplogger = PcapLogger.PcapLogger(self)\n        self.time_manager = TimeManager.TimeManager(self)\n        self.sniffer = Sniffer.", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       if self.is_opensource_api():\n            return RestfulModelCollection(Webhook, self)\n        return RestfulModelCollection(Webhook, self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    @property\n   ", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       // TODO(jontayler): figure out why we need to do this here.\n        updateViewDirectionMode(model, sharedPreferences));\n    activityLightLevelChanger.setLightLevelListener(new ActivityLightLevelChanger.LightLevelListener() {\n      @Override\n      public void", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_ther", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('Identity', Pt=Identity(), Len=8),\r\n            ] if with_options else [])\r\n\r\n\r\n################\r\n# TS 24.008, section 9.2 #\r\n# Mobility Management    #\r\n################\r", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       self.__class_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_device(self, device):\n        if typepy.is_null_string", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "       result, index = apply_fast_eq(left.values, right.values,\n                                        left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   def test_validaton_error_decorator_transforms_SwaggerMappingError():\n        fake_validator_map = mock.Mock(spec=ValidatorMap)\n        fake_validator_map.schema = mock.Mock(spec=SchemaValidator)\n        fake_validator", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
