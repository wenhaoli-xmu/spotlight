{"pred": "   private final transient KademliaRoutingTable routingTable;\n    private final transient JKademliaRoutingTable routingTable;\n    private final transient KademliaStorageEntry storageEntry;\n    private final transient KademliaStorageEntry storageEntry;\n", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       // mEffects.add(new KernelGaussBlurEffect());\n        mEffects.add(new KernelGaussBlurEffect());\n        mEffects.add(new KernelEmbossEffect());\n        mEffects.add(new KernelShar", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, x, y):\n        x = RotateLeft(x", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private ImmersiveEffect mImmersiveEffect;\n    private boolean mImmersiveEffectEnabled;\n    private boolean mImmersiveTouchNavigationEnabled;\n    private boolean mImmersiveSensorNavigationEnabled;", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    /**\n     * Queue an event to be processed\n     *\n     * @param event the event to queue\n     */\n", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    */\n    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务数据管理器\n     */\n    private TaskMetaInfoManager taskMetaInfoManager;\n\n    /**\n     * 任务数据管理器\n     */\n", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tintegrityCheck.check(args.vaultLocation(), passphrase, args.problems(), args.solutionContext());\n\t\t} catch (AbortCheckException e) {\n\t\t\tprint(format(\"Abort check failed: %s\", e.getMessage()));", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           //save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n            //save deviceId to storage\n            DebugManager.getInstance().saveDeviceId(deviceId);\n            //save deviceId to storage\n            DebugManager.getInstance().saveDeviceId(", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignResponse signResponse = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new SignRequest(\"U2F_V2\", SERVER_CHALLENGE_SIGN, APP_ID_", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "           if self.acctA == None:\n                self.acctA = self.global_config['_radius_client'].do_acct(self.uaA, self.uaA.ua, self.uaA.ua.username, self.uaA.ua.password", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def __init__(self, uri):\n        self.uri = uri\n\n\nclass FlagList(Signature):\nNext line of code:\n    def __init__(self, flags):\n        self.flags = flags\n\n\nclass FlagList(Signature):\nNext line", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "           return\n\n    def process_children_binary(cstr_node, ast_node):\n      if ast_node.has_children() and cstr_node.terminal:\n        return\n\n      if not cstr_node.terminal:\n        if cstr_", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setDataAndType(Uri.parse(url), \"video/*\");\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static boolean", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       String message = mLocationText.getText().toString();\n        String email = mEmailText.getText().toString();\n        String name = mNameText.getText().toString();\n        String avatarUrl = mAvatarUrlText.getText().toString();\n\n        Log.d(\"", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       self.assertRaises(TypeError, InterLayerPipeline,\n                            [InputLayer(1, 1, 1, 1)])\n\n    def test_invalid_args(self):\n        ''' Invalid arguments. '''\nNext line of code:\n        self", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   def __new__(cls, *args, **kwargs):\n        init_called = True\n        return super().__new__(cls)\n\n    class User(BaseModel):\n        pass\n\n    user = User(id=\"user_id\", email=\"user@domain.com\")", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "   yield context.item\n\n\n@method(infix('?', bp=16))\ndef select_optional_map_operator(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for context.item in context", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustmentTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation(),\n                    new Mirror", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "   private static final ButterKnife.Action<View> HIDE_ALL = (view, index) -> {\n        for (int i = 0; i < view.getChildCount(); i++) {\n            view.getChildAt(i).setVisibility(View.G", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               writeResponse(SUCCESS, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n               ", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       await wild.create_report(ctx)\n\n\n    @commands.command(aliases=['wilds'])\n    @commands.guild_only()\n    @channel_checks.wild_report_channel()\n    async def wilds(self, ctx):", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   data = SNLIData(c['data'], vocab=vocab)\n\n\ndef _initialize_simple_model_and_data_dict(c):\n\n    if c['vocab_dict']:\n        vocab = Vocabulary(c", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.coeffs == (50.", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "       assert self.redlock.acquire()\n        assert self.redis.exists(self.redlock.key)\n        assert self.redlock.locked()\n        time.sleep(self.redlock.auto_release_time * 2)\n        assert not self", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "       return ConeSettings(self._get_func(\"threed_cone_settings\"))\n\n    def get_channel(self, channel_index):\n        \"\"\"Get the channel index of the channel playing this sound.\n\n        :param int channel_index: Channel index.\n", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "       return self._calg\n\n    @calg.setter\n    def calg(self, calg):\n        self._calg = calg\n\n    @property\n    def compressed(self):\n        return self._compressed\n\n    @compressed.register", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "       cellSize = findCellSize(imgshape, centers, detectCellShapeParameter = detectCellShapeParameter, verbose = verbose, out = out, **parameter);\n        \n        #intensity of cells\n        imgintensity = findCellIntensity(imgshape, cent", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 200f);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "\r\n            while (transactionIterator.hasNext()) {\r\n\r\n                Transaction t = transactionIterator.next();\r\n\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n\r\n            }\r\n\r\n       ", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               if (stmnt instanceof QueryMeta) {\n                    QueryMeta query = (QueryMeta) stmnt;\n                    if (query.queryType == RequestType.SELECT) {\n                        ((SelectQueryMeta) query).postProcess(dataSourceDescRes.right().", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                   EncryptionAlgorithmCoded.TWOKEY3DES,\n                    OperationMode.ENCRYPT,\n                    KeyType.PIN,\n                    KeyName.PIN,\n                    KeyLength.PIN,\n                ),\n                encryption_parameter=", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           env.combExpMaxRegNum = i;\n                        }\n                    }\n                }\n            }\n        } // USE_CEC\n\n        if (Config.DEBUG_PARSE_TREE) {\n            if (Config.DEBUG_PARSE_T", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "   url(r'^pipeline-job-template$', PipelineJobTemplateView.as_view(),\n        name=\"ajax-pipeline-job-template\"),\n    url(r'^pipeline-configuration$', PipelineConfigurationView.as_view(),\n        name=\"", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\tprivate ResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData) {\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = tags;\n", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self._storage_type = storage_type\n        return self\n\n\n#\n# DB OPEN\n#\n# Opens a database on the OrientDB Server instance.\n#\n# Request: (database-name:string) <-- before 1.0rc1 this was empty", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(\n            String description, $Argument2 argument) {\n        preparation.recordGivenStep(functions.toCheckedSupplier(argument));\n        return new Given", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "     try {\n        return process.await(expectedExitCodes);\n      } catch (CommandFailureException e) {\n        throw new IosDeviceException(this, e);\n      }\n    }\n\n  /**\n   * Waits for a process to terminate and returns the result", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (null == textColor) {\n\t\t\ttextColor = Themer.getColor(contextRef.get(), R.attr.colorText);\n\t\t}\n\t}\n\t\n\tprivate void setFontStyle() {Next line of code:\n\t\tif (", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\t\tMessage message = Message.parse(xml);\n\t\tif (message == null) {\n\t\treturn \"error\";\n\t}\n\tif (message.getMsgType() == Message.TYPE_TEXT) {\n\t\tString text = message.getText();\n\t", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   if os.path.exists(os.path.join(file_path, 'info_')):\n        return\n    else:\n        print u'\\n[INFO] 运行该 apk 文件'\n        subprocess.call([adb,\n                           \"-", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @channel_checks.raid_report_enabled()\n    async def cmd_raidcity(self, ctx, *city_name):\n        \"\"\"\n        **!raid-city city-name** - sets the city for the raid party\n        \"\"\"\n        city = await ctx", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertTrue(try_parsing_partner_date(\"25/11/2015\"))\n        self.assertTrue(try_parsing_partner_date(\"11/12/2012\"))\n        self.assertTrue(try", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file)\n\n        # startup session database\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.start()\n        gevent.sleep(1)\n\n        # setup b", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           ShareUtil.share(mActivity, picture.getPics()[0], \"图片\");\n                            break;\n                        case 1:Next line of code:\n                            ShareUtil.share(mActivity, picture.getPics()[0], \"图片", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\t\twrite_tm_filetype(opts.tmifile[0],\n\t\t\t\t\t\t\timage_array = positive_data,\n\t\t\t\t\t\tmasking_array = masking_array,\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               ResponseSyncAdapter.class,\n                OAuthActivity.class,\n                OAuthFragment.class,\n                OAuthActivity.OAuthFragment.class,\n                OAuthActivity.OAuthFragment.OAuthFragment.class,\n                OAuthActivity.OAuthFragment.OAuth", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "               PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDH: ECDHSignature,\n                PubKeyAlgorithm.ECDH_SK: ECDHSignature,\n                PubKeyAlgorithm.ECDH", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   if self[0].label.endswith('function'):\n        self[0].evaluate(context)\n        return\n\n###\n# Unary operators\n@method('$')\ndef evaluate_unary_operator(self, context=None):\n    if self[0", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter\n    }\n\n  class _Heap(object):\n    \"\"\"A utility class to perform heap functions.\"\"\"\n    def __init__(self, size):\n      self._size = size\n      self._heap = [0] * size\n", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send_message_with_protocol(protocol, 'hello world')\n        protocol.send_string.assert_called_once_with(b'11:hello world,')\n\n    def test_send_message_with_protocol_bad_length(self", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       assertEquals(\"statement\", \"select * from t1\", ((StatementExecution) qe).getQuery());\n        assertEquals(\"statement\", \"select * from t1\", ((StatementExecution) qe).getQuery());\n        assertEquals(\"statement\", \"select * from t1\", ((Statement", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionCount() {\n        ProxyTestDataSource ds = new Pro", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               yield self._sendMACCommand(device.deveui, command)\n                self._dequeueMACCommand(device.deveui, command)\n                self._queueMACCommand(device.deveui, command)\n                continue\n            \n            # Send the A", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n\n#\n#\n#\n#\n#\n#\n#\n#\n#\n\n#\n#\n#\n#\n\n#\n#\n#\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       FragmentObservable.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable.getInstance().remove(this);\n    }\n\n    @Override\n    public void onResume() {\n       ", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\nNext line of code:\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\n", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "           time = self.img_handle.current_time\n\n            # Convert to Julian date\n            time = datetime2JD(time)\n\n        else:\n            time = datetime2JD(self.config.start_time)\n\n        json_dict['time'] =", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       if (mPublicRoomsListListList == null) {\n            mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n        }\n        mPublicRoomsListList.clear();\n        mPublicRoomsListListList = new ArrayList<List<Public", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "       self.bot.loop.create_task(self.load_config())\n\n    async def load_config(self):\n        Logger.info(f'load_config()')\n\n        cache = {}\n        try:\n            clembot_config_tbl = self.", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(target_sequences, phylogeny,\n                                   args.threads)\n\n    #initializing scaffolder\n    scaffolder = scfldr.Scaffolder(target_sequences, phylog", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   startMiPush();\n                    stopHwPush();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"HuaweiPush\":\n                if(shouldInit()) {Next line of code:\n                    startHwPush();\n                    stopMiPush();\n                    Log.e(MYTAG, \"使用HuaweiPush推送\");\n                }\n                break;\n            default:\n                Log.e(MYTAG, \"未知的推送类型\");\n                break;\n        }\n    }\n\n    private boolean shouldInit() {\n        if (TextUtils.isEmpty(deviceGcmToken)) {\n            return true;\n        }\n        return false;\n    }\n\n    private void startMiPush() {\n        MiPushClient.getInstance().init(this);\n        MiPushClient.getInstance().start();\n    }\n\n    private void stopMiPush() {\n        MiPushClient.getInstance().stop();\n    }\n\n    private void startHwPush() {\n        HMSAgent.getInstance().connect(new ConnectHandler() {\n            @Override\n            public void onConnect(int rtnCode, TokenResult tokenResult) {\n                if (rtnCode == HMSAgent.HMS_SUCCESS", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<QueryExp>(QUERY_EXP));\n        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public static final String VULN_TITLE_LISTENER = \"VulnTitleDocumentListener\";\n    public static final String VULN_DESCRIPTION_LISTENER = \"VulnDescriptionDocumentListener\";\n    public static final String VULN_", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   private void createBreakdownChartPanelSingle(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingPieDatasetWithTTG dataset =\n                datasetGenerator.newPieDatsetWithTTG(", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.getSubType() == PacketType.ACK) {\n            AckRequest ackRequest = new AckRequest(packet, client);\n            ackManager.onAck(client, ackRequest);\n        } else if (packet.get", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       lMS.addTrack(new VideoTrack(appRtcClient.videoConstraints()));\n      }\n      VideoSource videoSource = new VideoSource(lMS);\n      videoSource.start();\n      videoSourceStopped = false;\n      videoSource = videoSource;\n   ", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_BACKOFF_MS, -1L);\n            contentValues.put(JobStorage.COLUMN_BACKOFF_POLICY, JobRequest.BACKOFF_POLICY_NONE);\n            content", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_settings);\n\n        // Set the title\n        setTitle(", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   return obj\n\ndef init_snapshot(obj, basedir=None):\n    if not obj:\n        raise Exception(CORE_LOG_PREFIX +\n                \"Must input a valid object if there's no snapshot files\")\n\n    validate_system(obj", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "   def determine_executable(self, desktop_file):\n        if desktop_file.desktop_file_name == 'clickable.desktop':\n            return 'clickable'\n        elif desktop_file.desktop_file_name == 'clickable-debug.desktop':\n            return", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   final String[] SectionURLs = { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\" };\n    final String[] SectionNames = { \"社区管理\", \"国内院校", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       if (getActivity() != null) {\n            getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\n        }\n    }\n\n    @Override\n    public View onCreateView", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tif (model.getTestbase() != null) {\r\n\t\tdefaultTestbaseMethodCreated = true;\r\n\t}\r\n\r\n\tif (model.getTestmethodPrefix() != null) {\r\n\t\ttestmethodPrefix = model.getTestmethodPrefix();\r\n\t} else", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       self.assertTrue(self.simulator_data_client.received_simulator_data_datagram(self.simulator_data_datagram))\n\n        self.assertTrue(self.simulator_data_client.received_simulator_data_datagram", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           textareaMessage.setText(httpMessage.getRes().getResponse());\n            textareaMessage.setCaretPosition(0);\n            scrollPane.setViewportView(textareaMessage);\n            scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONT", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\ndef test_simple_status_with_gsi():\n    \"\"\"Status is busy because table isn't ACTIVE, GSI is BUSY\"\"\"\n    description = {\"TableStatus\": \"BUS", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   def _pre_load_header(self, fileobj):\n        \"\"\"Pre-load the ID3 header\"\"\"\n        self._header = ID3Header(fileobj)\n\n    def _write(self, config):\n        \"\"\"Write the ID3 header\"\"\"\n       ", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitCheckOp4(n), opToOccur.get(op));\r\n\r\n      return null;\r\n    }\r\n\r\n    visitProxOp(new VisitCheckOp4(n), query);\r\n\r\n    return null;\r\n ", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EmbossTransformation(),\n                    new InvertTransformation(),\n                    new InvertAlphaTransformation(),\n                    new InvertColorTransformation(),\n                    new InvertColorTransformation().setColor(Color.WHITE),\n                    new InvertColorTrans", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "           self._decode_field( FIELD_STRING )\n\n            if self._header[1] == 1:\n                exception_class = self._decode_field( FIELD_STRING )\n            if self._header[1] == 2:\n                exception_message =", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n    if not api.get_data(**{'SettlementDate': args.fromdate or date.today() - timedelta(days=1),\n                             'SettlementPeriod': args.period", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy.getAlbumId(), proxy.getAlbumName() );\n\t\t\t\titems.add( item );\n\t\t\t} else {\n\t\t\t\t\titem = new GalleryImage( proxy.getImageId(), proxy", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   dump_key(user, user_key)\n\n    assert dump_key(user, user_key) == user_key\n\n\ndef test_extract_key():\n    \"\"\"\n    Extract a key from a dict of values\n\n    \"\"\"\n    user = User(", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new Percentage(100),\n        new Status(Status.Type.SUCCESS),\n        new Fraction(100),\n        new TaskName(\"Task 1\"),\n        new StaticString(\"Task 2\"),\n        new Spinner(\"Task 3\"),", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\t\treturn new FormFor(resource);\n\t}\n\n\tpublic static A a(Object resource, Object... fields) {\n\t\treturn new A(resource);\n\t}\nNext line of code:\n\t\treturn new A(resource);\n\t}\n\n\tpublic static", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "           events.append(Event(e, self))\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data, self)\n\n    def list", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "           Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           applyWallpaper();\r\n        } else if (id == R.id.menu_settings) {\r\n            startActivity(new Intent(this, SettingsActivity.class));\r\n        } else if (id == R.id.menu_wallpaper) {\r\n            WallpaperApply", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private static final Logger logger = Logger.getLogger(QsolToQueryVisitor.class.getPackage().getName());\r\n\r\n  private final static Logger logger = Logger\r\n      .getLogger(QsolToQueryVisitor.class.getPackage().getName());\r\n\r", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif args.mapper is None:\n\t\t\t\tprint 'WARNING!!! You did not set mapper folder, using default one'\n\t\t\t\tmapper=Mapper(args.mapper)\n\t\telse:\n\t\t\tmapper=Mapper(args.", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n        # If the beginning time is not found, try to read it from the file\n        if self.beginning_datetime is None:\n            self.beginning_datetime = self.readBegin", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   p = exactpsf.FixedSSChebLinePSF(kfki=1.07, zslab=-29.3, alpha=1.17,\n            n2n1=0.98, sigkf=-0.33, z", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tPacketDispatcher.sync(new PacketConfigSync(player));\n\t}\n\n\tpublic static void sync(EntityPlayer player)\n\t{Next line of code:\n\t\tPacketDispatcher.sync(new PacketConfigSync(player));\n\t}\n\n\t", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       comments = Comment.objects.filter(post=post)\n        comments = comments.order_by('-net_votes')\n        comments = comments.all()\n        comments = chain(comments, comments.filter(deleted=False))\n        comments = comments.order_by", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\tISelection selection = new StructuredSelection(selectedCells.iterator().next());\n\t\t\t\t\t\tgetSite().setSelectionProvider(selection);\n\t\t\t\t\t\tgetSite().getSelectionProvider().addSelectionChangedListener(new ISelectionChangedListener() {", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "       def keyclass_int(self, val):\n            self._keyclass = val\n\n    @keyclass.register(int)\n    def keyclass_int(self, val):\n        self._keyclassclass = val\n\n    @keyclass.register(int)\n", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "       if is_processing_instruction_node(item):\n            yield item\n\n\n@method(function('comment', nargs=(0, 1), label='kind test'))\ndef select_comment_kind_test(self, context=None):\n    if context is None", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "   puffles_as2_str = getAS2PuffleString(client, puffles)\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   I.set_tile(tile)\nNext line of code:\n    I.update(P, H)\nNext line of code:\n    I.draw()\nNext line of code:\n    I.draw_ortho(im, cmap='bone')\nNext", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "           with tqdm.tqdm(total=len(jobs)) as pbar):\n                for job in jobs:\n                    compile_info_function = compile_information_func(job.log_path)\n                    compile_info_function.run()\n                ", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   platepar.rotation_wrt_horizon = rotationWrtHorizon(platepar.lat, platepar.lon, platepar.RA_d, \\\n        platepar.dec_d, platepar.JD, platepar.rotation_wrt_horizon", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);Next line of code:\n        contentValues.put(JobStorage.COLUMN_BACKOFF_MS, 1000L);Next line of code:\n       ", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       if (getActivity() != null) {\n            getActivity().setTitle(R.string.chat_settings_remove);\n        }\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        if (", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['indicator', 'area', 'code']\n\n\nclass AreaFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(lookup_expr='iexact')\n    description = django_filters.CharFilter(", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           fab.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View v) {\n                    GoogleAnalyticsSender.getInstance(getContext()).send(\"click_fab\");\n                                                                                                                                                                                                                                                                ", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "               return transport.connect(context, manager, true);\n            }\n        }).then(new OnComplete<Channel>() {\n            @Override\n            protected void onSuccess(final Channel channel) throws Exception {\n                LOGGER.debug(\"Reconnected to transport...\");\n\n                reconnect", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               new RegistrationParam(success, name, email, message));\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/ui/fragments/LoginFragment.java\npublic class LoginFragment extends Fragment", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final Router router;\n    private final AtomicInteger counter = new AtomicInteger(0);\n    private final Map<RoadPoint, MatcherCandidate> candidates = new ConcurrentHashMap<>();\n    private final Map<RoadPoint, MatcherTransition> transitions", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private String[] urls;\n    private String[] checkedTitles;\n    private String[] checkedUrls;\n    private List<String> checkedList;\n    private List<String> urlList;\n    private List<String> checkedUrlList;\n    private List<String>", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " assert isinstance(args.gps_sv[0].getMessage(), ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "       for i in range(len(fills)):\n            lines.draw_triangle(fills[i], tris[i * 3], tris[i * 3 + 1], tris[i * 3 + 2])\n\nNext line of code:\n       ", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\ttry {\n\t\t\t\t\ta = DatabaseHelper.getApp(contextRef.get(), data);\n\t\t\t\t} catch (FileNotFoundException e) {\n\t\t\t\t\tToast.makeText(contextRef.get(), \"File not found\", Toast", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt = self.beg_vect[1]\n        self.end_alt = self.end_vect[1]\n\n        # Compute the great circle\n        self.gc = greatCircle(self.beg_alt, self.end_alt", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol f = (FunctionSymbol)currentScope.resolve(ctx.ID().getText());\n\t\tMMethod m = new MMethod(f);\n\t\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void enterFunction(@Not", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "   /**\n     * Called when the visitor reaches a node with children.\n     * @return Determines whether the children of the node will be visited.\n     */\n    boolean enter(ScopeNode node);\n\n    /**\n     * Called when the visitor reaches a node with children", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "   private SpecificationGenerator specificationGenerator;\n    private CodeGeneratorFactory codeGeneratorFactory;\n    private CodeGenerator codeGenerator;\n\n    private final AtomicReference<Swagger> runtimeCache = new AtomicReference<>();\n\n    public OpenAPIProcessor() {\n        super();\n    }\n\n    @Override\n    public Set<String> getSupportedAnnotationTypes() {\n        return new HashSet<", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class).to(GerritCheckoutProvider.class);\n        bind(GerritCheckoutProvider.class).to(GerritCheckoutProvider.class);\n        bind(GerritCheckoutProvider.class).to(", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (snapshots.get(i).getName().startsWith(zxid)) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            if", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "       entries = [e for e in entries if txn_matches(e, query)]\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if not e.has_unassigned_split]\n        elif filter_type is FilterType", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   ]\n    def __init__(self, name, data, parent=None,\n        parent_name=None, parent_type=None,\n        parent_layer=None, parent_block=None,\n        parent_element=None, parent_str=None,\n        parent", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\t\treturn Observable.just(null);\n\t\t\t\t\t}\n\t\t\t\t\treturn searchSuggestionsAdaper.getSuggestions(query);\n\t\t\t\t})\n\t\t\t\t.subscribe(suggestions -> {\n\t", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   p = np.random.randn(POS.shape[0], 3) * rad\nNext line of code:\n    p[:, 0] += 10\nNext line of code:\n    p[:, 1] += 10\nNext line of code:", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "       result, index = apply_fast_and(left.values, right.values,\n                                   left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and(left.values, right), left.index", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    stringBuilder.append(\"\\nRequest: \")\r\n                            .append(request.getName())\r\n                            .append(\" - \")\r\n                            .append(request.getPackageName())\r", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "           instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n            instance\n", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "           return SearchMenuPage()\n        if pageletId == 'RubricPage':\n            return RubricPage(context, self.settings)\n        if pageletId == 'RubricPage':\n            return RubricPage(context, self.settings)\n        if pagelet", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "               if pattern.datafile is None:\n                    errmsg += \"Pattern %s has no data file.\\n\"%pattern.name\n                    rvalue = False\n                    break\n\n            # 2.2 data file existence\n            elif mode == \"Calculate\":\n               ", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'description')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n\n", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, postprocessors);\n\t\t\n\t\tString survey = \"survey\";\n\t\t\n\tFile inputFile = new File(basePathDDI2FO + \"/\" + survey + \"/\" + \"input.", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       user.setPassword(passwordTmp);\n                        user.setDeviceId(deviceId);\n                        user.setDeviceProduct(deviceProduct);\n                        user.setDeviceProduct(deviceProduct);\n                        user.setDeviceProduct(deviceProduct);\n                       ", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^$', RedirectView.as_view(permanent=True, url='/packages')),\n    url(r'^new$', staff_member_required(NewPackageView.as_view(), login_url=LOGIN_URL),\n       ", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, GPSL1L2BitEncoder)\n  assert encoder.bandIndexes[0]", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict[\"tg\"][\"tg\"][\"tg\"][\"tg\"][\"tg\"][\"tg\"][\"tg\"][\"tg\"][\"tg\"]\n\n\ndef run_read(tg):\n    \"\"\"\n    Mock read function and return", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                   procs.append(KaldiProcessWorker(function, return_queue, stopped))\n                    procs[-1].start()\n                    procs[-1].join()\n                    if stopped.stopped():\n                        break\n                else:\n                    return_", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "           dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfss(self):\n        root_dir = os.path.join(self.data_dir, 'NFS')\n", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   boolean isValid(FixTag tag, Validity validity);\n    boolean isValid(FixTag tag, Validity validity, boolean... ignore);\n    boolean isValid(FixTag tag, Validity validity, boolean... ignore);\n    boolean isValid(F", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "           yield self._iter_chunks(bounds, chunk_idx)\n\n    def _iter_chunks(self, bounds, chunk_idx):\n        \"\"\"Iterate over chunks.\"\"\"\n        for start, end in bounds:\n            yield self._iter_chunk(start,", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAndQueryNode andQueryNode, Void param) {\n\t\t\tAlvisIRAndQueryNode queryNode = new AlvisIRAndQueryNode();\n\t\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\t\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate Validator validator;\n\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate File outputFolder;\n\tprivate File inputFolder;\n\tprivate File inputFile;\n\tprivate File outputFile;\n\t\n\tprivate boolean isValid;\n\tprivate ValidationMessage validation", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));Next line of code:\n        registry.put((byte) (QUERY_EXP ^ RES", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       FileSaver fileSaver = new FileSaver(content, lang, \"twitter\", url);\n                        fileSaver.save(logDb);\n                        map.put(tweet.getText(), true);\n                    }\n                } catch (Exception e) {", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "       return lines\n\n    def render(self, obj):\n        return self._render_bufr_message(obj)\n\n\nclass IndentedTextRenderer(Renderer):\n    \"\"\"\n    This renderer renders the given object by indentation the output.\n    \"\"\"\n\n   ", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "       help=\"network latency time [millisecond].\n        the minimum latency time is 100 ms.\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 100ms\n        \"\"\".format(\n            \", \".join", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_contact(self):\n        return Contact.objects.filter(phone_number=self.phone_number).first()\n\n    def get_group(self):\n        return", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   PCollection<GCPProject> liveProjects = pipeline.apply(\n        \"Read live projects\",\n        Read.from(new LiveProjectSource(org)));\n\n    // Convert live projects to GCPResource objects.\n    PCollection<GCPResource> liveResources = liveProjects", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.rule = ContentSimhashSampling()\n        self.rule.get_similar_path = MagicMock(return_value=[\"/test\"])\n        self.rule.get_similar_path.return_value = [\"/test\"]\n        self.rule.get_similar", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(Condition(AndCondition(**conditions)))\n    elif \"or\" in operations:\nNext line of code:\n        conditions.append(Condition(OrCondition(**conditions)))\n    elif \"not\" in operations:\nNext line of code:\n        conditions.", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       assert get_square_idx(1, 1) == 1\n\n\nclass TestDutchNationalPartition(object):\n    \"\"\"\n    Question 6.18\n    \"\"\"\n\n    def test_basic_example(self):\n        assert dutch_n", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final ICompilationUnit testClass2;\n\n    private final ICompilationUnit testClass;\n\n    private final ICompilationUnit testClass2;\n\n    private final ICompilationUnit testClass3;\n\n    private final ICompilationUnit testClass4;\n\n", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "     sink_properties,\n      global_properties)\n\n  def AsyncProcessRequest(self, sink_stack, msg, stream, headers):\n    \"\"\"Process a request message.\n\n    Args:\n      sink_stack - The SinkStack representing the processing state of the message.", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate boolean debugSpatial = false;\nNext line of code:\n\tprivate boolean debugSpatialOrdering = false;\nNext line of code:\n\tprivate boolean debugSpatialOrderingMix = false;\nNext line of code:\n\tprivate boolean debugS", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "     var files = new StableList<Path>();\n      var file = new StableList<Path>();\n      var filePath = new StableList<Path>();\n      var fileContent = new StableList<String>();\n      var fileContentLines = new StableList<String", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "       return RespostaSAT.analisar(retorno)\n\n    def consultar_numero_sessao(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_numero", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPEAKER_ACTION", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   if gopts.event_log:\n      git_trace2_event_log.SetLogPath(gopts.event_log)\n\n    if gopts.git_trace2_event_log:\n      git_trace2_event_log.SetLogPath(", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Named(\"preferences\")\n    SharedPreferences providePrefs(SharedPreferences prefs) {\n        return prefs;\n    }\n\n    @Provides @Singleton\n    FileCache provideFileCache(Application app, Ion ion) {\n        return new FileCache(", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       assertThat(ds, totalQueryCount(3));\n        assertThat(ds, totalQueryCount(3));\n    }\n\n    @Test\n    public void testTotalCountForBatch() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExec", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     *", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       verifiers.put(\"Local files exist\", new LocalFilesExistVerifierImpl());\n        verifiers.put(\"Remote files exist\", new RemoteFilesExistVerifierImpl());\n        verifiers.put(\"Schema name is valid\", new ValidSchemaNameVerifierImpl());\n    }", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n        }\n    }\n\n    public void onPostLoginExecute(ServerInfo serverInfo) {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n\n        //Initialize database (once in application)\n        if (!", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    * @throws DrupalFetchException if there's an error during the request.\n     */\n    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs out a user (via user.log", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       self.chum.sendMessage(text, quirks)\n        self.textInput.clear()\n        self.textInput.setFocus()\n        self.textInput.returnPressed.connect(self.sentMessage)\n        self.textInput.setFocus()\n        self", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/logout', LogOutHandler),\n            (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/problem', ProblemHandler),\n            (r'/problems', ProblemListHandler),\n            (", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Unknown criterion: \" + criterion);\n        }\n\n        return informationCriterion;\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.fac", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(ty1, ty2)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a simply typed expression into a Fst.\n    \n    Arguments:\n    - `expr`: an expression\n    \"\"\"\n   ", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(BatteryStatusIndicator batteryStatusIndicator);Next line of code:\n    void inject(EventBus eventBus);Next line of code:\n    void inject(Resources resources);Next line of code:\n    void inject(AudioManager audioManager);Next line of code:\n", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   private List<SliceValue> values;\n    private List<String> categories;\n    private List<String> subCategories;\n    private List<String> subSubCategories;\n    private List<String> subSubSubCategories;\n    private List<String> sub", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   with pytest.raises(ResponseValidationError):\n        handle_request(\n            PyramidSwaggerRequest(\n                Request(\n                    Route(\n                        path='/foo',\n                        method='GET',\n                        route_info=None,\n                       ", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t/**\n\t * @param ctx\n\t * @throws IOException\n\t */\n\tpublic void enterCommand(ConsoleCommandParser.CommandContext ctx) throws IOException {\n\t\tif ( ctx.cmd != null ) {\n\t\t\tString cmd = ctx.cmd.getText();\n\t", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "\n            except TextGridParseError as e:\n                self.return_dict[\"parse_error_files\"].append(e)\n\n            except Exception as e:\n                self.return_dict[\"other_error_files\"].append(e)\n\n    def __repr__(self", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "       PressureSensorResource,\n        \"/aircraft/sensors/pressure_sensor\",\n        resource_class_args=(sensors.pressure_sensor,)\n    )\n\n    api.add_resource(\n        PitotTubeResource,\n        \"/air", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueKts())\nNext line of code:\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsi", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   '--fq, --filter-query QUERY-STRING When pull operations are used, filter',\n    '--fq, --filter-query QUERY-STRING When pull operations are used, filter',\n    '--fq, --filter-query QUERY-STRING", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate Hints getHintById(Long id) {\n\t\treturn submissionServices.getHintById(id);\n\t}\n\t@Resource\n\tprivate void updateHint(Hints hint) {\n\t\tsubmissionServicesServices.updateHint(hint);\n\t}\n\t", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           AWSLambdaException awsLambdaException = (AWSLambdaException) t;\n                            if(awsLambdaException.getErrorCode() == null) {\n                                logError(title, awsLambdaException.getMessage());\n                            } else {\n                                logError(title, aws", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                      join_keyword=u'\\u0915\\u0940\\u0902')\n\n    def test_full_e2e_english_signup_and_cancel_flow_with_pregnant_signup(self):\n       ", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected Location lastLocation;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdate", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   print \"\\n[INFO] MobSF will perform Dynamic Analysis on Android Virtual Device\"\n    # adb, avd_path, reference_name, dup_name, emulator\n    # adb, avd_path, reference_name, dup_name, emulator\n    # ad", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Bit):\n    constructorList = [\n        Int('RRC_type', Pt=0, Type='uint8', Repr='hex'),\n        Int('RRC_subtype', Pt=0, Type='uint8', Repr='hex", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tadjac = CreateAdjacSet(v_lh, v_rh, faces_lh, faces_rh, opts.vertexdist[0], opts.vertexdist[1], opts.vertextriangularmesh)\n\t\t\t\tadjac", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "     result.append(\" = \");\n    }\n    acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    result.append(CLOSE_BRACKET);\n  }\n\n  public void visit(final Constant constant) {\n    result.append", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "     cacheService.storeCacheList(new CacheList(listName));\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final Optional<String> listNameOption = Dialogs.\n        create().\n       ", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "       'self.Pt = self.PtFunc(self.Pt)',\n        ]\r\n    def __init__(self, CallName='', ReprName='', Pt=None, PtFunc=None):\r\n        Layer.__init__(self, Call", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                               TimeEntryOvertimeAggregation.class\n                )\n        );\n\n        timeEntriesTable.getColumn(\"overtime\").setCaption(\n                ScreensHelper.createStringFromMultipleEntities(\n                        projectsService.getEntityMetaPropertyPath(Time", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "           (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n            (True, Pub", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "                                 self._expansion_num, ExpInfo.BOARDTYPE)\n\n    @property\n    def supported_event_types(self):\n        event_types = []\n\n        for event_type in EventType:\n            try:\n                ul.enable_event", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "       self.key_size = read_u16le(f)\n\n        self.objects = {}\n        for i in range(0, count):\n            key = read_u16le(f)\n            value = self.objects.get(key, None)", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "           user = create_inactive_user(email, full_name)\n\n            # Send invitation email\n            subject = _('Invitation to join %(site_name)s')\n            template = 'connect/accounts/emails/invitation.txt'\n            url", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       draft = await self.fetch_draft_for_channel(ctx.guild.id, ctx.channel.id)\n        if draft:\n            print(draft.draft_content)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           ex = Hitbtc('bccbtc')\n        elif name == \"%s_ETH_USD\" % constant.EX_GDAX:\n            ex = Gdax('ethusd')\n        elif name == \"%s_ETH_BTC\" % constant", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is not None:\n                yield item\n\n    else:", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   DummySherpaServer server = new DummySherpaServer(10);\n    try {\n      DataSource ds = new SHPDataSource(server.getAddress().getHostName(), server.getAddress().getPort());\n      Connection conn = ds.getConnection(NoCredentials", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tresult.setDefaultField(getFileAttribute(basedir", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   deviceMiToken = MiPushClient.getInstance().getToken();\n                    //stopGCM();\n                    //Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            default:\n                break;\n", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n\n    /**\n     * @param server The KadServer to connect to\n     * @param localNode The local node\n     * @param bootstrapNode The bootstrap node\n     * @param config The configuration to use\n     */\n    public ConnectOperation", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "               tablefmt = None\n            output.append(tablefmt.format(rows, numalign, stralign))\n        if show_header:\n            output.append(headers)\n    return '\\n'.join(output)\n\n\ndef format_error(error):\n    if is", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "       return words_api(wordnik_api, token)\n\n\ndef create_app():\n    app = Flask(__name__)\n    create_routes(app)\n    return app\n\n\nif __name__ == '__main__':\n    app = create_app", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@Inject\n\tprivate LoginActivity loginActivity;\n\t@Inject\n\tprivate FeedbackActivity feedbackActivity;\n\t@Inject\n\tprivate ProjectListActivity projectListActivity;\n\t@Inject\n\tprivate TaskDetailsActivity taskDetailsActivity;\n", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertIsInstance(handle, HANDLE)\n\n    def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False)\n        self.assertRaises(WindowsAPIError, handle", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root);\n        this.vms = new SpringVms(restTemplate, root);\n        this.jobs = new SpringJobs(restTemplate, root);\n    }\n\n    @Override\n    public Info", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return parserHolder.parse(roundEnv, roundDescriptor, currentAnnotatedElement, originatingElements);\n                })\n                .collect(Collectors.toList());\n        if (parsedPaths.isEmpty()) {\n            LOG.debug(\"No paths found\");\n            return", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   protected CrawlerHandler crawlerHandler;\n\n    protected ExecutorService executorService;\n\n    protected AtomicReference<Crawler> crawlerReference = new AtomicReference<>();\n\n    protected AtomicInteger crawlerThreads = new AtomicInteger(1);\n\n", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new AddKeyAction(actionPopupGroup));\n        }\n        actionPopupGroup.add(new AddValueAction(actionPopupGroup));\n        actionPopupGroup.add(new DeleteKeyAction(actionPopupGroup));\n        actionPop", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiPanel panel;\n\n    private GuiButton addButton;\n    private GuiButton removeButton;\n    private GuiButton editButton;\n    private GuiButton saveButton;\n    private GuiButton cancelButton;\n\n    private GuiText channelName;", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_BACK_CODE:\n                return new BtnBackLight();\n            case ConstantStr.FUNC_CLEAR_BACKGROUND_CODE:\n                return new BtnClear", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       Section section = toolkit.createSection(form.getForm(), SWT.NONE);\r\n        section.setText(Messages.configurationEditorPageTitle);\r\n        section.setLayout(new GridLayout(2, false));\r\n        section.setBackground(toolkit.getColor(", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       type = Type.Types(\"string\")\n        type.format.pretty = \"foo\"\n        type.format.advanced = \"bar\"\n        type.format.pretty = None\n        type.format.advanced = None\n        type.format.pretty = \"baz\"\n        type.format.advanced = \"qux\"\n        type.format.pretty = \"quux\"\n        type.format.advanced = \"quuz\"\n        type.format.pretty = \"quux\"\n        type.format.advanced = \"quuz\"\n        type.format.pretty = \"quux\"\n        type.format.advanced = \"quuz\"\n        type.format.pretty = \"quux\"\n        type.format.advanced = \"quuz\"\n        type.format.pretty = \"quux\"\n        type.format.advanced = \"quuz\"\n        type.format.pretty = \"quux\"\n        type.format.advanced = \"quuz\"\n        type.", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "               new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStartTimeCommand.class, StartEvent::fromCommand, this::queueEvent));\n        commandProcessor", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_cluster_location(self, _cluster", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'perms': 'write',\n        'frob': frob,\n    }\n\n    url = urlunparse(('http', 'flickr.com', '", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\t\tfcpMessage = new FCPPutFailedException(e);\n\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       k -= 1\n      except IndexError:\n        break\n      if bytecode[k][2] in NO_FALL_THROUGH:\n        break\n      cond_stack_size -= 1\n    condition_bytecode.reverse()\n    condition_ast", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   private List<CreditCard> creditCards = new ArrayList<>();\n    private List<CreditPeriod> creditPeriods = new ArrayList<>();\n    private List<DailyExpense> dailyExpenses = new ArrayList<>();\n    private List<SelectableCreditCardViewHolder> selectableCred", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\nclass PlatformAdmin(admin.ModelAdmin):\n    list_display = ('engine_name', 'subject', 'api", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   def parse(self, ping_message: Sequence[str]) -> PingStats):\n        \"\"\"\n        Parse ping command output.\n\n        Args:\n            ping_message (Sequence[str]):\n                Ping command output.\n\n        Returns:\n            Ping", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           // Assuming that the messages are sorted by id\r\n            latestMessageOnDisplay = new AtomicLong(0);\r\n        } else {\r\n            latestMessageOnDisplay = new AtomicLong(chat.getLastMessageId());\r\n        }\r\n\r\n        // If chat is null,", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\t\tpublic static int ticks = 0;\n\tpublic static int frames = 0;\n\tpublic static int framesPerSecond = 0;\n\tpublic static int framesPerSecond = 0;\n\tpublic static int framesPerSecond = 0;\n\tpublic static int frames", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_userinfo(fb_user, person=person)\n\n    if not account:\n        raise ValueError(\"Can't complete Facebook authentication without a Facebook account\")\n\n    account.authinfo = ':'.join((access_token, access_", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, is(statement()));\n        assertThat(qe, is(statement()));\n        assertThat(qe, is(statement()));\n        assertThat(qe, is(statement()));\n        assertThat(qe, is(statement()));\n        assertThat", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     } else {\n        log(\"server response is: unknown \" + getFileNames(), null);\n        successful = false;\n        cancelUpload(i18nStrs.uploaderServerError());\n        return;\n      }\n    }\n\n  private void parseServerResponse", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points = merge_assembly_points(assembly_points_by_sources,\n                                                  c_merging_cw_min=args.c_merging_cw_min,\n                                                  c_merging_strategy=args", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "       GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        PitotTubeResource,\n        \"/aircraft/sensors/", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "                       msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send_channel_config_embed(ctx, config):\n\n        embed = Embed", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.isInstalled())\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\tshowConfirm(\n\t\t\t\t\t\tgetString(R.string.install_levels),\n\t\t\t\t\t\t\tgetString(R.", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private final WeeklyCaptionProvider<ITEM> weeklyCaptionProvider;\n\n    /**\n     * The weekly view caption format provider.\n     *\n     * @param weeklyCaptionProvider\n     */\n    public Calendar(WeeklyCaptionProvider<ITEM", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root, info);\n        this.vms = new SpringVms(restTemplate, root, info);\n        this.vms = new SpringVms(restTemplate, root, info);\n    }\n\n    @", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   (signerId, keyId) -> Lists.newArrayList(new RSAPublicKeyVerifier(keyId, privateKey));\n\n    locators = new VerifierProviders(hmacLocator, rsaLocator);\n    locatorsFromRuby = new Ver", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListenerListener easyOnViewDetachedFromWindowListener;\n    protected E", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "               } catch (FilesNotFoundException e) {\n                    assertTrue(true);\n                } catch (FilesException e) {\n                    assertTrue(false);\n                }\n            }\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                   trackHistoryEntry = new TrackHistoryEntry(trackHistoryEntry.title, trackHistoryEntry.artist, trackHistoryEntry.album, trackHistoryEntry.trackNumber, trackHistoryEntry.year, trackHistoryEntry.duration, trackHistoryEntry.bitrate, trackHistoryEntry.url,", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "   @SuppressLint(\"NewApi\")\n    @OptionsMenu(R.menu.menu_main)\n    public interface MainActivityListener extends IRavelryActivity {\n        void onStashSelected(StashResult result);\n    }\n\n    @SuppressLint(\"NewApi", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       ((CandyBarMainActivity) mContext).selectPosition(3);\r\n                        break;\r\n                    case WALLPAPER:\r\n                        ((CandyBarMainActivity) mContext).selectPosition(4);\r\n                        break;\r\n                    case OTHER:", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = Default.ENCODING\n\n    if typepy.is_empty_sequence(proxy):\nNext line of code:\n        proxy = None\n\n    convert_configs = load_convert_config(\n        logger, ctx.obj[Context.CONVERT_", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "       return None\n\n    def items(self, **kwargs):\n        \"\"\" Returns a list of :class:`~plexapi.media.Playable` objects. \"\"\"\n        if self._items is None:\n            self._items = self._getItems(**kwargs)\n        return self", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(TypeError, _environment_to_string, \"a\")\n\n    def test_type_check_for_environment_value(self):\nNext line of code:\n        self.assertRaises(TypeError, _environment_to_string", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   if gopts.interactive:\n      editor = Editor(cmd.client.globalConfig.editor)\n      editor.set_config(cmd.client.globalConfig.editorConfig)\n      editor.set_config(cmd.client.globalConfig.editorConfig)\n      editor.", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // 执行成功，则执行回调\n                for (RunnerTaskListener runnerListener : runnerListenerList) {\n                    runnerListener.onSuccess(taskData);\n                }\n            } catch (Exception e) {\n                // 执", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       self.assertTrue(r.reject(None))\n\n    @async_test()\n    async def test_reject_404(self):\n        r = RejectStatusCode()\nNext line of code:\n        self.assertTrue(r.reject(", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //用户的性别\n        stuSex = split[2];\n        //用户的手机号\n        stuPhone = split[3];\n        //用户的邮箱\n        stuEmail = split[4];\n       ", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "       self.__device = device\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__export_path = export_path\n        self.__is_parse_filter_id", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "           state[\"inventory\"] = inv\n        except AttributeError:\n            pass\n\n    def add_stats_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            stats = obj.stats\n            state[\"", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  * f0 -> <4th order operator> f1 -> ( Ord4Search() )?\r\n   */\r\n  public Query visit(Ord4Search n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.token", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t}\n\n\tpublic void setSurveyName(String surveyName) {\n\t\tthis.surveyName = surveyName;\n\t}\n\n\tpublic void setCleaningFolder(boolean cleaningFolder)", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       try {\r\n            decoder = DataDecoder.valueOf(dataDecoder);\r\n        } catch (Exception e) {\r\n            print.append(\"DataDecoder not found\");\r\n            print.append(\"\\n\");\r\n            print.append(\"Available DataDecoders:\");\r\n            print", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "       self.time_manager.ntp_sysinfo = self.time_manager.ntp_sysinfo\n        self.time_manager.ntp_sysinfo = self.time_manager.ntp_sysinfo\n        self.time_manager.ntp_sysinfo =", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       cursorById.close();\n\n        // Test the basic content provider query with a where clause\n        where = new MovieSelection();\n        where.id(movieRowId);\n        Cursor cursorById = mContext.getContentResolver().query(MovieColumns.CONTENT_URI,null", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.ins", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertEqual(etree_iter_nodes(self.elem),\n                             etree_iter_strings(self.elem))\n\n    def test_etree_iter_nodes_function(self):\n        self.assertEqual(etree_iter_nodes(self", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.mapview);\r\n\t\toverlays = new ArrayList<Overlay>();\r\n\t\toverlays.add(new ExtendedOverlayItem(new GeoLocation(1,\r\n\t\t\t1, \"test\")));\r\n\t\tover", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "           self.switch_configuration.enabled_processor)\n\n    def get_netconf_protocol(self):\n        return \"netconf\"\n\n    def get_default_ports(self):\n        return BaseCiscoSwitchCore.get_default_ports()\n\n    def", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRate", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def consultar_numero_sessao(self, numero_sessao):\n        \"\"\"Sobrepõe :meth:`~satcfe", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   calculate_dict = get_prop_samples(desired_data, constituents)\n\n    calculate_dict = get_prop_samples(desired_data, constituents)\n    calculate_dict = get_prop_samples(desired_data, constituents)\n    calculate", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   api.add_resource(ForcesResource, \"/fdm/forces\",\n                         resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_condition\",\n                     resource_class_", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   def get_word_frequency(self):\n        \"\"\"\n        Calculate the relative word frequency across all the texts in the corpus\n\n        Returns\n        -------\n        dict[str, float]\n            Dictionary of words and their relative frequencies\n        \"\"\"\n        word_count", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   public static final String = \"String\";\n\n    private static final String EXTRA_PERIOD_ID = \"periodId\";\n    private static final String EXTRA_CURRENCY = \"currency\";\n\n    private static final String EXTRA_CAMER", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final TimeUtil time = new TimeUtil();\n\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final List<String> strings = new ArrayList<String>();\n\tpublic final List<String> strings2 = new", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       return mongoManager.getServerConfigurations();\n    }\n\n    private MongoTree createTree() {\n        return new MongoTree(mongoManager, mongoTreeBuilder);\n    }\n\n    private void installActions() {\n        ActionGroup actionGroup = ActionManager.getInstance().", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1\n\t\tH1(Css.H1, \"TodoMVC\").aside();\n\t\t// Input\n\t\tInputNext(Css.Input, \"Add Todo\", controller.getModels(), controller.getModels());\n\n\t\t// Foot", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               if(output != null) {\n                    if(SAVE_FILE_TO_STORAGE) {\n                        saveImage(output);\n                    }\n                    else {\n                        Intent intent = new Intent();\n                        intent.putExtra(FLAG_IMAGE", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        mActivity = (MainActivity) getActivity();\n\n        mRecyclerView = (RecyclerView) getView().findViewById(R.id.song_list", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   search = Search(model=model, index=index, key=key)\n    assert search.model == model\n    assert search.index == index\n    assert search.key == key\n    assert search.projection == \"all\"\n    assert search.consistent == True\n", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivitySet);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,int id,String gcActivityName) {\n", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "           '/properties':              RestAppPropertys\n        }\n\n        # Setup the API\n        for r in self.resources:\n            self.api.add_resource(self.resources[r], r)\n\n        # Setup the API version\n        self.api.", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "       self._df_manager.set_default_dir(directory)\n\n    def set_default_dirs(self, directory):\n        self._directory = directory\n        self._df_manager.set_default_dir(directory)\n\n    def set_default_dirs", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "       MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n        ),\n    )\n    group.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final static Map<Channel, ChannelStatus> CHANNELS = Maps.newEnumMap(ChannelStatus.class);\n\n    private final static Map<Channel, ChannelStatus> CHANNELS = Maps.newEnumMap(ChannelStatus.class);\n\n    private final", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        * @param event\n         *            The event that was clicked\n         */\n        void onDateClick(Date date, ContextMenuEvent event);\n    }\n\n    /**\n     * Listener interface for listening to event context menu items\n     */\n    public interface DateContextMenuListener", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_db_type(self, db_type):\n        self._db_type = db_type\n        return self\n\n    def set_db_type(self, db_type):\n", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onPing(client);\n            break;\n        }\n\n        case PACKET: {\n            Namespace namespace = namespacesHub.get(packet.getNsp());", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ActionBarPullToRefresh pullToRefresh;", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostProcessor[] postProcessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\n\t\tLOGGER.info(\"Creating new pipeline...\");\n\t\tGenerationService generationService = new GenerationService(pipeline.getInFormat(), pipeline.get", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<GCPProject> projects =\n        pipeline.apply(\"Read projects from CRM API\",\n            Read.from(new LiveProjectSource(org)));\n\n    // Apply the ParDo to the projects.\n    PCollection<KV<GCPResource, K", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "       range = Column(String, range_key=True)\n        range = Column(String, range_key=True)\n        range = Column(String, range_key=True)\n        range = Column(String, range_key=True)\n        range = Column(String,", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "               self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                         dim, vocab, lookup,\n                                                         fork_and_rnn, cache=self._cache)\n            else:\n", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isTyping;\n    // Guarded by _lockObject.\n    private boolean _isTyping;\n    // Guarded by _lockObject.\n    private boolean _is", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    Rotate", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "           form.instance = self.object\n\n        return super(UserBase, self).get(request, *args, **kwargs)\n\n    def get_form_class(self):\n        if self.request.user.is_superuser:\n            return UserFormCreacion", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setFog(fog);\n        return descriptor;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Light\n", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void writeFloatBlock(String path, float[][] data, int blockSizeX, int blockSizeY, long nbBlocksX, long nbBlocksY)\n\t{\n\t\tif(this.handle == null) new ErrorJSON(\"Please open the Loom file", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorInfoComponent plusActorInfoComponent();\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plusActorDetailsComponent();\n}\npackage com.rashwan.reactive_popular_movies", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\t\tview.initProgressView(vals);\n\t\t} catch (final SocketViewException e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark.\n\t *\n\t * @throws SocketView", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   sync_stats_manager = SyncStatsManager()\n\n\nclass BaseView(ManagersMixin, TemplateView):\n    \"\"\"\n    Base View\n    \"\"\"\n    template_name = 'dashboard/base.html'\n\n    def get_context_data(self,", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       planilla_de_relevamiento = PlanillaDeRelevamiento.objects.get(planilla_modelo__nombre=request.GET[\"planilla_modelo\"])\n        if planilla_de_relevamiento.habilitada:\n            return render(request", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self._cstr = self.ast\n    else:\n      self._cstr = self.ast.root\n    self._live = None\n\n  def __repr__(self):\n    return 'Constraint(%s)' % self.tree\n\n  def __str__(self):", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<MessageAction>        messageActionSupportHandler        = new ActionSupportHandler<MessageAction>(MessageAction.", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [1023])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [12345", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   return result\n\n###\n# Date and time functions\n@method(function('format-date', label='date formatting function', nargs=(2, 3),\n                 sequence_types=('xs:dateTime?', 'xs:string', 'xs:string?', 'xs", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item is None:\n\t\t\t\treturn default_flags\n\t\t\telse:\n\t\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\t\tprint(str(", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       array.items = [object1, object2, object3]\n\n        object_dto = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        object_dto = Hydrator(version2", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         TemplateCatalogConfig catalogConfig = new TemplateCatalogConfig(catBytes);\n          FASTClassLoader loader = new FASTClassLoader(catalogConfig);\n          PipeBundle pipeBundle = new PipeBundle(loader);\n          Pipe pipe = pipeBundle.getPipe();\n         ", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UN", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "               containsString(\"\\\"_index\\\":\\\"elasticsearch\\\"\"));\n    }\n\n    @Test\n    public void storeWithId() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRecordsResponse(Resources.asByteSource(Resources.getResource(\"respons", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "           (True, PubKeyAlgorithm.FormerlyElGamalEncrypt): ElGPub,\n            (True, PubKeyAlgorithm.FormerlyElGamalEncrypt): ElGPub,\n            (True, PubKeyAlgorithm.FormerlyElGam", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = Schema.get(\n                            new ExtMap().mput(Schema.InvokeKeys.ENTITY, context.get(Schema.InvokeKeys.ENTITY))\n                            .mput(Schema.InvokeKeys.ENTITY_KEYS, context.get(Schema.", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/(?P<user_id>[-\\w]+)/$', new_user, name='new_user'),\n    url(r'^users/(?P<user_id>[-\\w]+)/edit/$', edit_user, name='edit_", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           }\n                        if (PreferenceManager.getDefaultSharedPreferences(getActivity())\n                                .getBoolean(SettingsActivity.KEY_PREF_PLAY_SHUFFLE_TEST, true)) {\n                            stack.shuffle();\n                        }\n                   ", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   private Handler handler = new Handler();\n    private DropDownMenu dropDownMenu;\n    private DropMenuAdapter dropMenuAdapter;\n    private List<String> list = new ArrayList<>();\n    private List<String> list1 = new ArrayList<>();\n    private List<String> list", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateBuffImg()\n        obj.updateBlockLabels()\n        obj.updateBlockLabels()\n        obj.updateBlockLabels()\n        obj.updateBlockLabels()\n        obj.updateBlockLabels()\n        obj.updateBlockLabels()\n", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "       f = XorDiff(d1, d2)\n        beta = Constant(0, DP_WIDTH)\n        i, j = self._find_preimage(f, beta)\n        assert i == d1.val and j == d2.val\n\nNext line", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformFlatten(Node node);\n\t}\n\t\n\tprivate static class FlattenTransformer implements NodeTransformer {\n\t\tpublic FlattenTransformer() {\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Node transformConstant(", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\tcommands.add(new CommandSetTo());\n\t\tcommands.add(new CommandSetFrom());\n\t\tcommands.add(new CommandList());\n\t\tcommands.add(new CommandList());\n\t\tcommands.add(", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       String challenge = new String(challengeData.getBytes(\"UTF-8\"));\n        connection.sendChallenge(challenge);\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        String successData = doc.getText();\n        connection.sendSuccess(", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\n\nclass TestCipher(unittest.TestCase):\n    def setUp(self):\n        self.cipher = None\n        self.cipher_key = None\n        self.cipher_key_size = None\n        self.cipher_key_size", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private SongListAdapter mAdapter;\n\n    private Toolbar mToolbar;\n    private FastScroller mFastScroller;\n\n    private boolean mShowToolbar;\n    private boolean mShowFastScroller;\n\n    private boolean mIsPlaying;\n\n", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           mImmersiveSensorNavigation = new ImmersiveSensorNavigation(mActivity, effect);\n            mImmersiveSensorNavigation.attach();\n        } else if (effect instanceof ImmersiveEffect) {\n            mImmersiveTouchNavigation = new ImmersiveTouchNavigation", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       Bit('E', ReprName='ESM', Pt=4, BitLen=1, Repr='hum'),\n        Bit('S', ReprName='Security', Pt=5, BitLen=1, Repr='hum'),\n        Bit('C', ReprName", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           mArtist.setId(mID3TagEditorDialog.getId());\n            mArtist.setName(mID3TagEditorDialog.getTitle());\n            mArtist.setAlbumName(mID3TagEditorDialog.getAlbumName());\n            m", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "\n        if self.stopped.stop_check():\n            return\n        self.log_info(f\"Parsed {len(self.files)} files in {time.process_time() - begin_time} seconds\")\n        self.log_info(\"Parsed cor", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t@Override\n\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user);\n\t}\n\n\t@GET\n\t@Path(\"users\")\n\t@Produces(\"application/json\")\n\t@Override\n\tpublic User", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiInfo> apiInfo(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns information about the API plan belonging to the given API key.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-info", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   @Override\n    public void visit(LogMessage message) {\n      if (message instanceof LogMessage.LogMessageLine) {\n        LogMessage.LogMessageLine line = (LogMessage.LogMessageLine) message;\n        if (line.getLevel() == Level.INFO) {", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   \"\"\"\n    Testing the Glasberg-Moore-Slaney example.\n    \"\"\"\n    erb = erb(freq, bandwidth)\n    assert erb.take(10) == erb.take(10)\n    assert erb.take", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "           offset += len(dataset)\n\n    if bytelength is not None:\n        # If we have a bytelength, we need to read the bytes\n        #   and then convert them to a Dataset\n        fp_tell = fp.tell()\n", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   try {\n      for (ICommentProcessor commentProcessor : this.commentProcessors) {\n        if (commentProcessor != null) {\n          commentProcessor.run(document, proxyBuilder);\n        }\n      }\n    } catch (Exception e) {\n      logger.error(\"", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data)", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   def flags_int(self, val):\n        self._flags = val\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self._flags = self.int_to_bytes(val)\n\n    def __init__(", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "       self.textInput.clear()\n        self.textInput.setFocus()\n        self.textInput.returnPressed.connect(self.sentMessage)\n        self.textInput.textChanged.connect(self.textChanged)\n        self.textInput.textChanged.connect", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "   def check(arg, env):\n        if isinstance(arg, _StringLike):\n            return check(arg, env)\n        elif isinstance(arg, _StringLike):\n            return check(arg, env)\n        elif isinstance(arg, _StringLike):\n", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   if features is None:\n        features = {}\n\n    # Get the data\n    data_quantities = get_data_quantities(dbf, comps, phase_name, configuration, symmetry)\n    if data_quantities is None:\n        raise ValueError(\"No data", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "\n    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        if (controller == null || componentController == null || adMedia == null) {\n            Ex", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds);\n\n    @GET(\"suggest\")Next line of code:\n    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       return Stream(model, self)\n\n    def transaction(self, *, mode=\"read\", **kwargs):\n        \"\"\"Create a :class:`~bloop.transaction.Transaction` for the current session.\n\n        :param mode: \"read\", \"write\", or \"read_", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "       self.log.info(\"accuracy on %s: %2.2f%% (UAR %2.2f%%)\" % (\n            \" & \".join([p.name for p in parsed_args.eval_partitions]), 100 * accuracy, 1", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def __init__(self, graph, strict=False):\n        self.graph = graph\n        self.strict = strict\n\n    def __getattr__(self, name):\n        if name in self.graph.registry:\n            return self.graph.registry[", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "   @scoped_subgraph\n    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences and is initialized with the encoder final state.\n\n       ", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nall_product_slugs = []\nNext line of code:\nfor product in Product.objects.all():\n    all_product_slugs.append", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorSegmentNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorGroup", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frame frame(Attribute... attributes) {\n\t\treturn new Frame(attributes);\n\t}\n\n\tpublic static Frame frame(Attribute... attributes) {\n\t\treturn new Frame(attributes);\n\t}\n\n\tpublic static Frame frame(Attribute... attributes) {\n\t", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final int numberOfRows = benchRes.getNumberOfMethods();\n        final AbstractMeter[][] meters = benchRes.getMeters();\n        final AbstractResult[][] results = benchRes.getResults();\n        final AbstractTabularComponent[][] tables = new Abstract", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     for edge in visitor.visit(self.graph):\n        if edge.kind == ControlFlow.E_LOOP:\n          return edge.target\n\n      return None\n\n    def get_parent_loop_edge(node):\n      class BwdEdges(EdgeVis", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "   def _parse_serialization_parameters(self, serialization_parameters: str) -> dict:\n        \"\"\"\n        Parse the serialization parameters.\n\n        :param serialization_parameters: the serialization parameters.\n        :type serialization_parameters: str\n\n        :return", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                       else if (Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type)) {\n                            Log.e(LOG_TAG, \"Updating room member.\");\n                            RoomState roomState = JsonUtils.toRoomState(event.", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\t\n\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilter = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDI2FOGenerator ddi2foGenerator = new DDI2FOGenerator();\n\t\n\tprivate", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationReleveTrimestriel(self, _):\n        site = self.GetSelectedSite()\n        annee = self.trimest", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "           H += crosstens(J_rot) + dot(I, H_rot)\n            H += crosstens(J_rot) + dot(I, H_rot)\n            H += crosstens(H_rot) + dot(I, H_", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       if (queuedProjectResult == null) {\n            return;\n        }\n        if (queuedProjectResult.getQueuedProject() == null) {\n            return;\n        }\n        QueuedProject queuedProject = queuedProjectResult.getQueuedProject();", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "               new RefreshCommand(),\n                new MigrateCommand(),\n                new VirtualAddCommand(),\n                new VirtualRemoveCommand(),\n                new VirtualSetCommand(),\n                new VirtualPayCommand(),\n                new VirtualPayCommand(),\n                new VirtualRemoveCommand(),\n                new VirtualSetCommand", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "           _log.info('Initializing a %s prior for the parameters.', prior['name'])\n        else:\n            raise TypeError('prior must be a dict, PriorSpec, or None')\n        if 'name' not in prior:\n            prior['name'] = 'zero", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const(data=arg)\n    elif op == LOAD_ATTR:\n      return Ref(data=arg)\n    elif op == LOAD_NAME:\n      return Ref(data=arg)\n    else:\n      raise Exception(\"Unknown load opcode: %", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Config config;\n\tprivate final Physics physics;\n\tprivate final FringeLayer fringeLayer;\n\tprivate final SpriteBatch batch;\n\tprivate final ControllerPlayer player;\n\tprivate final ControllerInput input;\n\tprivate final ControllerState state;\n\tprivate final ControllerNetwork", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView t", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass, SQLQuery rootQuery) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t\tthis.rootQuery = rootQuery;\n\t}\nNext line of code:\n\tpublic SQLBatch(", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       if app_info['packagename'] == 'com.android.settings':\n            # 启动应用\n            install_and_run(adb, app_info)\n            # 启动应用\n            # 启动应", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    */\n    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return genomes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genomes", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n            ]),\n        ]),\n        {'inc': inc_type},\n    )\n\n\ndef test_union():\n    inc_type = Func[[IntType], IntType]\n    bar_type =", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, prepared());\n        assertThat(pe, is(prepared()));\n        assertThat(pe", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\t\t\tself._properties_dock.set_item(selection[0])\n\t\t\tself._properties_dock.set_item(selection[0])\n\t\t\tself._properties_dock.set_item(selection[0])\n\t\t\tself._", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n            }\n        };\n        mAdapter = new RestAdapter.Builder()\n                .setErrorHandler(handlerError)\n                .set", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(String.class, new DefaultStringRenderer());\r\n\t\tregisterRenderer(Locale.class, new DefaultLocaleRenderer());\r\n\t\tregisterRenderer(Locale.class, new", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSort getFacetSort(Element elt) {\n\t\tFacetSort sort", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<slug>[\\w\\-\\+]+)/(?P<ci_pipeline_uuid>[\\w\\-\\+]+)/(?P<release_branch>[\\w\\-\\+]+)/(?P<package_name>[\\w\\-\\+]+)/", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                            intent.putExtra(Extras.EXTRA_WALLPAPER_BITMAP, bitmap);\r\n                        }\r\n                        intent.putExtra(Ext", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   access_token.save()\n\n    return HttpResponseRedirect(reverse('home'))\n\n\ndef signin_tumblr(request):\n    query = {\n        'oauth_consumer_key': settings.TUMBLR_CONSUMER_KEY,\n       ", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                #   and the sensor-corrected area\n                #   (see https://github.com/RMS-Project/RMS/issues/111)\n                #   (see https", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid = _gen_grid(data, options['param_free'], options['param_ests'])\n\n    # Generate grid of values for parameters (force to be equal length)\n    grid = _gen_grid(data, options['param_free'], options['param_ests'])", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollDices();\n          }\n        else {\n          Board.this.rollDices();\n        }\n      }\n    });\n    addActor(rollBtn);\n\n    doubleBtn = new TextButton(\"Double\", ts);\n    doubleBtn.", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "       self.assertEqual(etree_iter_paths(root, '/a/b1/c1'),\n                             etree_iter_paths(root, '/a/b1/c1'))\n        self.assertEqual(etree_iter_paths(root, '/a", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "       self.runner.add(ContentSampling(), with_child=True)\nNext line of code:\n        self.runner.add(ContentSimhashSampling(), with_child=True)\nNext line of code:\n        self.runner.add(RejectStatusCode(), with", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-cfe-cancelamento'),\n            signAC=_opcao('--assinatura-cfe-cancelamento'),\n            numeroCaixa=_opcao('", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    * @return the specified input stream parsed into user names\n     */\n    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a profile.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a profile\n     */\n    Profile parseProfile(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a list of profiles.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a list of profiles\n     */\n    List<", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           this.client.sendRequest(req);\n            \n            // 5. Get the response\n            EtsiResponse resp = this.client.getResponse(apTransId);\n            \n            // 6. Print the response\n            System.out.println(\"Response:\");\n           ", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\t\treturn get_icon(\"calctable\")\n\t\telif type(obj) is CalcSheetAnalysis:\n\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Feature:\n\t\t\treturn get_icon(\"feature\")\n\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<PlayerOverview> playerOverview;\n\tprivate List<Game> game;\n\tprivate List<TeamScheduleResponse> schedule;\n\tprivate List<TeamLeaders> leaders;\n\tprivate List<TeamLeadersResponse> leadersResponse;\n\tprivate List", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       String packageName = packageInfo.packageName;\n        String versionName = packageInfo.versionName;\n        String versionCode = packageInfo.versionCode;\n        String version = packageInfo.versionName;\n        String appName = packageInfo.applicationInfo.packageName;\n       ", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           table_index[table_name] = table_index.get(table_name, 0) + 1\n            object_index[table_name] = object_index.get(table_name, 0) + 1\n            request[table_name] = {\"", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               art = key['art']\n            else:\n                art = None\n            print('{0} {1} {2}'.format(fingerprint, description, art))\n\n    async def generate_key(self, user, description, art):\n        key = await self", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component,", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "       return RespostaExtrairLogs.analisar(retorno)\n\n    def atualizar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.atualizar_sat`.\n", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(self.elem), self.elem.getroot().attrib['xmlns'])\n        self.assertIsNone(node_document_uri('a text node'))\n\n    def test_node_nilled_function(self):\n       ", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:Next line of code:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n               ", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   self.worker.log_error(e)\n    self.logger.error(e)\n    self.logger.error(traceback.format_exc())\n    self.logger.error(f\"Error initializing training for {self.identifier}\")\n    self.logger.", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final OkHttpClient httpClient;\n    private final String redirectUri;\n    private final List<Scope> scopes;\n    private final String authorizationUrl;\n    private final String tokenUrl;\n    private final String refreshUrl;\n    private final String userInfoUrl;\n   ", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n    private final SpringJobs jobs;\n    private final SpringVms vms;\n    private final SpringDeployments deployments;\n    private final SpringInfo info;", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "\n    public void setAudiologistInfo(AudiologistInfo audiologistInfo)\n    {\n        synchronized (_lockObject)\n        {\n            _chat.setAudiologistInfo(audiologistInfo);\n        }\n    }\n\n    public void setAudiologistPicture", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand( getClientManager() );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {Next line of code:\n        return new SvnJavaBranchCommand( get", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        super.drawComponent(mouseX, mouseY);\n        if (this.isHovered()) {\n            this.drawModalCorners(HOVERED);\n        } else", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "         DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new blackCall(),", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class,\n            AthenaGM.class\n    };\n\n\n    /**\n     * Load all modules\n     */\n    public static void load() {\n        for (Class moduleClass : moduleClasses) {\n            try {\n                moduleClass.newInstance();", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    */\n    public static DownloadQueue newDownloadQueue() {\n        return new DownloadQueue();\n    }\n\n    /**\n     * Create a new download queue, the default thread pool size is 3.\n     *\n     * @param threadPoolSize the thread pool size.\n    ", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " @Override\n  public void init(Config config) {\n    var config = getUnchecked(config);\n    var watcherRegistry = new WatcherRegistry();\n    var configFile = config.get(\"configFile\", \"pro.conf\");\n    var configPath = config.", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        Validate.notNull(element, \"element cannot be null\");\n        Validate.notNull(element.getAttribute(\"defaultConverter\"), \"defaultConverter cannot be null\");\n        Validate.", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n                        ExeSQL(sql)\n                        # print('update status done: ',S['status'])\n                        # print('update status done: ',S['status'])\n                        # print('update status done: ',S['status'])\n                        # print('update status done", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "           left_foot_task = None\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_stance.right_foot", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "   BvNot, BvNot, BvNot, BvNeg, BvNeg, BvNot, BvNot, BvNot, BvNot, BvNot, BvNot, BvNot, BvNot, BvNot, BvNot,", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP14Segment(aJPEG.mICCProfile).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tif (aJPEG.mColorSpace != null)\n\t\t{Next line of code:\n", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           if (sl != null) {\n                HibiscusExporter exporter = new HibiscusExporter();\n                exporter.setPrenotifications(prenotIds);\n                exporter.setPrenotificationType(type);\n                exporter.set", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "   from montreal_forced_aligner.alignment.pretrained import generate_pronunciations_arguments\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       ItemStack itemStack = new ItemStack(ItemLorePage.getItem(), 1);\n        entityPlayer.getHeldItemMainhand().setItemStack(itemStack);\n    }\n\n    private EntityPlayer getPlayer(ICommandSender sender, String name) {\n", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private static final DateTimeFormatter USER_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\nNext line of code:\n    private static final DateTimeFormatter RECURRING_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\nNext line of", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger logger = Logger.getLogger(Util.class);\n\n\tprivate static final Logger logger = Logger.getLogger(Util.class);\n\n\tprivate static final Logger logger = Logger.getLogger(Util.class);\n\n\tprivate static final Logger logger = Logger.", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    SlideIn(SlideIn.class),\n    SlideInDown(Slide", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if issubclass(bvf_cipher, primitives.Cipher):\n        problem = SearchRkCh(ch, rounds=rounds, der_mode=der_mode", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "           h5 =  LocalHost5\n            h6 =  LocalHost6\n            h7 =  LocalHost7\n            h8 =  LocalHost8\n            h9 =  LocalHost9\n            h10 = LocalHost10\n            h11 = LocalHost1", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           return command.startswith(\"{:s} {:s}\".format(get_tc_base_command(subcommand), \"change\" if self.is_change_shaping_rule else \"add\"))\n\n        return [tc_command_filter(command) for command in self", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GPSGLONASS():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    * @return a List of Expenses\n     */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private MonthEventsProcessor monthEventsProcessor;\n\n    private ScrollManager scrollManager;\n\n    private OnDayChangeListener onDayChangeListener;", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0] * 25\n\n  def test_inf_input(self):\nNext line of code:\n    my", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               isinstance(t2, RecordMeta)\n            ):\n                t1.__instance__ = Record[field_refs(backref, t2.__items__)]\n                unify(t1, t2, backref)\n            else:\n                raise\n\n    elif isinstance", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       host=\"blink.com\",\n        region_id=\"us-east-1\",\n        client_id=\"\",\n        account_id=\"\",\n        token=\"\",\n        refresh_token=\"\",\n        refresh_token_expires=None,\n        refresh_token_", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\t\tif isinstance(model_item.data, CalcTableAnalysis):\n\t\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\t\tif isinstance(model_item.data, SketchInstance):\n\t\t", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     sink_stack.AsyncProcessResponseMessage(MethodReturnMessage(error=ex))\n\n  def AsyncProcessResponse(self, sink_stack, context, msg, stream):\n    \"\"\"Process a response message.\n\n    Args:\n      sink_stack - The sink stack to send", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       assertThat(out.toString(), startsWith(\"[\"));\n        assertThat(out.toString(), endsWith(\"]\"));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaCliWithoutJmx() throws Exception {\n        TestThread.JM", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data, DrumOperation.APPEND_UPDATE);\n    }\n\n    @Test\n    void testAppendUpdate_with_duplicate_key() throws Exception {\n        try (SimpleDataStore<PLDTestData> dataStore = new Simple", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \"", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaPropertiesMockBuilder()\n                .withBusiness(new BusinessMockBuilder()\n                        .withResponseStrategy(ResponseStrategy.RETURN_ERROR)\n                        .build())\n                .build();\n    }\n\n    private ResponseProcessorManager getResponseProcessor", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._SendMessage(self._ping_msg)\n\n  def _SendMessage(self, msg):\n    \"\"\"Constructs and sends a message.\"\"\"\n    self._log.debug('Sending message.')\n    self._socket.send(msg)\n\n ", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert freq2lag(v) == lag2freq(freq2lag(v))), v\n\n  def test_freq_lag_converters_are_inverses_with_float_inputs(self):\n    for v in [37,", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "       self.spell_helper = SpellHelper(self.utilities)\n        self.guild_config_manager = GlobalConfigManager(self.bot)\n        self.guild_config_manager.load_guild_config()\n        self.guild_config_", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   if operands[0] == operands[1]:\n        return True\n    elif operands[0] < operands[1]:\n        return True\n    elif operands[0] > operands[1]:\n        return False\n    elif operands[0] == oper", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(R.string.personalize_welcome);\n\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEvents.add(new Event(R.drawable.ic_launcher,", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           Toast.makeText(getActivity(), R.string.chat_created, Toast.LENGTH_LONG).show();\n            // Create a new chat activity\n            Intent intent = new Intent(getActivity(), ChatActivity.class);\n            intent.putExtra(ChatActivity.USER_", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertNotNull(response);\n        Assert.assertNotNull(response.getAppId());\n        Assert.assertNotNull(response.getMchId());\n        Assert.assertNotNull", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       MessageMapperEnum messageMapperEnum = new MockedMessageMapper();\n        List<Parameter> parameters = creator.create(messageMapperEnum);\n        assertEquals(2, parameters.size());\n        assertEquals(STRING, parameters.get(0).getType());\n        assertEquals(", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "\n    def __init__(self, username=None, password=None, project_id=None,\n                 auth_url='',\n                 insecure=False, timeout=None, tenant_id=None,\n                 proxy_tenant_id=None, proxy_token=", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "           MacOsPingParser,\n            AlpineLinuxPingParser,\n            NullPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                parser = parser_class(self.__timezone)\n                break\n            except", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       if (Integer.parseInt(m.videoSetFrameRate.getText()) < 1)// set maximum\r\n        // to 100\r\n        {\r\n            JOptionPane.showMessageDialog(null, \"Frame rate must be between 1 and 100\");\r\n", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self._probe = probe\n        else:\n            self._probe = _probe_adjacency_list(**kwargs)\n        self._probe_adjacency_list = self._probe\n        self._probe_channels = self._probe", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Trans", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "     self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self):\n    \"\"\"\n      Analyzes the bytecode and creates the control flow graph.\n    \"\"\"\n    self._decl = None\n    self._blocks =", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       ObservableRegistry.getInstance().register(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                         Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_qr_code,", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": " public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    if (inExp.getValue() == null)\n      throw new QueryGrammarException(\"Cannot apply IN with NULL value\");\n\n    result.append(", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile baseFile = new File(basePath);\n\t\t\tFile targetFile = new File(basePath + \"/target\");\n\t\t\t\n\t\tAssertions.assertTrue(targetFile.exists());\n\t\t\n\t\t\tFile[] files = baseFile.list", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "           DiscreteDistribution(np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])).draw(1", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(Vpaid", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptString(final StringTag tag, final CharSequence value) {\n\t\tif (value == null) {\n\t\t\tthrow new InvalidValueException(tag, \"null\");\n\t\t}\n\t\tif (value.length() == 0) {\n\t", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "       self.assertEqual(u\"\\u0906\\u092a\\u0915\\u093e\", replace_blank_name(name=u\"\\u0906\\u092a\\u0915\\u09", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expect(systemUnderTestMock.failWithParameter(GIVEN_STRING))\n                                .andThrow(new ExpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "       if rem > 0:\n            self.append(Bit('%s' % self.rest_name, BitLen=rem))\n        else:\n            self.append(Bit('%s' % self.rest_name))\n\n\n# In order to map correctly the rest", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "       # noinspection PyProtectedMember\n        model.Meta.table_name = self._compute_table_name(model)\n        model.Meta.table_name = self._compute_table_name(model)\n        model.Meta.table_name = self._compute", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "       return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n        \"\"\"\n\n    def enviar_dados_venda(self, dados_venda, *args, **kwargs):\n        \"\"\"Sobrepõe :meth", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   with pytest.raises(InvalidModel):\n        engine.bind(ComplexModel)\n\n\ndef test_bind_model_with_no_index(engine):\n    \"\"\"Can't bind models that don't have an index\"\"\"\nNext line of code:\n", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"Msun/pc**3\")\n    assert u7.dimensions == mass\n    assert u7", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "                ',\"root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"\"']\n                 ',\"root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"\"']\n                 ',\"root/cimv2:TST_", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load modules\n        loadModules();\n        // Load commands\n        loadCommands();\n        // Load Economy\n        loadEconomy();\n        // Load Virtual Economy\n        loadVirtualEconomy();\n        // Load Virtual Payment\n        loadVirtualPayment", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       if name is not None:\n            index = -1\n        else:\n            index = 0\n        return self.get_tag_by_name(index, name)\n\n    def get_tag_by_name(self, index, name):\n        \"\"\"Retr", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void showDemoMode(boolean show) {\n                        MainActivity.this.showDemoMode(show);\n                    }\n\n                    @Override\n                    public void showDemoMode(boolean show) {\n                        if (show) {\n                ", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.age[\"foo\"]\n    value = 3\n    expected_ref = \":v0\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0\": expected_action.value}\n\n    ref", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           Alert alert = new Alert(AlertType.ERROR, \"Error adding queue:\\n\" + e.getDump().getStacktrace(), ButtonType.OK);\r\n            alert.showAndWait();\r\n            return false;\r\n        }\r\n        \r\n        if (result.getError", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "           if request.user.is_authenticated:\n                if request.user == post.user:\n                    nodes = nodes.filter(deleted=False)\n                    nodes = nodes.order_by('-created')\n                    nodes = nodes.filter(user=request.", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of gifs to be displayed in a carousel\n     *\n     * @param serviceIds a {@link Map} of a collection of ids for better content delivery experience\n     * @param limit         <b>bucket</b> size of each response\n     * @param pos          <b>index</b> for where the first result should come from.  If <b>empty</b>, start at the first result\n     * @return {@link Call}<{@link GifsResponse}>\n     */\n    @GET(\"packs\")\n    Call<PackResponse> getPack(@QueryMap Map<String, String> serviceIds,\n                                @Query(\"limit\") int limit,\n                                @Query(\"pos\") @NonNull String pos);\n\n    /**\n     * Retrieves a set of gifs to", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionWpsListener).ifPresent(connectionWpsListener -> connectionWpsListener.isSuccessful(false));\n            of(mConnectionSuccessListener).ifPresent(connectionSuccessListener -> connectionSuccessListener.errorConnect(connectionErrorCode));\n            of(mConnection", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == ", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "       for (StackManagerListener listener : StackManager.get().getStackManagerListeners()) {\n            listener.eventFired(new StackEvent(stack, StackManager.EVENT_STACK_ADDED));\n        }\n    }\n\n    private void removeListeners", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "   for recording, utterance in tqdm(SegmentVadFunction(args).run(), total=len(args.files)):\n\n\nclass SegmentVadArguments(NamedTuple):\n    \"\"\"\n    Arguments for the segmentation function\n\n    Parameters\n   ", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Deployments deployments;\n    private final Vms vms;\n    private final Errands errands;\n    private final Tasks;\n    private final Jobs jobs;\n    private final SpringInfo info;\n    private final SpringDeployments deployments;\n   ", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag))\n        if tag.name == \"\":\n            raise FmodError(RESULT.TAGNOTFOUND)\n        return tag\n\n    def get_tag_count(", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "               nbits_for_length = nbits_for_uint(bufr_message.length.value)\n                nbits_encoded += nbits_for_length\n                )\n        else:\n            nbits_encoded += nbytes_write\n\n        return bit_writer.", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = InviteMemberForm(request.POST)\n        form = ModerateAbuseForm(request.POST)\n        form = ReInviteMemberForm(request.POST)\n        form = RevokeInvitationForm(request.POST)\n\n        if form.is_", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   @Override\n    public void addResult(final AbstractResult result) {\n        if (result instanceof BenchmarkResult) {\n            final BenchmarkResult benchmarkResult = (BenchmarkResult) result;\n            final BenchmarkMethod benchmarkMethod = benchmarkResult.getBenchmarkMethod();\n            final", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       if (MPJ_RUN)\n        {\n            // initializing MPJ runtime environment\n            MPI.Init(args);\n            MPI.COMM_WORLD.Barrier();\n            MPI.COMM_WORLD.Finalize();\n        }\n\n", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(URL(\"http://www.example.com/record.wav\"));\n\t\tNext line of code:\n\t\t\ttropo.record(URL(\"http://www.example.com/record.wav\"), true);\n\t\tNext line", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "               listaDeRespostas.getPropriedades().getEstado() == \n                EstadoDaListaDeRespostas.SALVA) {\n            //Verificando se a lista de respostas já está salva\n            if (listaDeRespostas.get", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int resultCode, DataConnectorListener listener) {\n\t\t\t\tif (resultCode == 200) {\n\t\t\t\t\tProgramManager.getInstance().parseTrackMap(connector.getResult());\n\t\t\t\t\t\t", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    AdInterface adInterface;\n\n    @Mock\n    StateFactory stateFactory;\n\n    @Mock\n    PlayerUIController playerUIController;\n\n    @Mock\n    PlayerAdLogic", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\t\tappEvent.onCloseRequest() ;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String className = adapterName(type.getQualifiedName().toString());\n    String superclass = getApplicationSupertype(type);\n    String companionClassName = className + INJECT_ADAPTER_SUFFIX;\n    String companionPackageName = getPackage(type).getQual", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        /**\r\n         * 打开/关闭通知栏通知\r\n         * @param enable 打开/关闭\r\n        ", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 1\n\n\ndef test_parameters_msgtype3():\n  '''\n", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   if is_comment_node(elem):\n        return f'/comment[{context.position}]'\n\n    if is_schema_node(elem):\n        return f'/schema-element[{context.position}]'\n\n    if is_element_node(elem):", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\n    def dropnan(self):\n        \"\"\"Drop NaN values from the table\"\"\"\n        dropnan_table(", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               if (_isTyping)\n                {\n                    addMessage(new ChatMessage(ChatMessageSource.AUDIOLOGIST, new TypingMessage(m)));\n                }\n                else\n                {\n                    addMessage(new ChatMessage(ChatMessageSource", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tEXOG.append(dmy_covariates)\n\n\t\t\tif opts.surfaceinputfolder:\n\t\t\tsave_temporary_files('mediation', modality_type = surface,\n\t\t\t\tall_vertex = all_", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n    }\n\n    @Test\n    public void busyWaiting_with_thread_name() {\n        ThreadDumpThread main = sut.thread(\"main\");\n        assertThat", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               Calendar calendar = Calendar.getInstance();\n                calendar.set(Calendar.YEAR, 2000);\n                calendar.set(Calendar.MONTH, 0);\n                calendar.set(Calendar.DAY_OF_MONTH, 1);\n                calendar.set(", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type ==", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private ViewPager mViewPager;\n    private Toolbar toolbar;\n    private TabLayout tabLayout;\n    private CheckBox chkBox;\n    private boolean isChameleonNavbar", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.link.start()\n\n        self.tracerouter = Tracerouter.Tracerouter(self)\n        self.tracerouter_thread = threading.Thread(target=self.tracerouter_loop)\n        self.tracer", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       return RestfulModelCollection(Webhook, self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    @property\n    def outbox(self):\n        return Outbox(self)\n\n    @property\n    def api(", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       // TODO(jontayler): move this to the component.\n        daggerComponent.getDynamicStarMapModule().getDynamicStarMapModule().getDynamicStarMapComponent());\n    activityLightLevelChanger.setLightLevelListener(new ActivityLightLevelChanger.LightLevelListener()", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_error = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_error = 0\n", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('MSCm2', Pt=MSCm2(), Len=1),\r\n            Str('MSCm3', Pt=MSCm3(), Len=1),\r\n            Str('MSCm4', Pt=MSCm4(), Len=1", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       self.__class_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_tc_shaping(self, device):\n        shaping_rule_", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "       result, index = apply_fast_eq(left.values, right.values,\n                                           left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   with pytest.raises(SwaggerMappingError) as excinfo:\n        validate_request(request, validator_map)\n\n    assert 'Could not find a matching Swagger operation' in str(excinfo.value)\n\n\ndef test_validaton_error", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
