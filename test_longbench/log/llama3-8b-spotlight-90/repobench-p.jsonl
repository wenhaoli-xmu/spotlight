{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        mParameterListAdapter = new EffectParameterListAdapter(activity, mEffects);\n        mParameterListView.setAdapter(mParameterListAdapter);\n        mParameterListView.setVisibility(View.GONE);\n        mParameterToggleMenuItem = new MenuItem();\n        mParameterToggleMenuItem.setTitle(\"Parameters\");\n        mParameterToggleMenuItem.setCheckable(true);\n        mParameterToggleMenuItem", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Encryption):  # noqa: D101\n    input_widths = [8, 8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, x, y):\n        return tuple([x + y])\n\n\nclass Cipher1(Cipher):  # noqa: D", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "    private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private boolean mParameterListViewVisible;\n\n    public EffectManager(Activity activity, ViewGroup parameterListView, SpectaculumView spectaculumView) {\n        mActivity = activity;\n        mParameterListView = parameterListView;\n        mSpectaculumView = spect", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event) {\n        eventQueue.add(event);\n    }\n\n    private void processEvents() {\n        while (!eventQueue.isEmpty()) {\n           ", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务元数据信息管理器\n     */\n    private TaskMetaInfoManager taskMetaInfoManager;\n\n    /**\n     * 任务监听器管理器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 任务", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tProblems problems = new Problems(args.vault());\n\t\t\ttry {\n\t\t\t\tintegrityCheck.check(args.vault(), passphrase, args.checkFileIntegrity()).forEach(problem -> {\n\t\t\t\t\tif (problem.severity() == Severity.ERROR) {\n\t\t\t\t\t\tprint(format(\"ERROR: %s\", problem.name()));\n\t\t\t\t\t} else", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN, SESSION_ID);\n    assertEquals(new U2fSignRequest(SERVER_CHALLENGE_SIGN, APP_ID_SIGN, SESSION_ID), signRequest);\n  }\n\n  @Test\n  public void testProcessSign", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            self.acctA = RadiusAccounting(self.global_config, self.cId, self.remote_ip, self.source, self.uaA, self.uaO, self.rDone)\n            self.acctA.start()\n        if self.global_config['auth_enable']:\n            self.uaA.recvEvent(CCEventUpdate((200,", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "    __typeid__ = 0x01\n    def __init__(self, uri):\n        self.uri = uri\n\n    def __bytearray__(self):\n        return bytearray([self.tag, len(self.uri)]) + self.uri\n\n    def parse(self, packet):\n        self.tag = 1\n        self", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "            if num_children == 0:\n              cstr_node.lhs = Const.fromValue(None)\n            else:\n              cstr_node.lhs = convert_ast_constraint(children[0])\n              process_children(cstr_node.lhs, children[0])\n\n            if num_children == 2:\n              cstr_node.rhs", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, Bundle args) {\n        if (activity!= null) {\n            VideoFragment fragment = new VideoFragment();\n            fragment.setArgs", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "        Log.d(\"SettingActivity: \", \"postLocationInformation(): latitude: \" + latitude + \", longitude: \" + longitude);\n        // Post location to ForkMe backend.\n        PostLocationDataBody data = new PostLocationDataBody(AppSettings.sUserLogin, latitude, longitude,\n                AppSettings.sFindPeopleMessage", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "        # pylint: disable=protected-access\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "    class User(BaseModel):\n        id = Column(String, hash_key=True)\n        email = Column(String)\n        name = Column(String)\n        joined = Column(DateTime, dynamo_name=\"j\")\n        by_email = GlobalSecondaryIndex(hash_key=\"email\", projection=\"all\")\n\n        def __new__(cls, **", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                    new RGBAdjustTransformation(),\n                    new RescaleTransformation(),\n                    new ThresholdTransformation(),\n                    new TritoneTransformation()\n            )),\n    COLOR_EFFECT(\"Color Effect\",\n            Arrays.asList(\n                    new EmbossTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new MarbleTransformation(),\n                    new MirrorTransformation", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "    private static final ButterKnife.Action<View> SHOW = (view, index) -> view.setVisibility(View.VISIBLE);\n    private static final ButterKnife.Action<View> HIDE = (view, index) -> view.setVisibility(View.GONE);\n    private static final ButterKnife.Action<View> SHOW = (view, index) -> view.setVisibility(View.VISIBLE);\n", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                writeResponse(CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "        wild.set_message(wild_report)\n        await wild.insert()\n        await ctx.send(f\"Reported {wild.pkmn.label} at {wild.location} by {ctx.message.author.mention}.\")\n\n        await ctx.send(f\"Reported {wild.pkmn.label} at {wild.location} by {", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "    if c['vocab_text']:\n        vocab_text = Vocabulary(c['vocab_text'])\n    else:\n        vocab_text = None\n    # Load data\nNext line of code:\n:\n    if c['def_vocab']:\n        def_vocab = Vocabulary(c['def_vocab'])\n    else:\n        def_vocab = None\n   ", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.amplitude == 50.\n  assert doppler.period_s == 3.\n  assert doppler.coeffs == (", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "                assert self.redlock.locked() >= self.redlock.auto_release_time\n        time.sleep(self.redlock.auto_release_time * 2)\n        assert not self.redis.exists(self.redlock.key)\n\n    def test_release(self):\n        assert not self.redis.exists(self.redlock.key)\n        with self.assertRaises(ReleaseUn", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "        return ConeSettings(self._sptr, \"Sound\")\n\n    @property\n    def threed_cone_settings(self):\n        \"\"\"The inside and outside angles of the 3D projection cone and the\n        outside volume.\n\n        :type: ConeSettings\n        \"\"\"\n        return ConeSettings(self._sptr,", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "    def __init__(self):\n        super(CompressedData, self).__init__()\n        self.calg = None\n\n    def __bytearray__(self):\n        _bytes = bytearray()\n        _bytes.append(self.calg)\n        _bytes += self.data\n        return _bytes\n\n    def __len__(", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        cellSize = findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n        \n        #cell intensity\n        cellIntensity = findCellIntensity(img, imgshape, findCellIntensityParameter = findCellIntensityParameter, verbose = verbose, out = out, **parameter);\n        \n        #cell", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 200f);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume / 200f);\n        } else if (accuracy == Accuracy.NICE) {\n            Assets.niceTapSound.play(Global", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "            while (transactionIterator.hasNext()) {\r\n                Transaction t = transactionIterator.next();\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean checkDirectoryValid(File transactionLogDir) {\r\n        return transactionLogDir.exists() && transactionLogDir.isDirectory", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                if (query.queryType == RequestType.INSERT) {\n                    ((InsertMeta) query).postProcess();\n                }\n                if (query.queryType == RequestType.DELETE) {\n                    ((DeleteMeta) query).postProcess();\n                }\n                if (query.queryType == RequestType.DROP) {\n                    ((", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                        }\n                    }\n                }\n            }\n        } // USE_CEC\n\n        if (Config.USE_CEC) {\n            if (env.combExpMaxRegNum > 0) {\n                for (int i=1; i<env.combExpMaxRegNum; i++) {\n                    if (", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tString notEnoughDataColor;\n\t\t\n\t\tResourceData (Resources res)\n\t\t{\n\t\t\tmeter = new MeterSpec.Meter (res);\n\t\t\t\n\t\t\ttags = new EnumMap<SRSLevel, String> (SRSLevel.class);\n\t\t\tcolors = new EnumMap<SRSLevel, Integer> (", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "        self._append(( FIELD_STRING, self._db_name ))  # db_name\n        if self.get_protocol() >= 16:\n            # > 16 1.5-snapshot\n            # custom choice server_storage_type\n            self._append(( FIELD_STRING, self._storage_type ))\n        return super", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "    public void then(CheckedConsumer<$Result> thenStep) {\n        preparation.prepareFixtures();\n        thenStepFactory.buildThenStep(thenStep, preparation);\n    }\n\n    @Override\n    public void then(String expectationSpecification, CheckedConsumer<$Result> thenStep) {\n        preparation.prepareFixtures();\n       ", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\t}\n\t}\n\t@Override\n\tpublic void notifyDataSetChanged() {\n\t\tsuper.notifyDataSetChanged();\n\t}\n}\napp/src/main/java/ru/henridellal/emerald/data/Category.java\npublic class Category extends BaseData {\n\tprivate String name;\n\tprivate String representName;\n\tprivate String[] apps;\n\tprivate String[] shortcuts;\n", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = XmlUtil.fromXml(Message.class, xml);\n\t\tlog.info(\"weixin <<< \" + message);\n\t\tif (message.isTextMessage()) {\n\t\t\tReceivedTextMessage textMessage = message.asTextMessage();\n\t\t\tString content = talk(textMessage.FromUserName, textMessage.Content);\n\t\t\tReplied", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "    @command(pass_context=True, category='Bot Info', aliases=[\"raid-city\", \"rc\"])\n    @channel_checks.raid_report_enabled()\n    async def cmd_raid_city(self, ctx, *city_name):\n        \"\"\"\n        **!raid-city city-name** - sets the city for the raid report\n       ", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25).date())\n        self.assertEqual(date_string_to_date(\"11/12/2012\"), datetime(2012, 12, 11).date())\n        self.assertEqual(date_string_to_date(\"", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor('config.json', os.path.dirname(config_file))\n        config_actor.start()\n\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.start()\n\n        # setup client\n        client_config = {\n            'name': 'client',\n           'mode': 'client',\n", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                            ShareUtil.shareText(mActivity, picture.getText_content());\n                            break;\n                        case 1:\n                            ShareUtil.shareImage(mActivity, picture.getPics()[0]);\n                            break;\n                        case 2:\n                            ShareUtil.shareImage(mActivity, picture.getPics()[0]);\n                            break;\n                        case 3:\n", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                OhmletActivity.class,\n                OhmletActivity.OhmletFragment.class,\n                OhmletActivity.JoinOhmletDialog.class,\n                OhmageService.class,\n                OhmageService.Ohmlet.class,\n                OhmageService.OhmletMember.class,\n                OhmageService.OhmletMemberRole", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "    else:\n        # XSD typed selection\n        for item in context.iter_self():\n            if context.item is not None and context.is_principal_node_kind():\n                if isinstance(item, (TypedAttribute, TypedElement)):\n                    yield item\n                else:\n                    context.item = self.get_typed_node(item)\n                    yield", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "        StatementExecution se = (StatementExecution) qe;\n        assertEquals(\"query\", se.getQuery());\n        assertEquals(0, se.getSetParams().size());\n        assertEquals(0, se.getSetNullParams().size());\n        assertEquals(0, se.getOutParams().size());\n        assertEquals(0, se", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionFailWithMessage() {\n        StatementExecution se = new StatementExecution();\n        se.setSuccess(false);\n        se.setFailureMessage(\"fail\");\n\n       ", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "                # Send the ADR request\n                log.info(\"Sending ADR request to device {deveui}\", deveui=device.deveui)\n                self._sendLinkADRRequest(device)\n                # Update the device with the current time\n                yield device.update(lastadrsent=current)\n                # Update the device", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        done, no_gpost, other_errors = return_queue.get(timeout=1", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "        FragmentObservable<ChatSettingsInfo, Chat> chatSettingsInfoObservable = ObservableRegistry.getObservable(ChatSettingsInfo.class);\n        chatSettingsInfoObservable.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable<ChatSettingsInfo, Chat> chatSettingsInfoObservable =", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "            # Get time from image handle\n            time_data = self.img_handle.time_data\n\n            # Get the reference time\n            ref_time = time_data[self.current_frame]\n\n            # Convert to Julian date\n            jd = datetime2JD(ref_time)\n\n        else:\n\n            # Get the reference time\n            ref_time", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages,\n                                      target_sequences)\n\n    #running assembly graph refinement\n    if args.assembly_refine:\n        logger.info(\"Refining assembly graph\")\n        for stage in run_stages:\n            if stage.ref_indels:\n                continue\n\n            if", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);\n    }\n\n    @Override\n    public void onDisable() {\n        // Save all", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                stopGcmPush();\n                stopHwPush();\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HwPush\":\n                if(shouldInit()) {\n                    stopGcmPush();\n                    stopMiPush();\n                    Log.e(MYTAG, \"使用H", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "        registry.put((byte) (SEND_NOTIFICATION ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (SET_ATTRIBUTE ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (SET_ATTRIBUTES ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "    public PersonalVulnsWindow() {\n        initComponents();\n        // Set the title\n        this.setTitle(\"Personal Vulnerabilities\");\n        // Set the icon\n        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource(\"/com/cornerpirate/reportcompiler/Icons/ReportCompiler.png\")).getImage());\n        // Set", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "        if (packet.getType() == PacketType.MESSAGE) {\n            PacketType subType = packet.getSubType();\n            if (subType == PacketType.EVENT) {\n                onEvent(packet, client);\n            } else if (subType == PacketType.ACK) {\n                onAck(packet, client);\n            }", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "            contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, -1L);\n            contentValues.put(JobStorage.COLUMN_LAST_RUN, -1L);\n            contentValues.put(JobStorage.COLUMN_TRANSIENT, false);\n            contentValues.put(JobStorage.COLUMN_EXACT, false);\n            contentValues.put(JobStorage.COLUMN_FLEX_SUPPORT, false);\n            contentValues.put", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private CheckBoxPreference", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "    # inject clock on system object\n    inject(obj, '_clock', RecordClock())\n    inject(obj, '_system_data_path', system_data_path)\n\n    # RestoreHelper will recover a system state based on snapshots and\n    # transations files extracting actions executed previously and\n    # re-executing them again\n", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "    final String[] SectionNames = { \"社区管理\", \"国内院校\", \"休闲娱乐\", \"五湖四海\", \"游戏运动\", \"社会信息\", \"知性感性\", \"文化人文\", \"学术科学\", \"电脑技术\", \"终止版面\" };\n   ", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "        ObservableRegistry.getObservable(this).register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getObservable(this).remove(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "        self.assertEqual(1, len(self.simulator_data_client.listeners))\n        self.assertEqual(1, len(self.simulator_data_client.listeners[0].listeners))\n        self.assertEqual(1, len(self.simulator_data_client.listeners[0].listeners[0].listeners))\n        self.assertEqual(1, len(self.simulator", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "            showResponse = true;\n        } else {\n            showResponse = false;\n        }\n        \n        if (httpMessage.getReq().hasRequest()) {\n            isRequestEditor = true;\n        } else {\n            isRequestEditor = false;\n        }\n        \n        if (httpMessage.getRes().hasResponse()) {\n", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "    assert expected_status(description)\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACTIVE\", None, ready),\n    (\"ACTIVE\", \"BUSY\", None),\n    (\"BUSY\", \"ACTIVE\", None),\n    (\"BUSY\", \"BUS", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                    new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new ExposureTransformation(),\n                    new GainTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new MaskTransformation(0xffffff00),\n                    new PosterizeTransformation(),\n                    new ThresholdTransformation(),\n                    new TritoneTransformation()\n                    )),\n    OTHER(\"Other", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "            if self._header[1] == 1:\n                exception_class = self._decode_field( FIELD_STRING )\n            if self._header[1] == 2:\n                exception_message = self._decode_field( FIELD_STRING )\n\n            # Raise the exception\n            raise PyOrientCommandException(\n                exception", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "    api = DERBMDATA(args.apikey)\n\n    params = {\n        'FromSettlementDate': args.fromdate or date.today() - timedelta(days=1),\n        'ToSettlementDate': args.todate or args.fromdate or (date.today()) - timedelta(days=1)\n    }\n    if", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if-else\n\t\t\titems.add( item );\n\t\t} // for\n\n\t\treturn items;\n\t}\n\n\t// ================================================\n\n\t/**\n\t * Returns the list of tags for", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "            \"quantity\": quantity,\n            \"details\": details,\n            \"comments\": comments,\n            \"tags\": tags,\n        }\n\n        if facility!= \"\":\n            request[\"facility\"] = facility\n        if metro!= \"\":\n            request[\"metro\"] = metro\n        data = self.call_api(\n            \"/projects/%s", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "    Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example:\n     * <pre> assertThat(ds.getBatchStatements(), batch(", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\t", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "        # Get the current position in the file\n        file_pos = self.vid_file.tell()\n\n        # Check if the end of file (EOF) is reached\n        if not self.vid_file.read(1):\n            return None\n\n        self.vid_file.seek(file_pos)\n\n        # Read the header\n", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "    ilm = ilms.Ilm(ilmvals=ILMVALS, bkgvals=BKGVALS, zscale=0.89)\n    psf = exactpsf.ExactPSF(p, ilm, category='psf')\n    # 3. image\n    img = models", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\t// sync food groups\n\t\tPacketDispatcher.get().sendTo(new PacketFoodGroup(foodGroup), player);\n\t}\n}\njava/squeek/spiceoflife/foodtracker/FoodGroup.java\npublic class FoodGroup\n{\n\tpublic static final String FOOD_GROUP_IDENTIFIER = \"foodGroup\";\n\tpublic static final", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "        post = get_object_or_404(Post, pk=pk)\n        if post.deleted:\n            messages.error(request, 'The post you tried to access has been deleted.')\n            return redirect(reverse('ploghubapp:home_page'))\n        post = get_object_or_404(Post, pk=pk)\n        if post.deleted", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\t// TODO: Add support for multiple cells\n\t\t\t\t\t\t// TODO: Add support for multiple cells\n\t\t\t\t\t\t// TODO: Add support for multiple cells\n\t\t\t\t\t\t// TODO: Add support for multiple cells\n\t\t\t\t\t\t// TODO: Add support for multiple cells\n\t\t\t\t\t\t// TODO: Add support for multiple", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "src/leap/mx/vendor/pgpy/constants.py\nclass KeyFlags(FlagEnum):\n    #: Signifies that a key may be used to certify keys and user ids. Primary keys always have this, even if it is not specified.\n    Certify = 0x01\n    #: Signifies that a", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "        if item is None:\n            yield context.root\n        elif is_xpath_node(item):\n            yield item\n\n\n@method(function('comment', nargs=0, label='kind test'))\ndef select_comment_kind_test(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for item in", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "Timeline/Handlers/Puffle.py\n@PacketEventHandler.onXT('s', 'p", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "    st = states.PolyFitState(P, H, I, im, tile, order=2, sigma=0.04)\n    st.set_model('polyfit')\n    st.set_image(im)\n    st.set_tile_full()\n    st.set_model('polyfit')\n    st.set_image(im)\n    st", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "            manager = mp.Manager()\n            error_dict = manager.dict()\n            return_queue = manager.Queue()\n            stopped = Stopped()\n            procs = []\n            for i, args in enumerate(jobs):\n                function = compile_information_func(args)\n                p = KaldiProcessWorker(i, return_queue, function, error", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "    platepar.rotation_from_horiz = RMS.Astrometry.ApplyAstrometry.rotationWrtHorizon(platepar)\n\n    # Update the reference pointing\n    platepar.updateRefRADec()\n\n    # Update the reference pointing\n    platepar.updateRefRADec()\n\n    # Update the reference pointing\n    plate", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "        contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_FLEX_MS, 0);\n        contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_LAST_RUN, 0);\n        contentValues.put(JobStorage.COLUMN_SCHEDULED_AT", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "        model = Progress\n        fields = ['year', 'fiscal_year', 'value', 'value_unit']\n", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "            fab.collapse();\n        }\n    }\n\n    @Override\n    public void onDateSelected(MaterialCalendarView view, CalendarDay date, boolean selected) {\n        if (date == null) {\n            return;\n        }\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(date.getYear(), date.getMonth() - ", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "    private final SpatialOperator spatial;\n    private final double alpha;\n    private final double beta;\n    private final double gamma;\n    private final double delta;\n    private final double epsilon;\n    private final double lambda;\n    private final double mu;\n    private final double nu;\n    private final double rho;\n    private final", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "    private List<FilterType> filterTypes;\n    private HashMap<String, List<FilterType>> filterTypeHashMap;\n    private HashMap<String, List<FilterType>> filterTypeHashMap2;\n    private HashMap<String, List<FilterType>> filterTypeHashMap3;\n    private HashMap<String, List<FilterType>>", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "  assert isinstance(args.gps_sv[0].message, ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      '--message-type', 'one']\n  args = parser", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "        if self.style.fill_rule == 'nonzero':\n            fill_rule = gl.GL_FILL\n        else:\n            fill_rule = gl.GL_LINE\n\n        gl.glBegin(gl.GL_TRIANGLES)\n        for i in range(0, len(tris), 3):\n            gl.glColor4f(*fills[i])\n           ", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"app\")) {\n\t\t\t\t\ta = new AppData(data);\n\t\t\t\t} else if (data.startsWith(\"shortcut\")) {\n\t\t\t\t\ta = new ShortcutData(data);\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (DatabaseHelper.hasItem(contextRef.get(), a, null)) {\n", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow && ClipBoardAction.isShowInStatusBar) {\n                    isClipBoard", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "        self.beg_alt = np.degrees(altAz2RADec(0, 90, self.jd_array[0], self.lat, self.lon)[1])\n        self.end_alt = np.degrees(altAz2RADec(0, 90, self.jd_array[-1], self.lat,", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tString name = fhead.ID().getText();\n\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(name);\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void exitFunction(@NotNull FunctionContext ctx) {\n\t\tsuper.exitFunction(ctx);\n", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "src/main/java/com/bazaarvoice/jless/ast/NodeTreeUtils.java\nimport com.bazaarvoice.jless.ast.node.ArgumentsNode;\nimport com.bazaarvoice.jless.ast.node.ExpressionGroupNode;\nimport com.bazaarvoice.jless.ast.node.ExpressionNode;\nimport com.bazaarvoice.jless.ast.node.Expression", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "    private CodeGeneratorFactory codeGeneratorFactory;\n\n    public OpenAPIProcessor() {\n        super();\n        parserFactories.add(new SpringParserFactory());\n    }\n\n    @Override\n    public Set<String> getSupportedOptions() {\n        return optionsBuilder.getSupportedOptions();\n    }\n\n    @Override\n    public SourceVersion get", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "        bind(GerritPushExtension.class);\n        bind(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class);\n        bind(GerritRestModule.class);\n        bind(GerritDiffModule.class);\n        bind(GerritActionsModule.class);\n        bind(GerritUiModule.class);\n", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                    if (getZxidFromName(snapshots.get(i).getName()) >= zxidLong) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            if (snapFile == null) {\r\n                System.err.println(\"No snapshot file found for zxid", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "    ]\n    def __init__(self, CallName='', ReprName=None, \n                 Pt=None, PtFunc=None, Val=None, \n                 Len=None, LenFunc=None,\n                 Repr=\"hum\",\n                 Trans=False, TransFunc=None):\n        if CallName or not self.CallName:\n            self", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Api.api().searchPlaces(query);\n\t\t\t\t})\n\t\t\t\t.subscribeOn(Schedulers.io())\n\t\t\t\t.observeOn(AndroidSchedulers.mainThread())\n\t\t\t\t.subscribe(this::showSearchSuggestions);\n\t\t// Show search suggestions on query text changes\n\t\tqueryTextChangeEvents\n\t\t\t\t", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "    # 2. background\n    bkg = np.random.randn(IMG.shape[0], IMG.shape[1])\n    bkg = bkg.reshape(IMG.shape)\n    bkg = bkg + 0.5 * np.random.randn(*bkg.shape)\n    bkg = bkg + ", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "        result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)\n\n\ndef apply_or(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                }\n                return true;\r\n            } catch (Exception e) {\r\n                LogUtil.e(Log.getStackTraceString(e));\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    protected void onPostExecute(Boolean aBoolean) {\r\n        super.onPostExecute(aBoolean);\r\n        if (mCallback!=", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "        return isinstance(instance, (int, float, Decimal, AbstractDateTime, Duration))\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        return issubclass(subclass, int) or issubclass(subclass, float) \\\n           ", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "            return SearchMenuPage()\n        if pageletId == 'SearchHistoryPage':\n            return SearchHistoryPage(self._createSearchHistory(context))\n        if pageletId == 'RubricsPage':\n            return RubricsPage()\n        if pageletId == 'RubricPage':\n            return RubricPage()\n       ", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "                if pattern.get(\"datafile\") is None:\n                    errmsg += \"Pattern '%s' does not have a datafile.\\n\"%pattern.name\n                else:\n                    if not checkFileExistence(pattern.get(\"datafile\")):\n                        errmsg += \"Pattern '%s' has a datafile '%s', but", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\n    filter_class = ThemeFilter\n    ordering_fields = ('id', 'code',", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\tgenerationService.setParameters(new ByteArrayInputStream(\"\".getBytes()));\n\t\tgenerationService.setMetadata(new ByteArrayInputStream(\"\".getBytes()));\n\t\tgenerationService.setSpecificTreatment(new ByteArrayInputStream(\"\".getBytes()));\n\t\tgenerationService.setMapping", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "  encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.l1Index == NormalRateConfig.GPS.L1.INDEX\n  assert encoder.l2Index == NormalRateConfig.GPS.L", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "    return tgAsDict[\"tiers\"][0][\"entryList\"]\n\n\ndef run_save_json(tg):\n    \"\"\"\n    Mock write function and return the first tier's entry list\n\n    tg.save() mutates the textgrid's data, so the entry list\n    before and after saving can be different\n   ", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        num_utterances = return_queue.get(timeout=1)\n                        # print(utterance)\n                        if stopped.stop_check():\n                            continue", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "            dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n        # with meta\n        for version in ['UAV123', 'UAV20L']:\n            dataset = UAV123(root_dir, version=version, return_meta=True)\n            self._check_dataset(dataset)\n\n    def", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "    void set(FixTag tag, CharSequence value) throws InvalidValueException;\n    void set(FixTag tag, int value) throws InvalidValueException;\n    void set(FixTag tag, long value) throws InvalidValueException;\n    void set(FixTag tag, double value) throws InvalidValueException;\n", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "            chunk_bounds(n_samples, chunk_size, overlap=0)\n            chunk_bounds(n_samples, chunk_size, overlap=0)\n            chunk_bounds(n_samples, chunk_size, overlap=0)\n            chunk_bounds(n_samples, chunk_size, overlap=0)\n            chunk_bounds(n_samples, chunk_size, overlap=0", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tresult.setQueryNode(AlvisIRAnyQueryNode.INSTANCE);\n\t\t\treturn result;\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIR", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\t/**\n\t * \n\t * @param pipeline\n\t * @return\n\t * @throws Exception\n\t */\n\tpublic ByteArrayOutputStream generateParameters(Pipeline pipeline) throws Exception {\n\t\tByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n\t\tENOParameters enoParameters = pipelineGenerator.generateParameters(pipeline);\n\t\tValidator validator =", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));\n        registry.put((byte) (GET_ATTRIBUTE ^ RESPONSE_MASK), new MarshalledResponseHandler<Object>(OBJECT));\n        registry.put((byte) (GET_ATTRIBUTES ^ RESPONSE_MASK), new Marshalled", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                        if (content.length() > 0) {\n                            Result res = lp.detectLanguage(content, lang);\n                            if (res!= null && res.isReliable()) {\n                                if (res.getLanguageCode().equals(lang)) {\n                                    if (DAO.isNew(new Tweet(content, origContent, res.getLanguageCode", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "        elif isinstance(descriptor, SequenceDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor, descriptor.name))\n            for member in descriptor.members:\n                lines.extend(self._render_descriptor_helper(member, indent + INDENT_CHARS))\n\n        elif isinstance(descriptor, SkippedLocalDescriptor):\n            lines.append('{}{} {} bits'.format", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "        help=\"\"\"network latency time [milliseconds].\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 100ms\n        \"\"\".format(\n            _get_unit_help_msg()\n        ),\n    )\n    group.add_argument(\n        \"--delay-distro\",\n        dest=\"latency_distro", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "        ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ffibuilderRX.compile(tmpdir=cls.tmpdirnameRX.name, verbose=VERBOSE)\n        spec", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "        conditions.append(AndCondition())\n    if \"or\" in operations:\n        conditions.append(OrCondition())\n    if \"not\" in operations:\n        conditions.append(NotCondition())\n    if \"eq\" in operations:\n        conditions.append(ComparisonCondition(column, value))\n    if \"ne\" in operations:\n       ", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "    private final IJavaProject javaProject;\n\n    private final GeneratorModel model;\n\n    private final GeneratorWizardMainPage mainPage;\n\n    private final GeneratorWizardTestPage testPage;\n\n    private final GeneratorWizardFilterPage filterPage;\n\n    private final GeneratorWizardStaticBindingsPage staticBindingsPage;\n\n    private final GeneratorWizardAnnotations", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)\n\n    def consultar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sat`.\n\n        :return: Uma resposta SAT padrão.\n        :rtype: satcfe.res", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "        Assert.assertThat(ds, totalQueryCount(5));\n        Assert.assertThat(ds, totalQueryCount(is(5)));\n    }\n\n    @Test\n    public void testTotalCountForOtherQuery() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution());", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "        VerifierProperty validSchemaVerifier = new ValidSchemaNameVerifierImpl();\n        VerifierProperty localFileExistsVerifier = new LocalFilesExistVerifierImpl();\n        VerifierProperty remoteFileExistsVerifier = new RemoteFilesExistVerifierImpl();\n\n        verifierProperties.add(validSchemaVerifier);\n        verifierProperties.add(localFileExistsVerifier);\n", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (invokes the drupal Service user.login)\n     *\n     * @param username the user's username\n     * @param password the user's plaintext password\n", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "        self.textArea.addMessage(splitMessage(lexMessage(text), self.chum), self.chum)\n        self.textInput.clear()\n        self.textInput.setFocus()\n        self.textInput.setText(\"\")\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n       ", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "            (r'/login', LogInHandler),\n            (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/problem/(.*)/(.*)', ProblemHandler),\n            (r'/status', StatusHandler),\n            (r'/debug', DebugHandler),\n            (r'/", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAnd", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "                throw new ProtTestInternalException(\"Unknown criterion: \" + criterion);\n        }\n\n        return informationCriterion.compute();\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade.ProtTestFacade", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "    return Pair(e1, e2, e.pi(ty1, ty2))\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"First projection for Sigma types\n    \"\"\"\n    return Fst(expr)\n\n\n@with_info(st_term)\ndef snd(expr):\n    \"\"\"Second projection for Sigma types\n    \"\"\"\n", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "pyramid_swagger/tween.py\ndef validate_response(response, validator_map):\n    \"\"\"Validates response against our schemas.\n\n    :param response: the response object to validate\n    :type response: :class:`pyramid.response.Response`\n    :type validator_map: :class:`pyramid_swagger.load_schema", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t@Override\n\tpublic void enterNewStructureNodeCommand(NewStructureNodeCommandContext ctx) {\n\t\t// TODO Auto-generated method stub\n\t}\n\t@Override\n\tpublic void enterNewSpanNodeCommand(NewSpanNodeCommandContext ctx) {\n\t\t// TODO Auto-generated method stub\n\t}\n\t@Override\n\tpublic void enter", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "            except TextGridParseError as e:\n                self.return_dict[\"textgrid_error_files\"].append(e)\nNext line of code:\n:\n            except Exception as e:\n                self.return_dict[\"error_files\"].append(e)\nNext line of code:\n:\n            self.finished_processing.stop_check()\n            if self.stopped.stop", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "    'pywbemcli: error: argument -r/--role: invalid choice:'\\\n    'PROPERTYNAME (choose from \\'Antecedent\\', \\'Dependent\\', \\'PartComponent',  # noqa: E501\n    '\\'PartUsed\\', \\'Source\\', \\'Target\\')',\n    'py", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate IPlogServices ipLogServices;\n\t/**\n\t * 后台主页\n\t * \n\t * @return\n\t */\n\t@RequestMapping(value = \"/manage\", method = RequestMethod.GET)\n\tpublic ModelAndView manage() {\n\t\tModelAndView mv = new ModelAndView(\"manage\");\n", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                        } else if(exceptionClass.equals(SdkClientException.class)){\n                            logError(\"SDK client exception: \" + t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logError(\"Invalid operation exception: \" + t.getMessage());\n                        } else {\n                            logError(\"Unknown exception: \" +", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                       join_keyword=\"JOIN\")\n\n    def test_full_e2e_gujarati_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full flow for sign up + cancel in Gujarati...\")\n        self.run_e2e_flow_for_language(language=\"Gujarati\",\n                                       person_name=\"Testjohn", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationListener locationListener;\n  protected Location currentLocation;\n  protected Location lastLocation;\n  protected Location lastBestLocation;\n  protected Location lastLocationFromProviders;\n  protected Location lastLocationFromProvidersAndLastLocation;\n  protected Location lastLocationFromProvidersAnd", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "        print \"\\n[INFO] MobSF will perform Dynamic Analysis on Android VirtualBox VM\"\n    else:\n        print \"\\n[INFO] MobSF will perform Dynamic Analysis on Android VM\"\n    try:\n        connect(adb)\n        if SETTINGS.ANDROID_DYNAMIC_ANALYZER == \"MobSF_REAL_DEVICE\":\n", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_Header(Layer):\n    constructorList = [\n        Bit('RRC', Pt=0, Repr='bin'),\n        Bit('RRC', Pt=0, Repr='bin'),\n        Bit('RRC', Pt=0, Repr='bin'),\n        Bit('RRC', Pt", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tadjacency_lh = create_adjac_vertex(v_lh,faces_lh)\n\t\t\tadjacency_rh = create_adjac_vertex(v_rh,faces_rh)\n\t\t\tadjacency = np.hstack((adjacency_lh,adjacency_rh))\n\t\t\tadjacency = np.array(adj", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "      result.append(\" \").append(Operator.EQ.getValue()).append(\" \");\r\n    } else if (exp.getOperator() == Operator.BTW) {\n      result.append(\" \").append(BETWEEN).append(\" \");\r\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\r\n      result.append(\", \");\r\n     ", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "        final CacheList list = new CacheList();\n        list.setName(listName);\n        cacheService.storeCacheList(list);\n        sessionContext.setData(CACHE_LIST, list);\n        sessionContext.setData(CACHE_LISTS, cacheService.getAllCacheLists());\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "            user = create_inactive_user(email, full_name)\n\n            # Send invitation email\n            subject = _('Invitation to join {}').format(site.name)\n            template = 'accounts/emails/invitation.html'\n            url = reverse('accounts:activate', args=[user.activation_key])\n            comments = form.cleaned_data['", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "            ex = Hitbtc('bccbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_CEX:\n            ex = Cex('bccbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_BITTREX:\n            ex = Bittrex('BTC-BCC", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "            yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is not None:\n                yield item\n\n    else:\n        # XSD typed selection\n        for item in context.iter_self():\n            if item is not None:\n                context.item = self.get_t", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "    helpTestQueryData(0, 10);\n    helpTestQueryData(1, 10);\n    helpTestQueryData(9, 10);\n    helpTestQueryData(10, 10);\n    helpTestQueryData(11, 10);\n    helpTestQueryData(20, ", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t}\n\t\tNormalizationOptions normalizationOptions = NormalizationOptions.DEFAULT;\n\t\tif (elt.hasAttribute(AlvisIRConstants.XML_SEARCH_NORMALIZATION)) {\n\t\t\tString norm = elt.getAttribute(AlvisIRConstants.XML_SEARCH_NORMALIZATION);\n\t\t\tNormalizationOptions next = normalizationOptions;\n\t\t\twhile (norm!= null)", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                deviceMiToken = MiPushClient.getRegId(CurrentUserActivity.this, SYS);\n                //stopGcmPush();\n                //Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HMS\":\n                HMSAgent.init(this);\n                HMSAgent.Push.getToken(new GetTokenHandler", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "                tablefmt = table_format\n\n            output.append(tabulate(rows, headers, tablefmt, numalign, stralign,\n                                   show_header=show_header))\n    if status:\n        output.append(status)\n\n    return '\\n'.join(output)\nvcli/vcli.py\nclass VCli(object):\n\n    def __init", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "        return words_api(wordnik_api, token)\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "        self.assertIsInstance(handle, HANDLE)\n        self.assertEqual(handle.value, 0)\n        self.assertEqual(handle.name, None)\n        self.assertEqual(handle.type, HANDLE)\n        self.assertEqual(handle.is_open, True)\n        self.assertEqual(handle.is_closed, False)\n        self.assertEqual(handle.is_created, True)\n        self.assertEqual(handle.is", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "        this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Observable<DirectorInfo> info() {\n", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                    return parserHolder\n                           .getParser()\n                           .build(typeUtils, elementUtils)\n                           .parse(annotation, roundEnv, originatingElements);\n                })\n               .collect(Collectors.toList());\n\n        Swagger swagger = specificationGeneratorFactory\n               .build(fileManagerFactory)\n               .generate(parsedPaths, roundDescriptor);\n\n        code", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "    protected PageParser pageParser;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n   ", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "            actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n        }\n\n        PopupHandler.installPopupHandler(editTableView, actionPopupGroup, \"POPUP\", ActionManager.getInstance());\n    }\n\n    private Document buildMongoDocument", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "    private GuiButton forget;\n    private GuiButton select;\n    private GuiButton none;\n    private GuiButton forgetAll;\n    private GuiButton selectAll;\n    private GuiButton noneAll;\n    private GuiButton add;\n    private GuiButton remove;\n    private GuiButton up;\n    private GuiButton down;\n   ", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "                return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATIONS:\n                return new BtnClearAllNotifications();\n            case ConstantStr.FUNC_RECENT_TASKS:\n                return new BtnsNavbar(ConstantStr.FUNC_RE", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "        if _cluster_type not in CLUSTER_TYPES:\n            raise PyOrientBadMethodCallException(\n                _cluster_type +'is not a valid data cluster type', []\n            )\n        self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n       ", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "    query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'frob': frob,\n        'format': 'json',\n        'nojsoncallback': 1,\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('http', 'flickr.com", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif(fcpMessage!= null) {\n\t\t\t\t\tLogger.error(this, \"Got FCPPutFailedException while inserting message\", fcpMessage", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "        except IndexError:\n          break\n        if bytecode[k][2] == POP_JUMP_IF_FALSE:\n          cond_stack_size -= 1\n        elif bytecode[k][2] == POP_JUMP_IF_TRUE:\n          cond_stack_size += 1\n        k -= 1\n      except IndexError:\n        break\n    if", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "    //VIEWS\n    ScrollView scrollView;\n    TextView creditCardName;\n    TextView creditCardLimit;\n    TextView creditCardLimitUsed;\n    TextView creditCardLimitAvailable;\n    TextView creditCardLimitPercentage;\n    TextView creditCardLimitPercentageText;\n    TextView creditCardLimitPercentageText2;\n    TextView creditCardLimit", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\nall_platform_slugs = tuple(all_platform_slugs)\n\nclass PlatformAdmin(admin.ModelAdmin):\n    list_display = ('engine_name','subject', 'api_url', 'platform_slug')\n    list_filter", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "    def parse(self, ping_result: Union[str, bytes, PingResult]) -> PingStats:\n        \"\"\"\n        Parse ping command output.\n\n        Args:\n            ping_result (Union[str, bytes, PingResult]):\n                Ping command output.\n\n        Returns:\n            |PingStats|:\n\n        Raises:\n            |ParseError", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "    account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string.letters + string.digits) for i in range(20))\n            while", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "        assertThat(qe, isStatementOrBatchStatement());\n        assertThat(qe, isPrepared());\n        assertThat(qe, isBatchPrepared());\n        assertThat(qe, isPreparedOrBatchPrepared());\n        assertThat(qe, isCallable());\n        assertThat(qe, isBatchCallable());\n        assertThat(qe", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT)!= null) {\n      int percent = Integer.parseInt(Utils.getXmlNodeValue(doc, TAG_PERCENT));\n      if (percent > 0) {\n        log(\"server response is: \" + percent + \"% \" + getFileNames(), null);\n        if (", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "    # for assembly_points in assembly_points_by_sources.values():\n    original_assembly_points_by_ids = assign_ids_to_assembly_points(assembly_points=original_assembly_points, id_prefix=\"or_\",\n                                                                    id_generator=id_generator, sort=True)\n\n    #######################################\n    #       assembly points merging       #\n    #######################################\n", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "    GyroscopeResource,\n    \"/aircraft/sensors/gyroscope\",\n    resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.thermometer,)\n    )\n\n   ", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (!level.isInstalled()) {\n\t\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onDone(Object... objects) {\n\t\t\t\t\t\t\t\tlong id = (long) objects[0];\n\t\t\t\t\t\t\t\t// logDebug(\"downloadLevel: \" + id);\n\t\t\t\t\t\t\t\t// logDebug", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "    private WeeklyCaptionProvider captionProvider;\n\n    /** Date format that will be used in the UIDL for dates. */\n    private DateTimeFormatter dateFormatter;\n\n    /** Date format that will be used in the UIDL for dates. */\n    private DateTimeFormatter timeFormatter;\n\n    /** Date format that will be used in the", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Observable<DirectorInfo> info() {\n        return info.info();\n    }\n\n    @Override\n    public Observable<List<ReleaseSummary>> listReleases() {\n        return releases.list();\n    }\n\n   ", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "    VerifierProvider rsaLocator = new DefaultPublicKeyLocator(\n        new IdentityServerDescriptorProvider(), new JsonServerInfo());\n    rsaLocator.setVerifierProvider(SignatureAlgorithm.RS256, rsaLocator);\n    rsaLocator.setVerifierProvider(SignatureAlgorithm.RS1, rsaLocator);\n\n    VerifierProvider rubyLocator", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n\n", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                } catch (FilesNotFoundException e) {\n                    // This is expected\n                }\n            }\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} \t\t\n\t}\n\t\n\tpublic void testMultipleFiles() {\n\t    // Tests to make sure we're releasing connections with 404", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = app_configs.get(ConfigKey.PROXY_SERVER)\n\n    convert_configs = load_convert_config(\n        logger, ctx.obj[Context.CONVERT_CONFIG], subcommand=\"url\"\n    )\n\n    max_workers = ctx.obj", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "                // 执行成功后，执行监听器。\n                for (RunnerTaskListener runnerListener : runnerListenerList) {\n                    runnerListener.onPostExecute(taskData);\n                }\n            } catch (TaskDataException e) {\n                // 任务数据异常\n                taskData.setState(TaskData.STATE_DATA_ERROR);\n                task", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "hammertime/rules/sampling.py\nclass ContentSignature:\n\n    def __init__(self, *, code, content_hash=None, content_sample=None, content_simhash=None):\n        self.code = code\n        self.content_hash = content_hash\n        self.content_sample = content_sample\n        self.content_simhash = content", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "        //用户的年级\n        stuGrade = split[2];\n        //用户的专业\n        stuMajor = split[3];\n        //用户的班级\n        stuClass = split[4];\n        //用户的学院\n        stuCollege = split[5];\n        //用户的学籍", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "        Qdisc.attach(self.__con)\n        Qdisc.create()\n\n        self.__device = device\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__export_path = export_path\n        self.__is_parse_filter_id =", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t}\n\t\n\tpublic ParameterizedGenerationService(PipelineGenerator pipelineGenerator, ValorizatorParameters valorizatorParameters, Validator validator, SchemaValidator schemaValidator, boolean cleaningFolder) {\n\t\tthis.pipelineGenerator = pipelineGenerator;\n\t\tthis", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "        try {\r\n            decoder = (DataDecoder) Class.forName(dataDecoder).newInstance();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Problem with data decoder \" + dataDecoder);\r\n            exit(1);\r\n        }\r\n\r\n        DataDirHelper dataDirHelper = null;\r\n        TransactionLogReaderFactory factory = null", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "        except UncertainTimeError:\n            log.error(\"We couldn't find a way to measure the accuracy of your clock.  Sorry!\")\n            sys.exit(1)\n        except:\n            log.error(\"Weird error while trying to measure the accuracy of your clock.  Sorry!\")\n            sys.exit(1)\n       ", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "        // Test a query with a where clause\n        String[] movieSelectionArgs = new String[] {String.valueOf(movieRowId)};\n        Cursor movieCursorByRowId = mContext.getContentResolver().query(\n                MovieColumns.CONTENT_URI,\n                null,\n                MovieColumns._ID + \" =?\",\n                movieSelectionArgs", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n   ", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new MushroomGhost(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE),", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "  assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n:\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutputConfig2():\n  '''\n  Output configuration selection", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\nsatcfe/clientesatlocal.py\nclass ClienteSATLocal(ClienteSAT):\n    \"\"\"Cliente SAT local, isto é, que se comunica com o equipamento SAT\n    conectado diretamente ao computador", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "    # TODO: we should only search and get phases that have the same sublattice_site_ratios as the phase in the database\n    desired_data = datasets.search(\n        (tinydb.where('output').test(lambda x: x in prop)) &\n        (tinydb.where('components').test(lambda x:", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "    api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_conditions\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(PositionResource, \"/fd", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "    def __init__(\n        self,\n        temporary_directory: str = None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n        if not temporary_directory:\n            from.config import get_temporary_directory\n\n            temporary_directory = get_temporary_directory()\n        self.temporary_directory = temporary_directory\n", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "        return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private void installActions() {\n        installTreeActions();\n        installToolBarActions();\n    }\n\n    private void installToolBarActions() {\n        toolBarPanel.add(new MongoExplorerToolBar(project, mongoManager, mongoTreeBuilder, notifier));\n    }\n\n   ", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// Footer with Ul and Li\n\t\tfooter = new ViewOnBoth<State, List<Model>>(stateInit, modelsInit, (state, models) -> {\n\t\t\tFluent result = Fluent.getRootOf(Ul().classs(\"footer\").add(\n\t\t\t\t\tLi().classs(\"clear\").txt", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "                if(output!=null) {\n                    cropView = new CropImageView(this);\n                    cropView.setBitmap(output);\n                    cropView.setZoom(1);\n                    cropView.setZoomEnabled(true);\n                    cropView.setCropShape(CropImageView.CropShape.RECTANGLE);\n                    cropView.setCropWindowLimits(getWidth", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "    assert check_hash_key(query_on, key)\n    assert not check_range_key(query_on, key)\n    assert not check_hash_key(query_on, key)\n    assert not check_range_key(query_on, key)\n    assert not check_hash_key(query_on, key)\n    assert not check_range_key(query_on, key", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "            GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        locker.doWhileLocked(new Runnable() {\n\n            public void run() {\n                dataset.add(gcActivity);\n            }\n        });\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String gc", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "            '/properties':                  RestAppPropertys,\n        }\n        for r in self.resources:\n            self.api.add_resource(self.resources[r], r)\n        self.api.add_resource(RestApiVersion, '/version')\n        self.api.add_resource(RestApiStatus, '/status')\n        self.api.add_resource(Rest", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "        self._settings_ini = settings_ini\n        self._tree_view = tree_view\n        self._df_manager = DataFrameModelManager()\n        self._settings_ini = settings_ini\n        self._tree_view = tree_view\n        self._df_manager = DataFrameModelManager()\n        self._settings_ini = settings_ini", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "    private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n    private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n    private", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface DateDoubleClickListener {\n        /**\n         * Triggered when a date was double clicked\n         *\n         * @param date\n         *            The date and time that was clicked\n        ", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "        self._db_type = db_type\n        return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_pass(self, passw):\n        self._pass = passw\n        return self\n\n    def set_client_id(self, client_id):\n       ", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem> contentItemList = new ArrayList<Content", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tGenerator generator = setGenerator(pipeline.getGenerator());\n\t\tGenerationService generationService = new GenerationService(preprocessors, generator, postprocessors);\n\t\treturn generationService;\n\t}\n\n\tprivate Generator setGenerator(InFormat inFormat)", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "    // Convert projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        projects.apply(ParDo.named(\"Convert project data to Java Objects\")\n           .of(new ExtractState()));\n    // Tag the state objects to indicate they're live and not from", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "    return MyModel\nbloop/exceptions.py\nclass InvalidModel(BloopException):\n    \"\"\"The model is invalid.\"\"\"\nbloop/exceptions.py\nclass InvalidStream(BloopException):\n    \"\"\"This is not a valid stream definition.\"\"\"\nbloop/exceptions.py\nclass InvalidStream(BloopException):\n    \"\"\"This", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                          dim, vocab, lookup)\n            else:\n                raise NotImplementedError()\n            children.append(self._def_reader)\n        else:\n            self._def_reader = None\n\n        self._def_lookup = LookupTable(def_num_input_words", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "    private final MessageReader _messageReader = MessageReader.getInstance();\n    // Guarded by _lockObject.\n    private final MessageWriter _messageWriter = MessageWriter.getInstance();\n    // Guarded by _lockObject.\n    private final StreamHelpers _streamHelpers = StreamHelpers.getInstance();\n    // Guarded by _lock", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "    private int pickCount;\n    private int pickCountLimit;\n    private int pickCountLimitForVideo;\n    private int pickCountLimitForImage;\n    private int pickCountLimitForVideoAndImage;\n    private int pickCountLimitForVideoAndImageAndAudio;\n    private int pickCountLimitForVideoAnd", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOutDownLeft(RotateOutDownLeft.class),\n    RotateOutDownRight(RotateOutDownRight.class),\n    RotateOutUpLeft(RotateOutUpLeft.class),\n    RotateOutUpRight(RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "            form.fields['perfil'].queryset = Perfil.objects.filter(\n                user__pk=self.kwargs.get(\"pk\", None))\n        context = self.get_context_data(object=self.object, form=form)\n        return self.render_to_response(context)\n\n    def post(self, request, *args, **kwargs):\n        if not", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "public void writeFloatBlock(String path, float[][] data, int blockSizeX, int blockSizeY, long nbBlocksX, long nbBlocksY)\n\t{\n\t\tif(this.handle == null) new ErrorJSON(\"Please open the Loom file first\");\n\t\tthis.handle.float32().writeMatrixBlock(path, data,", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plus();\n    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plus();\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "    transplatform_sync_manager = TransplatformSyncManager()\n    release_schedule_sync_manager = ReleaseScheduleSyncManager()\n    build_tags_sync_manager = BuildTagsSyncManager()\n    ci_pipeline_manager = CIPipelineManager()\n    pipeline_config_manager = PipelineConfigManager()\n    sync_stats_manager = SyncStatsManager()\n    yml", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo\n\t\t\t\t\t.getMoreSuitableEndpoint(endpointType);\n\t\t\tif (endpoint == null) {\n\t\t\t\tthrow new APIWrapperException(\n\t\t\t\t\t\t\"Couldn't find a suitable endpoint for the given city.\",\n\t\t\t\t\t\tError.NOT_SUITABLE_ENDPOINT_FOUND, null);\n\t\t\t}\n\t\t\tlog", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "        if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue creada con éxito.')\n                return render(request,'relevamiento/mensaje.html", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "      self._cstr = root\n      return\n    self._cstr = TreeNode(kind=Comparator.fromOpcode(root.data[0], root.data[1]).kind, data=root.data[1])\n    worklist = [root]\n    while worklist:\n      cur = worklist.pop(0)\n      if", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t// check if player is online\n\t\tif (Bukkit.getPlayer(this.getName()) == null) {\n\t\t\tthrow new PlayerOfflineException();\n\t\t}\n\t\t// check if player is already in a round\n\t\tif (this.getRound()!= null) {\n\t\t\tthrow new PlayerPresentException();\n\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], MAX_HASH_VALUE / 2), [0])\n    assert_array_equal(f", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "        else:\n            if fmt_token == 'n':\n                result = str(value)\n            else:\n                result = format_digits(value, fmt_token)\n\n    if fmt_modifier == 'o':\n        result += ordinal_suffix(value)\n    elif fmt_modifier == 'c':\n        result = result.center(len(result), '0')\n\n", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "        object1.properties[\"a\"] = ObjectString()\n        object1.properties[\"a\"].name = \"a\"\n        object1.properties[\"a\"].description = \"a\"\n        object1.properties[\"a\"].value = \"a\"\n        object1.properties[\"a\"].value = \"a\"\n        object1.properties[\"", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "          byte[] dataBytes = buildRawData(clientConfig, dataSource);\n          byte[] preambleBytes = buildRawPreamble(clientConfig, catBytes, dataBytes);\n          byte[] dataBytes2 = buildRawData(clientConfig, dataSource);\n          byte[] preambleBytes2 = buildRawPreamble(clientConfig, catBytes", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n  to_map_and_back(AFO, AmplitudePoly(A", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\n\t\t// Instancia el writer\n\t\tGeoJSONWriter writer = new", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                        res = Authorization.getResults(\n                            context.<String>get(ContextKeys.SEARCH_FILTER),\n                            context.<ExtMap>get(Global.InvokeKeys.SEARCH_CONTEXT)\n                        );\n                    } catch (SQLException e) {\n                        context.put(ContextKeys.EXIT_STATUS, SQL_ERROR);\n                        addContextMessage(context, true, e.getMessage", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "    url(r'^users/list/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new_user'),\n    url(r'^users/(?P<pk>[-\\w]+)/edit/$', edit_user, name='edit_user'),\n    url(r'^users/(?P<pk>", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                            }\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"play_session_settings\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        if (stack!= null) {\n            if (stack.getNumberOfCards() < 4) {\n                new AlertDialog.Builder(getActivity()).setTitle(\"Oops", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "    DropDownMenu dropDownMenu;\n    DropMenuAdapter dropMenuAdapter;\n    private static final int[] titles = new int[]{R.string.mentaljk, R.string.life, R.string.study, R.string.test, R.string.constel, R.string.animals, R.string.geomancy};\n    private static final", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "        obj.updateBuffImg();\n        obj.update();\n        obj.updateBlockLabel();\n        obj.updateBlockWidget();\n        obj.updateCommentLabel();\n        obj.updateCollapseLabel();\n        obj.updateSocketLabels();\n        obj.updateSocketTags();\n        obj.updateSocketSpaceDimensions();\n        obj.updateSocketSpaceDimensions();\n        obj.updateSocket", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "        f = derivative.XDA([d1, d2])\n        i, j = self._find_preimage(f, d3)\n        assert i is not None\n        assert j is not None\n        assert f.eval(d1, d2) == d3\n        assert f.eval(i, j)", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformMultiAlternationRepetition(MultiAlternationNode node, Node newStart, Node newRep, Node newEnd);\n\t\tpublic abstract Node transformMultiAlternationRepetitionConstant(MultiAltern", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the commands\n\t\tfor (BaseCommand command : commands) {\n\t\t\tgetCommandManager().register(this, command);\n\t\t}\n\t\t\n\t\t// Register the listeners\n\t\tPluginManager pm = getServer().getPluginManager();\n\t\tpm.registerEvents", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "        connection.saslMechanism.processChallenge(challengeData);\n        resetParser();\n    }\n\n    private void parseFailure(Element doc) throws IOException {\n        String condition = doc.elementText(\"condition\");\n        if (condition == null) {\n            condition = doc.elementText(\"error\");\n        }\n        connection.saslMechanism", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "    private FastScroller mFastScroller;\n\n    private SongListAdapter mAdapter;\n\n    private boolean mShowToolbar;\n    private boolean mShowFastScroller;\n\n    private int mSortOrder = PrefUtils.getSortOrder();\n\n    private boolean mShowAlbumArt;\n\n    private boolean mShowArtist;\n\n    private boolean m", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "            // TODO: FlowAbs effects are not yet supported in the demo app\n            // TODO: FlowAbs effects are not yet supported in the demo app\n            // TODO: FlowAbs effects are not yet supported in the demo app\n            // TODO: FlowAbs effects are not yet supported in the demo app\n", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "        ]\n    def __init__(self, **kwargs):\n        Layer.__init__(self, **kwargs)\n        self.EBT.Len = self.PD\n        self.EBT.LenFunc = lambda t: {1:1, 2:2, 3:3, 4:4, 5", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "            refresh();\n        }\n    };\n    private AlbumEditorDialog.OnAlbumEditorSuccessListener mOnAlbumEditorSuccessListener = new AlbumEditorDialog.OnAlbumEditorSuccessListener() {\n        @Override\n        public void onAlbumEditorSuccess() {\n            refresh();\n        }\n    };\n    private View mEmptyView;\n    private View mAlbum", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\t@Override\n\t\tpublic boolean addRemittUser(UserDTO user) {\n\t\t\treturn UserManagement.addUser(user);\n\t\t}\n\n\t@GET\n\t@Path(\"listusers\")\n\t@Produces(\"application/json\")\n\t@Override\n\tpublic UserDTO[] listRemittUsers() {\n\t\treturn UserManagement.listUsers();\n", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the HTTP headers that were used to make the request.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-info\")\n    Observable<HttpHeader> httpHeaders(@Query(Constants.KEY", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "    assert almost_eq(erb(freq, Hz=1), bandwidth, bits=32)\n    assert almost_eq(erb(freq, Hz=1), bandwidth, bits=64)\n    assert almost_eq(erb(freq, Hz=1), bandwidth, bits=80)\n    assert almost_eq(erb(freq, Hz=", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "            if is_undefined_length:\n                # XXX this is a bit of a hack, but it works\n                #   and is the only way to get the correct length\n                #   for the sequence\n                #   (see PS 3.5-2008 7.5.1a (", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "    try {\n      // create a proxy around the context root object\n      T contextRoot = proxyBuilder.build();\n      // create a map of all comments in the document\n      Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);\n      // create a map of all comments in the document\n     ", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(application, prefs, searchCriteria.values(), page, YarrnAdapter.PAGE_SIZE);\n    }\n}\nYarrn/src/main/java/de/vanmar/android/yarrn/ravelry/dts/Pattern", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags = self.bytes_to_int(val)\n\n    @sdproperty\n    def name(self):\n        return self._name\n\n    @name.register(str)\n    @name.register(six.text_type)\n    def name_str(self, val", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "            self.addMessage(serverMsg, False)\n        self.textInput.setText(\"\")\n        self.textInput.setFocus()\n        self.textInput.selectAll()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n       ", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "    def __init__(self, name, **kw):\n        self.name = name\n        super(Placeholder, self).__init__(**kw)\n\n    def __repr__(self):\n        return '#{}'.format(self.name)\n\n    def accept(self, visitor):\n        return visitor.visit_placeholder(self)\nkinko/types.py", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "    if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime10)):\n            return GregorianMonthDay(value.month, value.day, value.tz", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "    # TODO: we should only search and get phases that have the same sublattice_site_ratios as the phase in the database\n    desired_data = get_prop_data(comps, phase_name, \"formation_energy\", datasets)\n    # TODO: we should only search and get phases that have the same subl", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "    @FormUrlEncoded\n    Call<Suggestions> getSearchSuggestions(@Field(\"tag\") String tag,\n                                           @Field(\"limit\") @IntRange(from = 1, to = 50) Integer limit);\n\n    @GET(\"suggest\")Next line of code:\n:\n    @FormUrlEncoded\n    Call", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "        return Stream(model=model, engine=self)\n\n    def transaction(self, *models, condition=None, sync=None):\n        \"\"\"Create a :class:`~bloop.transactions.ReadTransaction` or :class:`~bloop.transactions.WriteTransaction`.\n\n        :param models: Models to read or write.  For example, ``User``", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "        # order numeric labels by nominal value\n        ordered_labels = sorted(data_set.label_map.items(), key=lambda t: t[0])\n        ordered_labels = list(zip(*ordered_labels))[1]\n\n        self._confusion_matrix = confusion_matrix(y_true=true_labels,\n                                                  y_pred=predictions,\n                                                  labels=", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "from.declarative import DeclarativeMeta, DeclarativeType\nfrom.vertex import Vertex\nfrom.edge import Edge\nfrom.broker import get_broker\nfrom.query import Query\nfrom.batch import Batch\nfrom.commands import VertexCommand, CreateEdgeCommand\nfrom..utils import to_unicode", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "    def decoder(self) -> StandardRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the expected output at the previous frequency step as input, and is initialized with\n        the hidden representation of the input sequences as initial state.\n\n        Returns\n        -------\n        StandardRNN\n           ", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableDefinitionNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(PropertyNode node) {\n        return defaultValue();\n    }\n\n    // Concrete visit methods (NodeNavigation", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "        final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Method\", '=', Alignment.Left);\n        table.addHeader(\"Class\", '=', Alignment.Left);\n        table.addHeader(\"Unit\", '=', Alignment.Left);\n        table.addHeader(\"Min\", '=', Alignment.Right);\n        table.addHeader(\"Max\",", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.traindata, this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t\t\t\tSystem.exit(-1);\n\t\t}\n\t\t\n\t\tthis.t = this.tree.getSize();\n\t\tthis.Tarray = new int[this.t];\n", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "        self.releves_choice.SetSelection(0)\n        self.releves_choice.SetSelection(0)\n        self.releves_choice.SetSelection(0)\n        self.releves_choice.SetSelection(0)\n        self.releves_choice.SetSelection(0)\n        self.releves_choice.SetSelection(", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "            H += dot(crossmat(c - p), m * H_trans) + dot(I, H_rot)\n            H += dot(crosstens(I), J_rot) + dot(crosstens(I), J_rot.T)\n        return H\n\n    def compute_angular_momentum_jacobian_dot(self,", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "        if (queuedProjectResult!= null) {\n            final QueuedProject queuedProject = queuedProjectResult.getQueuedProject();\n            if (queuedProject!= null) {\n                name.setText(queuedProject.getName());\n                author.setText(queuedProject.getAuthor());\n                gauge_description.setText(queuedProject.getGaugeDescription());\n", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "                new MigrateCommand());\n        // Register the currency registry\n        game.getServiceManager().setProvider(this, CurrencyRegistryModule.class, new CurrencyRegistryModule());\n        // Register the loan module\n        game.getServiceManager().setProvider(this, LoanModule.class, new LoanModule());\n        // Register the sql module\n       ", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "            _log.info('Initializing a %s prior for the parameters.', prior['name'])\n        else:\n            raise ValueError(\"Unknown prior spec {}. Should be either a PriorSpec instance or a dict\".format(prior))\n        prior_specs = build_prior_specs(prior, params)\n        return prior_specs\n\n    def _", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "      return Const.fromValue(arg)\n    elif op == LOAD_NAME:\n      return Ref.fromName(arg)\n    elif op == LOAD_ATTR:\n      return Ref.fromName(arg)\n    elif op == LOAD_GLOBAL:\n      return Ref.fromName(arg)\n    elif op == LOAD_FAST:\n      return Ref.fromName(arg)\n   ", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new TempSensorView();\n                    o = tview.getView();\n                    ((TempSensorPresenter) tview.get", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\t\tpublic List<AuthorWithBooks> fetch() {\n\t\t\tList<AuthorWithBooks> result = new ArrayList<>();\n\t\t\tjdbcTemplate.query(\"SELECT AUTHOR.*, BOOK.* FROM AUTHOR LEFT OUTER JOIN BOOK ON AUTHOR.ID = BOOK.AUTHOR_ID\", r -> {\n\t\t\t\tAuthorWithBooks authorWithBooks = new AuthorWithBooks", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "        if settings.ANDROID_DYNAMIC_ANALYZER == \"MobSF_REAL_DEVICE\":\n            install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info['packagename'], app_info['mainactivity'], True)\n        else:\n            install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info['packag", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    Genome parseGenome(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return traits.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into traits\n     */\n    Trait parseTraits(InputStream inputStream);\n\n    /**\n     * Parse the specified", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "                Symbol.typed(bar_type, 'bar'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_list():\n    inc_type = Func[[IntType], IntType]\n    check_expr_type(\n        \"\"\"\n        inc", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, query(startsWith(\"...\")));\n\n        assertThat(pe, queryType(QueryType.SELECT));\n        // end::prepared[]\n    }\n\n    private void batchPre", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "def on_geometry_selection_changed(self, selection):\ndef on_geometry_selection_changed(self, selection):\ndef on_geometry_selection_changed(self, selection):\ndef on_geometry_selection_changed(self, selection):\ndef on_geometry_selection_changed(self, selection):\ndef on_geometry_selection_changed(self, selection):\ndef on_geometry_selection_changed(self, selection):\ndef", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                            return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return new ApiException(cause);\n            }\n        };\n        _config = config;\n        mAdapter = new RestAdapter.Builder()\n               .setEndpoint(BASE_URL)\n               .setConverter(new GsonConverter(gsonsetup))\n", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(String.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Number.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Boolean.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Character.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Byte.class, new Default", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_UPPER_CASE, false)) {\n\t\t\tlabelFactory = new UpperCaseFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "    person = None\n    if not request.user.is_anonymous():\n        person = request.user.person\n    account = account_for_vimeo_id(access_token_data['user_id'], person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            random_name", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "                # Compute the pointing direction and the vignetting and extinction loss for the mean location\n                x_mean = (x0 + xe)/2\n                y_mean = (y0 + ye)/2\n\n                # Use a test pixel sum\n                test_px_sum = 400\n\n                # Compute the pointing direction", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "    grid = _gen_grid(data, options)\n    # Compute likelihood across of parameters defined by grid\n    likelihood = _grid_likelihood(data, options, grid)\n    # Apply priors to likelihood surface\n    posterior = _apply_priors(data, options, likelihood, grid)\n    # Compute posterior surface\n   ", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "            Board.this.rollDices();\n          }\n        else\n          Board.this.rollDices();\n      }\n    });\n    rollBtn.setX(getX() + (boardbg.getWidth() - rollBtn.getWidth()) / 2);\n    rollBtn.setY(getY() + (boardbg.getHeight() - rollBtn.getHeight()) /", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "        self.assertListEqual(list(etree_iter_paths(root, '/a')), [root, '/a'])\n        self.assertListEqual(list(etree_iter_paths(root, '/a/b1')), [root[0], '/a/b1'])\n        self.assertListEqual(list(etree_iter_paths(root, '/a/b1", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "class FakeEngine(Engine):\n\n    def __init__(self):\n        self._responses = {}\n\n    def perform(self, entry, heuristics):\n        return make_mocked_coro(self._responses[entry.request.url])\n\n    def close(self):\n        pass\n\n    def set_kb(self, kb):\n        kb.soft", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "    cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n            emitente=Emitente(\n                    CNPJ=_opcao('--emitente-cnpj'),\n                    IE", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a profile.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a profile\n     */\n    Profile parseProfile(InputStream inputStream);\n\n    /**\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "            final EtsiResponse resp = this.client.sendRequest(req);\n            if (resp == null) {\n                System.out.println(\"Signature request failed.\");\n                return;\n            }\n            \n            // 5. Get the signature value\n            final byte[] signatureValue = resp.getSignatureValue();\n            final byte[] signature", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "        }\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 13 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 14 || type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "        Feedback feedback = new Feedback(\n                AppliverySdk.appToken,\n                AppliverySdk.fileProviderAuthority,\n                AppliverySdk.applicationContext,\n                AppliverySdk.applicationContext.getPackageName(),\n                AppliverySdk.applicationContext.getPackageName(),\n                AppliverySdk.applicationContext.getPackageName(),\n                AppliverySdk.applicationContext.getPackageName", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "            if key not in table_index:\n                table_index[key] = self.session.describe_table(table_name)\n            if key not in object_index:\n                object_index[key] = obj\n            request.setdefault(table_name, []).append(key)\n\n        if request:\n            loaded = self.session.load_items(request)\n            for key,", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "                print(draw_art(fingerprint))\n            print('Fingerprint: {0}'.format(format_fingerprint(fingerprint)))\n            print('Description: {0}'.format(description))\n            print('Created at: {0}'.format(created_at))\n            print('')\n\n    async def list_vaults(self, with_art=False):\n", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\n", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat`.\n\n        :return: Uma resposta SAT padrão.\n        :rtype: satcfe.resposta.padrao.RespostaSAT\n        \"\"\"\n        retorno = super(", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "        self.assertIsNone(node_document_uri('a text node'))\n\n    def test_node_children_function(self):\n        self.assertListEqual(list(node_children(self.elem)), self.elem)\n        self.assertIsNone(node_children('a text node'))\n\n    def test_node_nilled_function(self):\n        self.assertIsNone(node_nilled(self.elem))\n", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "            raise e\n        else:\n            with open(done_path, \"w\"):\n                pass\n        self.training_complete = True\n        self.logger.info(f\"Initialized training for {self.identifier} in {time.time() - begin:.2f} seconds\")\n\n    def _trainer_initialization(self) -> None:\n       ", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "    private final OAuth2Requester requester;\n    \n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient client)\n    {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.sessionController = sessionController;\n        this.state", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "    private final Vms vms;\n    private final Jobs jobs;\n    private final Tasks tasks;\n    private final Errands errands;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "            VotingModule.class\n    };\n\n\n    /**\n     * The plugin this module loader is for\n     */\n    private AthenaGM plugin;\n\n\n    /**\n     * Map of module names to module objects\n     */\n    private HashMap<String, Module> modules;\n\n\n    /**\n     * Create a new ModuleLoader for a given plugin\n", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize thread pool size.\n     * @return {@link DownloadQueue}.\n     * @see #newDownloadQueue()\n     */\n   ", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "  public void init(MutableConfig config) {\n    config.set(\"packager\", \"packager\");\n  }\n\n  @Override\n  public void configure(MutableConfig config) {\n    var proConf = config.get(ProConf.class);\n    var log = Log.create(\"packager\", proConf.loglevel());\n", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "                        # update result\n                        clause ='sid = {}'.format(S['sid'])\n                        sql = getUpdateSQL('result', ret, clause)\n                        # print('update result sql: ',sql)\n\n                        S['result'] = ret['result']\n                        # print('S: ',S)\n                        # print('", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "    def test_simple_op(self):\n        \"\"\"Test simple operations.\"\"\"\n        for op in simple_op:\n            for x in self._bv:\n                for y in self._bv:\n                    if op.condition(x, y):\n                        self.assertEqual(op(x, y), op(x.args[0], y.args[0]))\n                       ", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\tnew APP2Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew SOFSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DQTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DHTSegment(aJPEG).encode(aOutput).log", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "            if (sl == null) {\n                logger.log(Level.SEVERE, \"Keine Sammellastschrift ausgewählt\");\n                return;\n            }\n\n            SqlSession session = sqlSessionFactory.openSession();\n            try {\n                LastschriftenMapper mapper = session.getMapper(LastschriftenMapper.class);\n", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "        Lore lore = LoreLoader.getLore(key);\n\n        if (lore!= null) {\n            LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n            if (!properties.hasLore(key))\n                properties.addLore(key);\n\n            PacketSyncLore.updateLore((EntityPlayerMP) entity", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "    FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInYaxis(FlipInYaxis.class),\n    FlipOutXaxis(FlipOutXaxis", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "        problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level >= 1:\n        smart_print(\"SMT problem:\")\n        smart_print(problem)\n\n    if verbose_level >= 2:\n        smart_print(\"SMT problem size:\", problem.formula_size())\n\n    if verbose_level >= 3", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "            h5 =  LocalHost5\n        return H\n\n    def test_init(self):\n        hosts = self.get_hosts()\n        container = HostsContainer(hosts)\n\n        self.assertEqual(len(container), 5)\n        self.assertEqual(container.filter('h1').filter('h2').filter('h3').filter", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "        return self.__tc_command_output == TcCommandOutput.NOT_SET\n        return self.__tc_command_output == TcCommandOutput.NOT_SET\n        return self.__tc_command_output == TcCommandOutput.NOT_SET\n        return self.__tc_command_output == TcCommandOutput.NOT_SET\n        return self.__", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1.NAME: False,\n                  NormalRateConfig.GPS.L2.NAME: False,\n", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n\n        Cursor cursor =  db.query(ExpenseManagerContract.ExpenseTable.TABLE_NAME, null, ExpenseManagerContract.ExpenseTable.COLUMN", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "                isinstance(t2, UnionMeta)\n            ):\n                for t in t2.__types__:\n                    unify(t1, t, backref)\n            else:\n                raise\n\n    elif isinstance(t1, UnionMeta):\n        for t in t1.__types__:\n            unify(t, t2, backref", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "        self.blinkpy = blinkpy\n        self.blinkpy = blinkpy\n        self.blinkpy = blinkpy\n        self.blinkpy = blinkpy\n        self.blinkpy = blinkpy\n        self.blinkpy = blinkpy\n        self.blinkpy = blinkpy\n       ", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "      self._varz.message_bytes_sent()\n      self._varz.message_bytes_recv()\n      self._varz.deserialization_failures()\n      self._varz.message_bytes_sent()\n      self._varz.message_bytes_recv()\n      self._varz.deserialization_failures()\n      self._varz.message_bytes_sent", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "        ThreadDumpRuntime runtime = new ThreadDumpFactory().fromString(out.toString());\n        assertThat(runtime.getThreads().size(), equalTo(1));\n        assertThat(runtime.getThreads().iterator().next().getName(), equalTo(\"remotely-observed-thread\"));\n    }\n\n    @Test\n    public void jmxRemoteConnectVia", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" 个\");\n            }\n        });\n    }\n}\n", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "    if self.symbol == 'eq':\n        return numeric_equal(*operands)\n    elif self.symbol == 'ne':\n        return numeric_not_equal(*operands)\n    elif self.symbol == 'lt':\n        return operands[0] < operands[1]\n    elif self.symbol == 'gt':\n        return operands[0]", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "        return header;\n    }\n\n    private void initializeEvents() {\n        // Si no hay eventos, se crea un evento por defecto\n        if (mEvents == null) {\n            mEvents = new ArrayList<>();\n            mEvents.add(new Event(MENU_ID_IMAGE1));\n            mEvents.add(new Event(MENU", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "        UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertEquals(\"SUCCESS\", response.getResultCode());\n        Assert.assertEquals(\"APPID_123456789\", response.getAppId());\n        Assert.assertEquals(\"MCHID_123456789\", response.getMchId());\n        Assert.assertEquals(\"123456789\",", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "        assertEquals(\"key\", creator.create(KEY, new MockedMessageMapper(KEY, ERROR)).getKey());\n    }\n\n    @Test\n    void createWithParametersTest() {\n        Translator translator = new MockedTranslator();\n        MessageTranslatedCreator creator = new MessageTranslatedCreator(translator);\n\n        List<Parameter> parameters = new", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "    public int readSmallIntValue(int d1) throws IOException {\n\t\tint value = d1 & 0x7F;\n\t\tif (value < 0) {\n\t\t\tthrow new IOException(\"Negative small int: \"+value);\n\t\t}\n\t\treturn value;\n    }\nNext line of code:\n:\n   ", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "            MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class(timezone=self.__timezone)\n            except ParseError:\n                continue\n\n            break\n\n        if not isinstance(self.__parser, PingParser):\n            raise Parse", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "        m.videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\r\n        m.videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\r\n        m.videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\r\n        m.videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\r\n        m.videoFrame", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "            self._probe = probe\n        else:\n            self._probe = load_probe()\n        # Load the probe adjacency list.\n        self._adjacency_list = _probe_adjacency_list(self._probe)\n        # Load the channels per group.\n        self._channels_per_group = _channels_per_group(self._probe", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.buildPingUri(context);\n        final BoundRequestBuilder boundRequestBuilder = prepareGet", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile ddi = new File(basePath + \"/ddi.xml\");\n\t\t\tFile xforms = new File(basePath + \"/xforms.xml\");\n\t\t\tFile xforms2 = new File(basePath + \"/xforms2.xml\");\n\t\t\tFile xforms3 = new File(basePath + \"/xforms3.xml\");\n", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "        self.assertEqual(\n            np.array([0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]),\n            np.array([0.0", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\t\tpublic void acceptBoolean(final FixTag tag, final boolean value) {\n\t\t\tValidity validity = validities.get(tag);\n\t\t\tif (validity!= null) {\n\t\t\t\tvalidity.acceptBoolean(value);\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic void acceptChar(final FixTag tag, final char value", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "modules/upload_contacts_from_file.py\ndef determine_language(row, headers):\n    language_entry = check_all_headers(row=row, headers=headers)\n    return language_selector(language_input=language_entry, options=[\"Hindi\", \"English\", \"Gujarati\"],\n        default_option=\"Hindi\", none_option=\"Hindi\")\n", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                               .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfTheSystem();\n                                    return GIVEN_STRING;\n                                })\n                               .when(SystemUnderTest::failWithParameter)\n                               .then", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "        # if there is still bits to map, map them\n        if rem:\n            # map the rest bits\n            self.append(Bit(self.rest_name, BitLen=rem))\n            # map the rest bits\n            self[-1].map(string)\n            # check if there is still bits to map, and", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "        # Make sure we're not looking at abstract models\n        validate_not_abstract(model)\n\n        # Make sure we're not looking at abstract models\n        validate_not_abstract(model)\n\n        # Make sure we're looking at models\n        validate_is_model(model)\n\n        # Make sure we're not looking at abstract models\n", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "    with pytest.raises(InvalidModel):\n        engine.bind(object())\n    with pytest.raises(InvalidModel):\n        engine.bind(object())\n    with pytest.raises(InvalidModel):\n        engine.bind(object(), skip_table_setup=True)\n    with pytest.raises(InvalidModel):\n        engine.bind(object(), skip_table_setup=False)\n    with", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "    assert u6.dimensions == mass / (length ** 3)\n    assert u6.base_value == 1.0\n\n    # test that we can create a unit from a string that is not a unit\n    u7 = Unit(\"kg * m**2 * s**-2 * cm**-", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "        // Load modules\n        List<Module> modules = new ArrayList<>();\n        modules.add(new SqlModule());\n        modules.add(new LoanModule());\n        // Load the modules\n        for (Module module : modules) {\n            module.initialize(this);\n        }\n        // Load the services\n        economyService = new LiteE", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "        :param int index: Index into the tag list as restricted by name.\n        :param str name: Name of a type of tag to retrieve. Specify None to\n            retrieve all types of tags.\n        \"\"\"\n        name = prepare_str(name, \"ascii\")\n        tag = TAG()\n        self._call_f", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                    public void startOrderEditActivity(Account account, Order order) {\n                        Intent intent = EditActivity.getIntent(MainActivity.this,\n                                R.string.order_edit_title,\n                                order,\n                                new OrderEditController(),\n                                R.string.order_edit_ok_button,\n                                R.string.order_edit_cancel_button);\n                        intent.putExtra(EditActivity.EXTRA_IS", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "Call<ImgurResponseWrapper<List<GalleryItemProxy>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<ImgurResponseWrapper<List<String>>> listAccountImageIds(\n", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "        resource = ThermometerResource(aircraft.sensors.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.sensors.thermometer.temperature, thermometer_data[\"temperature\"], 3)\n\nclass PitotTubeResourceTests(TestCase):\n    def test_get_pitot_tube_data(self", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "    column = User.age\n    value = 3\n    expected_ref = \"#n0.#n1\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0\": expected_action.value}\n\n    ref, action = reference_tracker._value_ref(column, value, inner=True", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "            return false;\r\n        }\r\n        \r\n        if (result.getResult() == -1) {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n\t}\r\n\t\r\n\tprivate void changeTab() {\r\n\t\tSingleSelectionModel<Tab> selectionModel = tabPane.getSelectionModel();\r\n        selectionModel.clearAndSelect(1);\r\n\t}\r\n", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "            if request.user.is_authenticated:\n                user = request.user\n                userprofile = user.userprofile\n                userprofile.submission_karma += 1\n                userprofile.save()\n                userprofile = user.userprofile\n                userprofile.submission_karma += 1\n                userprofile.save()\n                userprofile", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending terms to be displayed as gif categories,\n     * which when clicked will perform a gif search of that tag\n     *\n     * @param serviceIds a {@link Map}", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "            of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::failed);\n        }\n    };\n\n    @NonNull\n    private final WifiStateReceiver mWifiStateReceiver = new WifiStateReceiver(mWifiStateCallback);\n\n    @NonNull\n    private final WifiScanReceiver mWifiScanReceiver = new WifiScanReceiver(mWifiScanResults", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "        for (PlaySession ps : stack.getPlaySessions()) {\n            ps.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "class SegmentVadArguments(NamedTuple):\n    vad_path: str\n    segmentation_options: MetaDict\n    num_jobs: int\n    log_directory: str\n    return_info: bool\n    use_mp: bool\n    debug: bool\n    verbose: bool\n    cleanup: bool\n    return_dict", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "    private final Vms vms;\n    private final Deployments deployments;\n    private final Jobs jobs;\n    private final Errands errands;\n    private final Tasks tasks;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n\n    def get_tag_info(self, index, name=None):\n        \"\"\"Retrieve a metadata tag.\n\n        'Tags' are metadata stored within a sound file. These can be things\n        like", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "                section\n            )\n            nbits_encoded += bufr_message.length.nbits\n\n        # TODO: 1900 correct?\n        bufr_message.year.value = 1900 if bufr_message.edition.value < 4 else 0\n        bufr_message.month.value = 0\n        bufr_message", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "    moderation_home(request, report_form=report_form)\n    moderation_home(request, report_form=report_form)\n    moderation_home(request, report_form=report_form)\n    moderation_home(request, report_form=report_form)\n    moderation_home(request, report_form=report_form)\n    moderation_home(request, report_form=report", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "    public void listenToResultSet(final BenchmarkMethod meth, final AbstractMeter meter, final double data) {\n        final Class<?> clazz = meth.getMethodToBench().getDeclaringClass();\n        if (!elements.containsKey(clazz)) {\n            elements.put(clazz, new ClassResult(clazz));\n        }\n\n        final ClassResult clazzResult", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "        // Checking RaxML binary\n        if (!RaxMLAminoAcidRunEstimator.checkBinary())\n        {\n        \tfinalize(1);\n        }\nNext line of code:\n:\n        // Checking ProtTest binary\n        if (!ProtTest.checkBinary())\n        {\n        \tfinalize(1);\n       ", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(URL(\"http://www.example.com/recordings\"), BEEP(true));\n\t\tNext line of code:\n:\n\t\ttropo.on(EVENT(\"completed\"), Do.say(\"Thank you for calling. This call will be recorded.\"));\n\t\tNext line of code:\n:\n\t\ttropo.on", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "                listaDeRespostas.getPropriedades().getEstado() == \n                EstadoDaListaDeRespostas.FINALIZADA) {\n            Questao questao = questaoDao.carrega(idDaQuestao);\n            if (questao == null) return;\n            if (questao.getTipo()", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code,DefaultDataConnector connector) {\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tProgramManager.getInstance().parseTrack(connector.getResultDoc().getJson());\n\t\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(ProgramTrackView.class);\n\t\t\t\t\tadapter.setProgramManager(ProgramManager", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "    @Mock\n    AdInterface adServerInterface;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    CuePointsRetriever cuePointsRetriever;\n\n    @Mock\n    PlayerUIController controller;\n\n    @Mock\n    PlayerAdLogicController componentController;\n\n   ", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tappEvent.setEvent (AppEvent.Event.EXIT) ;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error occurred while setting the close request handler\", e);\n\t\t}\n\t\t\n\t\t// create the browser\n\t\tBrowser browser = new SimpleBrowserImpl(stage,", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "    String className = adapterName(type, INJECT_ADAPTER_SUFFIX);\n    TypeSpec.Builder adapter = TypeSpec.classBuilder(className)\n       .addModifiers(PUBLIC)\n       .addSuperinterface(ParameterizedTypeName.get(Binding.class, injectableType(type)))\n       .addJavadoc(bindingTypeDocs(type, constructor, fields))\n", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "        new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n    }\r\n\r\n    /**\r\n     * 打开/关闭透传消息\r\n     * @param enable 打开/关闭\r\n     */\r\n    public static void enableReceiveNormalMsg(boolean enable) {\r\n        new EnableReceiveNormalMsgApi().enableReceiveNormalMsg", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 0\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepareArgsParser", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "    elif is_comment_node(elem) and context.parent_map.get(elem) is None:\n        return f'/comment()[{context.position}]'\n    elif elem is root:\n        return path\n    elif elem is context.root:\n        return path\n    elif elem is context.item:\n        return '/'\n    elif elem is context", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "gtable/lib.py\ndef _check_length(i, k, length, length_last):\n    \"\"\"\n    Check if the length of the column is the same as the previous one.\n    If not, extend the index.\n    \"\"\"\n    if length!= length_last:\n        self.index = np.hstack([self.index,\n                               ", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "                TypingMessage m = (TypingMessage)message;\n\n                if (m.isTyping())\n                {\n                    _isTyping = true;\n                }\n                else\n                {\n                    _isTyping = false;\n                }\n            }\n            else if (message.getType() == MessageType.SMART_REPLY)\n           ", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tEXOG.append(dmy_leftvar)\n\t\tEXOG.append(dmy_rightvar)\n\t\tEXOG.append(dmy_covariates)\n\n\t\tEXOG_A = []\n\t\tEXOG_A.append(dmy_mediator)\n\t\tEXOG_A.append(dmy_leftvar)\n\t\tEXOG", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "        ThreadDumpThread thread = sut.thread(\"thread\");\n        assertThat(thread.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(thread.getLock(), equalTo(ThreadLock.fromInstance(thread)));\n        assertThat(thread.getStackTrace().size(), equalTo(1));\n        assertThat(thread.getStackTrace().get(0).getFileName(), equalTo(\"Thread", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "                DatePicker picker = new DatePicker(this);\n                picker.setRange(2000, 2050);\n                picker.setSelectedItem(mRecord.getRecordTime().getYear(), mRecord.getRecordTime().getMonth(), mRecord.getRecordTime().getDay());\n                picker.setOnDatePickListener(new DatePicker.OnYearMonthDayPick", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "        if(type == 5 || type == 0) {\n            LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\n            PressureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\n           ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "    private ViewPager mViewPager;\n    private TabLayout tabLayout;\n    private Toolbar toolbar;\n    private View parentView;\n    private int mIconSize;\n    private int mHomePointPosition;\n    private boolean mRootDown;\n    private int mClearMenLevel;\n    private boolean mChameleonNavbar;\n    private", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "        self.time_manager = TimeManager(self)\n        self.tracerouter = Tracerouter()\n        self.pcap_logger = PcapLogger(self)\n        self.params['switzerland_version'] = switzerland_version\n        self.params['switzerland_revision'] = switzerland_revision\n        self.params['switzerland_date']", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "    assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.deltas[4].id == \"delta-5\"\n    assert deltas.deltas[4].", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "            non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=parameters, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_thermochemical_prob = 0\n        _log.debug('Multi-phase error: %s', multi_phase_error", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "            Str('Identity', Len=1, Repr='hum'),\r\n            Str('IMSI', Len=8, Repr='hum'),\r\n            Str('IMSI', Len=8, Repr='hum'),\r\n            Str('IMSI', Len=8, Repr='hum'),\r\n            Str('IMSI", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "        self.__class_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_tc(self, device):\n        self.__parse_tc_qdisc(device)\n        self.__parse_tc_filter(device)\n        self.__parse_tc_class(device)\n\n   ", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "        result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)\n\n    \ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "pyramid_swagger/tween.py\ndef get_swagger_objects(settings, route_info, registry):\n    \"\"\"Returns appropriate swagger handler and swagger spec schema.\n\n    Swagger Handler contains callables that isolate implementation differences\n    in the tween to handle both Swagger 1.2 and Swagger 2.0.\n\n    Exception is", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
