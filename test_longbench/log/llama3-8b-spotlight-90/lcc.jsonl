{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl == null )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor ( int k = 0; k < types", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, **data.copy())\n\t\t\te_, d = self.next(A, Y_, Z_)\n\t\t\tif d == float('inf'):\n\t\t\t\tcontinue\n\t\t\tw_ = self.get_graph_score(A) - d if d!= float('inf') else float('inf') \n", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        # First, read some frames, go back, and compare buffers\n       ", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"default\", styleValue.getDefaultValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n\t\t\t\treturn null;\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "        for a in self.answers:\n            ret += \" %s\" % a\n        return ret\nclass _AnagramData(_QAData):\n    def ask_string(self):\n        return \"Anagram: %s\" % self.question\n    def hint_string(self):\n        return \"Hint: %s\" %", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                    mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(R", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "            for (X509Certificate cert : chain) {\n                s.println(\"  cert[0] = \" + cert);\n            }\n            s.println(\"***\");\n        }\n    }\n}\n/*\n * CertificateRequest... SERVER --> CLIENT\n *\n * Server asks client to send a certificate chain, for authentication.\n *\n * NOTE:", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "            sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public void setSpaceListener (LocalSpace<Object,SpaceListener> sl) {\n        this.sl = sl;\n    }\n    public void notifyListeners (Object key, Object", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item instanceof AlchemicalCatalyst) {\n\t\t\t\tRedButton btnAlchemy = new RedButton(Messages.get(this, \"alchemy\")) {\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\tWndImp.show(Alchemical", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        request = self.rfile.read(int(self.headers.getheader('content-length')))\n        response = self.server.dispatcher.dispatch(request)\n        self.wfile.write(response)\n        return [response]\n        return self.dispatcher.dispatch(request)\n        self.wfile.write(response)\n        return [response]\n        return self.dispatcher.dispatch(request)\n       ", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "        mark = \"setRepeated('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def lock_status(self, status", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "            return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_extract_archive(self, login, password, status_id, params, session):\n       ", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals5\");\n\t\t\tAssert.IsTrue (Same (b, z), \"Untrusted+Trusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (b, z), \"!", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        DomainInfo domainInfo = manager.getDomain(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Returns the forward for the domain admin page.\n     *\n     * @param mapping the action mapping\n     * @param domain the domain\n     * @return the forward\n     */\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "        self.__datastream_transport, self.__datastream_protocol = await self.__server.accept(\n            self.__datastream_address, loop=self.__event_loop)\n        self.__datastream_fd = self.__datastream_transport.get_extra_info('socket').fileno()\n        self.__datastream_protocol.wait()\n    async def", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, 0));\n\t\t\t\t\tUtil.UpdateJumpPercent(jumpID, newPersonWeight);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tConvertWeightWindowBox.convert_weight.Hide();\n\t\tConvertWeightWindowBox = null;\n", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new IntegerFieldEditor(AUDIO_FILE_CACHE_LENGHT,\n\t\t\t\t\t\t\"Audio files cache lenght\", getFieldEditorParent()));\n\t\t\t\taddField(new IntegerFieldEditor(TEXT_FILE_CACHE_LE", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "        for state in states:\n            if state.key:\n                self.identity_map.replace(state)\n            else:\n                self.identity_map.discard(state)\n            state.expire(state.dict, self.identity_map._modified)\n    def _flush(self, states):\n        \"\"\"Flush all pending changes to the database.\n        This method is", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed = new ArrayList<IField>(3);\n\t\t\t\tname2Field.put(name, named);\n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "    r'/foo/?' in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n            if self.request.method in (\"GET\", \"HEAD\"):\n                uri = self.request.path + \"/\"\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.Write (\"<div class=\\\"aspnet-MultiView\\\">\");\n\t\t\twriter.Write (\"<div class=\\\"aspnet-MultiView-Views\\\">\");\n\t\t\tfor (int n=0; n<Views.Count; n++) {\n\t\t\t\tView v = Views [n];\n\t\t\t\tif (v!= null) {\n\t\t\t\t\twriter", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "    args = parser.parse_args()\n    print >> sys.stdout, 'Starting Wigle Downloader.'\n    print >> sys.stdout, 'User: {0}'.format(args.user)\n    print >> sys.stdout, 'Password: {0}'.format(args.password)\n    print >> sys.stdout, 'Coordfile: {0", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                // SkillGroup3 replace SkillGroup3\n                if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.PossibleSkills)\n                        {\n                            if (i", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "        for platform, platform_data in platforms.items():\n            if platform_data.get('os', None) == 'os_windows':\n                # Windows builds have a different download link format\n                product = 'firefox'\n            else:\n                product = 'firefox-%s' % platform\n            if platform_data.get('arch',", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.getByProjectTypeIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\t} else {\n\t\t\tstateBeansList = StatusBL.loadAll();\n\t\t}\n\t\tif (stateBeansList!=null &&", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Parent is CallExpressionSyntax ) {\n                    if ( argumentSyntax.Parent.Parent is MethodDeclarationSyntax ) {\n                        if ( argumentSyntax.Parent.Parent.Parent is NamespaceDeclarationSyntax ) {\n                            if ( argumentSyntax.Parent.Parent.Parent.Parent is NamespaceDeclaration", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        split_test = self._update_partition_id(0)\n        # Verify that child verticals have been set to match the groups\n        self.assertEqual(2, len(split_test.children))\n        vertical_0 = self.get_item_from_modulestore(split_test.children[0], verify_is_draft=True)\n        vertical_1", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            if (vertical) {\n                tmp.Add(new PdfIndirectReference(writer.AddObject(GetCIDFontType2(piref, subsetPrefix, metrics))));\n                tmp.Add(new PdfIndirectReference(writer.AddObject(GetFontBaseType(tmp, subsetPrefix, null))));\n            }\n            else {\n                tmp.Add(new PdfInd", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\t// if the cell is already at the proper depth, skip it\n\t\t\t\t\t\tif (graphNodes.get(cell).depth == cell.getDepth())\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t// find the cell's parent\n\t\t\t\t\t\tCell parent = cell.getParent();\n\t\t\t\t\t\t// if the parent is null, the cell is a top", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "        task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    public void addListener(FutureTaskListener<Bitmap> listener) {\n      Util.assertMainThread();\n      if (task!= null) {\n        task.addListener(listener);\n      }\n    }\n    public void removeListener(FutureTask", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                }\n            }\n        });\n    }\n}\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "    prerequisite = NavigateToSibling('Details')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\nclass NodeEditTagsView(NodeView):\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Tag Assignment') and", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.onPose(timestamp, pose);\n\t\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "        return \"Effect{\" + \"probability=\" + probability + \", scopes=\" + scopes + '}';\n    }\n    /**\n     * Get the XML tag name.\n     *\n     * @return The tag name {@value #TAG_NAME}.\n     */\n    public static String getTagName() {\n        return TAG_NAME;\n    }\n   ", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "                    interact(self._plot_line, x=widget_x, y=widget_y, dim=widget_dim)\n                else:\n                    interact(self._plot_line, x=x, y=y)\n            else:\n                raise ValueError('x and y must be given')\n        else:\n            self._plot_line(x=x, y", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (path.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"path\");\n                }\n                if (ignored.Contains(path))\n                {\n                    _logger.Trace(\"Ignoring change to {0}\", path);\n                    continue;\n                }\n                if (rootFolder.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"rootFolder\");\n                }\n               ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key,\n\t\t\t\t\t BiFunction<? super K,? super E,? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n\t\treturn read(key, computed);\n\t}\n\t@Override", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            isDiscussable = contobj.isDiscussable()\n            canReply = canreply(contobj)\n           ", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t}\n\t\tpublic sbyte Z\n\t\t{\n\t\t\tget { return m_Z; }\nNext line of code:\n:\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                    channelUri = String.Format(\"sip:{0}@{1}\", land.LocalID, m_freeSwitchRealm);\n                }\n                //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": channel_uri: {4}\",\n               ", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(textDateStart.Text==\"\"\n\t\t\t\t|| textDateStop.Text==\"\"\n\t\t\t\t|| textDatePaycheck.Text==\"\")\n\t\t\t{\nNext line of code:\n:\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(textDateStart.Text==textDateStop.Text){\nNext line of code", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Skip the line after the column headings.\n        next(file_handle)\n        # Make a list of data lists to hold the data for each column.\n        data_lists = [[] for i in range(header['Number of fields'])]\n", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "    if not user:\n        return {'success': False,'msg': _('Valid API key needed to create a group member')}\n    return authz.is_authorized('group_member_create', context, data_dict)\ndef group_member_create(context, data_dict):\n    return _group_or_org_member_create(context, data_dict", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\t// setting confidences\n\t\t\t\tconfidences[parentIndex] *= confidences[parentIndex];\n\t\t\t\tconfidences[parentIndex] *= node.getModel().getConfidence(resultIndex);\n\t\t\t\t// setting outcome\n\t\t\t\toutcomes[parentIndex] = node.getChildren().get(resultIndex).getPartitionId();\n\t\t\t\tdepths[parent", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "            codePoint = Character.toCodePoint(ch, string.charAt(offset++));\n         }\n         return _range.contains(codePoint)? offset : -1;\n      }\n   }\n   static class SetC extends AbstractCharNode {\n      private final boolean[] _asciiSet;\n      private final IntSet _range;\n      Set", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        if (studyFormName == null) {\n            return ValidationResults.SUCCESS;\n        }\n        if (studyFormName.equals(\"\")) {\n            return ValidationResults.SUCCESS;\n        }\n        if (studyFormName.equals(\"null\")) {\n            return ValidationResults.SUCCESS;\n        }\n        if (studyFormName.equals(\"null\"))", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod!= ModData.Manifest.Id)\n\t\t\t\t{\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", \"The server requires the mod {0} to be installed.\",\n\t\t\t\t\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\treturn coll;\n\t}\n\tpublic static ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean[] toBeans(CatsReferralPendingEmergencyNonEDAdmissionListVoCollection collection)\n\t{\n\t\treturn toBeans(collection, true);\n\t}\n\tpublic static ims.core.vo.beans.CatsRef", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify()\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "  plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plotType' in pD:\n    return S_ERROR( \"Missing plot type!\" )\n  plotType = pD[ 'plotType' ]\n", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        // Output Parameters\n        for (int i = 0; i < plan.parameters.length; ++i) {\n            catalogStmt.getOutput_parameters().add(String.valueOf(i));\n        }\n        // Output Parameter Types\n        for (int i = 0; i < plan.parameters.length; ++i) {\n           ", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Anchor = ((System.Windows.Forms.AnchorStyles", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte)parity;\n\t\t\tdcb.ByteSize = (byte)data_bits;\n\t\t\tdcb.StopBits = (byte)bits;\n\t\t\tdcb.XonChar = 0x11;\n\t\t\tdcb.XoffChar = 0", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    parser.add_argument('--no-keep-tempdir', dest='keep_tempdir',\n                        action='store_false')\n    parser.set_defaults(keep_tempdir=False)\n    args, unknown = parser.parse_known_args()\n    _keep_tempdir = args.keep_tempdir\n    unittest.main(argv=sys.argv[:1] +", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tself.newAPList.append(self.buildEntryComponent(entry[0], entry[1], entry[2], entry[3], entry[4], entry[5]))\n\t\t\tself.newAPList.append(self.buildEntryComponent(entry[0], entry[1], entry[2], entry[3], entry[4],", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                float width = (fCode.Length - 1) * x * 10 + fontX;\n                float height = fontY + barHeight;\n                return new Rectangle(width, height);\n            }\n        }\n        \n        /** Draws the barcode.\n        * @param canvas the canvas to draw on\n        * @", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return results;\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "        y_points = np.arange(-90.0, +90.0, 2.0)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            (\"longitude\", x_points.flatten()),\n            (\"latitude\", y_points.flatten()),\n        ]\n        result = traj", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            if (currPacket!= null)\n            {\n                Clipboard.SetText(currPacket.Frame.ToString());\n            }\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (_newStyleLogViewer)\n            {\n                LogPacket currPacket = GetCurrentPacket();\n                if (currPacket!= null)\n", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "    print '\\033[0m'\n    return 0\ndef get_echonest_data(wav_dir):\n    # get the data from the internet\n    segments = get_timbre_pitches_loudness(wav_dir)\n    return segments\ndef get_echonest_data_from_txt(wav_dir):\n   ", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 321);\n            this.Controls.Add(this.treeView1);\n            this.Name = \"DummySolutionExplorer\";\n            this.Text = \"Dummy", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            baos.write(emptyStreams.toByteArray());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException {\n        boolean hasEmptyFiles = false;\n        for (final SevenZArchiveEntry entry : files) {\n            if (entry.isDirectory() &&!entry.has", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                    alphaLevel = rampUp? 255 : 0;\n                    inRamp = true;\n                }\n                else\n                {\n                    alphaLevel = rampUp? alphaLevel + 1 : alphaLevel - 1;\n                    if (alphaLevel == 0 || alphaLevel == 255)\n                    {\n                       ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow_move_files_if_max_idletime_configured_and_paused()\n        {\n            GivenGlobal", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n                }\n            }\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "        f.writelines(['F) 0\t\t\t", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x08:\n                    /* C */\n                    i = b & 0x03;\n                    i += ((b & 0x80) >> 4);\n                    i +=", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in Studio.\n        \"\"\"\n        self._course_key = CourseKey.from_string(self._course_dict['org'] + '/' + self._course_dict['number'] + '/' + self._course_dict['run'])\n        url", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length == 1) {\n\t\t\treturn (int) (chance * Float.parseFloat(splitNumber[0]));\n\t\t}\n\t\tif(splitNumber.length == 2) {\n\t\t\treturn (int) (chance * Float.parseFloat(splitNumber[0]) + Float.parseFloat(splitNumber[1]));\n\t", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "        try:\n            os.remove('%s/key.pem' % config_directory)\n            os.remove('%s/ca.pem' % config_directory)\n        except:\n            module.fail_json(\"Could not delete \" + config_directory)\n        return 0, \"Meter \" + name + \" deleted\"\ndef download_request(module, name,", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.lblPrivacy.Location = new System.Drawing.Point(6, 29);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(370, 26);\n            this.lblPrivacy.TabIndex = 1;\n            this.lblPrivacy.Text = \"This will improve the accuracy of", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for plugname, plug in self.loaded_plugins:\n            try:\n                plug.collect()\n            except KeyboardInterrupt:\n                raise\n            except:\n                if self.raise_plugins:\n                    raise\n                else:\n                    self._log_plugin_exception(plugname)\n            plugruncount += 1\n            if plugrunc", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession!= null && currentSession.isOpened()) {\n            userInfoSession = Session.openActiveSessionWithPublishPermissions(this, currentSession, loginButtonProperties.getPermissions());\n            userInfoSession.addCallback(new Session.StatusCallback() {\n                @Override\n                public void call(Session session, SessionState state, Exception exception", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.chance;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.chance /= sum;\n\t}\n}\n", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                    'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test exporting as an xml document.\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "    if NorthernHemisphere == 1:\n        phi1 = phi1\n    else:\n        phi1 = -phi1\n    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))\n    T = tan(phi1Rad)*tan(phi1Rad)\n   ", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            reason = form.cleaned_data['reason']\n            msg = UserMessage.objects.create(\n                to_user = user,\n                from_user = request.user,\n                message = reason,\n            )\n            messages.success(request, \"Report sent!\")\n            return HttpResponseRedirect", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "    @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return 'Add a new series for %s' % self.context.title\n    @property\n    def next_url(self):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        return canonical_url(self.context)\n    @property\n", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t\tif(m_props.RightToLeft)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(false); }\n\t\t\t}\n\t\t}\n#endif\n\t}\n}\n", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "                if flag == 'isa':\n                    new_positional_tags_list.append(\n                        TagRegex(True, regex))\n                elif flag == 'variant':\n                    new_positional_tags_list.append(\n                        TagRegex(False, regex))\n                elif flag == 'length':\n                    new_positional_tags_list.append(\n                        TagRegex(False,", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "        0x06: 'OBD-II as defined by the CARB and OBD as defined by the EPA',\n        0x07: 'OBD-II as defined by the CARB and OBD-I ',\n        0x08: 'OBD-II as defined by the CARB and O", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "                this.SetNeededExpansion(index, Expansion.ML);\n\t\t\t\t\n                index = this.AddCraft(typeof(EnchantedPrism), 1044294, 1073466, 45.0, 95.0, typeof(BlankScroll), 1044377, 1, 1044378);\n", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        # If the context was preserved we have to pop the context that was\n        # pushed before.  This is important because the context is not\n        # popped at the end of the request if it was preserved.\n        if self.preserved:\n            top = _request_ctx_stack.top\n            if top is", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition defaultResourceTypeDefinition, ReleaseEntity release) {\n        List<Resource", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "        dx = (ray_trafo.geometry.det_init_axes[0] *\n              ray_trafo.range.meshgrid[1])\n    else:\n        dx = (ray_trafo.geometry.det_init_axes[0] *\n              ray_trafo.range.meshgrid[1] +\n              ray_trafo.geometry.det_init_axes[1", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add blocks\n\t\t\tbyte[] output = new byte[block1.Length];\n\t\t\tfor (int i", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tAssert.That(obj.Properties[1].Key, Is.EqualTo(\"In this test\"));\n\t\t\tAssert.That(obj.Properties[1].Value.Type, Is.EqualTo(TokenType.String));\n\t\t\tAssert.That(((JString)obj.Properties[1].Value).Value, Is.EqualTo(\"It is an object.\"));\n\t\t}\n\t\tstring _text4", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "                for (int w = 0; w < width; w++) {\n                    if (h == 0 && w == 0) {\n                        continue;\n                    }\n                    if (h == 0) {\n                        edges.add(T2.of(w, w + 1));\n                    }\n                    if (w ==", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    ds.config[\"emodulus\"][\"lut identifier\"] = \"LE-2D-FEM-19\"\n    ds.config[\"emodulus\"][\"channel width\"] = 30\n    ds.config[\"emodulus\"][\"flow rate\"] = 0.16\n    ds.config[\"emodulus\"][\"viscosity", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        final String filename = args[0];\n        final String namespace = args[1];\n        final AbstractTripleStore expected = new LocalTripleStore(filename,\n                namespace);\n        final AbstractTripleStore actual = new LocalTripleStore(filename,\n                namespace);\n        final TempTripleStore tmp = bulkExport(actual);\n        final Temp", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t * \n\t * @return true/false\n\t */\n\tpublic boolean downloadAndInstall(String downloadedJarFile)", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, ref vao);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteBuffers(1, ref vbo);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteBuffers(1, ref ibo);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_inverse, self.x_model, self.parameter_values)\n    @property\n    def x_data_cor_mat(self):\n        \"\"\"2D array of shape ``(N,", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "            add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        #endregion\n        #region Folder System Events\n    \t/// <summary>\n    \t/// Occurs when a folder is added to the folder system.\n    \t/// </summary>\n    \t", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        final ImportVmTemplateParameters p =\n                new ImportVmTemplateParameters(Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), t);\n        return p;\n    }\n    private final String string100 = \"0987654321\" +\n            \"0987654321\" +\n            \"098765", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.LeftAttach = ((uint)(2));\n\t\t\tw10.RightAttach = ((uint)(3));\n\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+Table", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n                self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sTOTALSTATUS' % POSTPROC_ENVIRO_ID] = \\\n                self.totalstatus\n       ", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] genericParameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t{\n\t\t\treturn DefineMethod(name", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "      return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n    public", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                    vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getVertIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <code>i</", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (showDateData.equals(\"false\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATEMODIFIED);\n        }\n        return result;\n    }\n    /**\n     * Returns the page type to show.<p>\n     * \n     * @return the page type to show", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame ();\n\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\tdisplayText.text = inputField.text;\n\t\t}\n\t}\n}", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnEnabledChanged(EventArgs e)\n    {\n      Invalidate();\n      base.OnEnabledChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnFontChanged(EventArgs e)\n    {\n      Invalidate();\n     ", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser.Length > 0)\n                {\n                    if (!Users.Contains(lastUser))\n                    {\n                        Users.Add(lastUser);\n                    }\n                }\n            }\n            foreach (string user in Users)\n            {\n                SendEmailForUser(user, A", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.LastMousePos.X < EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Left | ScrollDirection.Up;\n\t\t\tif", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            // if no criteria codes are used then display a warning message\n            if (CriteriaCodesUsed.Count == 0)\n            {\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult(this, ErrorCodes.GetErrorInfo(\n                    PetraErrorCodes.ERR_DISCOUNT_CRITERIA_CODE_NOT_USED)),\n                   ", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "                // Adding file content as blob/byte[].\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && CopyCustom; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t\t\treturn;\n\t\t\t\t_customRange = value;\n\t\t\t\tNotifyPropertyChanged(\"CustomRange\");\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\t}\n\t\t}\n\t}\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "            if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation sourceLineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (sourceLineAnnotation.getLineNumber() < 0) {\n                    throw new RuntimeException(\"BugInstance \" + bugInstance + \" has a negative line number: \" + sourceLine", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady())\n                    {\n                        var qMinion = minions.FirstOrDefault(x => x.DistanceToPlayer()", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t *", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(field_model_def, field_def)\n        clean_field_model_definitions()\n    def test_field_name_model_based_wrong_model(self):\n        \"\"\"JSONAlchemy - field name model based wrong model\"\"\"\n        from invenio.modules.jsonalchemy.errors import FieldParserException\n        clean_field_model_definitions()\n        self.assertRaises(\n           ", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new[] {new object[] {10L, \"E1\"}});\n                // widen to short\n                env.UndeployAll();\n                path.Clear();\n                path.Add(path.Compileds[0]);\n                env.EplToModelCompileDeploy(\"create window MyInfraW", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "        c = self.copy()\n        return c.__rmul__(other)\n    \n    def __rmul__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        clibrebound.reb_particle_imul(byref(self), c_double(other))\n        return self\n    \n   ", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "class website(osv.osv):\n    _inherit = \"website\"\n    _columns = {\n        'website_meta_title': fields.related(\n            'default_meta_title', type='char', string='Website meta title',\n            size=70, translate=True, readonly=True),\n        'website_meta_description': fields.related(\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "            value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n        if (oldValue!= value) {\n            c.repaint();\n        }\n    }\n    /**\n     * Returns the factory for the HTML renderer.\n     *\n     * @return the factory for the", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "    s = create(filename, content)\n    assert s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert not s.name_is_worker\n    assert not s.name_is_window\n    assert not s.name_is_reference", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmSqlLoader {sql = namedQueryReference};\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmapping.SqlLoader.sql = namedQueryReference;\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(Action<ISqlLoaderMapper> loaderMapping)\n\t\t{\n\t\t\tif (", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t\t\t}\n\t\t\twriter.WriteEncodedInt( (int) m_FactionItems.Count );\n", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        invocationQueue.removeFirst();\n    }\n    private void moveForward() {\n        if (currentInvocation().callee().numberOfMethods() == 1) {\n            popInvocation();\n        } else {\n            processNextInvoke();\n        }\n    }\n    private void moveBackward() {\n        popInvocation();\n    }\n    private", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                self.args['pytest'] = pytest\n            if sprout_appliances:\n                self.args['sprout'] = True\n                self.args['sprout_stream'] = self.pr_metadata.get('sprout_stream', None)\n                self.args['sprout_username'] = self.pr_metadata.get('sprout_username", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "                if (phi) {\n                    ValueNode phiValue = getCachedPhi(value, value.stamp());\n                    for (int i = 0; i < states.size(); i++) {\n                        states.get(i).readCache.put(key, phiValue);\n                    }\n                }\n            }\n        }\n    }\n}\n", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic EodonianWallMap(Serial serial) : base(serial)\n\t\t{\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t\twriter.Write(0);\n\t\t}\n\t\t\n\t\tpublic override void", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def to_binary(self):\n        \"\"\"Return the mofile binary representation.\"\"\"\n        return _BaseFile.to_binary(self)\n    def percent_translated(self):\n       ", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n    elif not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput' )\n      if not res['OK']:\n       ", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\t// Check for plugins\n\t\t\tif(action.startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t// Check for plugins\n\t\t\t\t// FIXME: this is a bit of a hack, but it's the only way to get the plugin name\n\t\t\t\t// from the URI. We should really have a way to get", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB)\n        msg = yield self.run_fake_single_build(gsp, buildResult)\n        result = makeReviewResult(msg,\n                                  (GERRIT_LABEL_VERIFIED, verifiedScore))\n        gsp.sendCodeReview.assert_called_once_with", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.scheme = 'http://www.google.com'\n    self.category.term = 'test'\n    self.category.label = 'test label'\n    self.assert_(self.category.scheme == 'http://www.google.com')\n    self.assert_(", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "class MATERIAL_PT_preview(MaterialButtonsPanel, Panel):\n    bl_label = \"Preview\"\n    COMPAT_ENGINES = {'BLENDER_RENDER', 'BLENDER_GAME'}\n    def draw(self, context):\n        layout = self.layout\n        mat = active_node_mat(context.material)\n        split = layout.split()\n        col", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            //MAPPER 17\n            if (_engine.Memory.Map.Cartridge.MapperNo == 17)\n            {\n                var map17 = (Mapper17) _engine.Memory.Map.CurrentMapper;\n                mapper17_IRQEnabled = map17.IRQEnabled;\n                mapper17_irq_counter = map17.irq_counter;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t//----------------\n\t\t// Party Quest\n\t\t//----------------\n\t\t// Page 2\n\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party Quest", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn SizeHeightToFitWithMax (0);\n\t\t}\n\t\tpublic int SizeHeightToFitWithMax (int max)\n\t\t{\n\t\t\tint height = 0;\n\t\t\tforeach (View view in this) {\n\t\t\t\tif (view.Visibility == ViewStates.Visible) {\n\t\t\t\t\theight += view.Height;\n\t\t\t\t}\n", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": ":php:\n    lexer = lexers.get_lexer_by_name('php')\n    lexer.add_option('startinline', True)\n    lexers['php'] = PhpLexer(startinline=True)\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                 ORDER BY sdate, stime ''', (i,))\n    row_count = len(cursor.fetchall())\n    print \"Row count is: \", row_count\n    if row_count > 1:\n        print \"Group has more than one flight\"\n        cursor.execute('''SELECT sdate, stime, edate,", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "        # Update the project record\n        rethinkdb.table('projects').get(project_id).update({'last_snapshot': timestamp}).run(conn)\n    # Close the connection\n    conn.close()\ndef db_get_last_snapshot():\n    \"\"\"\n    Return a dictionary with keys the project_id's and values timestamps.\n    This function will", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"I'm not sure what you're talking about.<br/>I'm not sure what you're talking about.<br/>I'm not sure what you're talking about.<br/>I'm not sure what you're talking about.<br/>I'm not sure what you're talking about.<br/>", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass VoteAddedResponse(Response):\n    def", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "    def add_host(self, host_data):\n        \"\"\" add a host to the task data \"\"\"\n        self.host_data[host_data.uuid] = host_data\n    def __repr__(self):\n        return '<TaskData: %s>' % self.name\nclass HostData:\n    \"\"\"\n    Data about a single host", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def get_finalized_command (self, cmd):\n        \"\"\"Return the command object for 'cmd', ensuring that it has been\n        finalized.\n        \"\"\"\n        cmd", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], session, entity);\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session, snapshot, j", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        '-N', job_name,\n        '-o', log_name + '.out',\n        '-e', log_name + '.err',\n        '-M', 'phe@localhost',\n        '-m', 'a',\n        '-l', 'h_rt=168:00:00',\n        '-l', 'h_v", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")] \n        public ActionResult SaveEventDelegate(DelegateViewModel model, int modelId)\n        {\n           ", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                        return string.Format(\"({0},{1},{2},{3})\", ((Circle) obj).Radius, ((Circle) obj).Color.R, ((Circle) obj).Color.G, ((Circle) obj).Color.B);\n                    }\n                    if (obj is Vector2)\n                    {\n                        return string.Format(\"({0", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "        if not premium_url:\n            #try normal download\n            res = self.load(self.url, post={\"download\": \"premium\"}, decode=True)\n            if res:\n                res = json_loads(res)\n                if res['error_code'] == \"302\":\n                    premium_url = res['next']\n                elif res", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t// If we found a path, we can harvest from the first cell on the path.\n\t\t\tif (path!= null)\n\t\t\t{\n\t\t\t\tvar firstCell = path[0];\n\t\t\t\tif (harv.CanHarvestCell(self, firstCell) && claimLayer.CanClaimCell(self, firstCell))\n", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                        self.logger.error(\"service %s restart failed\" % service_name)\n                        return False\n                    return True\n                else:\n                    return True\n            elif which_dhcp_module == \"manage_dhcpd\":\n                service_name = utils.dhcpd_service_name(self.api)\n                if restart_dhcp!= \"0", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        return Event.newBuilder().setSource(source).setSeqNo(seqNo.getAndIncrement());\n    }\n    @Override\n    public void setLogAllMessages(boolean logAllMessages) {\n        this.logAllMessages = logAllMessages;\n    }\n}\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            if (stateIndex == MAXIMUM_ORDER)\n            {\n                goto NoLoop;\n            }\n            if (stateIndex == 0)\n            {\n                gotoLoopEntry = true;\n            }\n            if (stateIndex == 1)\n            {\n                gotoLoopEntry = true;\n            }\n            if (stateIndex", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t}\n\t\tstring [] sessionValues = new string[sessionValuesArray.Count];\n\t\tsessionValuesArray.CopyTo(sessionValues);\n\t\t//now we have all the sessions that have this test type\n\t\t//now we have to check if we can delete it\n", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 9)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00', self.read(o))\n    def test_larger_than_file_middle(self):\n        o = self.file(b'abcdefghij')\n        insert_bytes", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "    <td><?cs var:sdk.win64_bundle_bytes?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (intel)</td>\n    <td>\n  <a onClick=\"return onDownload", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    plt.plot(cr['combined'][app][VC]['durations'], label='Individual %ss' % stat)\n    plt.plot(csi_95, label='95%% CI')\n    plt.legend()\n    plt.show()\ndef plot_app_vc_pivot(cr, app, test=VC, stat='mean'):\n   ", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "        self._testUIDGIDSwitch(1, 0, 0, 1, [0, 1], [1, 0])\n        self._testUIDGIDSwitch(1, 0, 1, 1, [0, 1], [1, 0])\n", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRect(x + 1, y + 1, controlSize - 3, controlSize - 3);\n\t\t\t\t}\n\t\t\t\telse if(model.isRollover()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, control", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[1])\n  if winner!= 0:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n:\n  winner, _inferenceResult, _dist, _categoryDist =", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public void writeValue(Kind kind, ObjectMirror mirror, int offset, Object value) {\n        if (offset == lengthOffset) {\n", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        i25 = 1;\n        if ((paramInt1!= 0? 0 : 1)!= 0)\n        {\n          Dlaset.dlaset(\"A\", i19, i19, 0.0D, 1.0D, paramArrayOfDouble12, i22", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t\t\tif( s.name == name ) {\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Lulu\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lulu\",\n                    SpellName = \"LuluW\",\n                    Slot = SpellSlot.W,\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getEmfUser()).thenReturn(new EmfUser(UUID.randomUUID().toString(), \"test.tenant\"));\n\t}\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        self.assertRaises(\n            subprocess.CalledProcessError,\n            lambda: subprocess.Popen(['somecommand', 'arg1', 'arg2']))\n    def test_popen_returns_error(self):\n        import subprocess\n        proc = subprocess.Popen(\n            ['somecommand', 'arg1', 'arg2'],\n            stdin=subprocess.PIPE", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//This is used to create a unique constraint\n\t\t//on a column\n\t\t//This is used to create a unique constraint\n\t\t//on a column\n\t\t//This is used to create a unique constraint\n\t\t//on a column\n\t\t//This is used to", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n    def retranslateUi(self, Dialog):\n        _translate = QtCore.QCoreApplication.translate\n        Dialog.setWindowTitle(_translate(\"Dialog\", \"Preferences\"))\n        self.settings_ui_groupbox.setTitle(_translate(\"Dialog\", \"UI\"))\n        self.zoom", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                return false;\n            }\n            String stationId = wxs.getString( wxs.getColumnIndex( Wxs.STATION_ID ) );\n            String stationName = wxs.getString( wxs.getColumnIndex( Wxs.STATION_NAME ) );\n            String stationCity = wxs.getString( wxs.getColumnIndex( Wxs.STATION_CITY", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void IncrementQueryExecutionCount_WhenImplicitQueryIsExecuted()\n\t\t{\n\t\t\tusing (ISession s = OpenSession())\n\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t{\n", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "                uiCRCITTSum = uiCRCITTSum ^ uiByteValue;\n                if ((uiCRCITTSum & 0x8000)!= 0)\n                {\n                    uiCRCITTSum = (uiCRCITTSum << 1) ^ 0x1021;\n                }\n                else\n                {\n", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "            return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector(editor), \n                    new CeylonNativeHeaderHyperlinkDetector(editor), \n                    new CeylonJavaBackendHyperlinkDetector(editor), \n                    new CeylonJavascriptBackendHyperlinkDetector(editor) };\n        }\n        return", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "        self.aspect = Object3DAspect(self)\n        self.scale = Object3DScale(self)\n        self.privateInterface = Object3DPrivateInterface(self)\n        self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(self.aspect)\n        self.l.addWidget(self.scale)\n        self.l.addWidget(self.privateInterface)\n", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( int.Parse( m_Entries[ 0 ].Text ), int.Parse( m_Entries[ 1 ].Text ) );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (i!=j)\n\t\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+k+\"\\t\"+fractionWithAmount[i][j][k]+\"\\n\"); \n\t\t\t\t\t}\n\t\treturn sb.toString();\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic MethodInfo TaskMethod {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResult {\nNext line of code:\n:\n\t\t\tget {", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        final int groupMode = 0700;\n        final int otherMode = 0700;\n        final int userId = new Random().nextInt(SecurityManagerImpl.MAX_USER_ID);\n        final int groupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int otherId = new Random().nextInt", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint(XDRUnion):\n    __slots__ = ['key', 'value']\n    def __init__(self, key=None, value=None):\n        self.key = key\n        self.value = value\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack_uint(obj.key", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "            switch(type) {\n                case Step:\n                    notifyStepsReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, convertToStepBucketList(list));\n                    break;\n                case Activity:\n                    notifyActivitiesReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, convertToActivityBucketList(list));\n", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  if is_method:\n    print'   object,'\n  if bind_count:\n    print'   %s,'% method_types\n    for i in xrange(bind_count):\n      print'   a%d' % i\n  if exec_count:\n    print'   %s' % exec_type_str\n", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    \"\"\"\n    response = HttpResponse(\n        mimetype='application/json',\n        content=u'[{0}]'.format(\n            ','.join(\n                json.dumps(range_item_dict(item))\n                for item in items\n            )\n        )\n    )\n    response['Content-Disposition'] = (\n        u'attachment; filename=\"{0}.", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                        new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(new ServiceNode(serviceGraphPattern));\n            }\n        }\n        final ASTContainer givenContainer = new ASTContainer(given);\n        final ASTContainer expectedContainer = new ASTContainer(expected);\n        final ASTSearchOptimizer optimizer = new", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        if \"set_is_active\" in request.POST:\n            return self._handle_set_is_active()\n        return super(UserDetailView, self).post(request, *args, **kwargs)\n", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }\n    #region IAssemblyReference Members\n    IAssembly IAssembly", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            // Set the initial guess\n            result.SetZero();\n            // Set the initial residual\n            r.Set(input);\n            // Set the initial error\n            d.Set(r);\n            // Set the initial norm\n            var norm = r.Norm();\n            // Set the initial residual norm\n            var normr =", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the mean of an array of numbers\n\t * @param numbers Array of numbers\n\t * @return Mean", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "                if reference_set_map[v]!= -1:\n                    sample_count[v, reference_set_map[v]] -= 1\n                v = parent[v]\n        for edge in edges_in:\n            parent[edge.child] = edge.parent\n            v = edge.child\n            while v!= -1:\nNext line of code", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        mapping = mapping_json[self.enrich_index]['mappings']['_doc']\n        for field in csv_mapping.fields:\n            if field in mapping:\n                result[field] = mapping[field]\n        return result\n    def _test_enrich_to_es(self, sortinghat=False, projects=False):\n        \"\"\"Test whether enriched", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        return frame_header + padding_bytes + self.data\nclass HeadersFrame(Frame):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            if (cluster.BoundaryCurve!= null)\n                cluster.BoundaryCurve.CheckConsistency();\n        }\n        internal void CheckNodeConsistency() {\n            foreach (var node in Nodes)\n                node.CheckConsistency();\n        }\n        internal void CheckEdgeConsistency() {\n            foreach (var edge in Edges)\n", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeCosine = btCos(m_maxSlopeRadians);\n}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn m_maxSlopeRadians;\n}\nvoid btKinematicCharacterController::setInterpolateUp(bool interpolateUp)\n{\n\tm_interpolateUp = interpolateUp;\n}\nbool bt", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n                checker.report(Result.failure(\"unique.leaked\"), initializer);\n            }\n        }\n        return super.visitNewArray(node, p);\n    }\n    private boolean canBeLeaked(ExpressionTree exp) {\n        //", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t// init return type\n\t\t\t\t_returnType = new ClassItem(Context, this, _returnTypeNode);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the methods of this comment item.\n\t\t/// </summary>\n\t\tprivate void CreateMethods()\n\t\t{\n\t\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tdoReturn(Collections.singleton(classType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t\t// assert result\n\t\t\tassertThat(result, is(empty()));\n\t\t\t// must be write lock\n\t\t\tverify(class", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit!= other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.dependsOnCutAP!= other.dependsOnCutAP)\n\t\t\treturn false;\n\t\tif (this.pathFlags == null) {\n\t\t\tif (other.pathFlags!= null)\n\t\t\t\treturn false;\n\t\t} else if", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "            if (min > max) { // can this left constituent stretch far enough to reach the right constituent?\n              continue;\n            }\n            float pS = r.score;\n            int parentState = r.parent;\n            float oldIScore = iScore[start][end][parentState];\n            float bestIScore =", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.RuntimesChanged -= DbgProcess_RuntimesChanged;\n\t\t}\n\t\t//", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.endTag( null, name );\n\t}\n}", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif (!(aThat instanceof Contact) ) {\n\t\t\t return false;\n\t\t}\n\t\tContact that = (Contact)proxyThat;\n\t\tif ( this.getContactDate() == null ) {\n\t\t\t if ( that.getContactDate()!= null ) {\n\t\t\t\t\t return false;\n\t\t\t }\n\t\t} else if", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t    if n == 0:\n\t      status = 'w'\n\t    else:\n\t      status = 'a'\n\t    with open(name, status) as f_ID:\n\t      f_ID.write(str(body_types[i]) + '\\n')\n\t      for j in range(body_types[i]):\n\t\torientation = bodies[body_offset +", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        if cdata is None:\n            return\n        if cdata[0] == (slice(None),) * node.inputs[0].ndim:\n            # This is a useless subtensor\n            return [node.inputs[0]]\n    elif isinstance(node.op, AdvancedSubtensor1):\n        if node.inputs", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "            show_tag = etree.Element('show')\n            show_tag.text = ';'.join(self.show_tag_list)\n            xml_object.append(show_tag)\n        return xml_object\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "        for change in data_model_changes:\n            if change.axis is None:\n                self.current_filter = {}\n                self.update_filtered_data()\n            else:\n                self.change_filter(self.data, self.current_filter, change.axis, change.indices)\n                self.update_filtered_data()\n            yield global_changes\n    def get_filtered_data(self", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class!= null && type!= null)\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'type' attribute with 'class' attribute for ldtoken\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (Class!= null && Method!= null)\n\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\t// \n\t\t\t// objYText\n\t\t\t// \n\t\t\tthis.objYText.Location = new System.Drawing.Point(104, 224);\n\t\t\tthis.objYText.MaxLength = 40;\n\t\t\tthis.objYText.Name = \"objYText\";\n\t\t\tthis.objYText.Size = new System.Drawing", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assertEqual(c.comments,\n                         \"remove leftover code, leave a temporary compatibility import. Note!", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> datum : csvData.entrySet()) {\n            if (StringUtils.isNotBlank(datum.getValue())) {\n                termData.put(d", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\t}\n\t\treturn false;\n\t}\n\t@Override\n\tpublic boolean onActivatedByPlayer(EntityPlayer player, ItemStack wand) {\n\t\tif(isPassiveFlower()) {\n\t\t\tif(!player.isSneaking()) {\n\t\t\t\tif(!supertile.getWorld().isRemote) {\n\t\t\t\t\tif(knownMana == -", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                                if not are_equal:\n                                    logger.info(\"ERROR: Document %s: Expected flag %s and got %s\" % (str(docid), str(minfo['flags'][flagname][version][docformat]), str(flags[flagname][version][docformat])))\n                                else:\n                                    logger.info(\"Document", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t//guiThread.Abort();\n\t\t\tguiThread.Join();\n\t\t\tguiThread=null;\n\t\t\t//guiThread.Abort();\n\t\t\t//guiThread.Join();\n\t\t\t//guiThread=null;\n\t\t\t//guiThread.Abort();\n\t\t\t//guiThread.Join();\n\t\t\t//guiThread=null;\n\t\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Gets the start date of the specified event occurrence.\n   * @param occurrence the event occurrence for which the start date has to be", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceEventName = SourceEventName;\n\t\tsourceEventBinding.TargetEventName = targetEventBinding.TargetEventName;\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n    }\n}\n", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "                    la = LinkAnnotation()\n                    la.subject = man_obj.uuid  # the subordinate is the subject\n                    la.subject_type = man_obj.item_type\n                    la.project_uuid = man_obj.project_uuid\n                    la.source_id = 'label-match'\n                    la.predicate_uri = 'http://www.w3.org/200", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"         .shrinktofit= \")\n               .Append(ShrinkToFit).Append(\"\\n\");\n            buffer.Append(\"         .mergecells = \")\n               .Append(MergeCells).Append(\"\\n\");\n            buffer.Append(\"         .readingorder= \")\n               .Append(StringUtil.ToHexString(Reading", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains half-width katakana.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (extraToJis [value])) |\n\t\t\t\t\t\t(((int) (extraToJis [value + 1])) << 8);\n\t\t\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    src1 = env.A[b]\n    src2 = off1//off2//off3\n    obj.operands = [dst, composer([src1, src2])]\n    obj.type = type_data_processing\n@ispec(\"32<[ ~off2(4) ~off3(6) ~", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.openStream();\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tfor (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();)\n\t\t\t{\n\t\t\t\tString key = (String) e.nextElement();\n\t\t\t\tproperties", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\t// Purge the default DiscretionaryAcl.\n\t\t\tcsd.DiscretionaryAcl = null;\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t\tAssert.AreEqual (ControlFlags.DiscretionaryAclPresent\n\t\t\t                 | ControlFlags.SelfRelative,\n\t\t\t                 cs", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        if (PhotonEditor.Current!= null)\n        {\n            PhotonEditor.Current.UpdateRpcList(additionalRpcs);\n        }\n    }\n    #endregion\n}\n", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        return rootLayout;\n    }\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        if (message == null) {\n            message = GlobalTransport.getMessage(msgid);\n            if (message == null) {\n                is_corrupt = true;\n                full_msg.setText(R.string", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            return np.dot(psit_G, self.symmetry.op_cc[s])\n        # Time-reversal symmetry\n        if time_reversal:\n            return psit_G.conj()\n        else:\n            return psit_G\n    def get_count(self, rank=None):\n        \"\"\"Return number of k-point/sp", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp, utkastRequest);\n        assertEquals(OK", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILBasicBlock child in block.GetSelfAndChildrenRecursive<ILBasicBlock>()) {\n\t\t\t\t\tif (prevChildAsBB!= null) {\n\t\t\t\t\t\t// Merge the previous block with the current one\n\t\t\t\t\t\tprevChildAsBB.Body.AddRange(child.Body);\n\t\t\t\t\t\tprevChildAsBB = null;\n\t\t\t\t\t}", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll!= ragdoll) {\n\t\t//if we're going to ragdoll then we need to disable the animator\n\t\t//and set the position to the current position\n\t\t//this will ensure that the ragdoll is in the correct position\n\t\t//and that the", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "    def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\nclass StratumLayer(GeoLayer):\n    def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.stratum\nclass", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "        out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff] = (byte)num;\n    }\n", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            super( source, new Predicate<PatternMatch>()\n            {\n                public boolean accept( PatternMatch match )\n                {\n                    return match( match, objectVariables );\n                }\n            } );\n        }\n        private boolean match( PatternMatch match,\n            Map<String, PatternNode> objectVariables )\n        {\n            for (", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "        elif key == 'TAUX':\n            slice_json['rate'] = transform_values_holder_xml_json_to_json(value[0])\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment'] = u'\\n\\n'.join(comments)\n    return slice_json\ndef transform", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            if (ClientSettings.ICON_ENABLE_FRAME!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_ENABLE_FRAME)));\n          }\n        }\n        public void mousePressed(MouseEvent e) {\n          if (SwingUtilities.isLeftMouseButton(e)) {\n            if (ClientSettings.ICON_ENABLE_FRAME!=null)\n", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n    {\n      for (int x = leftToRight? 0 : p.getRasterWidth() - 1; \n        (leftToRight && x < p.getRasterWidth())", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    ContentValues cv = new ContentValues();\n                    cv.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, cv, Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n                    //Update budget items\n                    cv = new ContentValues();\n                    cv.put(Db.Table4.ID", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "                }\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        #endregion\n    }\n}\n", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "        infoText += \" file\" if numberOfFiles==1 else \" files\"\n        infoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file\" if numberOfHiddenFiles==1 else", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = re_m4.sub(r'%%\\1%%', code)\n        self.outputs[0].write(code)\n        return 0\n@feature('subst_pc')\ndef subst_pc_files(self):\n    \"\"\"\n    Create *.pc* files from *.pc.in*. The task is executed whenever an input variable used", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "        result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] + chemical[ 1 ][ idx - 1 ]\n\t\t\t\t\t\t\t\t\t- 4 * chemical[ 1 ][ idx ] + chemical", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            case ColumnType.STRING:\n                if (utf8) {\n                    columnTypes.add(typeManager.nextUtf8Adapter());\n                } else {\n                    columnTypes.add(typeManager.nextStringAdapter());\n                }\n               ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@cti_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.cti_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\tParam = qs.NewParameter();\n\t\t", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        if self.trusted_key == 'enable':\n            trusted_key = 'true'\n        else:\n            trusted_key = 'false'\n        self.updates_cmd.append(\n            \"ntp authentication-key %s %s %s\" % (self.key_id, self.auth_mode, self.password))\n        self.updates_cmd", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            # Verify that the component was last edited in the past by create_user\n            check_node(component.location, None, after_create, self.user_id, None, after_create, self.user_id)\n            # Verify that the child was last edited in the past by create_user\n            check_node(child.location, None,", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) (TEXT_CODE & 0xff));\n        updateWithCharBuf();\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n        updateWith(ch, start, length);\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "    return aetypes.Range(dict)\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict)\ndef mklogical(dict):\n    return aetypes.Logical(dict)\ndef mkaetext(dict):\n    return aetypes.AEText(dict)\ndef mkobject(dict):\n    return aetypes.Object(dict)\ndef mkobject", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            formatters = new Collection<MediaTypeFormatter>();\n            if (ActualHttpMessageTypes.TryGetValue(new HelpPageSampleKey(controllerName, actionName, parameterNames, sampleDirection), out type))\n            {\n                return type;\n            }\n            if (ActualHttpMessageTypes.TryGetValue(new HelpPageSampleKey(controllerName, actionName", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "                value = entry.get_active_text()\n            if value:\n                if event.keyval == gtk.keysyms.F3:\n                    self.on_open_remote(record, column.name, True, value,\n                        entry=entry)\n                else:\n                    self.on_open_remote(record, column.name, False, value,\n                        entry=entry", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /*\n     * (non-Javadoc)\n     * @see org.springframework.core.Ordered#getOrder()\n     */\n    public int getOrder()\n    {\n        return Ordered.HIGHEST", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            for line in f:\n                if not line.strip():\n                    raise ValueError(\"Blank line found in %s\" % path)\n        finally:\n            f.close()\n    if state == \"present\":\n        if password is None:\n            module.fail_json(msg=\"Password must be specified if user does not exist\")\n        if", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "            [In, MarshalAs(UnmanagedType.IUnknown)] object pUnk\n            );\n        [PreserveSig]\n        int QueueEventParamInt(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In] int hrStatus,\n            [", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "        }\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = REMOVE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody DirectedAclKeys directedAclKeys ) {\n        spm.remove( directedAclKeys );\n", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element.\n        This verifies the tag of an element matches what is expected.\n        Arguments:\n        element Element object.\n        Returns", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "    elif node.nodeType == Node.ENTITY_NODE:\n        clone = newOwnerDocument._create_entity(node.nodeName,\n                                                node.publicId,\n                                                node.systemId,\n                                                node.notationName)\n    elif node.nodeType == Node.ENTITY_REFERENCE_NODE:\n        clone = newOwnerDocument.createEntityReference(node.nodeName)\n    elif node", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t// TODO: Do we want to order the components (except for ANY)?\n\t\t\t// Encode the entries backwards.\n\t\t\tfor (int i = keyLocator.size() - 1; i >= 0; --i) {\n\t\t\t\tExclude.Entry entry = keyLocator.get(i);\n\t\t\t\tif (entry.getType", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the HUD\n        display.update(delta, myPlayer, players, ActiveWeapons, ennemies);\n        \n        //Updates the camera\n        viewx = myPlayer.x", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setColor( color );\n        GameEngine.model().getGame().addGameJoin( action );\n        hide();\n      }\n    } );\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n    // add panel to dialog\n    // ===================\n    setWidget( m_panel );\n ", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            msgs = [e[\"msg\"] for e in err[\"errors\"]]\n            raise RuntimeError(\", \".join(msgs))\n    filename = get_filename(r.headers)\n    with open(filename", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "    if len(reaction.metabolites)!= 1:\n        raise ValueError(\n            \"Cannot calculate yields for reactions with multiple metabolites.\"\n        )\n    return reaction.metabolites.values()[0].elements.get(\"C\", 0)\ndef _total_components_flux(\n    flux: float, components: List[float", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(\n            store__pootle_path=pootle_path,\n            store__user=user,\n        )\n    def get_for_store(self, store):\n        \"\"\"Returns units that fall below the `store` umbrella.\n        :param store: A store object.\n        \"\"\"\n        return self", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "                ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True, null=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Student',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                    self.logger.debug(\"Got ARP request for {} on port {}\".format(dstip, portnum))\n                    self.dstmac_cache[dstip] = poxpkt.src\n                    self.logger.debug(\"Sending ARP reply for {} on port {}\".format(dstip, portnum))\n                    arp = pktlib.arp()\n                   ", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (m_RecentItems.size() >= m_MaxCount) {\n      m_RecentItems.remove(0);\n    }\n    m_RecentItems.add(item);\n    writeProps();\n    updateMenu();\n  }\n  /**\n   * Removes the item from the internal list.\n   *\n   * @param item\tthe", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            if (target is BaseCreature && ((BaseCreature)target).IsPet && src is BaseCreature && ((BaseCreature)src).IsPet)\n                return false;\n            if (target is BaseCreature && ((BaseCreature)target).IsPet && src is BaseCreature && ((BaseCreature)src).Is", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t} else if (p.typ == Node.iter || p.typ == Node.opt) {\n\t\t\ta = LeadingAny(p.sub);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompSyncSets() {\n\t\tallSyncSets = new", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\t// signal the read report finished\n\t\t\tif(!mReadDone.WaitOne(3000, false))\n\t\t\t\tthrow new WiimoteException(\"Timed out waiting for read report\");\n\t\t\treturn mReadBuff;\n\t\t}\n\t\t/// <summary>\n\t\t/// Write data", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyyMMdd-HHmmss\" );\n\t\t}\n\t}\n}\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueriesForItemWithCollectionsAndCollections()\n\t\t{\n\t\t\tusing (ISession session = OpenSession())\n\t\t\t{\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (k++; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (k++; i < N_INDEXES; i++, k += 4)\n            {\n                _indx", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "    def create(self, description, currency=None, fields=None):\n        \"\"\" Create a rate in the UI\n        Args:\n            description (str): name of the compute rate to create\n            currency (str): - type of currency for the rate\n            fields (dict): -  nested dictionary listing the Rate Details", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\t// if we are using a shadow buffer, we need to write to it\n\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\t// if we are discarding the whole buffer, we need to allocate a new one\n\t\t\t\tif ( discardWholeBuffer )\n\t\t\t\t{\n\t\t\t\t\tshadowBuffer = new", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "            else {\n                tcpAcceptFilters.add(TcpAddress.parseFilter(filterStr));\n            }\n            return;\n        case ZMQ.ZMQ_TYPE:\n            type = (Integer) optval;\n            if (type < 0 || type > 3) {\n                throw new IllegalArgumentException(\"type \" + optval);\n           ", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                // Write the decoded row to the output stream\n                tot = 0;\n                while (tot < bytesPerRow) {\n                    int n = fout.Write(curr, tot, bytesPerRow - tot);\n                    if (n <= 0)\n                        return fout.ToArray();\n                    tot += n;\n                }\n               ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(type(s.get_interface()), str)\n        self.assertTrue(s.has_interface('foo.bar'))\n        self.assertFalse(s.has_interface('foo.baz'))\n        self.assertFalse", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "                    for thing in m_product.get_basis():\n                        output += str(thing) + \"\\n\"\n                except (IndexError, ValueError):\n                    output += \"no such product\\n\"\n        _file = open(filename, 'w+')\n        _file.write(output)\n        _file.close()\n    def make_p_operator_database", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \"", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member removing an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\t// Specimen\n\t\tif (orderInvestigationLiteVo.getSpecimenIsNotNull())\n\t\t{\n\t\t\tOrderSpecimenLiteVo specimen = orderInvestigationLiteVo.getSpecimen();\n\t\t\tif (specimen.getSpecimenIndexIsNotNull() && specimen.getSpecimenIndex().getSpecimenName", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "                return pt;\n            }\n        }\n        /// <summary>\n        /// The height of this item.\n        /// </summary>\n        public int Height\n        {\n            get\n            {\n                RECT rc = new RECT();\n                ProcessMemoryChunk c = ProcessMemoryChunk.AllocStruct(sw.Process, rc);\n                Api", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "        if self.is_child_notebook():\n            self.get_child().tab_new(debugtab, cwd, profile)\n        else:\n            self.terminator.tab_new(debugtab, cwd, profile)\n    def tab_close(self, widget=None, _param1=None, _param2=None):\n        \"\"\"Close the current tab", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                    toReturn.Add( new StructTypeInfo( nametypeFragments[1], managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn;\n        }\n        public Variant DllClose( Variant handle ) {\n            if ( handle.IsPtr ) {\n                IntPtr ptr = handle.GetIntPtr();\n                Free", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "        self._context = OpenSSL.SSL.Context(_openssl_versions[protocol])\n        self._context.set_verify(\n            OpenSSL.SSL.VERIFY_PEER | OpenSSL.SSL.VERIFY_FAIL_IF_NO_PEER_CERT,\n            self._verify_callback\n        )\n        self._context.set_options(OpenSSL.SSL.OP_NO_SSLv", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\t// Container child hbox3.Gtk.Box+BoxChild\n\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.LabelProp = global::Mono.Unix.Catalog.GetString (\"_White Spaces:\");\n\t\t\tthis.label8.UseUnderline = true", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                headbook.set_current_page(old_num)\n        headbook.set_tab_reorderable(True, page_reordered)\n    \n    # The board\n    \n    notebooks[\"board\"].set_border_width(4)\n    notebooks[\"board\"].set_show_tabs(False)\n    notebooks[\"board\"].set_show_border(False)\n    notebooks[\"board\"].", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\" + this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", jtaDataSource=\" + this.jtaDataSource + \", nonJtaDataSource=\" + this.nonJtaDataSource + \",", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    IEditorPart editorPart = getEditorPart();\n    if (editorPart!= null)\n    {\n      IEditorInput input = editorPart.getEditorInput();\n      if (input instanceof IFileEditorInput)\n      {\n        IFileEditorInput fileEditorInput = (IFileEditorInput)input;\n        return", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(802, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82, 20);\n\t\t\tthis.butAttach.TabIndex = 8;\n\t\t\tthis.butAttach.Text = \"Attach\";\n\t\t\tthis.butAttach", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "        return sb == null? string : sb.toString();\n    }\n}\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2_Legacy ()\n\t\t{\n\t\t\tbyte[] key = Encoding.Default.GetBytes (\"Jefe\");\n\t\t\tbyte[] data = Encoding.Default.GetBytes", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // Enum type\n\t    \n\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // Enum type\n\t    \n\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // Enum type", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "        return null;\n      String javaHome = java.GetValue(\"JavaHome\").ToString();\n      if (javaHome == null)\n        return null;\n      String javaExe = javaHome + @\"\\bin\\java.exe\";\n      if (File.Exists(javaExe))\n        return javaHome;\n      return null;\n    }\n", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = l\n        return None\n    def find_env(self, name):\n        for l in self.lines:\n            if re.match(r'%s' % name, l):\n                return [self.lines.index(l)]\n        return None\n    def render(self):\n        # Render the crontab\n        if", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            if(rankCounts == null)\n                continue;\n            int totalRankCount = rankCounts.length;\n            for(int i = 0; i < totalRankCount; ++i)\n            {\n                if(rankCounts[i] == 0)\n                {\n                    if(peptideLength == MIN_PEPTIDE_LENGTH)\n                   ", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "        for (val neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor);\n        }\n        assertEquals(3, neighbors.size());\n        assertTrue(neighbors.contains(1));\n        assertTrue(neighbors.contains(2));\n        assertTrue(neighbors.contains(3));\n    }\n    @Test\n    @DisplayName(\"contains() should return", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                    self.packet = self.cap[int(self.choice)-1]\n                    print(self.grn+\"[*] Showing packet \"+self.choice+\" \"+self.blk)\n                    time.sleep(1)\n                    self.packet.show()\n                    print(self.grn+\"[*] Press enter to continue\"+self.blk)\n                    self.get_input('", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 159);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 198;\n            // \n            // label3\n", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': \"'created_scan_set'\", 'to': u\"", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "                }\n            }\n        }\n        return false;\n    }\n    private void preprocessGlobalTypes(Schema schema) {\n        if (schema == null) {\n            return;\n        }\n        java.util.List<Schema> schemas = new ArrayList<Schema>();\n        schemas.add(schema);\n        while (schemas.size() > 0", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_refuse(self, cr, uid, ids, context=None):\n        self.holidays_refuse_notificate(cr, uid, ids, context=context)\n", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "            set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the <see cref=\"IBusinessObjectCollection\"/> that is displayed in the grid\n        /// </summary>\n        public IBusinessObjectCollection BusinessObjectCollection\n        {\n            get { return GridBaseManager.BusinessObject", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "            return String.Format(\"Mixer Line {0} ({1}) {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16} {17} {18", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 =\n\t\t\t\tdomainFactory.getDomainObject(ims.core.admin.domain.objects.CareContext.class, valueObject.getCareContext().getId());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\t//This is to overcome a bug in both Sybase and Oracle which prevents them from storing", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            [\"cargo\", \"build\"] + opts,\n            env=env,\n            verbose=verbose)\n        if status:\n            return status\n        if android:\n            # Build the APK\n            apk_builder_dir = \"support/android-rs-glue\"\n            with cd(path.join(apk_builder_dir, \"apk-builder", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[] { 0, n }, false));\n\t\t}\n\t}\n\t/**\n\t * Computes the counts for a rule. The rule is evaluated on the example set and the counts are\n\t * returned", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "                Stashed.SetStashDiffs(gitStash, gitItemStatuses);\n            }\n            Loading.IsAnimating = false;\n            Loading.Visible = false;\n            Stashes.Enabled = true;\n            refreshToolStripButton.Enabled = true;\n            toolStripButton_customMessage.Enabled = true;\n        }\n        private void Stashes", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (o == this) {\n            return true;\n        }\n        if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return this.host.equals(that.host) && this.port == that.port\n                && this.realm.equals(that.realm) && this.scheme.equals(that.scheme", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult result) {\n            object[] results = this.EndInvoke(result);\n            return ((int)(results[0]));\n        }\n    }\n}\n", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleStringAusMehrerenChargennummern(\n\t\t\tList<SeriennrChargennrMitM", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tdefault : \n\t\t\t\t\tbase.CSet(feature, value);\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "    archive_index = load_archive_index(args.index_file)\n    args.func(archive_index, args)\n    sys.exit(0)\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        self.mosi_bits = mosi\n        self.miso_bits = miso\n        self.ss, self.es = ss, es\n        # Handle command tokens.\n        if self.state == 'HANDLE CMD%d' % 0:\n            self.handle_command_token(mosi, miso)\n        elif self.state", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "          cursor = limit - v_3;\n          // (, line 201\n          // literal, line 201\n          if (!(eq_s_b(1, \"a\"))) {\n            return false;\n          }\n          // ], line 201\n          bra = cursor;\n          // <-, line 201\n", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                o = cls.newInstance();\n                dins.readObject(o);\n                if (o == null)\n                    System.out.println(\"null object\");\n                else\n                    System.out.println(\"got \"+o.getClass().getName());\n            } catch (Exception ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n           ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                return result, extension.get_critical()\n        return None, False\n    def _get_key_usage(self):\n        return self._get_extension('keyUsage')\n    def _get_extended_key_usage(self):\n        return self._get_extension('extendedKeyUsage')\n    def _get_basic_constraints(self):\n        return self._", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    # The interval is split up into two intervals, one for the first word\n    # and one for the second word.\n    interval_1word, intervals_2word = get_contigous_intervals(X)\n    if interval_1word is not None:\n        # The interval is split up into two intervals", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = la.pos; int col = la.col;\n\t\t\twhile (StartOf(13)) {\n\t\t\t\tif (StartOf(14)) {\n\t\t\t\t\tGet();\n\t\t\t\t} else {\n\t\t\t\t\tGet();\n\t\t\t\t\tSemErr(\"bad string in attributes\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tExpect(29);\n\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "        for device in devices:\n            assert isinstance(device, Device)\n    def test_list_devices_with_match(self, context):\n        devices = list(context.list_devices().match_subsystem('input'))\n        for device in devices:\n            assert device.subsystem == 'input'\n    def test_list_devices_with_match_and_nomatch(self", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "    opener = buildOpener()\n    device = Device(deviceToken)\n    user = device.newUser(loginId, password)\n    user.login()\n    user.endTutorial()\n    user.cardUpdate()\n    user.cardCategoryUpdate()\n    user.cardComboUpdate()\n    data = user.mainmenu()\n    print data.response.body\n", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "        elif (index_elements[0] == \"Fit:\"):\n            rv['fitScatter'] = float(index_elements[1])\n        elif (index_elements[0] == \"Mode:\"):\n            rv['mode'] = index_elements[1]\n        elif (index_elements[0] == \"Stokes:", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": ":\n            if (m_Keys.Count > 0)\n            {\n                ItemID = 0x1011 + (m_Keys.Count - 1);\n            }\n            else\n            {\n                ItemID = 0x1011;\n            }\n        }\n        private class InternalTarget : Target\n        {\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            Tuner tuner = new TunerHdhr(device, addDevice, TunerManager.getInstance().tuners.size(), TunerManager.getInstance().tuners.size() + 1, Tuner", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split.length < 2) {\n        throw new IllegalArgumentException(\"RegexNER mapping file line \" + lineCount + \" is not formatted correctly. It should be tab-separated, with at least two columns.\");\n      }\n      List<Pattern> regex = new ArrayList<>();\n      for (String regexToken : split[", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            # see if we find it using the path in env[var]\n            for p in sub_path:\n                if p.exists():\n                    return p\n            # see if we find it using the path in env[var]\n            for p in path:\n                if p.exists():\n                    return p\n            # see if we", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "        ctx = Context()\n        [ctx.push(x) for x in keys]\n        def make_it(feat, idx):\n            f = Feature(ctx, idx)\n            geom, attrs = feat\n            f.add_geometries_from_wkt(geom)\n            for k, v in attrs.iteritems():\n                f[k", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "        if self.want.port in [None, '*'] and self.want.ip!= '*':\n            raise F5ModuleError(\n                \"Specifying an IP address requires that a port number be specified\"\n            )\n        if self.want.port!= self.have.port:\n            self.want.update({'port': self.have.port})\n       ", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "    @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text == 'Add Automate Method' and\n            self.location.is_displayed and\n            check_tree_path(\n                self.datastore.tree.currently_selected,\n                self.context['object'].tree_path", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "            notifyListeners(new EventObject(this), EventStatusType.INFORMATION,\n                    getClass().toString() + \", getClassByName(), \"\n                    + \"class (\" + className + \"/\" + classPath + \") not found.\", null);\n        }\n        return result;\n    }\n    public IAction getActionObject(String className, String[]", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_request_error(\n            \"update_thread\",\n            {\"thread_id\": \"dummy\", \"course", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "            env['MTSHLIBCOM'] = embedManifestDllAction\n            return 1\n        else:\n            print \"No manifest file found for %s\" % target[0]\n            return 0\n    else:\n        return 0\ndef embedManifestExeCheck(target, source, env):\n   ", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\treturn true;\n\t}\n\t\n\tpublic void dispose(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\tmeta=(AggregateRowsMeta)smi;\n\t\tdata=(AggregateRowsData)sdi;\n\t\t\n\t\tmeta=null;\n\t\tdata=null;\n\t}\n\t\n\tpublic void check(StepMetaInterface sm", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //WalkingRange\n            int swalkingrange2 = Utility.ToInt32(swalkingrange);\n            if (swalkingrange2 < 1)\n                swalkingrange2 = 1;\n            //Home", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "        self._open_session_list.append(session)\n        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest system log is not as expected.\")\n        logging.info(\"Guest system log is as expected.\")\n    @error_context.context_aware\n   ", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        assertThat(rc.get(), is(5));\n        service.shutdown();\n        service.awaitTermination(10, TimeUnit.SECONDS);\n    }\n}\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) {\n            logger.info(\"[FAULT] \" + this.ownerID + \" : FAILURE OF \" + destination.getID() +\n                \" SUSPECTED ON REQUEST SENDING : \" + e.getMessage());\n", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\t}\n\t\t\telse if (value <= 0x1FFFFFFF) {\n\t\t\t\treturn 4;\n\t\t\t}\n\t\t\telse\n\t\t\t\tthrow new ArgumentOutOfRangeException(\"UInt32 value can't be compressed\");\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        with open(os.devnull, 'w') as devnull:\n            self.fm.execute_console('loader start', descr, 'extract', au_flags, devnull=devnull)\n            self.fm.watchers['all'].changed(cwd.path)\n            self.fm.execute_console('cd -t', cwd.path", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringStringString ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\", \"COMTest\");\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        de = Locale.objects.get(code='de')\n        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        repo = self._setup(de, Action.ACCEPTED, None)\n        self.assertEqual(repo.changesets.count(), 4)\n        avs = AppVersion.objects.all()\n", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            if \"url\" in cmd.parameters:\n                userstate.url = cmd.parameters[\"url\"]\n            if \"user_id\" in cmd.parameters:\n                userstate.user_id = cmd.parameters[\"user_id\"]\n            if \"user_hash\" in cmd.parameters:\n                userstate", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        if colsz is None:\n            colsz = {}\n        if squash_c:\n            for c in range(self.ncols):\n                if c in hidden_c:\n                    continue\n                colsz[c] = self.colsize(c)\n        else:\n            for c in range(self.ncols):\n                if c in hidden", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "        column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None,", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof GridColumn) {\n\t\tGridColumn parentColumn = (GridColumn) parent;\n\t\tparentColumn.column.setValues(ListUtil.toStringArray(ListUtil.listToArrayRemoveEmpty(parentColumn.column.getValues(), parentColumn.valuesdelimiter)));\n\t\tparentColumn.column.setValuesDisplay(ListUtil.toStringArray(ListUtil.listToArrayRemoveEmpty", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "                if (version >= FileVersion.v1_0_0_0) {\n                    Perception = Convert.ToByte(ReadElement(element, \"Perception\"));\n                    ImageIndex = Convert.ToInt32(ReadElement(element, \"ImageIndex\"));\n                    GrayImageIndex = Convert.ToInt32(ReadElement(element, \"GrayImage", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                    else if (m_Peerless == PeerlessList.InterredGrizzle)\nNext line of code:\n:\n                    else if (m_Peerless == PeerlessList.ParoxysmusTrammel || m_Peerless == PeerlessList.ParoxysmusFelucca)\nNext line of code:\n", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\treturn coll;\n\t}\n\tpublic static class ChangeOfServiceVoComparator implements java.util.Comparator\n\t{\n\t\tprivate int direction = 1;\n\t\tprivate boolean caseInsensitive = true;\n\t\tpublic ChangeOfServiceVoComparator()\n\t\t{\n\t\t\tthis(SortOrder.ASCENDING);\n\t\t}\n\t\tpublic ChangeOf", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t// ======================================================\n\t\t\t// From the official Argon2 1.3 reference code package\n\t\t\t// (test vector for Argon2d 1.3); also on\n\t\t\t// https://tools.ietf.org/html/draft-irtf-cfrg-argon2-00", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the cost.\n\t * @param manaToSend How much mana is to be sent.\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"expected {1})\", NextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\t// Update the layer blending mode to the queue default\n\t\t\t\t// FIXME: Revisit blend-mode coercion after LED Queue update\n\t\t\t\tNextFrame.Blending = BlendMode;\n\t\t\t\tOutputQueue.Enqueue", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if ((this.getContextSnapshot() == null)) {\n            if ((other.getContextSnapshot()!= null))\n                return false;\n        } else if ((!this.getContextSnapshot().equals(other.getContextSnapshot())))\n            return false;\n        if ((this.getPropertyList() == null)) {\n            if ((other.getPropertyList()!= null))\n", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "            dc.number = PhoneNumberUtils.stringFromCdmaNetworkOrder(p.readString());\n            dc.name = p.readString();\n            dc.uusInfo = p.readString();\n            response.add(dc);\n        }\n        voiceSettings = p.readInt();\n        return response;\n    }\n    @Override\n    protected Object\n    responseSMS(Parcel p", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                int i = x + y * xSizeP;\n                newVertices[i] = new Vector3(x - 0.5f, y - 0.5f, 0f);\n                newNormals[i", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_METHOD_ADD, testInt1, testInt2);\n\t\t\t\n\t\t\tif (rawResult!= null)\n\t\t\t{\n\t\t\t\tresult = (Integer) rawResult;\n\t\t\t}\n\t\t\t\n\t\t\tLog.i(TAG, \"doConnectionTest() result was \" + result);\n\t\t\t\n\t\t\tif (result", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n:\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionStartOffsets()\n\t\t\t{\nNext line of code:\n:\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "            out.writeBoolean(false);\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeInt(found.identifier);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n    /**\n     * Returns the exported object with the given identifier.\n     *\n     * @param id        the identifier\n    ", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                    spell.RangeCheckFrom.To2D().Distance(minionPrediction.CastPosition.To2D()) <= spell.Range)\n                                {\n                                    result.Add(minion);\n                                }\n                            }\n                            break;\n                        case CollisionableObjects.YasuoWall:\n                            if (Utils.TickCount - _wallCastT < 1000)\n", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        if (graph.isAdjacentTo(x, y)) return true;\n        List<Node> path = new LinkedList<>();\n        path.add(x);\n        if (graph.isAdjacentTo(x, y)) return true;\n        for (Node z : graph.getAdjacentNodes(x)) {\n            if (path.contains(z)) continue;\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    if (pop[i] is PlaceBase)\n                        plcs.Push(pop[i] as PlaceBase);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (this.attachmentFile == null) {\n            if (other.attachmentFile!= null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n            return false;\n        }\n        if (this.fileId == null) {\n            if (other.fileId!= null", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                        if (mobiles[i]!= from && SpellHelper.ValidIndirectTarget(from, mobiles[i]) && from.CanBeHarmful(mobiles[i], false))\n                        {\n                            from.DoHarmful(mobiles[i]);\n                            AOS.Damage(mobiles[i], from, m_Item.Get", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "    public void a(EnumProtocol enumprotocol) {\n        this.channel.attr(NetworkManager.c).set(enumprotocol);\n        this.channel.config().setAutoRead(true);\n        NetworkManager.g.debug(\"Enabled auto read\");\n    }\n    public void channelInactive(ChannelHandlerContext channelhandlercontext) throws Exception {\n        this.close(new ChatMessage", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                ll = z_index_dict[z_key][1]\n                z_arr[p_index, kk, ll] = z_dict[z_key][per][0]+1j*z_dict[z_key][per][1]\n                z_err_arr[p_index, kk, ll] = z_dict[z_key][per][2]\n                \n", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "            env[\"PATH\"] = \":\".join(extra_path) + \":\" + env[\"PATH\"]\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib) + \":\" + env[\"LD_LIBRARY_PATH\"]\n        if self.config[\"tools\"][\"rustc-with-gold\"]:\n            env[\"R", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "            for path, test_list in iteritems(type_paths):\n                for test in test_list:\n                    if test_type == \"reftest_node\":\n                        source_file = source_files[test[\"source_file\"]]\n                        test = test_cls(source_file,\n                                        test[\"url\"],\n                                        test[\"type\"],\n                                        test[\"references\"])\n", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "            throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n            throw new NotSupportedException();\n        }\n        ///", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "      for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E = np.reshape(grad_E, (-1,3))\n        transformed_grad.append", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(caseInsensitive); \n\t\treturn this.toString().toLowerCase().compareTo(obj.toString().toLowerCase()); \n\t}\n\tpublic synchronized static int generateValueObjectUniqueID()\n\t{\n\t\treturn ims.vo.ValueObject.generateUniqueID();\n\t}\n\tpublic int countFieldsWithValue()\n\t{\n\t\tint count = 0;\n\t\tif", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertEquals(found.size(), 3);\n        assertEquals(found.get(0).getId(), stacks[0].getId());\n        assertEquals(found.get(1).getId(), stacks[3].getId());\n        assertEquals(found.get(2).getId(), stacks[1].getId());\n    }\n    @Test(dependsOnMethods = \"", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter p = new ParameterImpl();\n        p.setParameterCode(\"DEPTH\");\n        p.setParameterValue(depth);\n        crawlParameters.add(p);\n        //EXCLUSION REGEXP\n        p = new ParameterImpl();\n        p.setParameterCode(\"EXCLUSION_REGEXP\");\n        p.setParameterValue(exclusionRegexp);\n        crawlParameters.add", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// $capture or $(..capture)\n\t\t\tLNode sub = GetCaptureIdentifier(pattern);\n\t\t\tif (sub!= null)\n\t\t\t{\n\t\t\t\tcaptures = captures?? new MMap<Symbol, LNode>();\n\t\t\t\tAddCapture(captures, sub.Name, candidate);\n\t\t\t\tunmatchedAttrs = V", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                    if (colisionList.Count() > 0)\n                    {\n                        extendedWillHit++;\n                        extendedFarmLocation = colisionList[0];\n                    }\n                }\n                int param = zedMenu.GetParamSlider(\"koreanzed.laneclearmenu.useqif\");\n                if (extendedWillHit", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t// Container list for form controls\n\t\tsuper.containerList.addFactory(this.factory.getFormContainerFactory());\n\t\tsuper.containerList.addFactory(this.factory.getFormLocalContainerFactory());\n\t\t\n\t\t// Factory instances\n\t\tsuper.factory = new DwgFactory();\n\t\tsuper.formFactory = new FormsFactory();\n\t\tsuper.image", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "    return re.search(pattern, frozen_output) is not None\n@task\n@timed\ndef install_python_prereqs():\n    \"\"\"\n    Installs Python prerequisites\n    \"\"\"\n    if no_prereq_install():\n        print(NO_PREREQ_MESSAGE)\n        return\n    # We need to install the coverage", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    assert Sum(x, (x, 1, 2)).doit() == 3\n    assert Sum(x, (x, 1, 2)).doit() == 3\n    assert Sum(x, (x, 1, 2)).doit() == 3\n   ", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                this._oldStartingIndex = -1;\n            }\n            else\n            {\n                this._oldItemList = (changedItems == null)? null : ArrayList.ReadOnly(changedItems);\n                this._oldStartingIndex = startingIndex;\n            }\n            this._notifyAction = action;\n        }\n        private void Initialize", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "            int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            StringReader reader = new StringReader(writer.toString());\n            InputSource inputSource = new InputSource(reader);\n            Document testDocument = parser.parse(inputSource);\n            writer.close();\n            reader.close();\n            objectToXMLDocument", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                    c.Campus = Token2Csv();\n                    break;\n                case Param.Campus2:\n                    c.Campus2 = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.Campus3 = Token2Csv();\n                    break;\n                case Param.Campus4:\n                    c.Campus4", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Entry: {0}\", i);\nNext line of code:\n:\nConsole.WriteLine (\"Entry: {0}\", i);\nNext line of code:\n:\nConsole.WriteLine (\"Entry: {0}\", i);\nNext line of code:\n:\nConsole.WriteLine (\"Entry: {0}\", i);\nNext line of code:\n:\n", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "                if ((l.status & Label.JSR)!= 0) {\n                    l.status |= Label.VISITED;\n                    l.successor = JSR;\n                }\n            }\n            if ((l.status & Label.REACHABLE)!= 0) {\n                l.status |= Label.VISITED;\n                l.addTo", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(StackObject.To", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t}\n\t\tprivate Position getPosition() {return settingsSeries.getSeriesLabelPosition();}\n\t\tprivate void setPosition(Position position) {comboLabelPosition.select(PageSupport.getLabelPosition(position));}\n\t\t@Override\n\t\tpublic void widgetSelected(SelectionEvent e) {\n\t\t\tif(e.getSource() == comboLabelPosition) {\n\t\t\t\tsettings", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImageValue)-1, \"Failed to decrement the", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "        K = pow(self.f, self.x, self.p)\n        # okay, build up the hash H of\n        # (V_C || V_S || I_C || I_S || K_S || min || n || max || p || g || e || f || K)  # noqa\n        hm", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "            DatabaseNode databaseNode = nodeMap.get(connectionData);\n            if (databaseNode!= null) {\n                DefaultMutableTreeNode node =\n                        (DefaultMutableTreeNode) treeModel.getRoot().getChildAt(0);\n                if (node!= null) {\n                    if (disableTreeSelection) {\n                        node.setUserObject(overall", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        dVdzdOm.append(cosmo.dVdzdOm())\n        #dlnm = np.log(mmax/mmin) / mspace\n        #lnmarr = np.linspace(np.log(mmin * cosmo._h), np.log(mmax * cosmo._h), mspace)\n       ", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        d.setSize(font.getSize(), font.getSize());\n        return d;\n    }\n    /**\n     * Set the text of this Fig.\n     * \n     * @param text the text to set\n     */\n    public void setText(String text) {\n        super.setText(text);\n        if (text == null) {\n            return", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "        self.all_in_all(phi=phi,ref_p=None,flag=flag)\n        #print self.face\n        #print self.p2\n        #print self.center_point\n        #print self.T\n        #print self.r\n        #print self.p3\n        #print self.p4\n       ", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate void ShowOrdersWindow()\n\t\t{\n\t\t\tShowOrHide(_ordersWindow);\n\t\t}\n\t\tprivate void ShowStopOrdersWindow()\n\t\t{\n\t\t\tShowOrHide(_stopOrdersWindow);\n\t\t}\n\t\tprivate void ShowSecuritiesWindow()\n\t\t{\n", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                    for n in xrange(params[0]['nbins'])]\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params[1]['bins'] = [\n                    params[", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            contact.setLastMessageTransmitted(query.getEnd());\n            contact.setLastMessageReceived(query.getEnd());\n            contact.setLastMessageSent(query.getEnd());\n            contact.setLastMessageDelivered(query.getEnd());\n            contact.setLastMessageRead(query.getEnd());\n            contact.setLastMessageSeen(query.getEnd());\n            contact.setLastMessageSentToMe", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "                im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\", rgb2g)\n            else:\n                im", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void parseLog24(Application app, ArrayList<byte[]> log) {\n\t\tif (log.size() > 0) {\n\t\t\tapp.setProperty(SPEC.PROP.LASTLOG, Util.toHexString(log.get(0), 0, 23));\n\t\t}\n", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data, sys.argv[ 2 ] )\n\t\tmodel.setnetwork( model.network, sys.argv[ 3 ] )\n\t\tprint \"Score = %s\" % model.score()\n\t\tprint \"Topological Order = %s\" %", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (chance > 0)\n            {\n                if (Utility.Random(100) < chance)\n                    res = EnhanceResult.Success;\n                else\n                    res = EnhanceResult.Failure;\n            }\n        }\n    }\n}\n", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "            entries[entry_name] = (entry_value, displayname, desc)\n        # Create the enum type\n        enum_type = rdltypes.UserEnum(type_name, entries)\n        return enum_type\n    #---------------------------------------------------------------------------\n    def addressBlock_vendorExtensions(self, vendorExtensions: minidom.Element, C:", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                    pnlServices.Controls.Add(new Label() { Text = \"No FOG Services Found\", Width = pnlServices.Width - 10, Height = 40 });\n                    pnlServices.Refresh();\n                }\n            }\n            else\n            {\n                pnlServices.Controls.Add(new Label() { Text = \"No FOG Services Found\",", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True to submit value of selected items\n        ///", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                if(this.trianglesUsed[textureHash] > 0)\n                {\n                    if(!this.textureArray[textureHash].getImage().isSelected())\n                    {\n                        this.textureArray[textureHash].getImage().selectTexture();\n                    }\n                    Main.opengl.glBindTexture(Main.opengl.GL_TEXTURE_2D(),\n                                              this", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    if header not in exposedHeaders:\n        exposedHeaders += ','+ header\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n    return response\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                    Driver driver = idlePool.Peek();\n                    if (driver.IdleSince.Add(settings.ConnectionResetTimeout) < now)\n                    {\n                        oldDrivers.Add(driver);\n                        idlePool.Dequeue();\n                    }\n                    else\n                        break;\n                }\n            }\n            return oldDrivers;\n        }\n        /// <summary>\n        ///", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "        var = [var, var]\n    # List-like format.\n    else:\n        var = list(var)\n        for i, val in enumerate(var):\n            if not isinstance(val, (int, float)):\n                raise ValueError('Invalid {0} provided: {1}'.format(name, var))\n            var[i", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(MOBS)\nQUEST.addKillId(MOBS)\nQUEST.addKillId(MOBS)\nQUEST.addKillId(MOBS)\nQUEST.addKillId(MOBS)\nQUEST.addKillId(M", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - ((double)num * 60 * 60 + (double)num1 * 60)) * 100);\n\t\t\t\t\tstring[] str = new string[] { num.ToString(\"D2", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Attributes = new AttributeCollection(this);\n        }\n        public void Dispose()\n        {\n            if (Program!= 0)\n            {\n                GL.DeleteProgram(Program", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "        for x in self.reactions:\n            x._model = self\n        for x in self.metabolites:\n            x._model = self\n        for x in self.genes:\n            x._model = self\n    def trim(self, reactions=None, genes=None, metabolites=None,\n             remove_or", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\treturn coll;\n\t}\n\tpublic static ims.clinicaladmin.vo.TumourGroupListVo[] toArray(TumourGroupListVoCollection collection)\n\t{\n\t\treturn collection.toArray(new TumourGroupListVo[collection.size()]);\n\t}\n\tpublic static TumourGroupListVoCollection toCollection(ims.c", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\twhile(foundBottom){\n\t\t\t\t\tfoundBottom = false;\n\t\t\t\t\tfor(int i=0; i!=lines.length; i++){\n\t\t\t\t\t\tif(lines[i].contains(left, cy-h) || lines[i].contains(cx, cy-h) || lines[i].contains(right, cy-h)){\n\t\t\t\t\t\t\tselected.addElement(lines[i]);\n\t\t\t\t\t\t\tfound", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "        new LayoutAnimationController(set, 0.5f);\n        mListView.setLayoutAnimation(controller);\n    }\n    \n    /**\n     * Fill the list with the bookmarks.\n     */\n    private void fillData() {\n    \tmCursor = mDbAdapter.fetchWeaveBookmarks();\n    \t\n    \tif (mCursor!= null", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "                if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.SetFieldKey(HighestNumber + 1);\n        }\n        /// <summary>\n        /// manual code when deleting a row\n        /// </summary>\n        ///", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(structure[i])!= Mappings.indexUnknown)\n\t\t\t{\n\t\t\t\tthis.addWindowToDatabase(pssm, i, structure);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
