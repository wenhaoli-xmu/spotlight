{"pred": "\t\t\t\tParticipant p = (ParticipantGumpGumpGumpGump = (Mobile DeltaGump m_AutoTournamentGump( m_AutoLadderGump( m_Tournament, m_Participant, pl, m_Duel, pl, m_ ) );\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_u, e_key, **data)\n\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        # Open the test file for reading\n        a = Sndfile(ofclass = Sndfile(ofilename, 'r')\n        nframes = a = Sndfile(ofilename, 'r')\n        nframes = a.nframes = a.nframes\n        buffsize = 1024\n        buff", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "    def add_subtitles(self):\n        self.click_by_css(self._SUBTITLES_MENU)\n    def add_subtitles(self):\n        self.click_by_css(self._SUBTITLES_MENU)\n    def displays_add_subtitles(self):\n        return self.is_element_visible(self.is_element_visible(self._ADD_SUBTIT", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"ol:styleMaxValue\", ol:style.getXmlns_ol());\n\t\t\t\t\twriter.useAttributeFor(OLStyleValue.class, \"ol:styleMaxValue\", \"ol:style.getWMCExtension.class, \"max", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "        ret += ret += ret += ret += \"Next line of code:\n:\n        return self.client_ops = QNext line of code:\n        return _BlackHole(str(self, \"implement me\")\n    def _update_questions_db\n        self.client_ops = _dbs_are_valid(self, _dbs\n", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                    mob.Prompt = new SR_RuneTargetPrompt(mob, mob, mob, mob.Location, mob.Map, mob.Map);\n                    break;\n                    mob.Send(mob, SR_Utilities.ItemHue(mob));\n                    break;\n                    break;\n                    AddLabelC\n                    AddLabelCropped(35,", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "            for (X509Msg.java:  s.println(\"Certificate:  \" + chainLength;  s.println(\"Certificate:  \" + Debug.isOn(\"verbose\")) {\n            extensions.print(s);\n            s.println(\"***\");\n        }\n    }\n    @Override\n            s.println(\"Certificate:  \" + Debug.isOn", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "            sp = new JESpace (name, path);\n            spaceRegistrar.put (sp.setStore (name, path);\n        }\n        return sp;\n    }\n    }\n        }\n        return sp;\n    }\n    public void abort (String getSpace (String name, String path) {\n        JESpace sp", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\t//\t\t\t\t\t//btnEnergizeAll = new RedButton(Messages.get(this, btnEnergizeAll = new RedButton(Messages.get(Alchemize();\t\t;\n\t\t\t\t\t//\t\t//con(energyAll, item) {\n\t\t\t\t\t//\t\t//con(0, pos +", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        # Now we add extra namespaces to the soap:Envelope\n        # Now we add our namespace's aliases to the request must be those given by the client.\n        # Now we add our namespace = request = self.dispatcher.dispatch(request, request)\n        # Now we add our method = request = self.dispatcher.dispatch(request", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "        mark = \"markRepeated('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated_status_as_repeated(self, status_id):\n        mark = \"mark = \"mark = \"markReplied('%s')\" % status_id\n        self.webview.execute", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "            return {\"error\": False}\n            return result = {\n            \"login\": login.decode('UTF-8'),\n            \"password\": password.decode('UTF-8'),\n            \"params\": byte_to_unicode_dict(params),\n            \"session\": byte_to_unicode_dict(session)\n        }\n        }\n            return {\"error\": False", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b, b.Untrusted);\n\t\t\tZoneIdentityPermission z = new ZoneIdentityPermission (SecurityZone (SecurityZone.NoZone);\n\t\t\tZoneIdentityPermission n = new ZoneIdentityPermission (SecurityZone.NoZone);\n\t\t\tZoneIdentityPermission", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "        return self.trust_managers\n        return self.trust_manager = keyManager.getAcceptedIssuers()\n        if not self.trust_manager in self.key_managers:\n            private_key\n            if private_key_manager in self.key_manager in self.key_managers:\n            chain = key_manager in self.trust_man", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        DomainInfo domainInfo = manager.getDomainInfo = new DomainInfo();\n        DomainInfo domainInfo = manager = manager = new DomainInfo();\n        request.setAttribute(\"domainInfo\", domain);\n        DomainInfo domainInfo = new DomainInfo();\n        request.setAttribute(\"domainInfo\", domain);\n        manager = manager.getDomainInfo", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "            self.__datastream_address = os.path.join(self.__tmp_dir, self.__datastream_address = os.path.join(self.__tmpstream_address = os.path.join(self.__tmpstream_address = os.path.join(self.__tmpstream_address = os.path.join(self.__datastream_address = os.path.join(self.__datastream", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\t//option 2 is checked\n\t\t\t\t\tjumpID = (double jumpWeight = (double) store.GetValue (iter, columnBool1);\n\t\t\t\t\t//oldPersonWeight = (double) store.GetValue (iter, column1, iter, column2);\n\t\t\t\t\t//", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        String[] argValues = new String[] {\n            field.getArgs(actionName, messages, locale, field.getArgs);\n        };\n        String[] argValues = new String[4];\n        for (int i = 0; i < args.length; i++) {\n            if (i == null) {\n           ", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED_DATA(new ConfigFile<UUID, Firm>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic Firm create(UUID id, ConfigurationSection conf)\n\t\t{\n\t\t\t@Override\n\t\t}), Firms, FIRM(new ConfigFile<UUID, Firm", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditorPreferences() {\n\t\t\t\taddField(new IntegerFieldEditor(SHOW_MINI_MODE_DIALOG,\n\t\t\t\t\t\t\"Show general preferences\", getFieldEditorParent()));\n\t\t\t\t// GeneralNode.setPage(playbackShortcutPreferences());\n", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "                m_Owner.Caster.SendAsciiMessage(\"SelectTarget = null;\n            }\n            else if (CheckLineOfS\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "        self._enable_transaction.begin()", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String shortName = field.getDeclaringType().getName().getClassName().getClassName().toString();\n\t\t\tfinal String shortName = field.getDeclaringType().getDeclaringType().getName().getClassName().toString();\n\t\t\tfinal String shortName = field.get", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "    from tornado.web import RequestHandler\n    from tornado import gen\n    from tornado.options\n    from tornado import settings\n    from tornado.escape import utf8\n    from tornado.i\n    from tornado import ioloop\n    from tornado.i\n    from tornado.i\n    from tornado\n    from\n   ", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\t// Lluis: Lluis Sanchez Gual (lluis) { Lluis Sanchez G. Lluis Gual (lluis) Lluis G. Sanchez G (lluis) Lluis G. (lluis) Lluis) Lluis G. (ll", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "    args = parser.parse_args()\n    if not args.outpath:\n        args.outpath = './coord.remain\nNext line of code:\n    print >> sys.exit( args.outpath )\nNext line of code:\n    print >> sys.stdout, 'Starting with {0} APs'.format( lat1,", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                if (mod >= 156 && mod <= 156) \n                {\n                    if (m_Definition.MaxInt <= 156) \n                        if (m_Mod == 21) \n                            replace SkillGroup2 replace AosWeaponAttribute.HitPhysicalArea > 0)\n                        return GetNameForAttribute(AosWeapon", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "        for platform in platforms:\n            builds.append({'os': platform': platform: 'os_%s' % platform,\n                           'os_pretty': 'os_pretty': 'os_%s' % platform,\n                           'os_please complete the code given below. \n", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID = (List)stateBeansList = StatusBL.loadByProjectTypeIssueTypeIssueTypeIssueTypeAssignments(projectID, issueTypeID, issueTypeID, issueTypeID, issueType, issueType, issueType, issueType, issueType, projectID, issueType, issueTypeID,", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (ArgumentSyntax argumentSyntax in argumentScriptArgumentSyntaxs) {\n                if ( argumentSyntaxs.Any() ) {\n                    toReplace.Add( argumentSyntax, argumentSyntaxs.First() );\n                }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            toReplace = argumentSyntax,", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        split_test = self._create_vertical()\n        vertical\n        split_test = self.get_item_from_module\n        self.get_item_from_modulestore( self.split_test_usage_key\n        self.split_test_usage_key\n        # Set the\n        # Set the\n        # Set the user\n        # Set the user", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            tmp.Sort(AddRangeUni(longTag, true, subset);\n            tmp.Sort(this);\n            for (int k = 0; k < tmp.Count; ++k) {\n                int lastNumber = 0;\n            }\n            else {\n                int lastNumber, 0;\n                if (c & ", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.main = graphCell) {\n\t\t\t\t\t\t\tcgn.depth = cgn.main.depth + 0;\n\t\t\t\t\t\t\tif (cgn.depth > 0) {\n\t\t\t\t\t\t\t\tcgn.x = cgn.x + cgn.x;\n\t\t\t\t\t\t\t\tcgn.y", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "        task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap get() {\n      return model.get();\n    }\n    private Bitmap loadPage() throws IOException {\n      try {\n      Log.w(TAG, \"loading page \" + model.getSprite());\n      return loadPage();\n   ", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        cmdHistory.goDown();\n                    }\n                }\n            }\n        });\n    }\n    }\n        });\n    }\n    /**\n     * Not implemented.\n    ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "    prerequisite = NavigateToSibling\n    def step(self, *args, **kwargs):\n        self.prerequisite_view.policy.item_select('Manage Policies')\nclass NodeEditPoliciesForm(NodeView(NodeView):\n    policy_profiles = BootstrapSelect('protectbox')\n    @property\n    policy_profiles = BootstrapSelect('protectbox", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognitionListeners.onRecognitionListener;\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralSkeleton sequence, GeneralSkeleton sequences) {\n\t\tfor (IJSequenceListener listener : sequenceListeners) {\n\t\t\tnotifySequenceListeners(timestamp, getCurrentSequence());\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "                writer.AddAttribute(\"onclick = new ClearCanvas.ImageServer.Web.Common.WebControls.UI.ToolbarButton\", ClientID);\n                writer.AddProperty(\"Enabled\", Enabled);\n                writer.AddProperty(\"Disabled\", \"Visible\", Visible);\n                writer.AddProperty(\"Enabled\", Enabled);\n                writer.AddProperty(\"Visible\", Visible);\n                writer.Add", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tif (compound.hasKey(\"ToolDamage\")\n\t\t\t&& compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getShort(\"ToolDamage\");\n\t\t}\n\t\t\n\t\t}", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "        return \"Effect: \" + super.toString(getID() + \" prob=\" + probability);\n        }\n    /**\n     * Get the tag name of the XML tag for this object.\n     *\n     * @return The tag name.\n     */\n    public static String getXMLElementTagName() {\n        return \"effect\";\n   ", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'private',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().strftime('%Y-%m-%", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "                    interact(self._plot_line, x=widget_x, y=widget_y=widget_y, y=widget_y, sel_dim=widget_y, bokeh=widget_y, y=widget_y_value, description='Y:)\n                    # TODO (forman, 20160709): add dimension selector.\n                else", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (ignored.Contains(path)", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K,? super I,? extends E> remappingFunction) {\n\t\t{\n\t\t{\n\t\t}", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        cat = getToolByName(self.context, 'uid_catalog', 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains = 1:\n            if viewtype == 'comments':\n                obj = self.request['com.cynapse.cyninviewviewtype']\n                obj = pd", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t}\n\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t}\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                    // get channel_uri: check first whether estate\n                    // estate\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": avatar \\\"{1}\\\": land data not yet available\", scene.RegionName, avatarName));\n                    // get land data\n                    // settings don't", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(IsNew=PayPeriods.Add(PayPeriods.Count);\n\t\t\tDialogResult=PayPeriods.Add(this.textDateStart, this.textDateStop, this.textDateStart, this.textDatePaycheck, this.textDatePay", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        lat, lon = _read_lat_lon_for_NAME_timeseries(header, column_headings, column_head:\n        lat, dimension=0, values=np.array(column_headings['Y, Y, 'Y, Y, 'Y, ':\n        lat, 'Y, lat, 'Y, Y, Y", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "    if not user:\n        return {'success': False,'msg': _('Valid API key needed to create a package')}\n    return authz.is_:\n", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\t// setting label\nNext line of code:\n:\n\t\t\t\t// setting label according to outcome\nNext line of code:\n:\n\t\t\t\t// setting label according to outcome\n\t\t\t\texample.setValue(predictedLabel, outcomes[i);\n\t\t\ti++;\n\t\t\t// calculating confidences = (1d - confidence) /", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            return new SearchResults[segments.Length];\n        }\n        }\n        }\n        /// <summary>\n        /// Performs a search for a search for a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters for this search.</param><param", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "             codePoint = (ch & 0x1FFFF) << 10;\nNext line of code:\n             ch = string.charAt(offset++);\nNext line of code:\n             codePoint |= Character.codePointAtOffset(string, offset, 1);\nNext line of code:\n             if (ch < 0x100", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        // TODO: TODO: The contents of this file are subject to the terms of the  // the sample entry, check the code given below. \n/**\n* The contents of this file are subject to the contents of this file are subject to the terms of the  // The contents of this file are subject to the", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError, \"The game has already started\");\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// TODO: Check if the mod is a valid password is already started\n\t\t\t\t// TODO: Check if the game has already started\n\t\t\t\t// TODO", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif(beans.length > 0)\n\t\t{\n\t\t\tfor(int i=0; i < beans.length; i++)\n\t\t\t{\n\t\t\t\tcoll.add(((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDReferralPendingEmergencyNonEDAdmissionListVo)beans)beans.CatsReferral", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'viewsdb():\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'cache':\n    donate()\nelif prnum == 'packages':\n    packages()\nelif prnum == 'video':\n    videodb()\nelif prnum", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <exception cref=\"System.IndexOutOfRangeException\">if A is null or &lt; 0 or &gt; numel(A)</exception>\n       ", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "  plotName = pD[ 'plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  if not 'plotName' in pD[ 'plotName' ] in pD:\n    return S_ERROR( \"/pD[ 'plotName'", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\t// Check for newLocation = new CPos();\n\t\t\t// MaxBaseCenter = 2 = new CPos();\n\t\t\t// MinimumExcessPower = 0;\n\t\t\t// ExcessPowerIncrement = 0;\n\t\t\t// ExcessPowerIncrement = 0;\n\t\t\t// Excess", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        // Output Partitions\n        if (singlePartition) {\n            partitionBy = \"Forced single partitioning\";\n        }\n        // name will look like [name will look like \"basename-stmt-", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Anchor = new System.Windows\n\t\t\t// \n\t\t\t// button1\n\t\t\t", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = new DCB (baud_rate, data_bits, parity, parity, read_buffer_size, write_buffer_size);\n\t\t\tdcb.BaudRate = dcb.BaudRate = (int) dcb.BaudRate;\n\t\t\tdcb.BaudRate = (int) dcb", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "        page = self.get_page(self.user.get_profile().get_url(), login_as='admin)\n        self.check_", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    parser.add_argument('--help', action='help')\nNext line of code:\n    args = parser.parse_args()\nNext line of code:\n    if args.keep_tempdir = args.keep_tempdir\nNext line of code:\n    unittest.main()\nNext line of code:\n    unittest.main()\nNext line of code:\n   ", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tself[\"key_yellow\"].show()\n\t\t\tself[\"key_yellow\"].setText(_(\"Refresh\"))\n\t\t\tself[\"key_yellow\"].show()\n\t\t\tself[\"key_yellow\"].show()\n\t\t\tself[\"key_yellow\"].setText(_(\"Refresh\n\t\t\tself[\"key_yellow\"].show()\n\t\t\tself[\"key_yellow\"].show()\n\t\t\tself[\"key", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                int n = 2;\n                float barHeight = size * 1;\n                float barWidth = 0;\n                float fontX =                 if (generateChecksum && checksumText)\n                        fullCode += size;\n                if (startStopText)\n                    fullCode += size;\n                if (startStop", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return results = new String[] { \"value1\", \"value2\", \"a quoted value3\", \"another quoted value\" };\n    return results;\n  }\n  /**\n   }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "        y_points = np.arange(-90.0, 90.0, 2.0)\n        x_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            {\"grid\", x_points.flatten()],\n            [\"grid_longitude\", y_points\", x_points.flatten()],\n        ]\n        result =", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            if (currPacket.Frame.Frame.FrameModified += new EventHandler(_currPacket_FrameModified);\n            {\n                SetModifiedFrame();\n            }\n            else\n            {\n                OnFrameModified();\n            }\n            OnFrameModified();\n            }\n            else\n            {\n                if (currPacket.Frame.FrameModified += new EventHandler(_curr", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "    print '\\033[0m'\n    return 0\ndef print_color(color=\"red_or_yellow_or_yellow(wav_dir):\n    # in batach to slice the data from the right channel\n    # cache the data from the internet\n    for parent, dirnames, filenames in os.walk(wav", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        }\n    /// <summary>\n        /// Returns the number of values in the collection.\n        /// </summary>\n        /// <returns> size\n        /// </returns>\n        /// <throws>  IllegalStateException if the collection is not a RefCountedSet\n        /// </throws>\n        public virtual int Count()\n", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            this.AutoScaleDimensions = New System.Drawing.Point(0, 0);\n            this;\n            this.Text = \"WeifenLuo.WinFormsUI.Docking\";\n            this.imageList1 = new System.Drawing.Point(0, 0);\n            this.imageList1 = new System.Windows.Forms.ImageList(this.imageList1);\n", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "        if isinstance( self.install( self, original, \n            resultType=original.restype, \n            argTypes= original.argTypes, \n            doc = original.__doc, \n            argNames = original.argNames, \n            extension = original.DLL = original, \n            extension = original.extension, \n", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            final DataOutput baos = new DataOutput();\n            baos.writeUint64(baos);\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles\n    (final DataOutput header) throws IOException {\n        header.write(NID.kEmptyFiles);\n        header.write(NID.kEmpty", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                    if (System.currentTimeMillis() {\n                    if (rampDelay == 0)\n                        alphaLevel = rampDelay = 0;\n                        alphaLevel = 0;\n                    }", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "            var item = Subject.GetItems().Single();\n            item.RemainingTime.Should().Be(Subject.GetMocking);\n        }\n            item = Subject.GetItems().Single();\n            VerifyQueued(item);\n        [Test]\n        public void should_be_removable_and_should_not_be_removed_and_not_be_completed_item_status(", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, ItemId.ItemId.ItemPwe\n                }\n                if (_diff > 0)\n                if (_diff > 0)\n                {\n                    _diff -= item;\n                    _diff > 0)\n                    return totalRev", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "        f.writelines(['F) 1\t\t\t", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 0x04);\n                    i += ((b & 0x04) << 0x04);\n                    i += ((b & 0x08) & 0x", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        if self._course_key is None:\n            self._course_key = CourseKey.from_de\n            self._course_key = self._course_key\n        return self._course_key\n        if self._course_key is None:\n            raise FixtureError(\n            self._course_key = self._course_key\n           ", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(split(\"safaris.\"+ currentSafari + \".current_recordtime\",duration);\n\t\tif ( deathEvent.get(\"safaris.\"+ currentSafari + \".current_recordtime\").getKeys(false);\n\t\tplugin.saveConfig();\n\t\tplugin.saveConfig();\n\t\tplugin.saveConfig();\n\t\tplugin", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "            # Now download the file...\n        rc = download_request(module, name, info, cert_type)\n        if rc == False:\n            module.fail_json(\"Download request for \" + cert_type + \".pem failed\")\n        return meters\n        return meters\n        module, name, apiid, apiid,", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.lblPrivacy.Location = new System.Drawing.Point(21, 6, 80, 13);\n            this.lblAutoSaveAs\n            this.lblPHP5Ext.Location = new System.Windows.Forms.TextBox\n            this.cmboLang\n            this.cmboProject\n            this.cmboProject\n            this.cm", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for plugruncount = 0\n        for plugname, plug in self.all_logs:\n            if not plugrout:\n                self.soslog.child = self.soslog.child = plugname, plug in plugname\nNext line of code\n        self.soslog = self.soslog", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "    getRoomFullName.produce = lambda s: s.getRoom().getFullName()\n    def getRoomBookingList(self):\n        \"\"\" Session Room \"\"\"\n    getRoomBookingList.result = ISessionFossil\n    getRoomBookingList.name = \"room\"\n    def getSlotList(self):\n        \"\"\" Session Room \"\"\"\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                            throw new MessageWriterException(e);\n                        }\n                        return true;\n                    }\n                };\n                };\n                };\n                };\n                result = parent.mirthClient.importMessageWriter(messageWriter).importMessageImportDialog(messageWriter, fileTextField.getText());\n            } catch (MessageWriterException e) {\n                parent.alertError(parent,", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\nNext line of code:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession = currentSession == null) {\n            return;\n        }\n        if (currentSession = currentSession == null) {\n            return;\n        }\n        if (currentSession.isClosed() || currentSession.getState().isClosed()) {\n            return;\n        }\n        if (sessionStatusCallback!= null", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion e : emotions) {\n\t\t\tsum += e.chance *= e.influences.length; i++) {\n\t\t\t\te.chance += e.influences[i][1];\n\t\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\tfor (Emotion e:\n", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                    'property1': 2,\n                    'property2': 3,\n                   'started_at': constants.SPLIT_TIMESTAMP2,\n                   'started_at': constants.SPLIT_TIMESTAMP1},\n                    'job': 2,\n                   'started_at': constants.SPLIT_TIMESTAMP1},\n                    'job 4}\n            },\n", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "    if NorthernHemisphere == 0:\n        phi1 = -phi1 * - phi1Rad\n    if ZoneLetter >= 'N':\n        NorthernHemisph\n    elif ZoneLetter >= 'N':\n        NorthernHemisph\n    elif ZoneLetter >= 'N':\n        NorthernH", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "        form = ReportUserForm(request.POST)\n        if form.is\n", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "    def initialize(self, series = None, parent = None, parent = None, content = None, self.request, context, request):\n        self.form = request = get = 'launchpad. ", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.assert(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(m_vForms == null) throw new ArgumentNullException(\"form\");\n\t\t\tm_vForms = value;\n\t\t\tm", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr = new byte[] arr;\n    }\n    /**\n     * @return\n     */\n    public NumberVariableLength clone()\n    {\n        return new NumberVariableLength(this);\n    }\n    /**\n     * @param value\n     */\n    public void setValue(String", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "                if flag = _Config._Config._add_post_processor\n                if flag is not in newval is not None:\n                    return (flag, regex)\n                if flag is not isa is not None:\n                    return (flag, regex)\n                if flag is not variant is not None:\n                    return (flag,", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "class OBD_PID1D(OBD_Packet:\n    name = \"PID_1D_OxygenSensorsPresent\"\n    fields_desc = [\n        XByteEnumField('data', 0, states)\n    ]\nclass OBD_PID1D(OBD_Packet):\n    name = \"PID_1D", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.service = self\n\t\tself.bus_name\n\t\tself.service = self\n\t\tself.service = self\n\t\tself\n\t\tself = Next\n\t\tself.next\n\t\tself. next = next\n\t\tself\n\t\tself\n\t\tself\n\t\tself\n\t\tself\n\t\tself\n\t\tself\n\t", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "                this.AddReg( typeof( SulfurousAsh ), 1044353, 1, 501627);\n                this.AddRes(index, typeof(SpidersSilk, 1044360, 1, 1044253);\n                this.AddRes(index, typeof( SulfurousAsh ), ", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        # If the request context was pushed with an application context was\n        # preserved, we have to pop it now.\n        if self._implicit_appcontext.\n        if self.preserved:\n            appctx_stack.top = self.app._app_ctx_stack.top\n            self.pop(exc=exc = self.app.appexc", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "    return _pubsub_consumer = _pub/sub/cluster_id).filter(PubSubWMQ.callback_id==topic_id).\\\n        order_by(SecurityBase.sec_base.name)\n    return response = _pubsub_topic(session, cluster, topic_name, query_wrapper)\n    if topic_name:\n        response = _", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "            if (resourceEntityForReleaseReleaseComparator.compare(r.getResourceGroup(), release)!= null) {\n            if (resourceEntityForRelease(r.getResourceGroup(), release)!= null) {\n            if (resourceEntityForRelease(r.getResourceGroup(), release)!= null) {\n            if (resourceEntityForRelease(r.getResourceGroup", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "        # Find distance = (ray_trafo.range.meshgrid[1] +\n        #                  ray_trafo.range.meshgrid[2])\n        dx = (ray_trafo.range[1 * ray_trafo.geometry.det_radius)\n        rot_dir = _rotation_direction_in_p = _fbp_filter(angles, angles", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "            logger.log(u\"Proxified RE: \" + regx, logger.DEBUG)\n        return regx\n    def _getID(self):\n        return GenericProvider.makeID(self.name)\n    def makeRE(self, name):\n        return GenericProvider._makeName(self.name)\n    def _checkAuth(self,", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn unit.ToString (fmt);\n\t\t}\n\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn unit.ToString (Helpers.InvariantCulture);\n\t\t}\n\t\tpublic static FontUnit Parse (string s, IFormatProvider fmt)\n\t\t{\n\t\t\treturn new FontUnit (s, s, s);\n\t\t", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t)\nNext line of code:\n:\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t// add blocks\n\t\t\tbyte[] output = new byte", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = obj = (JObject)rootVal;\n\t\t\tAssert.That(obj.Properties[0].Key, Is.EqualTo(\"JSON Test Pattern pass3\"));\n\t\t\tAssert.That(obj[\"JSON Test Pattern pass3\"].ToString(), Is.EqualTo(\"A key can be any string\"));\n\t\t\tAssert.That(((JString)root", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "                for (int w =  for (int h = 0; h < height; h++) {\n                for (int w = 0; w < width; h =  for (int w = 0; w < height; h) {\n                return topicStr = for (role 1)", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    # d = iso.get_emodulus(ds)\n    # Next line of code\n    # # This should work with any of the following columns\n    # # analytical or FEM-19, add_px_err=False, or rtdc, add_pxcorr = None\n    # # The following line of", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        //        final String[] args = new String[] { \"file:/tmp/axioms\", \"http://www.example.com\" };\n        //        final TempTripleStore tmp = new TempTripleStore(properties);\n        //        final StatementBuffer<StatementBuffer<Statement> sb = new StatementBuffer<Statement>(tmp", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                    {u'Timestamp': datetime.datetime(2015, tzinfo=tzutc())}\n                    u'ProductDescription': 'us-east-1e',\n                    u'ProductDescription': 'g2.2x1x2xlarge',\n                    u'Threshold': '0.105300',\n                     u", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\t}\n\t\treturn false;\n\t\t}\n\t/**\n\t * Performs the installation.\n\t * \n\t * @return\n\t */\n\tprivate boolean performInstallation() {\n\t\t// TODO: check if yarta is already installed\n\t\t// TODO: check if yarta", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.Dispose();\n\t\t}\n\t\tpublic void Dispose(bool isThreadAffinity)\n\t\t{\n\t\t\t{\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n\t}\n\t}\n\t}\n}\n", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        :rtype: numpy.ndarray\n        \"\"\"\n        \"\"\"\n        if self._param_model.get_matching_errors({\"relative\": True, \"axis\": 1}):\n            return self._param_model.y_model_cov_mat\n        else:\n        \"\"\"\n        return self._data_model.data\n    @property\n    @property\n", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_anchor, m_type, m_internal);\n    }\n    /**\n     * @see java.lang.Object", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                  adminUser = getEucalyptusAccount( ) );\nPrevious line of code:\nNext line of code:\n                  noCanonicalIdAccountIds.add(grant(owningAccount.getEucalyptusAccount( ) );\n                  noCanonicalIdAccountMap.get( ) );\nNext line of code:\n                  no", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "            add { add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        #endregion\n        /// <summary>\n    \t/// Instructs the folder system to build the folder system.\n    \t/// </summary>\n    \tvoid IFolderExplorerComponent.Initialize()\n", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        final ImportVmTemplateCommand command = new ImportVmTemplateCommand();\n        final VmDevice importVmTemplateParameters = new VmDevice();\n        final ImportVmTemplateParameters parameters = new ImportVmTemplateParameters();\n        final ImportVmTemplateCommand command = new ImportVmTemplateCommand();\n        final ImportVmTemplateParameters parameters", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.Top line of code:\n:\n\t\t\t// Container child Gtk.Alignment.Gtk.Container+ContainerChild\n\t\t\tthis.GtkLabel2 = new global::Gtk.Label ();\n\t\t\tthis.GtkLabel2.Name = \"GtkLabel2\";\n\t\t\tthis.GtkLabel2.Xpad = 20;\n\t\t\tthis.G", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = self.category = self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\nNext line of code:\n            self.system['%sTOTAL' % POSTPROC_ENVIRO_ID] = self", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\tpublic MethodBuilder DefineMethod(string name, MethodBuilder, MethodBuilder type, string name, string name, string name, string name, string name, string name, string name, string name, string name, TypeBuilder mb = DefineMethod(ConstructorInfo.ConstructorName, ConstructorInfo", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "      return (SendInvitation.SendInvitationRequest.CreateBuilder(prototype);\n    }\n    \n    private static pb::GeneratedMessage<SendInvitationRequest> ChannelInvitation;\n    public static pbnet.protocol.channel_invitation.Invitation.ChannelInvitation;\n    public const int ChannelInvitation;\n    public static SendInvitation", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                    vertices[x] = new Vector3f();\n                vertices[x].set(getVertIndexBuffer().get(x);\n                vertices[x].get(getVertIndex(i, i, i, 0));\n            }\n            }\n        }\n    }\n    }\n    /**\n     * Stores in the <code>vertices</code>", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (showDateCreated.equals(showDateCreated) && (showDateCreated.equals(showDateCreated.equals(showDateCreated) && (showDateCreated.equals(showDateCreated) && (showDateCreated.equals(showDateCreated) && (showDateCreated.equals(showDateCreated) && (showDateCreated.equals(showDateCreated", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": ":\n\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tinputField.text = inputField.text;\n\t\t}\n\t}\n\t}\n\t}\n\t}\n}", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region PRIVATE ROUTINES\n    //--------------------------------------------------------------------------------\n    #endregion\n  }\n}\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                    lastUser = r[\"DateModified.\" + ADataCheck.MPartner.\n                    lastUser = r[\"ModifiedBy = SUserAccess.\" + ADataCheck.MPartner.\n                    lastUser.\n                    lastUser = TAppSystemDefault(\"DataCheck.MPartner.\" + ADBAccess.\n                    lastUser = S", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= ScrollDirection.Right, e.Event == KeyInputEvent.Down); return true;\n\t\t\treturn directions;\n\t\t\tif (frozen!= null)\n\t\t\t\tdirections!= null)\n\t\t\t{\n\t\t\t\tFrozenActorTooltip = frozen;\n\t\t\t\t;\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            if (CriteriaCodesUsed.Exists(element => element == \"VOL\") || element == \"VOL\") {\n                if (FPetraUtils.GetCriteriaCodes.GuiUtils.GetSpecialRoleAttendance.PcDiscountTable.ColumnDiscountId.Add(PcDiscountTable.ColumnDiscountId.", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "                stream.Read (buffer, 0, buffer.Length);\n                // Appending file as blob/byte[] into args.\n                args.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n    }\n    }\n    */\n    /*\n * Phosphorus Five, copyright 2014 - 2017", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "        return not bool(self._reqs)\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return CopyCustom && Enabled; }\t\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _copyRangeStart)\n\t\t\t\t\t{\n\t\t\t\t\t_copyRange = _copyRange;\n\t\t\t\t\tNotifyPropertyChanged", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\tget { return cacheDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\nNext line of code:\n\t\t\tget { return cacheDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\nNext line of", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "            if (bugAnnotation instanceof SourceLineAnnotation) {\n                if (bugAnnotation.getLineNumber()!= bugInstance.getLineNumber) {\n                    throw new IllegalStateException(\"bugAnnotation.getLineNumber()!= bugAnnotation.getLineNumber()\");\n                }\n            }\n        }\n        }\n        }\n        }\n        }\n    public void checkBugInstance(Bug", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "public class Muffins : Food\n{\n\t\t[CommandProperty( AccessLevel.GameMaster )]\n\t\tpublic int amount ) : base( 0x160b )\n\t\t{\n\t\t\tStackable = Core. List( 0x9F2 )\n\t\t}\n\t\tpublic Muffins( 0", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                        if (eFarm!= null && eFarm.CollisionCount >= MenuManager.GetCount >= eFarm.CollisionCount && eFarm.CollisionCount >= GetRMinionCount && eFarm.Count >= GetRCount && eFarm.GetR.GetRRange(Me) && eFarm.CollisionCount && eFarm.R", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, x, y, width, 0.0, 0.0, fill, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint, setting all values directly\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "        fb = self.tz = dateutil.tz.gettz('Europe/Berlin')\n        fb = self._retr_file(filename)\n        if fb == '':\n            try:\n            if re.findall(r\"{}<\\/tns:Wert>\\n *<tns:tns:Wb = self", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(\n        field_def['rules']['marc'][0]['function'], 'title'],\n            field_model_def['rules']['marc'][0]['function']\n        )\n        self.app\n        self.assertEquals(\n            field_model_def['fields['title\n        self\n        self.assertEquals(\n            field_model_def", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new object[] {\"E1\", \"E1\"}});\n                // EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new [] { \"f1\",\"f2\" },\n                    new[] { \"E1\", \"E1\" });\n                // widen to long\n                var env", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "        clibrebound.reb_particle = other = c_double(other)\n        return self\n    \n    def __truediv__(self):\n        return self._sim.contents\n    \n    def __trouble(byref(self):\n        return self._sim.contents\n        self._sim)\n        return self._sim.contents\n    \n    def", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "    def _replace_embedded_field(self, cr, uid, el, context=None, context=None, context=None):\n        if el.get('data-oe-model') == 'ir.ui.view':\n            Model = self.pool[el.get('data-", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "            value = BasicHTML.createHTML.createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML(propertyKey, value);\n        c.putClientProperty(htmlDisable, htmlDisabled, htmlDisabled);\n        if (value!= null) {\n            if (value = value = value, text, value,", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "    s = create(filename, content)\n    assert s.content_is_testharness\n    assert s.content_is_testharness\n    assert s.content_is_testharness\n    assert s.content_is_testharness\n    assert s.content_is_testharness\n    assert s.content_is_testharness\n    assert", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.sqlloader = namedquery = new HbmSqlLoader {type = KeyType.GetNhTypeName()};\n\t\t\t}\n\t\t\t}\n\t\t\tmapping.sqlloader = mapping.sqlloader!= null? mapping.sqlloader = mapping.sql = mapping.sql = mapping.sql = mapping.sql = mapping.sql = mapping.sql = mapping", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\twriter.Write( (Mobile) m_Members[i] );\n\t\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        invocationQueue.pop();\n        assert graph().graph();\n        assert graph().graph();\n        assert graph().graph();\n        assert graph().graph();\n        graph().graph();\n        graph().graph();\n        graph().graph();\n        graph().graph();\n        graph().graph();\n        inliningDepth();\n        graph();\n        graph", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                self.args['Vagrant\nNext line of code:\n:\n                self.args['sprout\nNext line of\n:\n                self.args['sprout\nNext line of code:\n                self.pyt\n        if self.args['sprout\n        if self.args['sprout\n        if self.args['spr", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "                if (phi) {\n                    if (value == null) {\n                        value = null;\n                    } else {\n                        if (value instanceof ConstantLocationNode) {\n                            value = new ReadCacheEntry(key, read.location());\n                        } else {\n                            state.addCacheEntry(identifier, write.location());\n                        }\n                    }\n               ", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "        if (mCallback!= null) {\n            try {\n                mCallback.handleCallDataUsage();\n            } catch (RemoteException ignored) {\n            }\n        }\n        }\n        }\n    }\n    /** @see Connection.VideoProvider", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonianWallMapGump(from as PlayerMobile, this);\n\t\t\t}\n\t\t}\n\t\t}\n\t\t\n\t\tpublic override void OnDoubleClick(Mobile from)\n\t\t{\n\t\t\tif((IsLockedDown || IsLockedDown || from.InRange(GetWorldLocation(), 5))\n", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "    'BibrecBibxxx',\n    'Bibxxx',\n    'BibrecBibxxx',\n    'Bibxxx',\n    'RecordMetadata',\n    'utils',\n    'utils',\n    'utils',\n    'utils',\n    'utils',\n    'utils',\n    'utils',\n   ", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "        user = '%s@%s' % (username, domain, domain)\n        data = self.module.get(user)\n        if data = None:\n        self.module.get(user) is None:\n        raise UserNotFound()\n        else:\n        raise UserExists()\n        else:\n        raise UserExists()\n        else:\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def save(self, fpath):\n        \"\"\"\n        Save the binary representation of the po file to file *fpath* if no\n        file handle exists", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res = res['Value:\nNext line of code:\n    if not res = self.transCatalogClient.getTransformationProblematics( int( transID ) )\n    if not res['Value:\n    if not res['Value:\n    if not res['OK:\n    if not self.am_getStorageElements\n", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\t// If (uri = uri.toString().contains(PLUGINS_PREFIX) || uri = null) {\n\t\t\t// @see http://freenetproject.org/uri/ \n\t\t\t// @see http://freenetproject.org/uri/ \n\t\t\t// @see http://freenet", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        gsp = yield self.setupGerritStatusPush(summaryCB=sampleReviewCB)\n        gsp.sendCodeReview = self.run_fake_summary_build(gsp, [buildset, buildResult, buildInfo, resultText, verified, verifiedScore, buildResult, result, build, result, buildResult,", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n  def testTitleToAndFromString(self):\n    self.category.term = 'text'\n    self.summary_type = 'text'\n    self.summary.text = 'text'\n    self.assert_(self.summary.text == new_summary == new_summary)\nclass IdTest(unittest.TestCase):\n  def setUp(self", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "    public Map<String, AnnotationMirror> visit(Iterable reduce(Map<String, AnnotationMirror> r1, Map<String, AnnotationMirror> r2) {\n        if (r1.containsKey(immutableString) && r1) {\n            if (r1.containsKey(immutableString) && r1) {\n                if (", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "class MATERIAL_PT_lighting(MaterialButtonsPanel(MaterialButtonsPanel, Panel, \n    bl_label = \"Lighting\"\n    COMPAT_ENGINES = {'BLENDER_RENDER', 'BLENDER_GAME'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material = context.material\n        engine = context", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            if (_engine.Memory.Map.MapperNo == 16)\n            {\n                var map16. _FrameCounter = _engine.Memory.Map.CurrentMapper;\n                var map16. _FrameCounter = map5. mapper5_chrBankSize = map5. mapper6. _engine.Memory.Map.Mapper16. _engine.", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "            JMenuItem oJMenuItem = new JMenuItem(\"Inspect\");\n            oJMenuItem oJMenuItem.addActionListener(oActionListener);\n            m_jTabbedPane1.addTab(oJTabbedPane1.add(oJTabbedPane1, oJTabbedPane1, oJTabbedPane1, oJTabbedPane1, oJTabbed", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t// Page 2\n\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bear]\n\t\t// Page 3\n\t\tAdd(\"Party Quest\", 70027\"); // Party Quest Scroll [10 Red Bears]\n\t\t// Page 70026\"); // Party Quest Scroll", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = 0;\n\t\t\tint width = 0;\n\t\t\t// Get the size of the view\n\t\t\tFrame size = new Frame (Frame.X, Frame.Y, Frame.W, Frame.H);\n\t\t\tFrame.H, Frame.W, Frame.H, Frame.W, Frame.H, Frame.W,", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "\"\"\"\n", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                 ORDER BY sdata, max_groupID, stime, stime, stime, stime, stime, stime, stime, stime, stime, stime, stime, stime, stime, stime, stime, stime, stime, stime,", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "        print(\"db_set_last_snapshot: project_id\", project_id, project_id, timestamp_to_rethinkdb(timestamp)\nTIMESTAMP_FORMAT = \"/mnt/smc-storage/{namespace}/\".format(namespace=POD_TIMESTAMP = POD_SET_LAST_SNAPSHOT(new_snapshots)\nRETHINKDB_SECRET = '/mnt/smc-storage", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "//--- Aura Script -----------------------------------------------------------\n// Deian\n//--- Description -----------------------------------------------------------\n// Shepard - manages the sheep at Tir Chonaill Grassland\n//--- End -----------------------------------------------------------\npublic class DeianScript : N\n{\n\t//--- Aura Script -----------------------------------------------------------\n\t// Shepard - manages the code given below.\n\t//--- Description", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines, datalines)\n        self.codestr = 'VOTED'\n        self.codetail = ('name',)\n        self.coderep = ()\nclass VoteResponse = (\n        self.__init__(", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "    def add_host(self, host_data):\n        self.host_data[host_data = host_data\n        self.host_data = host_data\nNext line of code:\n    def add_host(self, host_data):\n        self.host_data = host_data\n        self.host_data = host_data\nNext line of code:\n   ", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "                Intent intent = new Intent(Intent.ACTION_VIEW, ConfirmDialog.class);\n                intent.putExtra(\"uri\", uri);\n                startActivity(intent);\n                startActivity(intent);\n            }\n        }\n    }\n    }\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    # -- install ()", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = \t// lazy properties are not loaded from cache\n\t\t\t// properties\n\t\t\t// \t{\t\ttable\n\t\t\t//\t\t= entityMetamodel;\t\t// propertyMapping is not cached\n\t\t\t//\t\t// snapshot\n\t\t\t//\t\t//", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        #        '-N', 'y',\n        '-o', log_name,\n        '-e', 'y',\n        '-l','sge_jobnumber',\n        '-l','sge_jobnumber',\n        sge_jobnumber = int(sge_jobnumber\n        'y',\n        '-l', '", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            return View(\"AddEventDelegate( int id = 0 ; // force a new object regardless\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveDelegateExamResult\")]\n        public ActionResult SaveEventDelegate(DelegateViewModel model, int modelId)\n        {\n            return View(\"SaveDelegateExamResult\")]  \n", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                        var circle = (Circle) obj;\n                        return string.Format(\"({0} {0} {1} {2} {3} {3}\", circle.Position, circle.Radius, circle.Width, circle.Color, circle.Fill, circle.Fill);\n                    }\n                    if (obj is Vector2)\n                    {\n                       ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "                elif res['error_code'] == \"404\":\n                    self.fail(_(\"Couldn't retrieve download url\")\n                else:\n                    self.error(_(\"Unknown server response\"))\n            if \"error\" in res:\n                self.fail(_(\"Couldn't retrieve download link\"))\n            else:\n                self.fail(_(\"Couldn't retrieve link\"))\n        if", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t// If no path was found, we're done:\n\t\t\t// If we found a path, we're done.\n\t\t\t// If we're not at the backup location, we're done.\n\t\t\t// If we're at the backup location, we're done.\n\t\t\t// If we're at", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                       self.logger.error(\"service restart failed\")\n                       return False\n                    return False\n                    return False\n                else:\n                    self.logger.error(\"which_dhcp = \" + \"manage_isc\")\n                    self.logger(\"dhcp.re = \" + \"dhcp = \" + \"dhcp = \" + \"dhcp = \" +", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        return new Event.Builder().setSource(source, source, source, source, source, source, source, source, source, seqNo, seqNo, seqNo, seqNo, seqNo, seqNo, seqNo, seqNo, seqNo, seqNo, seqNo, seqNo, seqNo", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            PpmContext currentContext = context;\n            PpmContext context = context;\n            PpmState state = state;\n            PpmContext upBranch = _foundState.Successor;\n            PpmState[] states = _foundState;\n            PpmContext context = context;\n            PpmContext currentContext =", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "                return new DicomAttributeSL(tag, bb);\nNext line of code:\n:\n            });\n        });\n        /// <summary>\n        /// The Sequence VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", true, true, false, 102", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[0] = tFull[3];\n\t\t\t//sessionValuesArray.Add(t) is not working\n\t\t}\n\t\t//if there is a test is not in the tests\n\t\t//if there is a test in the tests in sessions\n\t\t//if", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        o = self.file(b'abcdefghij')\n        insert_bytes = 4, 4)\n        self.failUnlessEqual(cdata.ulonglong_le, b'abcdefghij')\n    def test_smaller_than_file_at_end(self):\n        o = self.file(b'abcdefghij')\n        self.read(b)", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "    </td>\n    <td><?cs var:sdk.win64_bundle_bytes?> bytes</td>\n    <td><?cs var:Next line of code:\n    </a>\n    </td>\n    <td><?cs /if:sdk.win64_bundle_download?>\n    </td>\n  </td>\n ", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    plt.plot(np.arange(len(cr['combined'][app][app][app][app][app][VC]['durations'])),\n              len(cr['runs']), cr['combined'][app][test]['stats'][stat], 'durations'],\n              color='b')\n    plt.plot(np.arange(len(cr['runs'][app", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "    def test_nonRoot\n    def test_GID(self):\n        \"\"\"\n        Check UID/G\n       Next line of code: L{util.FancyEqMixin}\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        L{util.FancyEqMixin}\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        self.assertTrue\n        def test_currently", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\nNext line of code:\n:\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow();\nNext line of code:\n:\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow();\nNext line of", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[0]\n  if (numpy.abs(winner_inferenceResult - winner) >  if (numpy.abs(winner_inferenceResult - winner > 1e-4).any():\n    failures += \"Inference", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public boolean isOhmArray(Accessor accessor) {\n        return true);\n    }\n    @HOSTED_ONLY\n    public boolean is", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "            if (relativePath == null || relativePath.Length == \"\") {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(Parent.FullProjectDirectory, \n                Name, relativePath);\n            if (assemblyFile = null;\n            return assemblyFile;\n        }\n    }\n}\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\"\"\"\nUtilities\n\"\"\"\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        i20 = i18 + i16 - 1 + i15 - 1 * paramInt8 + paramInt23;\n        i20 = i18 + i16 - 1 + i16 - 1 + i15 - 1 + i16 - 1 + i16 - 1 + i15", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\tpublic State GetStateByName( State source;\n\t\t{\n\t\t\treturn source;\n\t\t}\n\t\t}\n\t}\n\t\t{\n\t\t\t{\n\t\t\t\t{\n\t\t\t\t}\n\t\t}\n\t\t\treturn source;\n\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                    CollisionObjects = new[] { CollisionObjects = new[] { CollisionObjectTypes.ChampionName = \"lucianrmissel\",\n                    Slot = 0,\n                    Type = SkillShotTypes.SkillShotMissileLine,\n                    Delay = 250,\n                    Range = 0,\n                    Range = 140", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getEmfUser()).thenReturn(new DefinitionImportServiceStub(definitionImportService, labelServiceStub));\n\t\t// All validation will be valid unless re-stubbed\n\t\tmodelImportServiceStub = new ModelImportServiceStub(modelImportService);\n\t\t// All validation will be valid unless re", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        proc = subprocess.Popen(\n            ['/bin/doesnotexist','something', 'a', 'b'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_fds=True)\n        self.assertTrue(\n            os.path.exists('/bin/subprocess')\n    @testlib.with_context\n   ", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t// start the AddInTree.LoadAddInTree() and AddInTree.LoadAddInTree() methods\n\t\t\t// and AddInTree.BuildItems<ICommand>(\"/Workspace/Autostart\", null, false)\n\t\t\t// and AddInTree.BuildItems(\"/Workspace/Autostart\", null", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//call once it is a constraint of a ConstraintCollection\n\t\t//call once it can not be removed from the collection\n\t\t//once it has been added to the collection\n\t\t//it can not be set to null, null, unique, once it has been added to the collection\n", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.retranslateUi(Dialog)\n        self.settings_ui()\n        self.settings_ui_groupbox.setWindowLayout_1 = QtWidgets.QLabel(self.settings_kernels_groupbox)\n        self.settings_kernels_groupBox = QtWidgets.QGroupBox(Dialog)\n        self.settings_kernels_groupBox = QtWidgets.QGroupBox(Dialog)\n        self.settings_planar", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                return false;\n            }\n            mStationId = wxs.getString( result[  Next line of code:\n * FlightIntel for Pilots\n *\n * Copyright 2012 Nadeem Hasan <nhasan@nadmm.com>\n *\n * This program is free software: you can redistribute it under the\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring continents = \"from Continent\";\n\t\t\t\tint results = s.CreateQuery( s.CreateQuery( continents).List().Count;\n\t\t\t\tQueryStatistics continentStats = s.CreateQueryStatistics( continents).List().Count;\n\t\t\t\tQueryStatistics stats.GetQueryStatistics( continents).List().Count;\n\t\t\t\tQueryStatistics sqlStats = stats", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "                uiByteValue = (uint)0x0;\n                uiByteValue = (uint)0x0;\n                uiByteValue = (uint)0x0;\n                uiByteValue = (uint)0x0;\n                uiByteValue = (uint)0x0;\n                uiByteValue", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 0;\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n}", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "            return new CeylonParseController() {\n                @Override\n                public void reconcileContentAssistMessage() {\n                    return new CeylonParseController() {\n                    return new CeylonParseController() {\n                        @Override\n                        public void getSettings() {\n                            CeylonParseController controller = \n", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "        self.aspect = Object3DAspect(self)\n        self.drawingModeWidget.setSupportedModes(1)\n        self.aspect = Object3DPrivateInterface(self)\n        self.aspect = Object3DPrivateInterface(self)\n        self.aspect = Object3DPrivateInterface(self)\n        self.aspect = Object3DPrivateInterface", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile, m_Object, m_Stack, m_List, m_Page, m_Page ) );\n\t\t\t\t\t}\n\t\t\t\t\tshouldSet = false;\n\t\t\t\t\tshouldSet = true", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n                     if (value = null) {\n                     if (value!= null) {\nNext line of code:\n:\n:\n:\n:\n:\n                     if (", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\tif (k<maxChangesRecorded) {\n\t\t\t\t\t\tsb.append(\"\"+i+\"\"+j+\" \\t\"+min[i][i+\" \\t\"+i!=j) {\n\t\t/*.................................................................................................................*/\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines in esDocumentOrderSale in esDocumentOrderSale.configs.ContainsKey(APIv1EndpointResponseESD<ESDocumentOrderSale>.ESD_CONFIG_ORDERS_WITH_UNPRICED_LINE) {\n                            //get the index of the index", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic ClientOperationCollection ClientFaultContractInfos {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic ClientOperationCollection ClientFaultContractInfos {\n\t\t", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        expect(mockDatabase = SecurityManagerImpl.MAX_GROUP_ID);\n        replay(mockSecurityManager, mockSecurityManager, mockDatabase, mockCurrentSubject);\n        SimpleACLPermission mockSecurityManager = new SimpleACLPermission(mockSecurityManager);\n        final Database mockGroup = mockSecurityManager;\n        final Subject mockCurrentSubject = EasyMock", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v / viewport.ToVector2 ().ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport)\n\t\t{\n\t\t\treturn v / viewport.ToVector2 (v);\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint(XDRStruct):\n    __slots = ['key', 'value','stats']\n    def __init(self, vlan=None, mac_hi=None, mac_lo=None):\n        self.vlan = endpoint_key()\n        self.mac_hi = mac_lo\n    @classmethod\n    def pack(self, obj):\n       ", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t//Console.WriteLine(\"disconnecting client \" + i);\n\t\t\t\t\t//msg += getDeviceStatusAll();\n\t\t\t\t\t//SendToClientList.AddToClientList();\n\t\t\t\t\t//msg += getDeviceStatusAll();\n\t\t\t\t\t//SendToClient(msg, m_clientCount);\n\t\t\t\t\t//Console.WriteLine(\"d", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\nNext line of code:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  if is_method:\n    print'   object, method);'\n  else:\n    print'   callback;'\n  if exec_count > 0:\n    print'   %s%s' % (exec_type_str, ') {'\n  else:\n      print'   %s%s' % (exec_type_str", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    response = HttpResponse(mimetype='text/plain\n    \"\"\"\n    response = HttpResponse(mimetype='application/json')\n    response = HttpResponse(mimetype='application/json'\n    response['Content-Disposition']", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                        new VarNode(\"lit), new VarNode(\"lit\"), new VarNode(\"lit\"), new ConstantNode(mikeIV), new ConstantNode(mikeIV), new ConstantNode(relevanceIV), new VarNode(\"lit\"), new VarNode(\"lit), new ConstantNode(relevanceIV), new VarNode(\"lit", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        if \"contact_id\" in self.object:\n            if not self.object.is_active:\n                if (self.object.is_active and not self.request.user.is_superuser):\n                    raise Problem(_(\"You can not deactivate a superuser if you are not a superuser.\")\n                if not self.object.save()\n                messages.success(self.request", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of objects that contains the referenced assembly. This is non-empty if the referenced assembly is strongly named.\n    /// </summary>\n    public IEnumerable<ICustomAttribute> ResolvedAssemblyReference> PublicKey {\n", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            var w = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var z =", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[(left + 1 + left + 1) / 2]};\n\t\t} else if (sortedNumbers[(right + 1) / 2] == 0) {\n\t\t\treturn new Apcomplex[] {sortedNumbers[(left + 1) / ", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "                if reference_set_map[v]!= -1:\n                    sample_count[reference\n                if reference_set_map[v]!= -1:\n                    sample_count[reference_set_map[v]] += 1\n                v = parent[v] = parent[v] = edge.parent\n                if reference_set_map[v]!= -", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        for key, mapping_json = self.items, self.ocean_index, csv_name:\n        for key in mapping_json:\n            if 'properties' in self.config['roles:\n            if 'perceval_backend = self.connectors[self.connector][1](perceval_backend)\n            if 'perceval_backend", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value\n\t\t\t\t\t\t\t\t\t\t{\nNext line of code:\n:\n\t\t\t\t\t\t\t\t\t\tif (orderManager.Lobby\nNext line of code:\n:\n\t\t\t\t\t\t\t\t\t\tif (orderManager.Lobby\nNext line of code:\n:\n\t\t\t\t\t\t\t\t\t\tif (orderManager.LobbyInfo\nNext line of code:\n:\n\t\t\t\t\t\t\t\t\t\tif (orderManager.L", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        return frame_header + self.data + padding_bytes + padding_bytes + padding_bytes\nNext line of code:\n:\nclass Head of DataFrame = b'',\n    \"\"\"\n    0                   1                   2                   2                   2\n    0 1 2 2 2 3 4", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            if (cluster.BoundaryCurve == null) {\n                cluster.BoundaryCurve = cluster.BoundaryCurve;\n            }\n            if (cluster.BoundaryCurve == null)\n                cluster.BoundaryCurve = cluster.BoundaryCurve;\n            if (cluster.BoundaryCurve == null)\n                cluster.BoundaryCurve = cluster.BoundingBox", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeCosine = (double)(0.0) = (double)(0.0)? m_maxSlopeRadians;\nm_maxSlopeCosine = (double (m_maxSlopeRadians = (double)(0.0) * (double)(0.0) * dtMoving)", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        if (initializers.size() > 0) {\n            ExpressionTree first = initializers.get(0);\n            if (canBeLeaked(first) && first.getKind() == Kind.THROW) {\n                checker.report(Result.failure(\"unique.leaked\"), first);\n            }\n        }\n        return super.visitSuper", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\nNext line", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute!= null)\n\t\t\t\t\t// if a return node was specified\n\t\t\t\t\t// was found\n\t\t\t\t// if a return node was specified\n\t\t\t\t// was found\n\t\t\t\t// if a return node was specified\n\t\t\t\t// was found\n\t\t\t\t// if a return node was", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t}\n\t\t[Test]\n\t\t[Category (\"NotWorking]\n\t\tpublic void SizeTest\n\t\t{\n\t\t\tTrackBar myTrackBar myTrackBar = new TrackBar()\n\t\t\t{\n\t\t\t\tmyTrackBar myTrackBar.Width = 200\n\t\t\t\tmyTrackBar.Height = 250\n\t\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tInterfaceType interfaceType interfaceType = new InterfaceType(\"\");\nNext line of code:\n:\n\t\t\t// FQN, classType).thenReturn(true);\n\t\t\t// must be write line\n\t\t\t// must be write lock\n\t\t\t// must be write lock\n\t\t\t// must be read lock\n\t\t", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\t// if (this.isImplicit!= other.exceptionThrown)\n\t\t\treturn false;\n\t\t// return false;\n\t\t// if (this.isAbstractionActive()!= other.exceptionThrown)\n\t\t\treturn false;\n\t\t// if (this.isImplicit = other.exception\n\t\t// if (this.isAbstraction", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "            int min2 = (narrowR + min2);\n            int max1 = wideRExtent[pruned something for (end > max2? end : end);\n            int max2 = (end > wideRExtent[pruned for (end > narrowR = (end > max2", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "               'src = command.get('out of code given below. \n", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.ThingsChanged += new DbgThread_ThingsChanged;\n\t\t\tDbgLanguageService_LanguageChanged += DbgLanguageService_LanguageChanged;\n\t\t\tThingsChanged += DbgLanguageService_LanguageChanged;\n\t\t\tDbgLanguageService_LanguageChanged += DbgLanguageService_LanguageChanged;\n\t\t", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\t<color name=\"color\" color=\"0.5 0.5 0.5\" />\n\t\t<color name name=\"color name=\"color\" color=\"0.5 0.5 0.5\" />\n\t\t</color>\n\t\t*/\n\t\twriter.endTag( null", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( (aThat instanceof Contact) ) {\n\t\t\tContact that = (Contact.class.cast a that;\n\t\t}\n\t\t/**\n\t * Return the value associated with the value associated with the column: id.\n\t * @return A java.util.UUID object (this.id)\n\t * @return true/false", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t    if (reject_wall+reject_jump) == 0:\n\t      body_offset = 0\n\t    else:\n\t      total_rej += 1\n\t  if n % n_save == 0:\n\t    body_offset = 0\n\t    for i, ID in enumerate(structures_ID):\n\t      name = output_name", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        if not isinstance(cdata[0] is not None and\n        # We don't need to not T.TensorConstant and\n        # not copy_stacktrace(node.owner and not\n        # TODO: The optimization needs ShapeOpt and fgraph.shape_feature\n        if not shape_of is None:\n            if not", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "from django import forms\nfrom django.forms import forms import forms. \nfrom django.forms import ValidationError\nfrom django.contrib.auth.models import forms import forms. \nfrom django.contrib.auth.models import Group\nfrom community.models import community = forms. \nfrom community.models import SystersUser\nfrom community. \nfrom community.models import", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                    return query = QueryEvents\n                    return query\n                else:\n                    return fn(*event\n                    return query\n        \"\"\"\n    def _listen(self, query, event, query, query, **kw):\n        \"\"\"Receive a :class:`. This event\n        :param query: the :class:`.", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "            show = etree.Element('show')\n            show.set('sources', ';'.format(self.show_tag_list)\n            xml_object = XModule.process_xml.from(STUDENT_VIEW).content for child in self.descriptor.get_children())\n            children.append(self.show_tag_list)\n            for child in self.get_display_items():\n            html =", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "                          for change = self._get_raw_data(self.data)\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class!= null && (Method == null || Constructor == null || field == null || field == null))\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueTypeForMapXml(context.ClassLoader).LoadClassByDottedName(Class).GetFieldWrapper(context.ClassLoader, context.ClassLoader.LoadClassByDotted", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t// \n\t\t\t// objYText\n\t\t\t// \n\t\t\tthis.objNameLabel.Location = new System.Drawing(Next line of code:\n\t\t\t// \n\t\t\t// objYLabel\n\t\t\t// \n\t\t\tthis.objNameLabel.Location = new", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.get(\"mail/syncmail.5\")\n        self.failUnless(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcsmail.1\",\n        \"buildbot/changes/freshcvs.2\",\n        \"buildbot/", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n        }\n        for (final Map.Entry<String, String> datum : csvData : termData.asMap().entrySet()) {\n            if (!datum.getValue().isEmpty() : {\n                termData.set(datum.getKey(), datum", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\t// TODO: Please complete the code given below. \n\t\t/**\n * This class was created by <Vazkii>. It's part of the class was created by <Vazkii>. It's part of the class was created by <Vazkii>. It's part of the class", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "            intrinsicCohesion = component.getRepresentativity(c);\n        }\n        return this.getBelongingStrength;\n    }\n        return this.getRepresentativity(c);\n    }\n    private void getRepresentativity(Community(affectedC) {\n        //OPTIMISATION\n        this.memorizedcohesion.remove(", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                            if v1:\n                                are_equal = are_equal = are_equal = are_equal = are_equal = are_equal and are_equal = are_equal and (str(docid), '', 'data_key', new_value)", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t//computerMgmConsole.Text = \"Computer\";\n\t\t\t//ComputerMgmComputerIP = new System.Windows.Forms.OpenFileDialog();\n\t\t\t//saveHostFileOk = new System.ComponentModel.CancelEventHandler(this.CPC_Closing);\n\t\t\t//computerMgmt = new System.Windows.Forms.Splitter();\n\t\t\t//", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date exceptionDate : exceptionDates) {\n      exDateList.add(new Date(event.occurrence.ical4JDate());\n    }\n    return new ExDateList;\n  }\n  /**\n   * Gets the iCal4J period with the specified date.\n   * @param event the event", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceEventName = SourceEventName;\n\t\tsourceEventBinding.TargetEventName = sourceEvent = SourceEventName;\n\t\tsourceEventBinding.Bind();\n\t}\n\t}\n\t}\n\t}\n\t}\n\t\tsourceEventBinding.hideFlags = HideFlags.HideFlags.HideAndDontSave | HideFlags.HideInInspector", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "            IForwardingStaticRouteConfig spanManager = (GlobalConstants.DEFAULT.toString()? containerName, this);\n            if (DaylightWebUtil.getContainerPrivilege(userName, containerName, this)!= Privilege.SPAN) {\n            try {\n                resultBean = new StatusJsonBean();\n                try {\n                    IS", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "super(path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images() {}\n\t\tpublic final static final class Alert_0 = new ImageHelper(1, ims.framework.utils.ImagePath.getStreamResources(), 16, 16);\n\t\tpublic static final ims.framework.utils.Image[] getImages()\n\t\t{\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n    }\n    public int randomChoice(int randomChoice(int maximum) {\n        List l = get(propertyKey, double percent) {\n        return getRandomNumber(l, new Double(l.size() * percent));\n    }\n    public Object getRandom(String propertyKey) {\n        List l = get(propertyKey", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "                    la = LinkAnnotation.objects.get(subject=man_obj)\n                    new_link_annotated_proj=LinkEntity.objects.get(label=man_obj.label)\n                    new_link_ents = LinkEntity.objects\\\n                                  .filter(label=man_obj.project_uuid=project_uuid,\n                                        data_type='xsd:double')[:1')\n", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"         .shrinktofit= \")\n               .Append( _shrink_to_fit.IsShortValue(field_3_cell_options, value));\n            )\n           .Append(\"         .shrinktofit= \")\n               .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n           .", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\tvalue = (bytes [posn + 0x80; ch < 0x9FA0x2010 && ch <= 0xFFA0) {\nNext + 0x9FA5) {\n\t\t\t\t// half-width kana\n\t\t\t\tvalue =", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    if   ~off1(4) ~off2(4) ~off1(4) ~off1(4) a(4) {39(4) ~off1(6) b(4) a(4) {d(79} ]\", mnemonic=\"LD_A\", mode=\"", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.openStream();\n\t\t\treturn loadProperties(stream, close);\n\t\t}\n\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new JRException(\"Error loading properties from \" + location, e);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif (stream!= null)\n\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (\"BA\");\n\t\t\tSecurityIdentifier everyoneSid = new SecurityIdentifier (\"WD\");\n\t\t\tCommonSecurityDescriptor csd; DiscretionaryAcl dacl; CommonAce ace;\n\t\t\tcsd = new Common", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "                else:\n                    error = \"response status error\"\n        if error:\n            print_w(\"[fingerprint] Lookup failed: \" + error\")\n        # emit progress\n        self.__idle(self.__progress_cb, float(len(self.__queue.qsize() / len(self.__queue))\n        self.__results))\n        self", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        foreach (string additionalRpc in CloudServerRegionNames)\n        {\n            if (CloudServerRegionNames)\n        {\n            if (string.IsNullOrEmpty(PhotonNetwork.CloudHelpOf\n        if (photonSetupState == null)\n        {\n            if (photonSetupState = PhotonNetwork.RpcList;\n        }\n", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        full_msg = rootLayout.findViewById(R.", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            #            if time_reversal:\nNext line of code:\n            #                return psit_G = np.dot(op_cc, psit_G)\nNext line of code:\n            #            else:\nNext line of code:\n            #                return psit_G = np.dot(op_cc, psit_G\n           ", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest utkastRequest = buildRequest(\"luse\");\n        utkastRequest.setNewFornamn(Strings.repeat(\"a\", 255\"));\n        CreateNewDraftRequest() utkastRequest = buildRequest(intygsCaptor.forUtkastF", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILBasicBlock child in block.GetSelfAndChildrenRecursive<ILNode>(node) {\n\t\t\t\t\t// TODO: ILNode\n\t\t\t\t}\n\t\t\t\t// TODO: Repeated at the code given below. \n\t\t\t\t// Types are needed for the ternary operator de\n\t\t\t\t// Best effort", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t#if UNITY_EDITOR\n\t\tif (IsRagdoll == true) {\n\t\t\tDebug.Log (\"Already a ragdoll\");\n\t\t}\n\t}\n\t#endif\n\t#endif\n\t#endif\n\t\t#if\n\t\tif (IsRagdoll == false) {\n\t\t}\n\t\t#endif\n\t\t}\n", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "    def __init__(self, config={}):\n        super().__init__(config)\n    def fix_region_dim(self, regions):\n        super().__init__(config)\n    def fix_region_id(self):\n        super().__init__(config)\nclass StratumLayer(GeoLayer):\n    def __init__(super().__init__(", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "            out[outOff + 3] = (byte) (byte) (num & 0xff000000) + ((in[in[in[in[in[inOff + 0] & 0xff0000) + 1] & 0xff0000) + inOff + 1] & ", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            super( source, new Predicate<PatternMatch>() {\n                public boolean filter( PatternNode start,\n                Node startNode, Map<String, PatternNode> objectVariables,\n                PatternNode... optional nodes that form sub-patterns connected to this pattern.\n            * @param start the {@link PatternNode} to start", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "        elif key == 'TAUX:\n        #    slice_json['value'] = transform_values_holder_xml_json_to_json_to_json_to_json\n        elif key in ('tail', 'text'):\n            slice_json['valeur'] = transform_values_holder_xml_json_to_json_to_json_to_json_to_json_to_json(value[", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            if (ClientSettings.ICON_CLOSE_FRAME_SELECTED!=null) {\n              btn.setIcon(new ImageIcon(ClientSettings.ICON_SELECTED));\n            }\n            if (ClientSettings.ICON_ENABLE_FRAME!=null)\n              btn.setIcon(new ImageIcon(ClientSettings.ICON_ENABLE_FRAME));\n          }\n        }\n        public void mouseExitedFrameToClose =", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    move(out, (leftToRight? 0 : 0, dpi), properties.getLaserC\n    for (int toolDiameterInPx = (int) = (int) Util.mm2px(prop.getToolDiameter(), properties.getToolDiameter(), properties.getLaser3d\n   ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    ContentValues cv = new ContentValues();\n                    cv.put(Db.Table1.ID_GROUP_NAME, newId);\n                    db.update(Db.Table1.TABLE_NAME, cv, Db.Table1.TABLE_NAME, Db.Table1.TABLE_NAME, newId, newId, newId, newId);\n                    //Update budget items\n                    ContentValues cv", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "                }\n            }\n        }\n        public void Dispose()\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n        #endregion\n        #endregion\n    }\n    internal sealed class UnmanagedPointer : IDisposable : IDisposable\n    {\n        private IntPtr m_ptr;\n        internal UnmanagedMethod m_meth;\n       ", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/accounts/login/'\nLOGIN_REDIRECT_URL = '/accounts/login/'\nLOGIN_URL = '/accounts/login/'\nLOGIN_REDIRECT_URL = '/accounts/login/'\nLOGIN_REDIRECT_URL = '/accounts/login/'\nLOGIN_REDIRECT_URL = '/accounts/login/'\nLOGIN_REDIRECT_URL = '/accounts/login/'\nLOGIN_REDIRECT_URL = '/accounts/login/'\nLOGIN", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t}\n\t\t}\n\t\tpublic void Cancelled(Actor BuildUnit(self.Owner.PlayerActor, self.World.Map.Rules.Actors[Info.ReadyAudio, Info.QueuedAudio, self.World.Map.Rule, self.World.AllowDevCommands, self.World.Map.Rules.Actors[order.TargetString, self", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "        infoText += \" file\" if numberOfFiles>0 else \" files\"\n        infoText +=  infoText +=  str(numberOfFiles) \n        infoText += \" file\" if isdir(self.currentDir + \"/\" + self.clickedFileOrDir]) \n        text() if self.currentDir + \"/\" +", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = code = code.replace('%', '%%')\n        # replace all the variables by the variables by the pattern @\n        # in the code\n        # TODO waf 4.0\n        for x in re_m4.findall(re_m4.findall(x,'seq'):\n        bld(features='", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "        result = self._planningExecutorServer.get_result()\n        if result.success:\n            self._as.set_succeeded(self._knowledgeParserClient, \"good job\")\n        else:\n            self._as.set_aborted(self._knowledgeParserClient, \"bad job\")\n        return result\n        if self._as.is", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent - 2 ] + chemical[ 0 ][ idx + 1 ] - 4 * chemical[ 0 ][ idx + 1 ] + chemical[ 0 ][ idx + 1 ] + 2 * chemical[ 0 ][ idx + ", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                columnTypes.add(typeManager.nextTimestampFormatFactory().get(pattern, timestampFormatFactory, timestampFormatFactory, timestampFormatFactory).get(dateLocale, timestampFormatFactory, timestampFormatFactory, dateLocale, timestampLocale, timestamp, timestamp, timestamp, timestamp, timestamp, timestamp, timestamp, timestamp, timestamp, timestamp,", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter;\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\tParam = qs.NewParameter;\n\t\t\tParam", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object GetPropertyValue(object component, ISqlType[] SqlTypes\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t\t{\n\t\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t#endregion\n\t}\n\t[Test]\n\t\tpublic class MyEnumString", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        self.config_ntp_auth_keyid = 'NTP_AUTH_KEYID_CONFIG\"\n        self.config_ntp_auth_enable = 'NTP_AUTH_ENABLE'\n        self.check_response(ret_xml, \"NTP_AUTH_KEYID_CONFIG\")\n        self.check_response(ret_xml, \"NTP_AUTH_KEYID_CONFIG\")\n        self.check", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            self.store.update\n            self.store.update(self.store.get_item(test_course,  # 1), self.store.", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        digest.update((byte) (TEXT_CODE &  updateWith(char) (TEXT_CODE & 0xff));\n        updateWithCharBuf();\n        addToCharBuf(s);\n        updateWithCharBuf();\n    }\n    public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "    return a = unpacked = unpack(dict = AE.AECreateList('', 0, desc.data)[4:4+72)\n    if t == 'null', desc.AEType = Carbon.File.FSRef(rawdata = desc.AE\n    if t = AE.AEType = AE.AE", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            string actualType = ActionSamples.FirstOrDefault(a);\n            foreach (var actualType = GetAllActionSamples(controllerName, actionName, parameterNames, sampleDirection, out sampleDirection, out sampleDirection, out sampleDirection, out formatters, out formatters;", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "                value = entry.get_active_text()\n            if event.keyval == gtk.keysyms.F3:\n                if value = entry.editable = entry.get_text()\n                value = entry.get_text()\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            if value!= cell.get_text", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationProperties);\n            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n            // Ensure the new properties value is set on the bean is now set on the bean\n            beanProperties.addPropertyValue", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            for line in f:\n                if line.strip():\n                    break\n                else:\n                else:\n                    raise ValueError('File %s contains blank lines' % path' % path)\n        except ValueError, e:\n            msg = 'Error: %s\" % e\n        finally:\n            f.close()\n    if", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "            [In, MarshalAs(UnmanagedType.LPStruct)] object] object pUnk,\n            [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState\n            );\n        [PreserveSig]\n        int SetEventParamUnk,\n            [In, MarshalAs(UnmanagedType.IUnknown)] object p1\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "    organizationService.addPrincipalToPrincipal( directedAclKeys );\n        return null;\n    }\n    @Timed\n    @Override\n    @RequestMapping(\n            path = UPDATE,\n            method = RequestMethod.GET )\n    public Void updatePrincipal( @RequestBody Principal principal ) {\n        AclKey aclKey aclKey =", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        for child in element.findall('.'):\n            if not self.verify_element(child.tag in self.verify_element(child):\n            return False\n        return True\n        return True\n        # Verify that all expected elements were found.\n        if self.expected_data in self.expected_data:\n            attribs = self.expected_data['attributes[self", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "    elif node = newOwnerDocument = node.ownerDocument, clone.specified = node.specified = clone.specified = node.namespaceURI, localName = node.namespaceURI, node = clone.nodeValue = node.data\n    clone = newOwnerDocument.implementation = clone = clone = Node, Node, Node, Node", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t\t@Override\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doTest();\n\t}\n\t/**\n\t*\n\t* @validate E OCL\n\t* @return\n\t*", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.readBlobTlv(TlvTypeCodes.SignatureDigest, TlvTypeCodes.SignatureMetaTlv, decoder) == TlvTypeCodes.Signature) {\n\t\t\t}\n\t\t\t// If you are not decoding in TlvTypeCodes.Signature, you can use this method.\n\t\t\t", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for(int i = 0; i < players.size(); i++)\n        {\n            myPlayer.updateWeapon(i, myWeapons[i]);\n        }\n        }\n        for(int i = 0; i < players.size(); i++){\n            myPlayer.updateWeapon(i, myWeapons[i]);\n        }\n        }\n        for", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setColor( colorValue = Integer.parseInt( m_colorSelection.getValue( m_colorSelection\n           .getGame().getRegistrationByColor( colorValue ) );\n        m_colorSelection.getGame() ) );\n        action.setUnit( color );\n        action.setUnit( registration.getTeam( GameEngine.model().getGame", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            msgs = [e[\"message\"] for e in err[\"errors]]\n            raise RuntimeError(\", \".join(msgs))\n", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrderNext line of code:\n:\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response = response = (Order format) { DryRunMergedOrder = true, out _dryRunMergedOrder;\n\t\t\t}\n\t\t\t// Update merged order preview components\n\t\t\tif (_dryRunMerged", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "    if len(reaction.metabolites) > 1:\n        raise ValueError(\"reaction: \"Provide functions for phenotype phase plane analysis.\")\n    else:\n    if TYPE_CHECKING:\n        from cobra import Model, Reaction\n    from cobra.flux_analysis import production_envelope\n    from cobra import Model", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(\n            store__pootle_path__startswith=pootle_path,\n            store__user__target__in=TMServer.get_for_path(pootle_path, user)\n           .filter(\n                pootle_path__startswith=pootle_path,\n                store__user=self", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "                ('created', models.CharField(max=Next line of code:\n                ('created', models.CharField(max=Next line of code:\n                ('created', models.CharField(max=Next line of key=Next line of code:\n                ('created', models.CharField(max=Next line of code:\n                ('created', models.CharField(max", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                    self.pox_switch.send_packet = poxmac = pox.core\n                    self.logger.debug(\"Got POX switch {} processing packet: {}\".format(self.name, str(poxmsg))\n                else:\n                self.pox_switch.send_packet(self.pox_switch, self.poxpkt, self.pox_switch.send", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (m_RecentItems.size() == m_RecentItems.size()) {\n      m_RecentItemListeners.add(item);\n      notifyRecentItemListenersOfSelect(item);\n    }\n  }\n  }\n  }\n  /**\n   * Removes the item from the internal list.\n   * \n   * @param item\tthe", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            if (target is ShadowMaster)\n                return false;\n            if (target is ShadowMaster target) \n            {\n                double houseCheck = inHouseCheck;\n                if (src.AccessLevel >= trg.AccessLevel && (ss >= 0 || houseCheck) &&!CanDetect(src, trg))\n                return false", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "        if (halfTradePeriodDate == null && takeOfferDate!= null)\nNext line of code:\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + offer.getPaymentMethod().getMaxTradePeriod() / 2);\n        }\n        return halfTradePeriodDate;\n    }\n    public boolean", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.next);\n\t\t\telse if (a == LeadingAny(p.next) && a!= null) a = LeadingAny(p.next;\n\t\t}\n\t\t}\n\t}\n\t}\n\t\n\t/* Computes the first p is the set of all terminals which are not weak", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4 = (buff[4] << 8 | (buff[5) >> 4) >> 0x01)  >> 0x00;\nNext line of code:\n\t\t\t// it appears the joystick values are only 6 bits\n\t\t\t// so we need to divide by", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\t//EOH\n\t\t\t//#############################################################################\n//#                                                                           #\n//#  This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)#\n//#  Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.#\n", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( Email.SendEmail( Email.CrashAddresses );\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn String.Format( \"{0:yyyy}-{0", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t\tusing (var session = OpenSession())\n\t\t\t{\n\t\t\t\t\t.List();\n\t\t\t\t}\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (k += 3; i < N_INDEXES; i++, k += 1)\n            {\n                _indx2Units[i] = k &  for (int i = 0; i < N2; i++)\n            {\n            {\n            {\n                _indx2Units[i] = k", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "        add_view = navigate_to(self.create_view(self, 'AddComputeChargebackView', 'AddComputeChargebackView')\n        add_view = AddComputeChargebackView(AddComputeChargebackView, 'Storage Chargeback Rates'\n        add_view = AddStorageChargebackView(AddStorageChargebackView(Add", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\t//if ( useShadowBufferManager.Instance == null )\n\t\t\t//throw new AxiomException( \"Reading hardware buffer is not supported.\" );\n\t\t\t//if ( useShadowBufferManager.Instance == null )\n\t\t\t//throw new AxiomException( \"Reading hardware buffer is not supported.\" );\n", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "from enigma import eDVBResourceManager import eDVBScanSetup = ConfigSelection(default = self.scan_nimmanager.getSatfinder_scan = ConfigSelection(default = \"predefined_transponders\", satfinder_system = eDVBFrontendParametersDVB-T2, satfinder_scan_nim_list = eD", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "            else {\n                tcpAcceptFilters.add(TcpAddress.TcpAddress.TCPAcceptFilters.add(filterStr);\n            }\n            }\n            }\n            return;\n        case ZMQ.ZMQ_LB:\n            backlog:\n            //  ZMQ.ZMQ.ZMQ.ZMQ.ZMQ.ZMQ.ZMQ.ZMQ.ZMQ", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                // Copy the (subsequent) data to the output stream\n                fout.WriteImageStream dataStream = GetPdfReader (PdfName.CFM)\n                    if (PdfWriter (PdfName.CFM)\n                }\n                for (int i = PRIndic) {\n                    int n = 0;\n                    int", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "        s = lowlevel.Message('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_path(), types.ObjectPath('/a/b/c'))\n        self.assertEqual(s.get_path_debat\n        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "                    except (e2 = self.get_E_2_page().level_one_m_product(\n                    (8, 0)0, (8, 0)) + 0, (8, 0)0, (8, 0)0) + str(massey_out) + \"h4", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Expected \\\":\\\".\", \"optional_int32 123\");\n            AssertParseError(\n                \"1:23: Expected identifier.\",\nNext line of code:\n                \"1:18: Couldn't parse AngleBrackets: Number must be positive: -1\",\n                \"optional_uint32:", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t}\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void putAll(Map putOperation( CollectionPersister persister, int anticipatedSize ) {\n\t\tfinal Map snapshotMap = (Map) snapshot );\n\t\treturn (Map) snapshot );\n\t}\n\t@Override\n\t@SuppressWarnings(\"", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// </a>\n\t\t/// <param name=\"auction>\n\t\t/// <param name=\"auction\">", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "        action_message = self.env['ir.actions.act_window'].sudo().read()[0]\n        action_message['previous_attendance_change_date'] = (\n            self.last_attendance_id\n        and (self.last_attendance_id\n        and self.last_attendance_id.check_out\n        or self.last_attendance_id.check", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\t// WDEV-3953\n\t\t// WDEV-3953\n\t\t// WDEV-3953\n\t\t// WDEV-3953\n\t\t// WDEV-3953\n\t\t// WDEV-3953\n\t\t// WDEV-3953\n\t", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "                c = (ProcessMemoryChunk)lc.ReadToStructure(0, typeof(Point);\n                c = (ProcessMemoryChunk)lc.ReadToStructure(sw, lvc.pszText, lvc.pszText, lvc.cchTextMax);\n                c = (ProcessMemoryChunk)lc.Read();\n                c", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "        tab = maker.make('Terminal', self, profile=profile, cwd=cwd=cwd=cwd)\n        self.terminator.terminator.terminator.add_terminals.append(cwd=cwd)\n        self.terminator.terminator.terminator.terminator.terminator.terminator.termin", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                    toReturn.Add( new StructTypeInfo( nameArrayInfo( typeArraySizeFragments[0], typeArraySizeFragments[1], typeArraySizeFragments[1] ) );\n                    Type innerStructTypeInfos = GetManagedType( typePart, typeArraySizeFragments[0], typeArraySizeF", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "// TypeDefinition.cs\n//\n// Author: TypeDefinition.cs\n//\n\t\t\t\tif (IsValueType)\n\t\t\t\t\treturn true;\n\t\t\t\tif (IsValueType);\n\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// TypeDefinition.cs\n\t\t\t\t// TypeDefinition.cs\n\t\t\t\t// TypeDefinition.cs", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "                return null;\n            }\n            }\n            }\n            //throw new Exception(\"Could not find model: \" + args.Key\", e);\n        }\n        #endregion\n    }\n}\n", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "        self._context = OpenSSL.SSL.SSLContext = OpenSSL.SSL.SSLContext\n        self._reuse(self, self.connection, self.socket.getpeercert(self, self.x509, self.", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\t// Container child hbox3.Gtk.Box+Box+Box+BoxChild\nNext line of code:\n:\n\t\t\tthis.vbox5.Add (this.vbox5);\n\t\t\tthis.vbox5.Add (this.vbox5);\n\t\t\tthis.vbox5.Show ();\n\t\t\tthis.table1 = new global::Gtk", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                headbook.move_page(child, new_num)\n                headbook.set_current_page(child)\n                headbook.set_current_page(child)\n                headbook.show_all()\n                headbook.show_all()\n                headbook.set_current_page(page_num = headbook.getheadbook()\n                key2gmwidg = mainvcc =", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.CTRL + Qt.Key_0),\n    \"Move-Tab-to-right\": QKeySequence(Qt.CTRL + Qt.Key_0),\n    \"Move-up\": QKeySequence(Qt.CTRL + Qt.Key_0),\n    \"Move", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\" + this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", jtaDataSource=\" + this.jtaDataSource + \", nonJtaDataSource=\" + this.nonJtaDataSource + \",", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    IEditorPart editorPart = getEditorPart();\n    if (editorPart instanceof CommonMultiPageEditor)\n    {\n      CommonMultiPageEditor commonEditor = (CommonMultiPageEditor)editorPart);\n      IEditorInput input = commonEditor.getInput();\n      if (input.getEditorPart();\n      IEditorPart editor", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(8, 8);\n\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Windows.Forms.Button();\n\t\t\tthis.butAttach.TabIndex = 8;\n\t\t\tthis.butAttach.Text = \"&Attach\";\n\t\t\tthis.butAttach.Click += new Open", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "        if (sb!= null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n    /**\n     * Returns the marker id for the markerId for the given content.\n     * \n     * @param contentId     the String to convert\n     */\n   ", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t//\t\t\tCheck (\"HMACSHA512-Legacy-RFC4231-TC1\", hmac, data, result);\n\t\t\t//\t\t\tCompare (data, result, data);\n\t\t\t//\t\t\tCompare (result, data, algo.Hash, testName + \"a2\");\n\t\t\t//\t\t", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch (EnumSwitcher.java.lang.String) {\n\t        case option_1:\n\t        case option_2:\n\t            current_sum = 4 + CDRSerializer.alignment(current_align, 4); // int type\n\t            break;\n\t        case option_1:\n\t        case option_2:\n\t            current_sum = ", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "        return null;\n      String javaVersion = java.GetValue(\"JavaVersion\") as String;\n      if (javaVersion = null || javaVersion.Length < 2)\nNext line of code:\n:\n        return null;\n      String jdkHome = java.GetValue(\"JavaHome = javaVersion.Substring(0, 2)", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = l\n                comment = l\n                comment = l\n                comment = l\n                comment = l\n                comment = l\n                comment = l\n                comment = l\n                comment = l\n                comment = l\n                comment = l\n                comment = l\n                comment = l", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "        modifier.vertex_group = BLset.from_json(json=modifier_json['vertex_group')\nNext line of code:\n        modifier.proximity_geometry = BLset.from_json(instance=BLset.from_json(instance=modifier, json=modifier_json['target', use_proxim\n        modifier.proximity_object = BLObject.to_json", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            if(rankCounts = minEmptyPepLenLengLengDels\n            if(0.01);\n            if(rankP = peptideLength);\n            if(rankCounts == null)\n            if(rankPositivesCount = 0;\n            if(rankPospeptideRanks = Lists.newHashMap();\n            for", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "        for (val edge : vertex.getNeighbor()) {\n        neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n    }\n    @Test\n    @DisplayName(\"contains() should return null if the vertex does not exist\")\n    void contains_nonExistentVertex() {\n        vertex.contains(3);\n", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                    self.selected = self.cap[self.choice\n                    self.show_packet(self.selected)\n                    break\n                except Exception as e:\n                    print(self.fatal+\"Check your filtering argument\"+self.blk)\n            except socket.error as se:\n                print(self.fatal+str(se)+\": \"+self.iface+self.blk", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 83);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 0;\n            // \n            // label3\n", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'django.db.models.fields.related.ForeignKey', [], {u'object_name': 'Note','max_length': '32','max_length': '32','max_length': '32','max_length': '32','max_length': '32','max_length':'main.fields.XHTMLField", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "                throw SDOException.typeNotFound(targetNamespace, sDOType);\n            }\n            if (isReturnAllTypes()) {\n                SDOType nextSDOType = new SDOTypesGenerator(aHelperContext.getTypeHelper()).define(targetNamespace, sdoType, sdoType, sdoType, sXSD", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.holiday = self.holidays = self.holidays_validate(cr, uid, ids, ids, context=context)\n        self.holidays_validate_notificate(cr, uid, ids, ids, context=context)\n        return self.write(cr, uid, ids, ids, ids, {'state':'validate','manager_id", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "            set { this.Enabled = value;\n        }\n        }\n        /// <summary>\n        /// Gets the number of rows in the <see cref=\"IBOColSelector\"></see>.</summary>\n        /// <see cref=\"HABANERO_OBJECTIDColumn\"></summary>\n        /// <summary>\n        /// Gets the", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "            return String.Format(\"Mixer Line {0:G: {0} {1} {2} {3} {3} {3} {4} {5} {6} {6} {7} {8} {9} {10} {11} {11}\", \n            this", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tif (value10 = domainObject.getCareContext()!= null && valueObject.getCareContext.getIsRIE() == null) {\nNext line of code:\n:\n\t\t\t{\n\t\t\tif (domainObject.getIsRIE() == null)\n\t\t\t\tdomainObject.setCareContext()!= null && valueObject", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            with cd(self.get_target_dir()):\n                status = call([\"cargo\", \"build\"], env=self.build_env(), verbose=verbose)\n            if status:\n                return status\n            if status:\n                return status\n            if release and dev:\n                print(\"Please specify either --dev or --debug-mozjs.\")\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "Next\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0, 0, n, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "                Stashed.SetStashDiffs(gitStash, gitStash.Name, gitItemStatuses);\n            }\n            StashedSelectedIndexChanged(null, null, null);\n            Stashed.SetStashDiffs(gitStash = Stashes.SelectedItem as GitStash;\n            Stashes.Text = gitItem", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "    assert lattice.cbuffer.get_object(bm0_index)._arealattice == lattice.cbuffer.get_object(bm0_index).out_address\n    assert lattice.cbuffer.get_object(bm0_index)._buffer.cbuffer.get_object(bm0_index) == output_buffer0_index\n    assert lattice.cbuffer.get_object", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (this == o) {\n            return true;\n        }\n        if (o instanceof AuthScope) {\n            return match((AuthScope) o) ==  (this == null)  ? ANY_SCHEME: this.scheme!= ANY_HOST: ANY_HOST: ANY_HOST: ANY_REALM: ANY_REALM", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                        b}, callback, asyncState);\n        }\n        public int a, b}, callback, asyncState) {\n                X509Certificate cert = new XNext line of code given below. \n//  \n//  This file is part of the Microsoft.Web.Services.WebServicesClientProtocol, callback, asyncState);\n        public", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i++;\n\t\t\t\t\t}", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\teType = (ETypedElementImpl) value as ETypedElementImpl).eType;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericTypeImpl) value as ETypedElementImpl).eGenericType = (EGenericTypeImpl) value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "    eai = load_archive_index = load_archive_index = load_archive_index(args)\n    if args.encrypted_archive_index is not in eai:\n        log.msg('Failed to load archive index password')\n        sys.exit(1)\n    new_pass = new_password('Enter the new index password: ')\n    eai", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        self.mosi_bits = self.mosi_bits = self.mosi\n        self.mosi_bits = self.mosi = self.mosi\n        self.mosi_bits = self.mosi_bits\n        self.mosi_bits = self.mosi_bits\n        self.miso = self.miso\n        self.miso", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "          cursor = limit - limit - 200\n          // literal, line 200\n          if (!(eq_s(1, \"e\"))) {\n            break lab1\n          }Next line of code:\n          // literal, line 200\n          if (!(out_grouping_b(g_v, 97, ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                o = cls = handlers.getClassByFingerprint(fingerprint);\n                o = cls.newInstance().newInstance();\n                o = dins.readObject();\n                o = dins.readObject();\n                o = dins.readObject();\n                o = dins.readObject();\n                o = dins.readObject();\n                o =", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                # Is needed because pyopenssl does not return a list of\n                # basic text. pass\n                return result = result\n                return result\n                version and if the pyOpenSSL backend is I (short_name):\n                try:\n                    return self.cert.get_subject_key_usage()\n                except AttributeError:\n                    return", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\t\"\"\" + _slots:\n\t\t\t\t/* We have to emit the signal, so we are in the list of code:\n\t\t\t\t/* We have to emit the signal, so we are in the list of code:\n\t\t\t\t/* We have to emit the list of code:\n\t\t\t\t/* We have to emit", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    # -- The trigger sequence is the trigger sequence of the trigger sequence of the interval_1word\n    # -- The target state is the trigger sequence of the interval_1word\n    # -- The trigger_seq = [ X, [ X, 2 ] ]\n    # -- The trigger_seq = get_trigger", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = la.pos; int col = la.pos; int line = la.line;\n\t\t\twhile (t = 0;\n\t\t\t}\n\t\t\tif (t.kind == 1) {\n\t\t\t\t// Get();\n\t\t\t} else if (la.kind == 6) {\n\t\t\t\t// Get();\n\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "            edi_doc.update({\n                    'product_uom = line['order_line'].sale.order.line'\n            del order_line['product_uom = address_line.pop('price_subtotal', False)\n        return super(sale_order,self).edi_import(cr, uid, edi_document, context=context)\n        # currency for rounding", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS, \"https\");\n\t\tserviceProperties.put(\"org.atmosphere\", \"org.atmosphere.cpr.broadcasterLifeCyclePolicy\", \"IDLE_DESTROY\");\n\t\tserviceProperties", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "                permissions = new ArrayList<>();\n                nameMap.put(nameMap.put(name);\n                permissions, new VirtualUserPermissions(\n                smartStore, this.permissionService.setPermission(this.virtualFolder1NodeRef,\n                this.virtualFolderNode2,\n                this.permissionService.setPermission(this.virtualFolder1NodeRef,\n                this.permissionService.set", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "            for device in devices:\n                assert device is not None\n", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "    device = Device(deviceToken)\n    user = device.newUser.login()\n    data = user.login()\n    print data.response.body\n    print data\n    print data.response.header\n    print data.response.body\n    print data.response.header\n    print data.response.header\n    print data.response.header\n    print data", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "        elif (index_elements[0] == \"Mode:\"):\n            rv['mode'] = index_elements[1]\n        elif (index_elements[0] == \"Mode:\"):\n            rv['mode = index_elements[1] = \"Theoretical\"):\n            rv['mode = np.array = 0\"\n   ", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "            if (Crafter!= null)\n            {\n                ItemID = 0x1011;\n            }\n            else\n            {\n                base.UpdateHue();\n            }\n        }\n        private class Key\n        {\n            public Key\n        {\n            if (Crafter!= null)\n            case 0", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (TunerHdhr hdhrTuner : devices) {\n            System.out.println(\"TunerManager.countTunersHdhr: \" + hdhrTuner.ipAddressTunerManager.skipRegistryForTesting) + \" TunerManager.skipFusionIP\n        }\n        // DRS", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.GV2_2, new PinOptOutMigrationJob());\n    }\n    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split = split[0] == null) {\n      if (split[0] == null) {\n      if (split[0] == null) {\n      if (split[0] == null) {\n      if (split[0] == null) {\n      if (split[0]", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            # find the file in the source directory\n            # if we find it in the source file, we return the source\n            if source_dir.Rfindalldirs(source_dir, target=None, source, source=None, source, argument=None, argument=None):\n            return source, target=None:\n        return source", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "        ctx = Context()\n        [ctx = Feature = mapnik.PythonDatasource.wkt_features(\n            keys = ( 'name', 'author' ),\n            features = ( 'name', 'name', 'wkt_features' ),\n            features = ( 'name = 'feat1, 'name = 'name", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "        if self.want.update\n:\n        if self.want.port in [None, 0.0.:\n        if self.want.port is None:\n            return None\n        if self._values['ip] is not self.have:\n            return None:\n            destination:\n        if self.want.chase_referrals is not", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "    @ParametrizedView.nested(PlaybookInputParameters)\n    class MethodAddView(AutomateExplorerView):\n        title = Text('#explorer_title_text')\n        name = Text('name')\n        display_name = Text('display_name = Text('name')\n        default_value = Input(locator=Input", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "            throw new Exception(\"Action class not found.\");\n        }\n        return result;\n    }\n    public IAction getActionObject(String className, String[] args) throws Exception {\n        IAction result = null;\n        String classPath = getActionProperty(\"application.actions.action.\" + className);\n        if (classPath!=", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id\"},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_create_thread_no_comment_id(self, mock_request):\n        self._set\n    def test commentable_id\": \"dummy\", \"course_id\": \"", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "            return embedManifestDllAction(target, source, env)\n        else:\n        else:\n            raise SCons.Errors.UserError(\"No manifest file found for %s\" % manifestSrc)\n    else:\n        return 0\ndef embedManifestCheck(target, source, env, for_signature):\n    \"\"\"Check for signature", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "            Job job = new Job(\"ProgressMonitorJobsDialog\") { //elementName; // 1FV0B3Y: ITPUI: ITPUI:ALL - sub progress monitors granularity issues\n                // 1FV0B3Y: ITPUI:ALL - sub progress monitor jobs", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tif (meta.getFields(data.outputRowMeta, getStepname(), getStepname(), null, null, this);\n\t\treturn false;\n\t}\n\t\t\n\t\tif (checkFeedback(getLinesRead()) \n\t\t{\n\t\t\tif (checkFeedback(getInputRowMeta().indexOfValueMeta(meta.getFieldName()[i),", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            else if (smaxtime.Contains(\"s)\n            else if (smaxtime.Contains(\"m\")\n            else if (smaxtime.Contains(\"h\")\n            else if (smaxtime.Contains(\"s)\n            else if (smaxtime.Contains(\"s)\n            else if (smaxtime.\n           ", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "        self._open_session = self._open_session = self._get_session()\n        s, o = self.test = self._get_session()\n        self._open_session = self._open_session = self._get_session()\n        self._open_session = self._get_session()\n        self._check_ = self._", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        service.submit(pub);\n        assertThat(rc.get(), is(1), is(5);\n        service.shutdown();\n        service.shutdown();\n        service.shutdown();\n        service.shutdown();\n        service.shutdown();\n        service.shutdown();\n        service.shutdown();\n        service.shutdown();\n        service.shutdown();\n        service.shutdown();\n        service.shutdown();\n        service", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            if (this.owner.getDecorator() instanceof FTManager) {\n                if (r instanceof Reply to send the message is not a checkpoint, and the request to be the case\n            }\n            if (this.owner.getProactive.core.body) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\t}\n\t\t}\n\t\t// Increment it if (StringComparer is not a TaskItem) \n\t\t// Non-nullable field is uninitialized.\n\t\t// \n\t\t// Non-nullable field is uninitialized.\n\t\t// \n\t\t// Non", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        self.fm.execute_command(\"extractedhere = one_file.path\n        self.fm.thisdir = extract = self.fm.thisdir = self.fm.thisfile = self.fm.fm.thisfile)\n        self.fm.vim.notify(\"file/directory\" + os.path.basename(au_flags, descr = one_file.path\n       ", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\t)]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\t// We need a COM type to test the Activator class\n\t\t[ComVisible (typeof (COMTest).COMTest = (COMTest) Activator.CreateInstance (typeof (", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        de = Locale.objects.get(code='de)\nNext line of code:\n:\n        self._setup(de, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(de.changesets.count(), 2)\n        self.assertEqual(de.changeset.count(), 2)\n        self.assertEqual(de.changesets.count", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            if \"channel_id\" in cmd.parameters:\n                userstate.channel_id = cmd.parameters[\"channel_id\"]\n            self.Log.debug(\"Modifying userstate\")\n            self.send_message(PYMUMBLE_CMD_MODUSERSTATE, userstate)\n            cmd.response = True)\n", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "        if (player.getPlayerGroup2()!= null) {\n            player.getPlayerGroup2().getMember(player.getObjectId()).updateLastOnlineTime();\n        }\n        }\n        if (player.getResponseBrand2()!= null) {\n        if (player.getResponseGroup2()!= null) {\n            player.getPlayerGroup2()!=", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        return TokenListJoin\n        return head + highlight(self.toks, formatter=, formatter, formatter=DefaultStyle, outfile=outfile, head=head, width= self.rowparams[\"hidden_c\", toks)\n        return head + self.rows[i in self.rows[i].colsize(self, raw=True, self", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "        column, tree_model, tree_iter = self._setup_column(1, False)\n        column, tree_model, tree_model, tree_model, tree_model, tree_model, tree_model, tree_model, tree_model, tree_model, tree_model, tree_model, tree_model, tree_model, tree_model, tree", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent instanceof GridColumn);\n\treturn Tag parent = new GridColumn();\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "                nl = element.SelectSingleNode(\"Dialog\").ChildNodes\");\n                if (nl!= null) {\n                    for (int i =  {\n                        if (n!= null) {\n                            for (int i =  {\n                                if (n!= null) {\n                                    if (n!= null) {\n                                        if (n!=", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                        m_key[i] = new ExodusActivation();\n                    else if ( m_Peerless == PeerlessList.MelisandeTrammel || m_Peerless == PeerlessTrammel )\n\t\t\t\t\t{\n\t\t\t\t\t\tm_Region = new DreadHorn;\n\t\t\t\t\t\tregionBounds.Add( new Rectangle2D", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans.length == 0)\n\t\t{\n\t\t\tfor(int i = 0; i < beans.length; i++)\n\t\t\t{\n\t\t\t\tcoll.add((ChangeOfServiceVo)col.getVo)beans.ChangeOfServiceVoBean)iter.next()).buildVo();\n\t\t}\n\t\t}\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "                new Version(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 17, 1, 17, 17),\n                new Version(1, 1, 0, 0, 1, ", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = kdf.Transform(pbMsg, p, p, p, p, pbExpc, 0, 0);\n\t\t\tif(!KdfKeePassLibSD- 0x1D, 0x13U; p = KeePassPassword Safe - 0x5C", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExactForTool(stack, player, cost, remove) / multiplier);\n\t}\n\t\treturn (int) (requestManaForTool(stack, player, cost, manaToGet, remove, remove) / multiplier);\n\t}\n\t/**\n\t * Returns the full discount for all I", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount));\n\t\t\t// Update the layer blending mode to the queue default\n\t\t\t// FIXME: Revisit blend-mode coercion after LED Queue update\n\t\t\t// FIXME: Revisit blend-mode coercion after LED Queue update\n\t\t\t// FIXME: Re", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage!= null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userMessage.equals(other.userMessage, LogTrace.class))) {\n            return false;\n        } else if ((property.getName().equals(ACTIONTRACELIST", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "            dc.index = p.readInt();\n            dc.channel = p.readInt();\n            dc.number = p.readString();\n            dc.name = p.readString();\n            dc.number of the number of RILQAN elements in the response.\n            case RIL_REQUEST_VOICE_RADIO_TECH: ret = responseInts(p); break;\n           ", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomainApplication()) {\n\t\t\t\t\t\t\trelevantLicence.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrClient.createMetadata(MetadataEnumType.APPLICATION)\n\t\t\t\t\t\t.getType().getLicence().equals(MetadataEnumType.DOCUMENT)) {\n\t\t\t\t\t{\nNext line of", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            for (int x = 0; y < ySizeP; y++)\n            for (x = 0; x < xSizeP; xPixelsPerTile; y = 0; y < yPixelsPerTile; ySizeP; y = 0; y < ySizeP; y", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000 + testInt1);\nNext line of code:\n\t\t\tint testInt3 = rand.nextInt(5000 + testInt1);\nNext line of code:\n\t\t\tint testInt2 = rand.nextInt(5000 + testInt1);\nNext line of code:\n\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic void addCaretListener(final CaretListener caretListener)\n\t\t\t{\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void removeCaretListener(final CaretListener caretListener)\n\t\t\t{\n\t\t\t}\n\t\t\t@Override\n\t\t\t@Nullable\n\t\t\tpublic Care", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "            out.writeBoolean(false);\n            out.writeUTF(\"No such name not found\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeUTF(found.identifier);\n        }\n        out.flush();\n        out.close();\n        in.close();\n        in.close();\n    }\n    private void logging2(String s) {\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                        16 + (~stactics_display_buffer.read(i) & 0x0f,\n                        0,\n                        0,\n                        Machine.g\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                    spell.RangeCheckFrom.To2D().Distance(minionPrediction.UseBadaoStandarPrediction(target, spell.GetBadaoStandarOutput result = new PredictionOutput()\nNext line of code:\n:\n:\n                                    spell.GetBadaoStandarPrediction(target, spell.Slot, spell.From.To2D().", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        return graph.reorientUnshieldedNode = new Graph(graph);\n        return graph.reorientUnshieldedColliders2(graph, graph);\n        return graph.reorientAllWith(Endpoint.CIRCLE);\n        return graph.reorientationWith(Endpoint.CIRCLE);\n        return graph.reorientAllWith(Endpoint.CIRCLE);\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    plcs.Push(pop[i] as PlaceBase);\n                }\n            }\n            return null;\n            return null;\n        }\n        /// <summary>\n        /// Find an element's script.\n        /// </summary>\n        /// <param name=\"ScriptName>ScriptManager</param>\n        /// <param name=\"Script", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (!StringUtils.equals(this.getUpdateUser() == null) {\n        return false;\n        }\n        if (!StringUtils.equals(this.updateUser)!= null  ) {\n        return false;\n        }\n        if (this.attachmentFile == null) {\n            if (other.attachmentFile!= null) {\n                return false;\n", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                        Mobile m = mobiles[i];\n                        if (m == null || m == null)\n                            continue;\n                        if (m_Item == m_Item == null)\n                            continue;\n                        if (m_Item == null)\n                            continue;\n                        if (m_Item == null)\n                            return;\n                        if (m_Item ==", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tif (user.AccessLevel < AccessLevel.Counselor)\n\t\t\t{\n\t\t\t\tif (message)\n\t\t\t\t{\n\t\t\t\t\tInternalMessage(user, \"", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "    return mock.getAvailCompoIds(sCompoName, sClientSpaceId, sUserId);\n  }\n  @Override\n  @Override\n  public String[] getAvailCompoId(String sClientSpaceId, String sUserId) {\n    return mock.getCompoInsts(String sClient", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                        }\n                    }\n                    final String[] files2 = new String[mListView.getCheckedItemAt(mActivity, files2));\n                    for (int i = 0; i < checkedItemSize; i++) {\n                        final int", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "    }\n    public void a(Packet packet) {\n        Validate.validate(this.channel, \"channelhandlercontext) {\n            if (this.channel.eventLoop().inEventLoop()) {\n                NetworkManager g()) {\n            }\n        }\n        if (this.g()) {\n            this.g()) {\n        }", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                if z_dict = z_index_dict[z_key][0] == kk:\n                if z_index_dict[z_key] has to be 0, 1, 1, 2, 2, 0.0f:\n                2, 1, 1]\n                if z_index_dict[z", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "            env[\"PATH = self.config[\"tools\"][\"cargo-root\"] = path.join(\n                self.config[\"tools[\"cargo-root\"] = path.join(context.sharedir, \"tools\"][\"cargo-root\",\n            extra_path = extra_path\n            extra_lib = extra_lib = []\n            extra_lib = []\n            extra_lib = []\n", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "            for path, item in iteritems in iteritems(type_paths):\n                source_file = source_files.get(path, item.source_file.rel_path,\n                                                item.source_file)\n                if item.source_file is not in tests[reftests,\n                        reftest_nodes, references, manifest_items():\n                        reftest_nodes", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "        }\n        if (accessPermissionChecker.checked) {\n            checkAccessPermissionCheckerExists();\n            if (scriptClassLoader.setContextClassLoader(scriptingSecurityManager);\n            return compiledScript;\n        }\n    \t}\n    private static void checkAccessPermissionCheckerExists() {\n    \t}\n    private static void checkAccessPermissionCheckerExists", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "            throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        /// <summary>\n        /// Method to override writing", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "      for i in range(energy.size):\n        Etf = energy[i]\n        grad_E = grad[i].flatten()\n        grad_Etf = grad_var = grad_var = 0. \n      for i in range(energy.size):\n      for i in range(energy.shape[0]):\n      for i in", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (this.toString().equals(obj))\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\tif (obj instanceof OrderInvestigationForStatusChangeVo)\n\t)\n\t{\n\t\t\tims.ocrr.vo.beans.OrderInvestigationForStatusChangeVoBean bean = (ims.ocrr.vo.beans.OrderInvestigationFor", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertEquals(found.size(), 3);\n    }\n    @Test(dependsOnMethods = \"shouldFindStacksWithSpecifiedTags\")\n    public void shouldFindStacksWithSpecifiedTags() throws Exception {\n        stacks[0].getTags().getTags().addAll(asList(\"search-tag1\", \"search-tag2", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter p = new ParameterImpl();\n        p.setParameterCode = new ParameterImpl();\n        p.setParameterFamily(pf);\n        p.setParameterCode(\"CRAWLER_DEPTH_LEVEL1\n        p.setExclusionSet(\"page-2\", \"3\", \"\", \"\", \"page-2.html\", \"page-2.html\", \"", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tvar args = candidate.Args;\n\t\t\tvar args2 = pattern.Args;\n\t\t\t// $args2 = args2;\n\t\t\t// $args2 = args2 = args2;\n\t\t\t// $args2 = args2;\n\t\t\t// $args2 = candidate;\n\t\t\t// $args2 =", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                    if (colisionList.Count() > 0)\n                    {\n                        extendedWillHitChance.Medium() && q.IsReady())\n            {\n                AIHeroClient target = TargetSelector.GetTarget(\n                q.Range,\n                q.DamageType,\n                true,\n                null,\n                        objAiBase.Position);\n                        Prediction", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t// Context menu actions\nNext line of code:\n\t\t// Next context menu action\n\t\t// Next line of code:\n\t\tsuper.setContextMenus( contextMenus);\n\t\t// Container master of the code given below. \n\t\t// Next context validation\n\t\t// of the code given below", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "    return re.search(pattern, frozen_output)", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'm2m': [(0, 0, 0), ('0, 0, 0)]\n        })\n        f = Form(r)\n        with self.env['test_testing_utilities.parent'] as f:\n            with f.m2m.add(r1 = self.env['test_testing_utilities.parent', view", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    assert not Sum(1/2) == 1\n    assert 1 == Sum(1/2) == 1\n    assert 1 == 1/2 == 1\n    assert 1 * 2 == 3 * 2\n    assert simplify(Sum(x, (x", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                this._oldStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._notifyAction = changedItems == null) {\n                throw new ArgumentNullException(\"changed Items\", \"action\");\n            }\n            this._oldStartingIndex = -1;\n            this._oldStartingIndex = -1;\n            if", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "            int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            staxResult.close();\n        }\n        }\n        }\n    }\n            return result;\n        }\n        if (staxResult!= null) {\n            desc = (XMLDescriptor)xmlContext.getWriteContext;\n            object", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                    c.Campus = Token2Csv();\n                    break;\n                    c.OrgType2 = Token2Csv().ToInt2();\n                    break;\n                    break;\n                    break;\n                case Param.Campus:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.OrgType2:\n                    c.O", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Entry: {0} {1} {2} {3} {4} {4} {4} {4} {5} {6} {5: {0} {1} {2} {3} {3} {3} {3} {4} {5", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "                l.status |= Label.JSR;\n            }\n            l.status |= Label.VISITED;\n            l.status |= Label.VISITED2;\n            l.srcAndRefPositions = new int[] new int[] new int[nbSubroutines - 1] / 32 + 1];\n            l;\n           ", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__intp\n            ptr_of_this_method = ILIntepreter.Minus(__domain = __domain, __mStack, ref instance_of_this_method);\n            var instance_of_this_method = instance_of_this_method.ToString();\n            ptr_of_this_method", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\t}\n\t\tprivate void setPosition(Position position) {comboLabelPosition.select((PageSupport.setLineStyle(lineStyle) == null)? null : comboLabelPosition.select((PageStyle(lineStyle);}}\n\t\tprivate void setExplosion(LineStyle lineStyle) {comboBlockOutline) {comboLabel2.getBackground().get", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        currImageTapeNextImageValue = self._getCurrent( driver, \"Image\" )\n        # Check that the image text box value is now 1\n        currImageValue = self._getCurrent( driver, \"Image\" )\n        self.assertEqual( driver.execute_script( timeout, \"ImageTapeDecrement", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "        # okay, build up the hash H of\n        # (H = K = H = m.get_mpint(self.gex_kexgss.sshgex_kex_init, m.add_byte(c_MSG_KEXGex = KexGSSGexGexGexGexGexg", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "            DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getTree.getTree.getDatabaseNode(connectionData);\n            if (node!= null) {\n                node.setUserObject(overallNodeName);\n                if (disableTreeSelection) {\n                    tree.setFolder(overallNodeName, connectionData, disableTreeModel);\n               ", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                            (self.pool, cr, uid, employee, contract_ids, contract_ids)\n\"\"\"            \"\"\"get the list of contract_ids for which the rules to apply\"\"\"\n\"\"\"            def _sum(self, code, from_date, from_date, from_date, to_date=None):\n                if to_date is None:\n                    to", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        #No. of Msun objects/Mpc^3 (i.e. unit is 1/Mpc^3)\n        #No little h\n        dVdz = lnMassSigmaSpl = cosmo.h * cosmo_h\n        dlnMassSigmaSpl = cosmo.h * cosmo_h\n", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        d.width = font.stringWidth(getText());\n        d.height = font = getMinimumSize();\n        d.height = font.getHeight();\n        return d.width + 1;\n    }\n    /**\n     * The text to display in this FigSingleLineText is a single line of text.\n     * \n     * \n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "        self.all_in_all(phi= self.all_in_all(phi=phi,ref_p=None,flag='off_center=None)\n        self.share_face_init(self.flag)\n        \n    def all_in_all(self,phi=np.pi/2,ref_p=None,flag='off_center=None):\n        phi1,anchor1,", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Visibility = window.Visibility = window.ShowOrHide();\n\t\t}\n\t\tprivate void SecurityPickerClick(object sender, string msg => window.Visibility = window.ShowOrHide();\n\t\t}\n\t\t}\n\t\tprivate void SecurityPickerClick(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\t// create connector\n\t\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                    for i\nNext line of code:\n:\n                    for n in xrange(params[0['nbins)]\nNext line of code:\n            for i in xrange(params[0['nbins)\n        if params[0]['bins'] is None:\n            self.__setpostpost_init__(self, self, self,", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            if (query.mamQuery == null) {\n                query.mamQuery = new MAMQuery(query.getWith(), query.getWith());\n            }\n            if (query.mamQuery!= null) {\n                if (query.mamQuery = protocol.getXmpp().getStorage().getMamQueryMessageArchiveManagement", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "                im1L = im1.convert(\"L\", rgb2I)\n                im0L = im0.convert(\"L\", rgb2I)\n                im0L = im0.convert(\"L\", rgb2I)\n                im0L = im0.convert(\"L\", rgb2I)\n                im0L", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\t// read log file, record (24\n\t\t\t// read record\n\t\t\t// read record\n\t\t\t// read record\n\t\t\t// read record\n\t\t\t// read record\n\t\t\t// read record\n\t\t\t// read record\n\t\t\t// read record\n\t\t\t// read record", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "class Parser(Parser):\n    endian = LITTLE_ENDIAN = L = LITTLE_ENDIAN\n    def createFields(self):\n        yield textHandler(UInt16(self, \"host_os\", \"Block type\")\n        type\", \"host_os\", \"Block type\")\n        yield filesizeHandler(UInt16(self, \"block_type\", \"block", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t}\n\t/**\n\t/**\n\t// /**\n\t// * <pre>\n\t// * The owner of the original owner of the original code is Ciena Corporation.\n\t// * \n\t// * Portions created by the original owner are Copyright (C) 2004-2010\n\t// * the original owner", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model( data = Data( sys.argv[ 1 ] ) ) )\n\t\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (chance < 0)\n                CheckResult(ref res, chance);\n            if (res == 0)\n                return;\n            if (res == EnhanceResult.Broken)\n                return;\n            if (isSpecialItem(item, craftSystem))\n            return EnhanceResult.NoSkill)\n            if (", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "            entries[entry_name] = rdltypes.Entry(\n                type_name = type[entry_value),\n                entry_width= self.AU_to_top_addressBlock(d['name],\n                entry_name: minidomain,\n                d[entry_name] = child_au: \"reset\",\n                    d[child.localName", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                    pnlServices.Visible = false;\n                }\n                pnlServices.Visible = false;\n            }\n        }\n        private void btnNext line of code:\n:\n            pnlServices.Visible = false;\n        pnlServices.Visible = false;\n        pnlServices.Visible = false;\n        pnlServices.Visible = false;\n        pnlServices.Visible = false", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "                object obj obj = this.ViewState[\"SubmitText\"]?? \"\";\n                return (obj == null)? false : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True to submit the text of the", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                if(this.trianglesUsed[textureHash ==  {\n                if(this.trianglesUsed[textureHash] <=  {\n                if(this.trianglesUsed[textureHash] <= this.trianglesUsed[textureHash] <=  {\n                if(this.trianglesUsed[textureHash] <= ", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    if header not in exposedHeaders:\nNext line of code:\n:\n        exposedHeaders += ','+ header\nNext line of code:\n:\n    response['Access-Control-Expose-Headers'] = exposedHeaders = exposedHeaders\n    return response\n    return inner\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                    Driver d = idlePool.Dequeue();\n                    d.Close();\n                    Debug.Assert(!d.ConnectionLifetimeExpired() &&!beingCleared);\n                    if (Interlocked.Increment(ref oldDrivers, d);\n                    if (d.ConnectionLifetimeExpired() || beingCleared)\n                    {\n                        d.Close();\n                        Debug.Assert(!", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "        var = (var = _convert_units(\n        var, name, units, p, crs, crs)\n        var = (list, tuple)) and name in ('resolution','resolution', 'radius'):\n        var = _format_area(area_id, description, area_def, description, name, width", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor((double)seconds1 = this.seconds;\n\t\t\t\t\t;\n\t\t\t\t\t;\n\t\t\t\t\t;\n\t\t\t\t\t;\n\t\t\t\t\t;\n\t\t\t\t\t;\n\t\t\t\t\t;\n\t\t\t\t\t;\n\t\t\t\t\t);\n\t\t\t\t\t;\n\t\t\t\t\t;\n\t\t\t\t\t;\n", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "            _attributes = new List<AttributeCollection(ShaderProgram);\n        }\n        public ShaderProgram(bool flat, PrimitiveType primitiveType, bool immediate)\n        {\n            PrimitiveType = primitiveType;\n            Flat = flat;\n            Immediate = immediate;\nNext line of code:\n:\n            _attributes = new List<AttributeInfo", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "        for gene = self._model = self\n        new_model = self.__dict__dict[rxn in self.reactions.has_id(\n            i.id)", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\treturn coll;\n\t}\n\tpublic static ims.clinicaladmin.vo.TumourGroupListVoListVoCollection buildListFromTumourGroupVoList(ims.clinicaladmin.vo.TumourGroupListVoListVoListVoListVoListVoListVo tumourGroupList)\n\t{\n\t\tT", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcy = lines = current.x = lines[selectedLine].x;\n\t\t\t\tright = lines[selectedLine = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tcy = lines = lines = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tc = lines = lines[selectedLine].x", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "        new LayoutAnimationController(set);\n        mListView.setLayoutAnimationController(controller);\n    }\n\t}\n\t\n\t/**\n\t * Do the doSync();\n\t * \n\t * @param arg0\n\t * \n\t */\n\tprivate void doSync() {\n\t\t// TODO Auto-generated method to implement ISync\n\t\t", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "                if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow = (PPartnerInterestRow)FMainDS.PPartnerInterest.CategoryTable.Rows.Add(new PartnerEditTDSPPartnerInterestTable.GetSelectedString());\n                }\n                ARow = (PPartnerInterestRow)F", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t//    <TMSEG: Prediction of Transmembrane Segments in Proteins.>\n\t\t//    Copyright (C) 2014  Michael Bernhofer\n\t\t//\n\t\t//    This program is free software; you can redistribute it and/or modify\n\t\t//    it under", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
