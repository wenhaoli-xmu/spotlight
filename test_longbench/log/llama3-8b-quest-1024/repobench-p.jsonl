{"pred": "    private final transient KademliaRoutingTable routingTable;\n    private final transient KadConfiguration config;\n    private final transient MessageFactory messageFactory;\n    private final transient JsonSerializer<JKademliaStorageEntry> storageEntrySerializer;\n    private final transient JsonSerializer<KademliaDHT> dhtSerializer;\n    private final JsonSerializer", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        // TODO add effects to the list\n        mEffects.add(new NoEffect());\n        mEffects.add(new FlipEffect());\n        mEffects.add(new KernelBlurEffect());\n        mEffects.add(new KernelGaussBlurEffect());\n        mEffects.add(new KernelSharpenEffect());\n        mEffects.add(new KernelEmbossEffect", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Cipher):  # noqa: D101\n    key_schedule = KeySchedule1\n    encryption = MyFunction\n    rounds = 1\n\n    @classmethod\n    def set_rounds(cls, new_rounds):\n        cls.rounds = new_rounds\n        cls.encryption.rounds =", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "    private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n\n    public EffectManager(Activity activity) {\n        mActivity = activity;\n        mEffects = new ArrayList<Effect[]>();\n        mEffects.add(new Effect[] {\n                new NoEffect(),\n                new KernelBlurEffect(),\n                new KernelGaussBlurEffect(),\n               ", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event) {\n        eventQueue.add(event);\n    }\n\n    private void queueEvent(Event event, Consumer<Boolean> callback) {\n        eventCallbacks.put(event, callback", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务元信息管理器\n     */\n    private TaskMetaInfoManager taskMetaInfoManager;\n\n    /**\n     * 任务监听器管理器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    public TaskRunnerContainer(TaskFactory", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tPath vaultLocation = args.vaultLocation();\n\t\t\tCounter counter = new Counter();\n\t\t\tConsumer<Problem> report = problem -> {\n\t\t\t\tcounter.increment();\n\t\t\t\tprintNoNewline(format(\"%s: %s\", problem.name(problem.name(), problem.severity()), problem.solution().map(Solution::name).orElse", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "            DebugManager.INSTANCE.setDeviceId(deviceId);\n            return true;\n        } catch (RestServiceException e) {\n            Log.e(this.getClass().getSimpleName(), e.getMessage(), e.getMessage());\n            return false;\n        }\n    }\n\n    @Override\n    protected void onPostExecute(Boolean result) {\n        super.onPostExecute(result);\n", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN, SESSION_ID);\n    assertEquals(new U2fSignRequest(\"U2F_V2\", SERVER_CHALLENGE_SIGN_BASE64, APP_ID_SIGN,\n        SESSION_ID), signRequest);\n  }\n\n ", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            self.acctA = RadiusAccounting(self.global_config, self.cId, self.cId, self.remote_ip, self.source, self.username, \\\n              self.caller_name, self.cld, self.cli, self.eTry.rtime, self.uaA.state, self.uaO.state, self.uaA", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "    def __bytearray__(self):\n        return bytearray([self.version, self.tag, len(self.data), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "            if num_children == 1:\n              cstr_node.rhs = convert_ast_constraint(children[0])\n              process_children(cstr_node.rhs, children[0])\n            else:\n              cstr_node.lhs = convert_ast_constraint(children[0])\n              process_children(cstr_node.lhs, children[0", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, Bundle args) {\n        if (activity!= null) {\n            VideoFragment fragment = new VideoFragment.newInstance(args);\n            activity.showVideo(fragment);\n        }\n    }\n\n   ", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "        Log.d(\"SettingActivity: \", \"postLocationInformation(): latitude: \" + latitude + \", longitude: \" + longitude);\n        // Post location to ForkMe backend.\n        PostLocationDataBody postLocationDataBody = new PostLocationDataBody(\n                AppSettings.sUserLogin, latitude, longitude, AppSettings", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "        self._test_valid_args()\n        self.test_valid_args()\n        self.test_valid_args = self.test_valid_args()\n        self.test_valid_args()\n        self.test_valid_args = self.test_valid_args()\n        self.test_valid_args()\n        self.test_valid_args = self.test_valid_args()\n        self.test_valid_args()\n", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "    class TestModel(BaseModel):\n        id = Column(Integer, hash_key=True)\n        name = Column(String)\n\n        def __new__(self, *args, **kwargs):\n            global init_called\n            init_called = True\n            return super().__new__(self, *args, **kwargs)\n\n    engine.bind", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "    if isinstance(result, XPathNode):\n        if result.kind == 'element':\n            yield result\n        elif result.kind == 'attribute':\n            yield TypedAttribute(result, result.xsd_type, result.value)\n        else:\n            yield result\n    elif isinstance(result, (tuple, list)):\n        for item in result", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                    new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new RGBAdjustTransformation(),\n                    new RescaleTransformation(),\n                    new SolarizeTransformation(),\n                    new ThresholdTransformation(),\n                    new TritoneTransformation()\n            )),\n    EDGE_EFFECTS(\"Edge Effect\",\n            Arrays.asList(\n                    new EdgeTransformation(),\n                    new Emb", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                writeResponse(CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "        wild.set_message(wild_report)\n        await wild.insert()\n        await wild.monitor_task\n        await ctx.message.delete()\n        await ctx.send(f\"Reported {pokemon.label} at {location} by {location.city} for {ctx.guild.id}.\")\n\n        await ctx.message.delete()\n        await ctx.send(f", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "    data = SNLIData(path=c['data_path'], vocab=vocab, **c['data_kwargs'])\n    if c['vocab_text']:\n        vocab_text = Vocabulary(c['vocab_text'])\n    else:\n        vocab_text = None\n    if c['def_vocab']:\n        def_vocab = Vocabulary(c['def_vocab", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.coeffs == (2. * scipy.constants.pi / 3., 50.)\n  assert doppler.phaseShift ==", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "                Intent intent = new Intent(getActivity(), RaffleActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n                finish();\n            } else {\n                Toast.makeText(getActivity(), R.string.warning_raffle, Toast.LENGTH_SHORT).show", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "                assert self.redlock.locked() >= self.redlock.auto_release_time\n        self.redlock.release()\n\n    def test_release(self):\n        assert not self.redis.exists(self.redlock.key)\n        assert self.redlock.acquire()\n        assert self.redis.exists(self.redlock.key)\n        assert self.redlock.release()\n       ", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "        return ConeSettings(self._sptr, \"Sound\")\n\n    @property\n    def threed_cone_settings(self):\n        \"\"\"The inside and outside angles of the 3D projection cone and the\n        outside volume.\n\n        :type: ConeSettings\n        \"\"\"\n        return ConeSettings(self._sptr,", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "    def __bytearray__(self):\n        _bytes = bytearray()\n        _bytes.append(self.calg)\n        _bytes += self.data\n        return _bytes\nsrc/leap/mx/vendor/pgpy/packet/fields.py\nclass LiteralDataLiteral(VersionedLiteral):\n    __ver__ = ", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        cellSize = findCellSize(imgshape, imgmax, img, maxLabel = maxLabel = None, method = 'Sum', verbose = verbose, out = out, **parameter);\n        #cellSize = findCellSize(imgshape, imgmax, img, maxLabel = maxLabel, method = '", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume);\n        } else if (accuracy == Accuracy.NICE) {\n            Assets.niceTapSound.play(GlobalConfiguration.feedbackVolume);\n        } else if", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "            while (transactionIterator.hasNext()) {\r\n                Transaction t = transactionIterator.next();\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean checkDirectoryValid(File dir) {\r\n        if (!dir.exists()) {\r\n            System.err.println(\"Directory \"", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                if (query.queryType == RequestType.INSERT) {\n                    ((InsertMeta) stmnt).postProcess(reqHeaders);\n                }\n                if (query.query.query.queryType == RequestType.DELETE) {\n                    ((DeleteMeta) stmnt).postProcess(reqHeaders);\n                }\n                if (query.queryType ==", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                    operation_mode=OperationMode.CBC,\n                    encryption_algorithm=EncryptionAlgorithmCoded.TWOKEY3DES,\n                    algorithm_parameter_name=AlgorithmParameterName.KYE,\n                    algorithm_parameter_value=b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                            if (bsAt(env.combExpMem, i)) {\n                                env.numCombExpCheck++;\n                            }\n                        }\n                    }\n                }\n            } else {\n                if (Config.DEBUG) Config.log.println(\"backrefedMem > 0, numCall > 0\");\n            }\n        } // USE_C", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "    url(r'^save-pipeline-config$', ajax_save_pipeline_config, name=\"ajax-save-pipeline-config\"),\n    url(r'^run-pipeline-config$', ajax_run_pipeline_config, name=\"ajax-run-pipeline-config\"),\n    url(r'^toggle-pipeline-config$', ajax_toggle_pipeline_config, name=\"ajax-toggle-pipeline", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tpublic ResourceData (Resources res)\n\t\t{\n\t\t\tmeter = new Meter meter;\n\t\t\ttags = new EnumMap<SRSLevel, String> (SRSLevel.class);\n\t\t\tcolors = new EnumMap<SRSLevel, Integer> (SRSLevel.class);\n\t\t\tnotEnoughData = res", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "        self._append(( FIELD_STRING, self._db_name ))  # db_name\n        if self.get_protocol() >= 16:\n            # > 16 1.5-snapshot\n            # custom choice server_storage_type\n            self._append(( FIELD_STRING, self._storage_type ))\n        return self", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "    public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(\n            CheckedSupplier<$Argument2> givenStep) {\n        preparation.recordGivenStep(givenStep);\n        return new GivenTwoArgumentsWhenSteps<>(preparation);\n    }\n\n    @Override\n    public", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "    String output = process.await();\n    if (output == null) {\n      throw new IosDeviceException(RealDeviceImpl.this, \"Process terminated with no output\");\n    }\n    int exitCode = process.result().exitCode();\n    if (output == null) {\n      throw new IosDeviceException(", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\ttextColor = Color.parseColor(options.getString(Keys.TEXT_COLOR, \"#000000\"));\n\t\t//Log.v(APP_TAG, \"text color is \"+textColor);\n\t}\n\t//Log.v(APP_TAG, \"text color is \"+textColor);\n\t}\n\tprivate void setTextColor() {\n\t\ttextColor = Color.parseColor(options", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\t// parse XML message\n\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);\n\t\t// build reply message\n\t\tMessageBuilder builder = MessageBuilder.buildMessage(msg.getFromUserName(), msg.getToUserName());\n\t\t// reply text message\n\t\tif (msg.isTextMessage()) {\n\t\t\tString", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "    print u'\\n[INFO] 开始动态分析...'\n    # 1. 安装 APK 文件\n    install_and_run(toolsdir, apk_path, package, launcher, is_activity)\n    # 2. 启动 APK 文件\n    run_app = package + \"/\" + launcher\n    subprocess", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "    async def cmd_raidcity(self, ctx, *city_name):\n        \"\"\"\n    @command(pass_context=True, category='Bot Info', aliases=[\"raid-timezone\", \"rt\"])\n    async def cmd_raidsync(self, ctx, ctx, *timezone):\n        \"\"\"\n        **!raid-sync timezone** -", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25).date())\n        self.assertEqual(date_string_to_date(\"11/12/12/2012\"), datetime(2012, 12, 11).date())\n        self.assertEqual(date_string_to", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor('config.json', work_dir=os.path.dirname(__file))\n        config_actor.start()\n        gevent.sleep(1)\n        # TODO: This is not a good way to do this, but it is the only way to get around the fact that we need to\n        # communicate with", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                            ShareUtil.shareText(mActivity, picture.getText_content());\n                            break;\n                        case 1:\n                            ShareUtil.shareImage(mActivity, picture.getPics()[0]);\n                            break;\n                        case 2:\n                            ShareUtil.shareImage(mActivity, picture.getPics()[0], picture.getText_content());\n                            break;\n                   ", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                OhmletActivity.class,\n                OhmletActivity.ohmletFragment,\n                OhmletActivity.ohmletActivity,\n                OhmletActivity.ohmletActivity,\n                OhmletActivity.ohmletActivity,\n                OhmletActivity.ohmletActivity,\n                Oh", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDSA:", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "    elif is_element_node(item):\n        yield item\nNext line of code:\n:\n    else:\n        # XSD typed selection\n        for item in context.iter_self():\n            if context.item is not None and context.is_principal_node_kind():\n                if isinstance(item, (TypedAttribute, TypedElement)):\n                    yield item", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "      'no_members': Counter\n    }\n\n  def __init__(self, next_provider, sink_properties, global_properties):\n    super(HeapBalancerSink, self).__init__(next_provider, sink_properties, global_properties)\n    self._heap = []\n    self._downed = []\n    self._heap_lock =", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "        nc._send_message_with_protocol('foo bar baz', protocol)\n        protocol.send_string.assert_called_once_with('foo bar baz')\n\n    def test_send_message_with_protocol_in_bad_state(self):\n        \"\"\"\n        Ensures that the correct RuntimeError is raised if the protocol is in\n        an invalid state.\n        \"\"\"\n       ", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "        StatementExecution se = (StatementExecution) qe;\n        assertEquals(\"SELECT * FROM user WHERE id =?\", se.getQuery());\n        assertEquals(1, se.getSetParams().size());\n        assertEquals(0, se.getSetNullParams().size());\n        assertEquals(0, se.getOutParams().size());\n", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionFailures() {\n        StatementExecution se = new StatementExecution();\n        se.setSuccess(false);\n\n        CallableExecution ce = new CallableExecution();\n       ", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "                log.info(\"Waiting for next scheduled ADR message time\")\n                yield txsleep(sleep=scheduled - current)\n            else:\n                log.info(\"Sending ADR message\")\n                # Send the ADR request\n                message = self._createMessage(self._createLinkADRRequest(device))\n                yield self._sendMessage", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        succeeded, failed = return_queue.get(timeout=1)\n                        sum_errors +=", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "        FragmentObservable.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable.getInstance().remove(this);\n    }\n\n    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n        Log.d(this.getClass().getSimpleName(), \"on", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "            json_dict['ref_time'] = jd2Date(self.img_handle.JD, UT_corr=self.config.UT_corr, dt_obj=True)\n            json_dict['ref_time = jd2Date(self.img_handle.JD, UT_corr=self.config.UT_corr, dt_obj=True)\n            json_dict['ref_time']", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "        if (mPublicRoomsListList == null) {\n            mPublicRoomsListListList = new ArrayList<List<PublicRoom>>();\n        }\n        if (mHomeServerNames == null) {\n            mHomeServerNames = new ArrayList<String[Next line of code:\n:\n            mHomeServerNames.add(\"matrix", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "        self.bingo_data = BingoDataGenerator.load_bingo_data()\n        self.bingo_data = BingoDataGenerator.load_bingo_data()\n        self.bingo_data = BingoDataGenerator.load_bingo_data()\n        self.bingo_data = BingoDataGenerator.load_bingo_data()\n        self.bingo_data = BingoData", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n        for stage in run_stages:\n            stage_perms[stage] = chim_detect.break_contigs(stage_perms[stage],\n                                                           run_stages)\n    else:\n        logger.info(\"Chimera detection is disabled\")\n\n   ", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);\n    }\n\n    }\n\n    @Override\n    public void onDisable() {\n        //", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                stopGcmPush();\n                stopHwPush();\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HwPush\":\n                if(shouldInit()) {\n                    stopGcmPush();\n                    stopMiPush();\n                    Log.e(MYTAG, \"使用H", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "    public PersonalVulnsWindow() {\n        initComponents();\n        // Set the title\n        this.setTitle(\"Personal Vulnerabilities\");\n        // Set the icon\n        this.setIconImage(new ImageIcon(getClass().getResource(\"/com/cornerpirate/reportcompiler/reportcompiler/Icons/ReportCompiler.png\")).getImage());\n        // Set", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "    private void createMetricChartPanel(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, false);\n        GCStatsChartPanel panel =\n                new MetricChartPanel(\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "        if (packet.getType() == PacketType.MESSAGE) {\n            if (packet.getSubType() == PacketType.EVENT) {\n                PacketType type = packet.getSubType();\n                String name = packet.getName();\n                List<Object> args = packet.getData();\n                AckRequest ackRequest = new AckRequest(packet, packet", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "        VideoSource lVS = factory.createVideoSource(\n            appRtcClient.videoConstraints(), videoCapturer);\n      } else {\n        VideoSource lVS = factory.createVideoSource();\n      }\n      VideoTrack lVT = factory.createVideoTrackFactory().createVideoTrack(\n          \"ARDAMS\", lVS);\n", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "            contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, -1L);\n            contentValues.put(JobStorage.COLUMN_EXACT, false);\n            contentValues.put(JobStorage.COLUMN_FLEX_MS, -1L);\n            contentValues.put(JobStorage.COLUMN_FLEX_SUPPORT, false);\n            contentValues.put(JobStorage.COLUMN_REQUIRES_CHARGING, false", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "    private CheckBoxPreferenceHideTime preferenceHideTime;\n    private CheckBoxPreferenceHideScore preferenceHideScore;\n\n    private Preference preferenceLeftHandedMode;\n    private Preference preferenceForcedTabletLayout;\n    private Preference preferenceShowCardBacks;\n    private Preference preferenceShowCardBacksInMenu;\n    private Preference preferenceShow", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "coopy/utils.py\ndef unindent_source(source):\n    lines = []\n    for line in source:\n        if line.strip():\n            lines.append(line)\n    return '\\n'.join(lines)\ncoopy/utils.py\ndef validate_date_datetime_calls(source):\n    for line in source.split('\\n'):\n        if line.strip", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "    final List<Board> boards = new ArrayList<>();\n    Observable.fromArray(SectionNames).flatMap(new Function<String, Observable<Board>>() {\n      @Override public Observable<Board> apply(@NonNull String sectionName) throws Exception {\n        return SMTHHelper.getInstance().wService.getBoardList(sectionName).flatMap(new", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "        ObservableRegistry.getObservable(this).register(this);\n    }\n\n        @Override\n        public void onStop() {\n            super.onStop();\n            ObservableRegistry.getObservable(this).remove(this);\n        }\n\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                                 Bundle savedInstanceState) {\n            View view = inflater.inflate", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\t// TODO error log\r\n\tclassCreationChain.append(\"null\");\r\n\t}\n\t// end creation block\r\n\tclassCreationChain.append(\")\");\r\n\t}\n\t// end creation block\r\n\t// end creation block\r\n\t// end creation block\r\n\t// end creation block\r\n\t// end creation block\r\n\t// end creation block", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "        self.assertEqual(self.simulator_data_client.simulation_time, 0.0)\n        self.assertEqual(self.simulator_data_client.simulation_time, 0.0)\n        self.assertEqual(self.simulator_data_client.simulation_time, 0.0)\n        self.assertEqual(self.simulator_data_client.simulation_time, ", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "            showResponse = true;\n        } else {\r\n            showResponse = false;\r\n        }\r\n        if (httpMessage.getReq().hasRequest()) {\r\n            isRequestEditor = true;\r\n        } else {\r\n            isRequestEditor = false;\r\n        }\r\n        if (httpMessage.getRes().hasResponse()) {\r\n            textarea", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "    assert expected_status(description)\n    # END OTHER TABLE STATUS ========================================================================== OTHER TABLE STATUS\n    # END OTHER TABLE HELPERS ======================================================================== OTHER TABLE HELPERS\n    # END OTHER TABLE HELPERS ======================================================================== OTHER TABLE HELPERS\n    # END OTHER TABLE HELPERS ======================================================================== OTHER TABLE HELPERS\n    # END OTHER", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "        self._padding = len(remaining_data)\n\n        if load_v1:\n            v1v2_ver = 4 if self.version[1] == 4 else 3\n            frames, offset = find_id3v1(fileobj, v1v2_ver, known_frames)\n            if frames:\n", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "    visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\rNext line of code:\n:\n    return null;\n  }\r\n\r\n  visitProxOp(new VisitOrd3(n), query);\rNext line of code:\n:\n    return null;\n  }\r\n\r\n  /**\n   * f0 -> <", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                    new DiffusionTransformation(),\n                    new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new LevelsTransformation(),\n                    new MirrorTransformation(),\n                    new PosterizeTransformation(),\n                    new SolarizeTransformation(),\n                    new ThresholdTransformation(),\n                    new TritoneTransformation()\n                    )),\n    OTHER(\"Other\",\n            Arrays.asList(\n                    new Equal", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "            if self._header[1] == 1:\n                exception_class = b'PyOrientBadMethodCallException'\n                exception_message = b'Invalid method call'\n            elif self._header[1] == 2:\n                exception_class = b'PyOrientCommandException'\n                exception_message =", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "    api = DERBMDATA(args.apikey)\n    if args.fromdate is None:\n        print(\"A date should be supplied using the --date flag. Format is YYYY-MM-DD. Defaulting to today\")\n    if args.todate is None:\n        print(\"A date should be supplied using the --date", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if-else\n\t\t\titems.add( item );\n\t\t} // for\n\t\treturn items;\n\t} // convertToGalleryItems\n\n\t// ================================================\n\n\t/**\n\t *", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "        new TaskName(), StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_SLASHES), StaticString.WHITESPACE,\n        new Percentage(), StaticString.WHITESPACE,\n        StringWrapper.wrap(\"[\", new ProgressBar(50, BAR_EQUALS), \"]\"), StaticString.W", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static FormFor formFor(Object resource, Object... fields) {\n\t\treturn new FormFor(resource);\n\t}\nNext line of code:\n:\n\tpublic static FormFor formFor(Object resource) {\n\t\treturn new FormFor(resource);\n\t}\nNext line of code:\n:\n\tpublic static FormFor formFor(Object resource) {\n", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "            \"quantity\": quantity,\n            \"details\": details\": details,\n            \"comments\": comments,\n            \"tags\": tags,\n        }\n\n        if facility!= \"\":\n            request[\"facility\"] = facility\n        if metro!= \"\":\n            request[\"metro\"] = metro\n        data = self.call_api(\n            \"/projects", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "    Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example:\n     * <pre> assertThat(ds.getBatchStatements(), batch(", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "            if (Preferences.get(this).isPremiumRequestEnabled()) {\r\n                if (Preferences.getPremiumRequest()) {\r\n                    Toast.makeText(this, R.string.toast_premium_request_premium_request_applied, Toast.LENGTH_SHORT).show();\r\n                    return;\r\n                }\r\n                }\r\n            }\r\n            if (Preferences.get(this).isPremiumRequest", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "  private static final Map<Operator, Occur> opToOccur = new HashMap<Operator, Occur>();\r\n  static {\r\n    opToOccur.put(Operator.AND, Occur.MUST);\r\n    opToOccur.put(Operator.ANDNOT, Occur.MUST_NOT);\r\n    opTo", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\t", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "        self.beginning_datetime = filenameToDatetime(self.vid_path)\nNext line of code:\n        self.beginning_datetime = self.vidinfo.ts\nNext line of code:\n        self.beginning_datetime = self.vidinfo.ts\nNext line of code:\n        self.beginning_datetime = self.vidinfo.ts", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "    ilm = ilms.ILM(ilmvals=ILMVALS, bkgvals=BKGVALS, zscale=0.89)\n    # 3. create image\n    img = models.Image(ilm, part, ilm, slab, p, category='img')\n    return", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\t// sync food groups\n\t\tPacketDispatcher.get().sendTo(new PacketFoodGroup(foodGroup), player);\n\t\t}\n\t\t// sync food modifier\n\t\tPacketDispatcher.get().sendTo(new PacketFoodModifier(), player);\n\t}\n}\njava/squeek/spiceoflife/foodtracker/F", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "        post = get_object_or_404(Post, pk=pk)\n        if post.deleted:\n            messages.error(request, 'The post you tried to access has been deleted.')\n            return redirect(reverse('ploghubapp:home_page'))\n        else:\n            post = get_object_or_404(Post, pk=pk)\n           ", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t\t// FIXME: Make this configurable\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "src/leap/mx/vendor/pgpy/constants.py\nclass KeyFlags(FlagEnum):\n    #: Signifies that a key may be used to certify keys and user ids. Primary keys always have this, even if it is not specified.\n    Certify = 0x01\n    #: Signify that a", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "        if item is None:\n            yield context.root\n        elif is_xpath_node(item):\n            yield item\n        elif is_processing_instruction_node(item):\n            yield item = item\n            if self.arity == 1:\n                if item is not item = item:\n                    raise self.error('XPTY0004',", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "Timeline/Handlers/Puffle.py\n@PacketEventHandler.onXT('s', 'p", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "    st = states.ImageState(im, [P, H, H, H, I], priors=[None, None, None],\n            model_as_data=False)\n    st.set_model([H, I])\n    st.set_image(im)\n    st.set_tile_full()\n    st.model_to_data(sigma=0.", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "            manager = mp.Manager()\n            error_dict = manager.dict()\n            return_queue = manager.dict()\n            stopped = Stopped()\n            procs = []\n            for i, args in enumerate(jobs):\n                function = CompileInformationArguments(args)\n                p = KaldiProcessWorker(i, return_queue, function, error", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "    platepar.rotation_from_horiz = RMS.Astrometry.ApplyAstrometry.rotationWrtHorizon(platepar)\nNext line of code:\n:\n    return platepar, True\nRMS/Astrometry/ApplyAstrometry.py\ndef checkFitGoodness(config, platepar, catalog_stars,", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "        contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_FLEX_MS, 0);\n        contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 0);\n        contentValues.put(JobStorage.COLUMN_LAST_RUN, 0);\n        contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, 0", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "        Log.d(\"ChatSettingsRemove\", \"onStart\");\n        FragmentObservable<ChatSettingsRemove> obs = ObservableRegistry.getObservable(ChatSettingsRemove.class);\n        obs.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable<ChatSettingsRemove> obs = Observable", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "        model = Progress\n        fields = ['component', 'area', 'year', 'fiscal_year']\ngoals/models.py\nclass AreaType(models.Model):\n    code = models.CharField(_('Code'), max_length=20, unique=True)\n    name = models.CharField(_('Name'), max_length=255)\n    description =", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "app/src/main/java/com/jarvislin/producepricechecker/page/HistoryPage.java\npublic class HistoryPage extends BasePage implements PageListener {\n    private static final String TAG = \"HistoryPage\";\n    private HistoryDirectory historyDirectory;\n    private ProduceData produceData;\n    private CalendarDialog calendarDialog;\n    private", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "        new UserRegistrationTask(RegisterFragment.class)\n               .execute(name, email, password, password, password_check,\n                        this.getClass().getName());\n        }\n        else {\n            Toaster.getInstance().toast(message, Toast.LENGTH_LONG);\n        }\n    }\n    }\n}\nyasme/src/main/java/de/fau/cs/mad", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "    private final double alpha;\n    private final double beta;\n    private final double gamma;\n    private final double delta;\n    private final double epsilon;\n    private final double[] sigma;\n    private final double[] sigma2;\n    private final double[] sigma3;\n    private final double[] sigma4;\n    private final", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "    private List<FilterType> filterTypes;\n    private HashMap<String, List<FilterType>> filterTypeHashMap;\n    private HashMap<String[][], List<FilterType>> filterTypeHashMap2;\n    private HashMap<String[][], List<FilterType>> filterTypeHashMap3;\n    private HashMap<String[][], List<", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "  assert isinstance(args.gps_sv[0].message, ConstMessage)\n  assert args.gps_sv[0].message.bitValue == 1\n  assert args.gps_sv[0].message.binValue == 0\n  assert args.gps_sv[0].message.messageBits == numpy.array([0", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "        if self.style.fill_rule == 'nonzero':\n            glu.gluTesselator.set_winding_rule(glu.GLU_TESS_WINDING_NONZERO)\n        elif self.style.fill_rule == 'evenodd':\n            glu.gluTesselator.set_winding_rule(glu.GLU_TESS_WINDING", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"app\")) {\n\t\t\t\t\ta = new AppData(data);\n\t\t\t\t\tDatabaseHelper.addApp(contextRef.get(), a);\n\t\t\t\t} else if (data.startsWith(\"shortcut\")) {\n\t\t\t\t\ta = new ShortcutData(data);\n\t\t\t\t\tDatabaseHelper.addShortcut(contextRef.get(), a);\n\t\t\t\t}\n", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow && ClipBoardAction.isShowInStatusBar) {\n                    isClipBoard", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "        self.beg_alt = self.beg_vect[2]\n        self.end_alt = self.end_vect[2]\n\n        # Compute the normal vector\n        self.normal = vectNorm(np.cross(self.end_vect - self.beg_vect, self.end_vect))\n\n        # Compute the normal vector\n        self.normal = vect", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tString name = fhead.ID().getText();\n\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(name);\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void exitFunction(@NotNull FunctionContext ctx) {\n\t\tsuper.exitFunction(ctx);\n", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "src/main/java/com/bazaarvoice/jless/ast/visitor/InvisibleNodeVisitor.java\npublic class InvisibleNodeVisitor extends InclusiveNodeVisitor {\n    @Override\n    public boolean enter(Node node) {\n        return node.isVisible();\n    }\n\n    @Override\n    public boolean visit(Node node) {\n        return", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "        bind(GerritPushExtension.class).asEagerSingleton();\n        bind(GerritPushExtension.class).asEagerSingleton();\n        bind(GerritPushExtension.class).asEagerSingleton();\n        bind(GerritPushExtension.class).asEagerSingleton();\n        bind(Gerrit.class).as", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                    if (getZxidFromName(snapshots.get(i).getName()) >= zxidLong) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            if (snapFile == null) {\r\n                System.err.println(\"No snapshot file found for zxid", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "            entries = [e for e in entries if txn_matches(e.transaction, query)]\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e for e in entries if e.transaction.has_unassigned_split]\n        elif filter_type is FilterType.Income:\n            entries = [e for e in", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "        ('segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment, 'Segment','segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment', 'Segment',", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Observable.combineLatest(\n\t\t\t\t\t\t\t// Get suggestions from the database\n\t\t\t\t\t\t\trxdb(this).query(HistoricSearch.class, \"name like? or name like? or name like? or name like? or name like? or name like? or name like? or", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "    # 2. background\n    bkg = np.random.randn(IMG.shape[2,1,0].shape[0]) + 0.5\nNext line of code:\n:\n    # 3. ILM\n    ilm = np.array([np.random.randn(IMG.shape[0],", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "        result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)\n\n\ndef apply_or(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                Request request = RequestFragment.sSelectedRequests.get(i);\r\n                stringBuilder.append(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"\r\n                       .append(\"Name: \")\r\n                       .append(request.getName())\r\n                       .append(\"\\nPackage:", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "            instance, instance\n        )\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        return issubclass(subclass, int) or issubclass(subclass, float) \\\n            or issubclass(subclass, Decimal) or is", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "            return SearchMenuPage()\n        if pageletId == 'SearchHistoryPage':\n            return SearchHistoryPage(self._createSearchHistory(context))\n        if pageletId == 'RubricsPage':\n            return RubricsPage()\n        if pageletId == 'RubricPage':\n            return RubricPage()\n       ", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "                if pattern.datafile is None:\n                    errmsg += \"Pattern %s has no data file is not specified.\\n\"%pattern.name\n                elif not checkFileExistence(pattern.datafile):\n                    errmsg += \"Pattern %s data file %s does not exist.\\n\"%(pattern.name, pattern.datafile)\n           ", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name')\ngoals/api/serializers.py\nclass IndicatorSerializer(serializers.ModelSerializer):\n    image_small = serializers.ImageField(read_only=True)\n    image_medium = serializers.ImageField(read_only=True)\n    image_large =", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n    private ContentItemAdapter contentItemAdapter;\n    private List<Content", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\tFile file = null;\n\t\ttry {\n\t\t\tfile = generationService.generateQuestionnaire(new File(basePathDDI2FO + \"/ddi.xml\"), \"test\");\n\t\t} catch (Exception e) {\n", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                        new ChangePasswordTask(user).execute(\"1\");\n                    }\n                });\n        // \"Cancel\" button to cancel the dialog\n        alert.setNegativeButton(R.string.cancel,\n                new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n                        dialog.cancel();\n                    }\n                });\n        alert.show();\n", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', login_required(NewPackageView.as_view(), login_url=LOGIN_URL), name=\"package-new\"),\n    url(r'^edit/(?P<pk>[\\w@-]+)$', login_required(UpdatePackageView.as", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "  encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.l1Index == NormalRateConfig.GPS.L1.INDEX\n  assert encoder.l2Index == NormalRateConfig.GPS.L", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "    return tgAsDict[\"tiers\"][0][\"entryList\"]\n\n\ndef run_save_json(tg):\n    \"\"\"\n    Mock write function and return the first tier's entry list\n\n    tg.save() mutates the textgrid's data, so the entry list\n    before and after saving can be different\n   ", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                        try:\n                            done, no_feats, unvoiced = return_queue.get(timeout=1)\n                            if stopped.stop_check():\n                                continue\n", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "            dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n            self._check_dataset(dataset, return_meta=True)\n        # with meta\n        for version in ['UAV123', 'UAV20L']:\n            dataset = UAV123(root_dir, version=version)\n            self", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "    void set(FixTag tag, CharSequence value) throws InvalidValueException;\n    void set(FixTag tag, int value) throws InvalidValueException;\n    void set(FixTag tag, long value) throws InvalidValueException;\n    void set(FixTag tag, double value) throws InvalidValueException;\n", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "            # Get the chunk bounds of the chunk.\n            (s_start, s_end, keep_start, keep_start, keep_end) = bounds\n            # Get the chunk of the data.\n            chunk = data_chunk(data, chunk=(s_start, s_end))\n            # Get the chunk of the filtered data.\n", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tresult.setQueryNode(AlvisIRAnyQueryNode.INSTANCE);\n\t\t\treturn result;\n\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic ExpansionResult visit(", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\tprivate Validator validator;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t\tvalidator = new ValidatorImpl();\n\t}\n\t\n", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT));\n        registry.put((byte) (GET_ATTRIBUTE ^ RESPONSE_MASK), new MarshalledResponseHandler<Object>(OBJECT));\n        registry.put((byte) (GET_ATTRIBUTES ^ RESPONSE_MASK), new MarshalledResponse", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                        String id = LogDB.getNewId(lang);\n                        Tweet t = new Tweet.getInstance(id, origContent, lang, tweet.getUser().getName(), tweet.getCreatedAt(), \"twitter\", url, tweet.getId(), \"tweet\");\n                        DAO.saveEntry t:\n:\n                        if (DAO.isNew(t)) {\n                            String filename", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n\n        elif isinstance(descriptor, AssociatedDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n\n        else:\n            raise PyBufrKitError('Unknown descriptor type: {}'.format(type(descriptor)))\n\n        return lines\npybufrkit", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "        help=\"\"\"network latency time [milliseconds].\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 10ms\n        \"\"\".format(\n            \", \".join([\"/\".join(values) for values in hr.Time.get_text_units().values()])\n        ),\n    )\n    group.add_argument", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "        return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_contact(self):\n        return self.get_contacts().first()\n\n    def get_messages(self):\n        return Message.objects.filter(contact=self.contact)\n\n    def get_messages_by_direction(self, direction):\n        return self.get_messages().filter(direction=direction)\n\n    def get", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "        pipeline.apply(\"Read live projects\", new LiveProjectSource(org));\n\n    // Tag the live projects to indicate they're from the live API and not a checked-in repo.\n    PCollection<KV<GCPResource, KV<StateSource, GCPResourceState>>> taggedLiveProjects =\n        liveProjects.apply(ParDo", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "        self.rule = DetectSoft404()\n        self.rule.set_engine(self.engine)\n        self.rule.set_child_heuristics(self.child_heuristics)\n        self.rule.set_engine(self.engine)\n        self.rule.set_child_heuristics(self.child_heuristics)\n        self.rule.set_engine = Mock()\n        self.rule.set", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "        ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ffibuilderRX.compile(tmpdir=cls.tmpdirnameXOR.name, verbose=VERBOSE)\n       ", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "        conditions.append(AndCondition())\n    if \"or\" in operations:\n        conditions.append(OrCondition())\n    if \"not\" in operations:\n        conditions.append(NotCondition())\n    if \"eq\" in operations:\n        conditions.append(ComparisonCondition(column, value))\n    if \"ne\" in operations:\n       ", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "    private final IJavaProject javaProject;\n\n    private final GeneratorModel model;\n\n    private final GeneratorWizardMainPage mainPage;\n\n    private final GeneratorWizardTestClassPage wizard;\n\n    private final GeneratorWizardTestPage testPage;\n\n    private final GeneratorWizardTestprioPage testprioPage;\n\n    private final Generator", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate static final int PAGE_HEIGHT = 1000;\n\tprivate static int pageWidth = 1;\n\tprivate static int pageHeight;\n\tprivate static int pageBoxHeight;\n\tprivate static int pageBoxWidth;\n\tprivate static int pageBoxHeight;\n\tprivate static int pageBoxWidth;\n\tprivate static int pageBoxHeight;\n\tprivate static int", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "    javadocTool.run(cmdLine);\n    return 0;\n  }\n  \n  private static boolean isLinkHostOnline(Log log, String url) {\n    try {\n    return InetAddress.getByName(url).isReachable(1);\n  } catch (IOException e) {\n    log.error(null, __ -> \"", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)\nsatcfe/clientelocal.py\nclass ClienteSATLocal(ClienteSAT):\n    \"\"\"Fornece acesso ao equipamento SAT conectado na máquina local.\n\n    As respostas às funções SAT serão trabalhadas result", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "    if gopts.git_trace2_event_log:\n      git_trace2_event_log.StartEvent()\n    if gopts.event_log:\n      event_log = event_log.EventLog()\n      event_log.StartEvent()\n    if goopts.time:\n      start_time = time.time()\n\n    # Handle options that require a working directory.\n", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "    Prefs providePrefs(SharedPreferences prefs) {\n        return new Prefs(prefs);\n    }\n\n    @Provides @Singleton\n    PersistentData providePersistentData() {\n        return new PersistentData();\n    }\n\n    @Provides @Singleton\n    ImageSaver provideImageSaver(Ion ion) {\n        return new", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "        Assert.assertThat(ds, totalQueryCount(5));\n        Assert.assertThat(ds, totalQueryCount(is(5)));\n    }\n\n    @Test\n    public void testTotalCountWithOther() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution()); ", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "        return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckOutCommand()\n", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "        VerifierProperty validSchemaVerifier = new ValidSchemaNameVerifierImpl();\n        VerifierProperty localFileExistsVerifier = new LocalFilesExistVerifierImpl();\n        VerifierProperty remoteFileExistsVerifier = new RemoteFilesExistVerifierImpl();\n\n        verifierProperties.add(validSchemaVerifier);\n        verifierProperties.add(localFileExistsVerifier);\n", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "            showProgress(false);\n            Toaster.getInstance().toast(R.string.error_login, Toast.LENGTH_LONG);\n        }\n    }\n\n    public void onPostRegisterDeviceExecute(Boolean success) {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n\n        if (success) {\n            Log.d(this.getClass", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (invokes the drupal Service user.login)\n     *\n     * @param username the user's username\n     * @param password  the user's plaintext password", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "        self.textArea.addMessage(lexMessage(text), self.chum)\n        self.textArea.textReady.emit(True)\n        self.textInput.clear()\n        self.text = self.history.next(text)\n        if text is not None:\n            self.text = self.textArea.append(convertTags(text))\n            self.textInput.setText(text", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "            (r'/login', LogInHandler),\nNext line of code:\n:\n            (r'/logout', LogOutHandler),\nNext line of code:\n:\n            (r'/register', RegisterHandler),\nNext line of code:\n:\n            (r'/problem/(.*)', ProblemHandler),\nNext line of code:\n:\n", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAnd", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "                throw new ProtTestInternalException(\"Unknown information criterion: \" + criterion);\n        }\n\n        return informationCriterion.compute();\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade.ProtTestFacade", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "    return Pair(e1, e2, e.subst_expr([e1, e2], ty1, ty2))\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"First projection of a pair\n    \"\"\"\n    return Fst(expr)\n\n\n@with_info(st_term)\ndef snd(expr):\n    \"\"\"", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "    void inject(BatteryStatusIndicator batteryStatusIndicator);\n    void inject(BatteryStatusFragmentBookList batteryStatusList);\n    void inject(BatteryStatusIndicator batteryStatusIndicator batteryStatusIndicator);\n    void inject(BatteryStatusIndicator batteryStatusIndicator);\n    void inject(BatteryStatusIndicator batteryStatusIndicator);\n    void inject(B", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "    private List<ExpenseCategory> expenseCategories;\n    private List<Expense> expenses;\n    private List<Expense> expensesByCategory;\n    private List<Expense> expensesByCategoryByMonth;\n    private List<Expense> expensesByCategoryByCategoryByMonth;\n    private List<Expense> expensesByCategoryBy", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "pyramid_swagger/tween.py\ndef validate_response(response, validator_map):\n    \"\"\"Validates response against our schemas.\n\n    :param response: the response object to validate\n    :type response: :class:`pyramid.response.Response`\n    :type validator_map: :class:`pyramid_swagger.load_schema", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t@Override\n\tpublic void enterNewStructureNodeCommand(NewStructureNodeCommandContext ctx) {\n\t\t// TODO Auto-generated method stub\n\t}\nNext line of code:\n:\n\t@Override\n\tpublic void enterNewSpanNodeCommand(NewSpanNodeCommandContext ctx) {\n\t\t// TODO Auto-generated method stub\n\t}\n", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "            except TextGridParseError as e:\n                self.return_dict[\"textgrid_error_files\"].append(e)\nNext line of code:\n:\n            except Exception as e:\n                self.return_dict[\"error_files\"].append(e)\nNext line of code:\n:\n            self.finished_processing.stop_check()\nNext line of code:\n:\n", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "        AccelerometerResource,\n        \"/aircraft/sensors/accelerometer\",\n        resource_class_args=(sensors.accelerometer,)\n    )\n\n    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "        self.assertAlmostEqual(gps.airspeed, fdmexec.GetPropagate().GetVtrueKts())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n        self.assertAlmostEqual(gps.altitude, fdmexec.GetPropagate().GetAltitudeASLmeters())\n       ", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "    'Usage: pywbemcli [GENERAL-OPTIONS] instance create CLASSNAME [COMMAND-OPTIONS]',  # noqa: E501\n    'Create an instance of a class in a namespace.',\n    '1. By specifying the class path of the creation class of the instance',\n    '2.", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate IPlogServices ipLogServices;\n\t/**\n\t * \n\t * @return\n\t */\n\t@RequestMapping(value = {\"/manage\", \"/manage/index\"}, method = RequestMethod.GET)\n\tpublic ModelAndView index() {\n\t\tModelAndView mv = new ModelAndView(\"manage/index\");\n\t\treturn", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                        if (t instanceof SdkClientException) {\n                            logError(\"SDK client exception: \" + t.getMessage());\n                        } else if (t instanceof AWSLambdaException) {\n                            logError(\"AWS Lambda exception: \" + t.getMessage());\n                        } else if (t instanceof InvalidOperationException) {\n                            logError(\"Invalid", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                       join_keyword=hindi_remind())\n\n    def test_full_e2e_gujarati_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full flow for sign up + cancel in Gujarati...\")\n        self.run_e2e_flow_for_language(language=\"Gujarati\",\n                                       person_name=\"", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester passiveLocationUpdateRequester;\n  protected LocationUpdateRequester activeLocationUpdateRequester;\n  protected LocationUpdateRequester passiveLocationUpdateRequester;\n  protected LocationUpdateRequester activeLocationUpdateRequester;\n  protected LocationUpdateRequest", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "        print \"\\n[INFO] MobSF will perform Dynamic Analysis on Android VirtualBox based VM\"\n    else:\n        print \"\\n[INFO] MobSF will perform Dynamic Analysis on Android VirtualBox based VM\"\n    # try:\n    connect(adb)\n    # except:\n    #     PrintException(\"[ERROR]", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Layer):\n    constructorList = [\n        Bit('RRC', 'RRC header', Pt=0, Repr='bin', Type='RRC header'),\n        Int('RRC_Protocol_Disc', 'RRC protocol disc', Pt=0, Repr='hex',", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tadjacency = CreateAdjSet(v_lh,faces_lh)\nNext line of code:\n:\n\t\t\tadjacency = CreateAdjSet(v_rh,faces_rh)\nNext line of code:\n:\n\t\t\tadjacency = CreateAdjSet(v_lh,faces_lh)\nNext line of code", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\r\n    } else {\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\r\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\r\n    result.append(CLOSE_BRACKET);\n  }\n\n  public void", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "        final CacheList list = new CacheList();\n        list.setName(listName);\n        cacheService.storeCacheList(list);\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final Optional<String> listNameOption = Dialogs.\n        create().\n        title(resourceBundle.getString", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "        Layer3('header', 'Header', 0x0000, 0x0000),\r\n        Layer3('header', 'Header', 0x0000, 0x0000),\r\n        Layer3('header', 'Header', 0x0000, 0x0000),\r\n       ", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "    modules/gui/src/com/haulmont/timesheets/gui/approve/BulkTimeEntriesApprove.java\n    modules/gui/src/com/haulmont/timesheets/gui/approve/BulkTimeEntriesApprove.java\n    modules/gui/src/com/haulmont/timesheets/gui/approve/BulkTimeEntriesApprove", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "            (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.FormerlyElGamalEncryptOrSign): El", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "                             self._expansion_num, 0, ExpansionInfo.BOARDTYPE)\n\n    @property\n    def num_chans(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                            self._expansion_num, 0, ExpansionInfo.NUMEXPCHANS)\n\n    @", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "        self.key_size = read_u16le(f)\n        self.references = {}\n        for i in range(count):\n            key = read_u32le(f)\n            ref = self.index_ref_name(key)\n            self.references[ref] = key\n        s.close()\n\n    def write_index(self):\n        index_name =", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "            user = create_inactive_user(email, full_name)\n\n            # Send invitation email\n            subject = _('Invitation to join {}')\n            template = 'accounts/invitation_email.html'\n            url = reverse('accounts:activate_account',\n                        kwargs={'activation_key': user.activation_key})\n            comments = form.cleaned_data['", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "        if draft = await self.fetch_draft_for_channel(ctx.guild.id, ctx.channel.id):\n            if draft:\n                return await Utilities.message(ctx.channel, f\"A draft {draft\")\n            else:\n                return await Utilities.error(ctx.channel, f\"No draft not found for {ctx.channel.mention}\")\n        else:\n            return", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "            ex = Hitbtc('bccbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_CEX:\n            ex = Cex('bccbtc')\n        elif name == \"%s_BCH_BTC\" % constant.EX_BITTREX:\n            ex = Bittrex('BTC-BCC", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "            if item is None:\n                pass  # '*' wildcard doesn't match document nodes\n            elif context.axis == 'attribute':\n                if isinstance(item, (AttributeNode):\n                    yield item\n                elif isinstance(item, TypedAttribute):\n                    yield item\n            elif is_element_node(item):\n                yield item\n            else", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "    helpTestQueryCursor(0, 10);\n    helpTestQueryCursor(1, 10);\n    helpTestQueryCursor(9, 10);\n    helpTestQueryCursor(10, 10);\n    helpTestQueryCursor(11, 10);\n    helpTestQueryCursor(20, ", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tif (elt.hasAttribute(AlvisIRConstants.XML_SEARCH_EXPANDER_QUERY_NODE_EXPANDER_FACTORY)) {\n\t\t\tString queryNodeExpanderFactory = elt.getAttribute(AlvisIRConstants.XML_SEARCH_EXPANDER_QUERY", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                    MiPushClient.registerPush(CurrentUserActivity.this, mi_APP_ID, mi_APP_KEY);\n                    deviceMiToken = MiPushClient.getRegId(CurrentUserActivity.this);\n                    //stopGCM();\n                    //Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "                tablefmt = table_format\n            output.append(tabulate(rows, headers, tablefmt, tablefmt,\n                                   numalign, stralign, show_header))\n    if status:\n        output.append(status)\n    return output\nvcli/vcli.py\ndef get_vclirc_file():\n    \"\"\"Return the path to", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "        return words_api_route(id, word)\napi/poster/fanart.py\nclass FanArt:\n    \"\"\"API client to find posters for movies on fanart.tv\"\"\"\n\n    def __init__(self, api_key, client=Fetcher(FANART_URL)):\n        \"\"\"Constructor to prepare API connection.\n\n        :param", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate ConnectorIssues connectorIssues;\n\t@Inject\n\tprivate Connector connector;\n\t@Inject\n\tprivate ConnectorIssues connectorIssues;\n\t@Inject\n\tprivate ConnectorProjects connectorProjects;\n\t@Inject\n\tprivate ConnectorWorkLog connectorWorkLog;\n\t@Inject\n\tprivate ConnectorComments connectorComments connectorComments;\n\t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\t", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "        self.assertIsInstance(handle, HANDLE)\n        self.addCleanup(self._terminate_process, handle)\n        self.assertEqual(handle, HANDLE(handle))\n        self.addCleanup(self._terminate_process, handle)\n        self.assertEqual(handle, HANDLE(handle)\n        self.addCleanup(self._terminate_process, handle)\n        self.assertEqual(handle, HANDLE(handle)\n", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "        this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Observable<DirectorInfo> info() {\n", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                    return parserHolder.getParser().parse(roundEnv.getElementsAnnotatedWith(annotation), typeUtils, typeUtils);\n                })\n               .collect(Collectors.toList());\n\n        if (parsedPaths.isEmpty()) {\n            return;\n        }\n\n        Swagger swagger = specificationGeneratorFactory.build(roundEnv, roundDescriptor, parsedPaths, fileManagerFactory);\n", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "    protected PageParser pageParser;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n   ", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "            actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n            actionPopupGroup.add(new CopyNodeAction(this));\n            actionPopupGroup.add(new GoToMongoDocumentAction(this));\n        }\n\n        PopupHandler.installPopup", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "    private GuiButton add;\n    private GuiButton remove;\n    private GuiButton forget;\n    private GuiButton select;\n    private GuiButton none;\n    private GuiButton command;\n    private GuiButton channel;\n    private GuiButton alias;\n    private GuiButton prefix;\n    private GuiButton hidePrefix;\n    private Gui", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "                return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATIONS_CODE:\n                return new BtnClearAllNotifications();\n            case ConstantStr.FUNC_CLEAR_MEM_CODE:\n                return new BtnClearBackground();\n            case ConstantStr", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "        type = Type()\n        type.name = \"foo\"\n        type.item = ObjectInteger()\n        type.item.name = \"bar\"\n\n        self.assertEqual(\"42\", type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\n        type = Type()\n        type.name = \"foo\"\n        type.item", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "            new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(CorrectionEvent.class, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(StartEvent.class, this::queueEvent));\n       ", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "        if _cluster_type not in CLUSTER_TYPES:\n            raise PyOrientBadMethodCallException(\n                _cluster_type +'is not a valid data cluster type', []\n            )\n        self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n       ", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "    query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'frob': frob,\n        'format': 'json',\n        'nojsoncallback': 1,\n    }\n    sign_flickr_query(query)\n\n    url = urlunparse(('http', 'api.flickr", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t} catch(RejectedExecutionException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth RejectedExecutionException while inserting message\", e);\n\t\t\t\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "        k = bytecode[k][1]\n      except IndexError:\n        break\n      cond_stack_size += get_stack_effect(bytecode[k][2], bytecode[k][3])\n    if not condition_bytecode:\n      return\n    condition_bytecode = condition_bytecode\n    condition_ast = self.__make_condition_ast(condition_byte", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "    List<CreditPeriod> creditPeriods = new ArrayList<>();\n    List<DailyExpense> dailyExpenses = new ArrayList<>();\n    List<DailyExpense> dailyPayments = new ArrayList<>();\n    List<ExpenseCategory> expenseCategories = new ArrayList<>();\n    List<ExpenseType> expenseTypes = new ArrayList<>();\n    List", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\nall_platform_slugs = tuple(all_platform_slugs)\n\nclass LanguageAdmin(admin.ModelAdmin):\n    list_display = ('lang_name', 'locale_ids', 'lang_status')\n    search_fields = ('lang", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t@Override\n\t\t@Override\n\t\tpublic void onLocationChanged(Location location) {\n\t\t\t// Update the location in the database\n\t\t\tDb.updateLocation.setLastLocation(this, location);\n\t\t\t// Update the location in the view\n\t\t\t((LocalPlacesAdapter) localPlacesView.getAdapter()).update", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "    import pingparsing\n    parser = pingparsing.PingParsing()\n    parser.parse(ping_result)\n    parser.as_dict()\n    parser.as_tuple()\n    parser.as_dict(include_icmp_replies=True)\n    parser.is_empty()\n    parser.as_dict(include_icmp_replies=True)\n    parser.as_dict", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "        //chat = DatabaseManager.INSTANCE.getChatDAO().get(chatId);\n        // Assuming that the messages are sorted by id\n        latestMessageOnDisplay = new AtomicLong(0);\n        } catch (NullPointerException e) {\n            // Occurs when new chat has been generated, but id hasn't been returned by", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic static void main(String[] args) {\n\t\tnew Cubeshaft();\n\t}\n\t}\n}\nsrc/com/naronco/cubeshaft/gui/MenuInventory.java\npublic class Menu extends Menu {\n\tprivate int selectedSlot = 0;\n\tprivate int selectedTile = 0;\n\tprivate int selectedTile2 = 0", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "    account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string.", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "        assertThat(qe, isCallable());\n        assertThat(qe, callable());\n        assertThat(qe, batchCallable());\n        assertThat(qe, callableOrBatchCallable());\n\n        assertThat(qe, isPrepared());\n        assertThat(qe, prepared());\n        assertThat(qe, batchPrepared());\n        assertThat(qe, prepared", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "      log(\"server response is: error \" + error, null);\n      successful = false;\n      uploadFinished();\n      return;\n    }\n    log(\"server response is: \" + responseTxt, null);\n    if (onSubmitComplete) {\n      log(\"POST response from server has been received\", null);\n     ", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "    # for assembly_points in assembly_points_by_sources.values():\n    original_assembly_points_by_ids = assign_ids_to_assembly_points(assembly_points=original_assembly_points, id_prefix=\"or_\",\n                                                                    id_generator=id_generator, sort=True)\n\n    #######################################\n    #       assembly points merging       #\n    #######################################\n", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.thermometer,)\n    )\n\n   ", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "                        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send_channel_config_embed(ctx, channel_dict, channel_dict, title=None, icon=None, msg_color=None,", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (!level.isInstalled())\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tif (level.getId() == levelsManager.getCurrentId()) {\n\t\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\t\tgetString(R.string.uninstall_levels),\n\t\t\t\t\t\t\t\tgetString(R.string.uninstall_levels_confirmation),\n\t\t\t\t\t\t\t\tnew Runnable() {\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\t\tgd", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "    private WeeklyCaptionProvider captionProvider;\n\n    /** Defines the component's active time zone. */\n    protected ZoneId zoneId = ZoneId.systemDefault();\n\n    /** Defines the calendar's date range starting point. */\n    protected ZonedDateTime startDate = null;\n\n    /** Defines the calendar's date range ending point. */\n   ", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Observable<DirectorInfo> info() {\n        return info.info();\n    }\n\n    @Override\n    public Observable<List<ReleaseSummary>> listReleases() {\n        return releases.list();\n    }\n\n   ", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "    VerifierProvider rsaLocator = new DefaultPublicKeyLocator(\n        new IdentityServerDescriptorProvider(), new JsonServerInfoResolver());\n    rsaLocator.setVerifierProvider(SignatureAlgorithm.RS256, rsaLocator);\n    rsaLocator.setVerifierProvider(SignatureAlgorithm.RS1, rsaLocator);\n\n    VerifierProvider rsa", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n\n", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                } catch (FilesNotFoundException e) {\n                    // This is expected\n                }\n                }\n            }\n            \n            // Clean up\n            client.deleteContainer(containerName);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} \t\t\n\t}\n\t\n\tpublic void testMultipleFiles", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                    trackHistoryEntry = new TrackHistoryEntry();\n                    trackHistoryEntry.title = liveInfo.getTitle();\n                    trackHistoryEntry.endTime = currentTime;\n                    trackHistoryRepository.getHistoryManager.add(trackHistoryEntry);\n                }\n            });\n        }\n    }\n\n    @Override\n    public void onPlayerStateChange(PlayState state)", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "    @SuppressLint(\"NewApi\")\n    @Bean\n    SpiceManager spiceManager;\n    @Bean\n    YarrnPrefs_ prefs;\n    @Bean\n    YarrnSpiceService spiceService;\n    @Bean\n    YarrnSpiceService spiceService;\n    @Bean\n    Yarr", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                        Intent intent = new Intent(mContext, IconPreviewActivity.class);\r\n                        intent.putExtra(IconPreviewActivity.EXTRA_TITLE, home.getTitle());\r\n                        intent.putExtra(IconPreviewActivity.EXTRA_SUBTITLE, home.getSubtitle());\r\n                        intent.putExtra(IconPreviewActivity.EXTRA_STYLE, home.getHomeImageViewStyle());\r\n                        intent.putExtra(IconPreviewActivity", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING, \"utf-8\")\n    if typepy.is_empty_sequence(proxy):\n        proxy = app_configs.get(ConfigKey.PROXY_SERVER, None)\n    if typepy.is_empty_sequence(format_name):\n        format_name = \"html\"\n    convert_configs = load_convert_config(\n", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "    return _item.playlistItemID\nNext line of code:\n:\n    return _item.playlistItemID\nNext line of code:\n:\n    return _item.playlistItemID\nNext line of code:\n:\n    return _item.playlistItemID\nNext line of code:\n:\n    return _item.playlistItemID\n", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "        self.assertEqual(\n            _environment_to_string({u\"a\": u\"b\", u\"b\": u\"c\"}),\n            u\"a=b\\0b=c\\0\\0\")\nNext line of code:\n:\n        self.assertEqual(\n            _environment_to_string({u\"a\": u\"b\", u\"b\":", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "    if gopts.trace:\n      SetTrace()\n\n    # Handle options that terminate quickly first.\n    if gopts.help or gopts.help_all:\n      self._PrintHelp(short=False, all_commands=gopts.help_all)\n      return 0\n    elif gopts.show_version:\n      # Always allow global --version", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "                // 执行成功后，执行监听器。\n                for (RunnerTaskListener runnerListener : runnerListenerList) {\n                    runnerListener.onPostExecute(taskData);\n                }\n            } catch (TaskDataException e) {\n                // 任务数据异常，设置为失败。\n                taskData.setState(TaskData.STATE_FAIL", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "        await r.after_headers(Entry.create(\"http://example.com\", arguments={\"timeout\": 10}))\n        self.assertEqual(r.exception_class, None)\n\n    @async_test()\n    async def test_reject(self):\n        r = RejectStatusCode([200, 404])\n        await r.after_headers(Entry.create(\"http", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "        //用户的年级\n        stuGrade = split[2];\n        //用户的学院\n        stuXy = split[3];\n        //用户的专业\n        stuZy = split[4];\n        //用户的班级\n        stuBj = split[5];\n        //用户", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "        Qdisc.attach(self.__con)\n        Qdisc.create()\n\nNext line of code:\n        self.__device = device\n        self.__ifb_device = self.parse_incoming_device(tc_command_output)\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output =", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "            if inv:\n                state[\"inventory\"] = [mudobj_ref(i) for i for i in inv]\n            else:\n                state[\"inventory\"] = []\n        except AttributeError:\n            state[\"inventory\"] = []\n\n    def add_living_add_living_property(self, state: Dict[str, Any], obj", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  public Query visit(Ord4Search n, Query query) {\r\n    List<Occur occur = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occur = rfOpToOccur.get(n.f0.tokenImage.substring(0, 1));\r\n    } else {\r\n     ", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t\tthis.surveyName = null;\n\t}\n\t\n\tpublic ParameterizedGenerationService(boolean cleaningFolder) {\n\t\tthis.pipelineGenerator = new PipeLineGeneratorImpl();\n\t\tthis.valorizatorParameters = new ValorizatorParametersImpl();\n", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "        try {\r\n            decoder = (DataDecoder) Class.forName(\"com.zklogtool.\" + dataDecoder).newInstance();\r\n        } catch (Exception ex) {\r\n            logger.error(\"Problem with data decoder\", ex);\r\n            exit(1);\r\n        }\r\n\r\n        DataDirHelper dataDirHelper = null;\r\n        TransactionLog", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "            self.params[\"time_error\"] = self.root_dispersion\n        except UncertainTimeError:\n            log.error(\"We couldn't find a good estimate of the time error.  Switzerland won't work!\")\n            sys.exit(1)\n        except:\n            log.error(\"Weird error during time error calculation:\\n", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "        cursorById.close();\n        // Test a query with a where clause\n        String[] whereArgs = {Long.toString(movieRowId)};\n        Cursor movieCursorByMovieCursor = mContext.getContentResolver().query(\n                MovieColumns.CONTENT_URI,\n                null,\n                MovieColumns._ID + \" =?\",\n                whereArgs", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "        self.inscrit = inscrit\n        self.cotisations = GetCotisations(self.inscrit)\n        if len(self.cotisations) > 0:\n            index = len(self.cotisations) - 1\n            self.current_cotisation = self.cotisations[index]\n            for i,", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "        self.assertEqual(node_children(self.elem), [self.elem])\n        self.assertEqual(node_children(self.elem), [self.elem])\n        self.assertEqual(node_children(self.elem, tag='element'), [self.elem])\n        self.assertEqual(node_children(self.elem, tag='element'), [self.elem])\n        self.assertEqual(node_children(self.elem,", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.mapview);\r\n\t\tmapView = (MapView) findViewById(R.id.mapview);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(true);\r\n\t\tmapView.setStreetView(true);\r\n\t\tmapView.setTraffic(true);\r\n\t\tmapView.setMyLocationEnabled(true);\r\n\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new MushroomGhost(world, world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "  assert isinstance(config, LowRateConfig)\nNext line of code:\n:\n  assert config = LowRateConfig\nNext line of code:\n:\n  assert config.NAME = LowRateConfig.NAME\nNext line of code:\n:\n  assert config.SAMPLE_RATE_HZ = LowRateConfig.SAMPLE_RATE_HZ\nNext", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno\n        )\n        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\nsatcfe/clientesat.py\nclass ClienteSATLocal(FuncoesSAT):\n    \"\"\"Cliente SAT local, ist", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n    # TODO: better reference state handling\n    # TODO: model exclusions handling\n    # TODO: better reference state handling\n    # TODO: model exclusions handling\n    # TODO: better reference state handling\n", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "    api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_conditions\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(PositionResource, \"/fd", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "    def get_word_frequency(self) -> Dict[str, float]:\n        \"\"\"\n        Calculate the relative word frequency across all the texts in the corpus\n\n        Returns\n        -------\n        dict[str, float]\n            Dictionary of words and their relative frequencies\n        \"\"\"\n        word_counts = Counter()\n        for u in self.utter", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "    public static final String TextBlockObject = \"String\";\nNext line of code:\n:\n    public static final String TextBlockObject = \"String\";\nNext line of code:\n:\n    public static final String TextBlockObject = \"String\";\nNext line of code:\n:\n    public static final String TextBlockObject = \"", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n}\n", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "        return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private Tree createTree() {\n        Tree tree = new Tree();\n        tree.setRootVisibleRowCount(0);\n        tree.setShowsRootHandles(true);\n        tree.setCellRenderer(new TreeSpeedSearchRenderer());\n        tree.setCellEditor(new TreeSpeed", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// Footer with Footer and footer\n\t\t// Footer with footer\n\t\t// Footer with footer\n\t\t// Footer with footer\n\t\t// Footer with footer\n\t\t// Footer with footer\n\t\t// Footer with footer\n\t\t// Footer with footer\n\t\t// Footer with footer", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "                if (output!= null) {\n                    if (imageTaken!= null) {\n                        imageTaken.recycle();\n                    }\n                    imageTaken = output;\n                    output = null;\n                    output = null;\n                    output = null;\n                    output = null;\n                    output = null;\n                    output = null;\n                    output = null", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        setHasOptionsMenu(true);\n        mActivity = (MainActivity) getActivity();\n        if (savedInstanceState!= null) {\n            mShowToolbar = savedInstanceState.getBoolean(STATE_SHOW_TOOLBAR);\n            mShowFastScroller = savedInstanceState.getBoolean", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "    assert key\n    assert key.dynamo_name == \"hash\"\n    assert key._dynamo_name is None\n    assert key._name is None\n    assert key._name == \"hash\"\n    assert key._name == \"hash\n    assert key._name == \"hash\"\n    assert key._name", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "            GCActivitySet gcActivitySet, GCActivity gcActivity) {\n        locker.doIt:\n        doIt:\n        doIt:\n        doIt:\n        doIt:\n        doIt:\n        doIt:\n        doIt:\n        doIt:\n        doIt:\n        doIt:\n        doIt:\n       ", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "            '/properties':                  RestAppPropertys,\n        }\n        for r in self.resources:\n            self.api.add_resource(self.resources[r], *r.split('/' + self.version))\n        self.api.add_resource(RestSystem, '/system)\n        self.api.add_resource(RestDevice, device)\n        self.api", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "        self._settings_ini = settings_ini\n        self._tree_view = tree_view\n        self._settings_ini = settings_ini\n        self._tree_view = tree_view\n        self._settings_ini = settings_ini\n        self._tree_view = tree_view\n        self._settings_ini = settings_ini\n       ", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n        ),\n    )\n    group.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        packet re", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "    private final static int CHANNELS = 4;\n    private final static int CHANNELS = 4;\n    private final static int CHANNELS = 4;\n    private final static int CHANNELS = 4;\n    private final static int CHANNELS = 4;\n    private final static int CHANNELS = ", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface DateDoubleClickListener {\n        /**\n     * Triggered when a date was double clicked\n     *\n     * @param date\n     *            The date and time that was clicked\n    ", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "        if db_type is not None:\n            if db_type not in DB_TYPES:\n                raise PyOrientBadMethodCallException(\n                    \"db_type must be one of \" + str(DB_TYPES), []\n                )\n            self._db_type = db_type\n        return self\npyorient/constants.py\nSTORAGE", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "            break;\n        }\n\n        case NOOP: {\n            client.getBaseClient().schedulePingTimeout();\n            break;\n        }\n\n        case CONNECT: {\n            client.getBaseClient().schedulePingTimeout();\n            namespacesHub.onConnect(client);\n            break;\n        }\n\n        case DISCONNECT: {\n            client.getBaseClient", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem> contentItemList = new ArrayList<Content", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());\n\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tGenerationService generationService = new GenerationService(preprocessors, generator, generator, postprocessors);\n\t\treturn generationService;\n\t}\n\n\tprivate Generator", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "    PCollection<GCPProject> liveProjects =\n        pipeline.apply(\"Read live projects\", new LiveProjectSource(org));\n    // Convert projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        liveProjects.apply(ParDo.named(\"Convert project data", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "        by_range = GlobalSecondaryIndex(hash_key=\"range\", projection=\"all\")\n        by_range = GlobalSecondaryIndex(hash_key=\"range\", projection=\"all\")\n        by_range = GlobalSecondaryIndex(hash_key=\"range\", projection=\"all\")\n        by_range = GlobalSecondaryIndex(hash_key=\"range\", projection=\"all\")\n", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim, dim, vocab, lookup)\n            else:\n                raise NotImplementedError()\n            children.append(self._def_reader)\n        else:\n            self._def_reader = None\n\n        super(LanguageModel, self).__init__(children=children,", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "    private final AcceptCallback _acceptCallback = new AcceptCallback() {\n        @Override\n        public void statusChanged(AcceptCallbackState state) {\n            switch (state) {\n                case Connected:\n                    Log.v(TAG, \"Connected to relay.\");\n                    break;\n                case Accessible:\n                    Log.v(TAG,", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "    RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRightInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOutDownLeft(RotateOutDownLeft.class),\n    RotateOutDownRight", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "            form.fields['perfil'].queryset = self.request.user.perfil.zonas_permitidas.all()\n        return self.render_to_response(self.get_context_data(form=form))\n\n    def form_valid(self, request, *args, **kwargs):\n        form_class = self.get_form_class()\n        form = self.get_form(form", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        // TODO Auto-generated method stub\n        // TODO Auto-generated method stub\n        // TODO Auto-generated method stub\n        // TODO Auto-generated method stub\n        // TODO Auto-generated method stub\n        // TODO Auto-generated method", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\tpublic long[] getDimensions(String path)\n\t{\n\t\tif(this.handle == null) new ErrorJSON(\"Please open the Loom file first\");\n\t\treturn this.handle.getDataSetInformation(path).getDimensions();\n\t}\n\t\n\tpublic String[] getAttribute(String path, String key)\n\t{\n\t\tif(this.handle == null", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plus(ActorDetailsComponent actorDetailsComponent);\n}\napp/src/main/java/com/rashwan/reactive_popular_movies/feature/movieDetails/movieReviews/injection/MovieReviews", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfidixMethodCheckException e) {\n\t\t\tthrow new SocketViewException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Running the actual benchmark.\n\t *\n\t * @throws SocketViewException\n\t *             if socket communication fails\n\t */\n\tpublic void runBenchmark() throws Socket", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "    sync_stats_manager = SyncStatsManager()\n    ci_pipeline_manager = CIPipelineManager()\n    pipeline_config_manager = PipelineConfigManager()\n    transplatform_sync_manager = TransplatformSyncManager()\n    release_schedule_sync_manager = ReleaseScheduleSyncManager()\n    build_tags_sync_manager = BuildTagsSyncManager()\n    yml", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo\n\t\t\t\t\t.getMoreSuitableEndpoint(endpointType == null? EndpointType.PRODUCTION\n\t\t\t\t\t\t\t: endpointType);\n\t\t\t;\n\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Using the endpoint: \" + endpoint.getSpecificationUrl());\n\t\t\treturn activateLoginIfRequested(createMost", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "        if request.method == \"POST:\n        form = PlanillaDeRelevamientoForm(request.POST, user=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'La planilla de relevamiento fue creada con éxito.')\n            return render(request,'relevamiento/mensaje.html", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "      self._cstr = root\n      return\n\n    # We have a comparator\n    if root.data[1] == CMP_IMPLICIT_NOT_EMPTY:\n      self._cstr = root\n      return\n\n    # We have a type check\n    if root.data[1] == CMP_TYPE_CHECK:\n     ", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "  private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler    = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<WaitAction>           waitActionSupportHandler           = new ActionSupportHandler<WaitAction>(WaitAction.class);\n  private ActionSupportHandler", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t// check if player is online\n\t\tif (Bukkit.getPlayer(this.getName()) == null) {\n\t\t\tthrow new PlayerOfflineException();\n\t\t}\n\t\t// check if player is already in a round\n\t\tif (this.isInRound()) {\n\t\t\tthrow new PlayerPresentException();\n\t\t}\n\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0)\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), 0)\n    assert_array_equal(fold([MIN_HASH_VALUE], 0), 0)\n    assert_array_equal(fold([MIN_HASH", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "        else:\n            if UNICODE_DIGIT_PATTERN.search(fmt_token) is None:\n                if any(not x.isalpha() and not x.isdigit() for x in fmt_token):\n                    result = str(value)  # fallback for invalid pictures\n                else:\n                    base_char = '1'\n                    for base_char in fmt", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item is None:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._root_item:\n\t\t\t\treturn default_flags\n\t\t\telif model_item.is_editable:\n\t\t\t\treturn default_flags | Qt.ItemIsEditable\n\t\t\telse:\n\t\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "        object_dto.append(MultiVersion(object1, version1.name))\n        object_dto.append(MultiVersion(object2, version1.name))\n        object_dto.append(MultiVersion(object3, version1.name))\n        object_dto.append(MultiVersion(array, version1.name))\n\n        response = Hydr", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "          byte[] data = buildRawData(clientConfig, dataSource);\n          byte[] catBytes = buildRawCatalogData(clientConfig, templateSource);\n          byte[] data = buildRawData(clientConfig, dataSource);\n          byte[] catBytes = buildRawCatalogData(clientConfig, templateSource);\n          byte[] data = build", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\nNext line of code:\n:\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\nNext line of code:\n:\n", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "        allOf(\n                hasJsonPath(\"hits.total\", is(100)),\n                hasJsonPath(\"hits.hits[0]._source.identifier\", containsString(\"csw-record-1\"),\n                        hasJsonPath(\"hits.hits[0]._source.identifier\", containsString(\"csw-record-2\"),\n                                hasJsonPath", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "            (True, PubKeyAlgorithm.FormerlyElGamalEncrypt): ElGPub,\n            (True, PubKeyAlgorithm.FormerlyElGamalSign): ElGPub,\n            (True, PubKeyAlgorithm.RFC4880ElGamalEncryptOrSign): ElGPub,\n            (True,", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\t", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                        res = getSearchResults(\n                            context.<String>get(ContextKeys.POSITIONAL),\n                            context.<Boolean>get(Authz.PrincipalRecord.IS_PRINCIPAL),\n                            context.<Boolean>get(Authz.GroupRecord.IS_GROUP)\n                        );\n                        if (res!= null) {\n                            context.put(\n                                Context", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "    url(r'^users/users/list/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new_user'),\n    url(r'^users/(?P<pk>[-\\w]+)/edit/$', edit_user, name='edit_user'),\n    url(r'^users/(?P<pk", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                            Intent intent = new Intent(getActivity(), MixedActivity.class);\n                            intent.putExtra(\"stack, MixedActivity.KEY_STACK, stack);\n                            startActivity(intent);\n                        }\n                    }\n                    }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"PlaySessionSettings\");\n            }\n        }\n    }\n\n    private void startLearnActivity()", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "    DropMenu dropMenu;\n    DropMenuAdapter dropMenuAdapter;\n    private int[] titles;\n    private List<FilterType> list;\n    private HashMap<String[] titles;\n    private List<FilterType> list;\n    private HashMap<String> mapValue;\n    private String[] titles;\n    private List<Filter", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "        obj.updateBuffImg();\n        obj.updateBlockShape();\n        obj.updateBlockLabels();\n        obj.updateSocketTags();\n        obj.updateBlockWidget();\n        obj.updateBlockShape();\n        obj.updateBlockWidget();\n        obj.updateBlockWidget();\n        obj.updateBlockWidget();\n        obj.updateBlockWidget();\n        obj.updateBlock", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "        f = derivative.XDA([d1, d2])\n        i, j = self._find_preimage(f, d3)\n        assert i is not None\n        assert j is not None\n        assert i == f.get_pair_element(d1)\n        assert j == f.get_pair_element(d2)\n", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node newChildren);\n\t\tpublic abstract Node transformMultiConstant(MultiConstantNode node, List<Set<Character>> newCharacterOptions, List<Set<Character>> newCharacterChecks);\n\t}\n\t\n\tprivate static class ConstantTransformer implements NodeTransformer {\n\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the commands\n\t\tfor (BaseCommand command : commands) {\n\t\t\tgetCommand(command.getBaseCommand()).setExecutor(command);\n\t\t}\n\t\t\n\t\t// Register the listeners\n\t\tPluginManager pm = getServer().getPluginManager();\n\t\tpm", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Hight32 = HightCipher\nLea32 = LeaCipher\nShacal1 = Shacal1Cipher\nShacal2 = Shacal2Cipher\nFeal = FealCipher\nTea = Tea = TeaCipher\nXtea = XteaCipher\nCham = cham", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "    private FastScroller mFastScroller;\n    private SongListAdapter mAdapter;\n    private boolean mShowToolbar;\n    private boolean mShowFastScroller;\n    private int mSortOrder;\n    private boolean mShowAlbumArt;\n    private boolean mShowArtist;\n    private boolean mShowTrackNumber;\n    private", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "            mParameterListView.setVisibility(View.GONE);\n            mParameterToggleMenuItem.setVisible(false);\n            mParameterListAdapter = null;\n            return false;\n        }\n        if(effect instanceof ImmersiveEffect) {\n            if(mImmersiveSensorNavigation == null) {\n                try {\n                    mImmersiveSensorNavigation = new Immersive", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "        Bit('ESM', ReprName='ESM Cause', Pt=6, BitLen=4, Dict=ESMCause_dict,\n            Repr='hum'),\n        Bit('ESM', ReprName='ESM Cause', Pt=6, BitLen=4, Dict=ESMCause", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "            mArtist = null;\n            mArtist = getArtistFromBundle(getArguments());\n            mAlbumListLoaded = false;\n            mSongListLoaded = false;\n            mAlbumListAdapter.setData(null);\n            mSongListAdapter.setData(null);\n            mAlbumListLoaded = false;\n            mSongListLoaded = false;\n           ", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "                    self.log_debug(f\"    Found {len(exts.identifiers)} identifiers\")\n                    self.log_debug(f\"    Found {len(exts.wav_files)}.wav files\")\n                    self.log_debug(f\"    Found {len(exts.other_audio_files)} other audio files\")\n                    self.log_debug(f\"    Found", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user);\n\t}\n\n\t@GET\n\t@Path(\"getoutputyears\")\n\t@Produces(\"application/json\")\n\t@Override\n\tpublic Integer[][] getOutputYears() {\n\t\tString userName = getCurrentUserName();\n\n\t\tInteger[][] returnValue = null;\n", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "    Observable<ApiStatus> apiInfo(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the HTTP headers for the given request.\n     *\n     * @param apiKey account api key\n     * @param url    URL to get the headers for\n     */\n    @GET(\"http-header\")\n    Observable", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n    public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(message.properties());\n    }\n\n    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.optionName(), message.value());\n    }\n  }\n}\ncal", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "    assert almost_eq(erb(freq, Hz=Hz=1, strategy=\"glasberg_moore_slaney\"),\n                      Hz=1, tol=1e-3), \"Glasberg and Moore and Slaney (1990)\"\n    assert almost_eq(erb(freq=1000, Hz=1,", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "            offset = dataset.file_tell + len(dataset)\n            offset = dataset.file_tell + len(dataset)\n            offset = dataset.file_tell + len(dataset)\n            offset = dataset.file_tell + len(dataset)\n            offset = dataset.file_tell + len(dataset)\n            offset = dataset.file_tell + len", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "    try {\n      final T expressionContext = proxyBuilder.build();\n      CoordinatesWalker walker = new BaseCoordinatesWalker(document) {\n        @Override\n        protected void onParagraph(ParagraphCoordinates paragraphCoordinates) {\n          for (ICommentProcessor commentProcessor : commentProcessors) {\n            if (commentProcessorInterfaces.containsKey(commentProcessor", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "    protected abstract class PatternSearchFragmentListener {\n        public void onPatternSelected(PatternShort pattern) {\n        }\n    }\n}\nYarrn/src/main/java/de/vanmar/android/yarrn/requests/AbstractRavelryGetRequest.java\npublic abstract class AbstractRavelryGetRequest<T extends ETaggable", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "    def __init__(self):\n        super(NotationData, self).__init__()\n        self.flags = []\n        self.name = \"\"\n        self.value = bytearray()\n\n    def __bytearray__(self):\n        _bytes = super(NotationData, self).__bytearray__()\n        _bytes += self.int_to", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "            if self.textSelected:\n                self.submitLogAction = QtWidgets.QAction(\"Submit to Pesterchum QDB\", self, triggered=self.submitLog)\n                textMenu.addAction(self.submitLogAction)\n            textMenu.exec_(event.globalPos())\n            if self.textSelected:\n                self.submitLogAction = QtWidgets.Q", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "    def check(self, node, env):\n        if isinstance(node, self.__type_):\n            return node\n        elif isinstance(node, self.__type_):\n            return node\n        elif isinstance(node, self.__type_):\n            return node\n        elif isinstance(node, self.__type_):\n            return node", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "    if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime10)):\n            return GregorianMonthDay(value.month, value.day, value.tz", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "    # TODO: we should only search and get phases that have the same sublattice_site_ratios as the phase in the database\n    desired_data = get_prop_data(comps, phase_name, \"CPM_FORM\", datasets)\n    # TODO: we should only search and get phases that have the same sub", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "    private void pausePlayerAndSHowVpaid(@NonNull PlayerUIController controller,\n            @NonNull PlayerAdLogicController componentController, @NonNull FsmPlayer fsmPlayer fsmPlayer, @NonNull AdMediaModel adMedia) {\n        if (ExoPlayerLogger.e(Constants.FSMPLAYER_TESTING, \"pausePlayer", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "        PressureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type == 0) {\r\n            ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "    @FormUrlEncoded\n    Call<Suggestions> getSearchSuggestions(@FieldMap Map<String, String> serviceIds,\n                                           @Field(\"tag\") String tag,\n                                           @Field(\"limit\") int limit);\n\n    @FormUrlEncoded\n    Call<Suggestions> getSearchSuggestions(@FieldMap Map<String, String", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "        return self._tables.pop(table_name, None)\n        ttl_name = model.Meta.Meta.ttl[\"column.dynamo_name\"]\n        request = {\n            \"TableName:", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "        # order nominal labels by numeric values\n        ordered_labels = sorted(data_set.label_map.items(), key=lambda t: t[0])\n        ordered_labels = list(zip(*ordered_labels))[1]\n\n        if self._learner is not None:\n            self._learner = self._learner\n        else:\n            self._", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t/**\n\t/**\n\t * 用户资料显示页面\n\t * @param username\n\t", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "        if isinstance(first_entity, str):\n            first_entity = self.registry.get(first_entity)\n            if not first_entity:\n                raise KeyError(\n                    'Class \\'{} not registered with graph.'.format(first_entity))\n\n        if not entities:\n            entities = [first_entity]\n        else:\n            entities = [self.registry.get", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the shifted frequency vectors as input, and is initialized with the hidden \n        representation of the input sequences. The output of the decoder RNN is fed back to the input with a probability\n", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "all_platform_slugs.extend(ZANATA_SLUGS)\nall_platform_slugs.extend(TRANSIFEX_SLUGS)\nall_platform_slugs.extend(DAMNEDLIES_SLUGS)\nall_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableDefinitionNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableReferenceNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n\t}\n\n\tpublic static H3", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "        final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Method\", \"Method\", Alignment.Left);\n        table.addHeader(\"Class\", \"Class\", Alignment.Left);\n        table.addHeader(\"Unit\", \"Unit\", Alignment.Left);\n        table.addHeader(\"Runs\", \"Runs\", Alignment.Right", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "      visitor.traverse(node)\n      return visitor.edges\n\n    def get_loop_end_target(node):\n      class BwdEdges(EdgeVisitor):\n        def __init__(end_index, branch_kind) in cur_block.jumps:\n          if jump_index <= ControlFlow.CFG_TMP_RETURN:\n            continue\n          target_block =", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.traindata, this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t\t\t\tSystem.exit(-1);\n\t\t}\n\t\tthis.t = this.tree.getSize();\n\t\tthis.Tarray = new int[this.t);\n\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "    from..xpath_nodes import is_xpath_node, is_element_node, is_document_node, is_processing_instruction_node, is_comment_node\n    from..xpath_token import XPathFunction\n    from..xpath_context import XPathSchemaContext\n    from..datatypes import xsd10_atomic_types, NumericProxy, QName, Date", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                    else if (Event.EVENT_TYPE_STATE_ROOM_POWER_LEVELS.equals(event.type)) {\n                        Log.e(LOG_TAG, \"Updating room power levels.\");\n                        RoomState roomState roomState = JsonUtils.toRoomState(event.content);\n                        updatePowerLevels(roomState.power_levels);\n                    }\n                    else if (Event.EVENT_TYPE_STATE", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\t\n\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDI32ToDDI33Preprocessor ddi32To33 = new DDI32ToDDI33Preprocessor();\n\t\n\t// PostProcessing", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "        self.releve_siej_button = wx.Button(self, -1, \"Génération\")\n        self.Bind(wx.EVT_BUTTON, self.OnGenerationReleveSIEJ, self.releve_siej_button)\n        box_sizer.AddMany([(self.releves_choice, 1, wx.ALL", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "            H += dot(crossmat(c - p), m * H_trans) + dot(crosstens(I), H_rot)\n            H += dot(crossmat(c - p), m * H_trans) + dot(crosstens(I), H_rot)\n        return H\n\n    def compute_angular_m", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "        if (queuedProjectResult.getPattern()!= null) {\n            Pattern pattern = queuedProjectResult.getPattern();\n            name.setText(pattern.getName());\n            author.setText(pattern.getAuthor());\n            gauge_description.setText(pattern.getGauge());\n            needles.setText(pattern.getNeedles());\n            yardage_description.setText(pattern.getYardage());\n           ", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "                new MigrateCommand());\n        // Register the currency registry\n        game.getServiceManager().getRegistry(CurrencyRegistryModule.class).register(new CurrencyRegistryModule());\n        // Register the loan module\n        game.getServiceManager().setProvider(this, LoanModule.class, new LoanModule());\n        // Register the SQL module\n       ", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "            _log.info('Initializing a %s prior for the parameters.', prior['name'])\n        else:\n            raise ValueError(\"Unknown prior spec {}. Should be either a PriorSpec instance or a dict\".format(prior))\n        prior_specs = build_prior_specs(prior, params)\n        return prior_specs\n\n    def _", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "      return Const.fromValue(arg)\n    elif op = in LOAD_ATTR:\n      return Ref.fromName(arg)\n    elif op in LOAD_METHOD:\n      return Ref.fromName(arg)\n    elif op in LOAD_GLOBAL:\n      return Ref.fromName(arg)\n    elif op in LOAD_FAST:\n      return Ref.fromName(arg)\n", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics;\n\tprivate final FringeLayer fringeLayer;\n\tprivate final SpriteBatch batch;\n\tprivate final SpriteBatch debugBatch;\n\tprivate final SpriteBatch debugBatch2;\n\tprivate final SpriteBatch debugBatch3;\n\tprivate final SpriteBatch debugBatch4;\n\tprivate final SpriteBatch debugBatch5;\n\tprivate final SpriteBatch debugBatch", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new TempSensorView();\n                    o = tview.getView();\n                    ((TempSensorPresenter) tview.get", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\t\tpublic List<AuthorWithBooks> fetch() {\n\t\t\tList<AuthorWithBooks> authors = new ArrayList<>();\n\t\t\tjdbcTemplate.query(\"SELECT AUTHOR\", new RowMapper<AuthorWithBooks>() {\n\t\t\t\t@Override\n\t\t\t\tpublic AuthorWithBooks mapRow(ResultSet rs, int rowNum) throws SQLException {\n\t\t\t\t\tAuthor", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return genomes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genomes\n     */\n    Genome parseGenomes(InputStream inputStream);\n\n    /**\n     * Parse", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "                Symbol.typed(bar_type, 'bar'),\n                Symbol.typed(IntType, 'baz'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type},\n    )\n\n\ndef test_list():\n    inc_type = Func[[IntType], IntType]\n    check_expr_type(\n", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, queryType(QueryType.SELECT));\n\n        // parameter\n        assertThat(pe, param(0, is(\"abc\")));\n        assertThat(pe, param(0", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "def __init__(self, main_window, document):\ndef __init__(self, parent, parent, document):\ndef __init__(self, parent, document):\ndef __init__(self, parent, document, main_window):\ndef __init(self, parent, document, main_window):\ndef __init__(self,", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                            return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return new ApiException(cause);\n            }\n        };\n        // Build the RestAdapter\n        mAdapter = new RestAdapter.Builder()\n               .setEndpoint(BASE_URL)\n               .setConverter(new GsonConverter(gsonsetup", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRendererRegistry(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new engine having <code>${</code> and <code>}</code> as start\r\n\t * and end strings for expressions.\r\n\t * \r\n\t * @param exprStartToken\n\t", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_LABEL_UPPER, false)) {\n\t\t\tlabelFactory = new UpperCaseFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "    url(r'^(?P<slug>[\\w\\-\\+]+)/add-ci-pipeline$', staff_member_required(AddCIPipeline.as_view(), login_url=LOGIN_URL), name=\"add-ci-pipeline\"),\n    url(r'^(?P<slug>[\\w\\-\\+]+)/add-ci-p", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                        intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        intent.putExtra(Extras.EXTRA_RESUMED, true);\r\n                        intent.putExtra(Extras.EXTRA_POSITION, position);\r\n                        intent.putExtra(Extras.EXTRA_SIZE, mWallpapers.get(position).getDimensions());\r\n                        intent.putExtra(Extras.EXTRA_NAME, mWallpapers.get(position).getName", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "    try:\n        user_id = access_token.get('user_id')\n    except KeyError:\n        raise ValueError(\"Result of Vimeo access token exchange did not have a user ID\")\n\n    person = None\n    if not request.user.is_anonymous():\n        person = request.user.person\n    account = account_for_vimeo_id", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "                mag_corr = 1.0\n                vign_corr = 1.0\n                test_px_sum = 400\n                test_px_sum = 400\n                test_px_sum = 400\n                test_px_sum = 400\n                test_px_sum = 400\n                test_px_sum = ", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "    if options['param_free'][0] is True:\n        scale = np.linspace(data[:, 0].min(), data[:, 0].max(), options['density)\n    else:\n        scale = options['param_ests'][0]\n    if options['param_free'][1] is True:\n        slope =", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "            Board.this.rollDices();\n          }\n        else\n          Board.this.rollDices();\n      }\n    });\n    rollBtn.setX(getX() + (boardbg.getWidth() - rollBtn.getWidth()) / 2);\n    rollBtn.setY(getY() + (boardbg.getHeight() - rollBtn.getHeight()) /", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "elementpath/xpath_nodes.py\ndef etree_iter_strings(elem: Union[DocumentNode, ElementNode, TypedElementNode]) -> Iterator[str]:\n    e: ElementNode\n\n    if isinstance(elem is not None and elem.xsd_type is not None and elem.xsd_type.is_element_only():\n        elem = elem.elem", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "        self.rule.set_engine(self.engine)\n        self.rule.set_child_heuristics(self.runner)\n        self.rule.load_kb(self.engine.kb)\n        self.rule.set_kb(self.engine.kb)\n        self.rule.set_engine(self.engine)\n        self.rule.set_child_heuristics(self.runner)\n        self.rule.load_kb(self", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "    cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n            emitente=Emitente(\n                    CNPJ=_opcao('--emitente-cnpj'),\n                    IE", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a profile.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a profile\n     */\n    Profile parseProfile(InputStream inputStream);\n\n    /**\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "            final EtsiResponse resp = this.client.sendRequest(req);\n            if (resp.getSignatureValue() == null) {\n                System.out.println(\"Signature value not found from response.\");\n                return;\r\n            }\r\n            \r\n            // 5. Create ASiC file\n            final byte[] signature = resp.getSignature", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Analysis:\n\t\t\treturn get_icon(\"analysis)\n\t\telif type(obj) is Proformer:\n\t\t\treturn get_icon(\"proformer)\n\t\telif type(obj) is Transformer:\n\t\t\treturn get_icon(\"", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "        RotationVectorSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBController.getInstance().flushDBCache(deviceID);\r\n        }\r\n        if(type == 13 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flush", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<String> schedule;\n\tprivate List<String> leaders;\n\tprivate List<String> leaders;\n\tprivate List<String> leaders;\n\tprivate List<String> leaders;\n\tprivate List<String> leaders;\n\tprivate List<String> leaders;\n\tprivate List<String> leaders;\n\tprivate List<String> leaders;\n\tprivate List<String> leaders;\n\tprivate List<String>", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "        DeviceInfo deviceInfo = new AndroidDeviceDetailsInfo().getDeviceInfo();\n        Feedback feedback = new Feedback(userFeedback.getType().getStringValue(),\n                userFeedback.getMessage(), userFeedback.getScreen(), deviceInfo, packageInfo, packageInfo,\n                AppliverySdk.fileProviderAuthority, AppliverySdk.appToken, email, null", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "            if key is None:\n                raise MissingKey(\"{!r} is missing {}: {!r}: {!r}\".format(\n                    obj, \"hash_key\" if key_column.hash_key else \"range_key\",\n                    key_column.name\n                ))\n            if key is None:\n                raise MissingKey(\"{!r} is", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "                art = draw_art(key['public_key'])\n                print(art)\n            print('Fingerprint: {0}'.format(format_fingerprint(fingerprint)))\n            print('Description: {0}'.format(description))\n            print('Created at: {0}'.format(created_at))\n            print('')\n\n    async def list_v", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\n", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "        return RespostaExtrairLogs.analisar(retorno)\nNext line of code:\n:\n        return RespostaExtrairLogs.analisar(retorno)\nNext line of code:\n:\n        return RespostaExtrairLogs.analisar(retorno)\nNext line of code:\n:\n        return Resposta", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_ASC:\n                    Arrays.sort(sorted, new ItemDurationComparator(true));\n                    break;\n                case DURATION_DESC:\n                    Arrays.sort(sorted", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "            self.training_complete = True\n            self.logger.info(f\"Training for {self.identifier} took {time.time() - begin}\")\n            return\n        self.training_complete = False\n        self.logger.info(f\"Training for {self.identifier} took {time.time() - begin}\")\n        with open(done_path, \"", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "    private final OAuth2Requester requester;\n    \n    public OAuth2ClientImpl(long clientId, long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient client)\n    {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.sessionController = sessionController;\n", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "    private final Vms vms;\n    private final Jobs jobs;\n    private final Tasks tasks;\n    private final Errands errands;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "    public HiMuteStatus getMuteStatus(HiSide side)\n    {\n        return _chat.getMuteStatus(side);\n    }\nNext line of code:\n:\n    public int getChatMessageCount()\n    {\n        return _chat.getChatMessageCount();\n    }\nNext line of code:\n:\n    public Chat", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "        return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "    @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        FontRenderer fontrenderer = mc.fontRenderer;\n        ILocation bounds = getLocation();\n\n        mc.getTextureManager().bindTexture(ChatBox.GUI_LOCATION);\n        GlStateManager.color(1.0F, 1.0F, 1", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "          DATA[looptest], 1.0E-6, FiniteDifferenceSchemes.FOURTH_ORDER);\n        double[] d3Sad = BlackFormula2.price_Sad_Automatic(\n            DoubleAad.input(DATA[looptest][0], new TapeAad()),\n            DoubleAad.input", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "            VotingModule.class\n    };\n\n\n    /**\n     * The plugin this module loader is for\n     */\n    private AthenaGM plugin;\n\n\n    /**\n     * A map of module instances, keyed by module name\n     */\n    private HashMap<String, Module> modules;\n\n\n    public ModuleLoader(AthenaGM plugin) {\n", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize number of thread pool.\n     * @return {@link DownloadQueue}.\n     * @see #newDownloadQueue()\n     */\n", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "  public void init(MutableConfig config) {\n    config.set(\"packager\", \"jar, \" + config.getOrThrow(\"packager\", String.class));\n  }\n\n  @Override\n  public void configure(MutableConfig config) {\n    var packager = config.getOrThrow(\"packager\", String.class", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        NodeList querySetNodes = element.getElementsByTagName(QUERY_SET_TAG);\n        for (int index = 0; index < querySetNodes.getLength(); index++) {\n            Node node = query", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "                        ExeSQL(sql)\n\n                        # update problem\n                        clause ='sid = {}'.format(S['sid'])\n                        sql = getUpdateSQL('problem', ret, clause)\n                        # print('update problem sql: ',sql)\n\n                        ExeSQL(sql)\n\n                        # update run\n                        clause ='sid =", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "            left_foot_task = DOFTask(\n                self.robot, self.robot.left_foot_dof, self.swing_foot.left_foot,\n                weight=swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_st", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "    simple_op = {BvAnd, BvOr, BvXor, BvComp, BvUlt, BvUle, BvUgt, BvUge, BvShl,\n    BvLshr, BvAdd, BvSub, BvMul,", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG).setType(ICC_PROFILE).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tif (aJPEG.mJFIFSegmentMarker!= null)\n\t\t{\n\t\t\tnew APP0Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tif (a", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "            if (sl == null) {\n                logger.severe(\"Keine Sammellastschrift ausgewählt.\");\n                return;\n            }\n\n            SqlSession session = sqlSessionFactory.openSession();\n            try {\n                LastschriftenMapper mapper = new LastschriftenMapper(session);\n                Rechnungen", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "    from montreal_forced_aligner.alignment.pretrained import PretrainedAligner\n    from montreal_forced_aligner.helper import align_phones, parse_old_features, parse_old_features\n    from montreal_forced_aligner.utils import AcousticModel\n    from montreal_forced_aligner.alignment.base import", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "        LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n        if (!properties.hasLore(key))\n            properties.addLore(key);\n\n        PacketSyncLore.updateLore((EntityPlayerMP) entityPlayer);\n\n        sender.addChatMessage(new ChatComponentText(String.format(\"Gave %s lore", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\nNext line of code:\n:\n\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\nNext line of code:\n:\n\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\nNext line of code:\n:\n\tprivate static final Logger logger = LogUtil.getLogger(Util", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInYaxis(FlipInYaxis.class),\n    FlipOutXaxis(FlipOutXaxis", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "        problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level = SearchRkCh(ch, key_der_mode=key_der_mode, enc_der_mode=enc_der_mode, search_mode=search_mode,\n                                  initial_ew=initial_ew, initial_kw=initial_kw)\n\n    if verbose_level", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "            h5 =  LocalHost5\n        return H\n\n    def test_init(self):\n        hosts = self = self.get_hosts()\n        container = HostsContainer(hosts)\n        self.assertEqual(len(container), 5)\n        self.assertEqual(container[0].slug, container['h1'])\n        self.assertEqual(container", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "            if self.__tc_command_output == TcCommandOutput.NOT_SET:\n                return 0\n\n            if self.__tc_command_output == TcCommandOutput.STDOUT:\n                return 0\n\n            if self.__tc_command_output == TcCommandOutput.SCRIPT:\n                return 0\n\n            if self", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n  assert False\n  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\nNext line of code:\n:\n  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n  assert isinstance(encoder, GLONASSL1TwoBits", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n\n        Cursor cursor =  db.query(ExpenseManagerContract.ExpenseTable.TABLE_NAME, null, ExpenseManagerContract", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "    private MonthCalendarConfiguration monthCalendarConfiguration;\n    private SimpleDateFormat weekDayFormatter;\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n    private OnDayChangeListener onDayChangeListener;\n    private OnMonthChangeListener onMonthChangeListener;\n    private DisplayEventCallback<Calendar> displayEventCallback;\n    private CalendarPrepare", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "    my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "                isinstance(t2, UnionMeta) and\nNext line of code:\n:\n                t2.__types__ - {t1.__instance__} and\nNext line of code:\n:\n                t1.__instance__ in t2.__types__\n            ):\n                t1.__instance__ = t2\n            else", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "        self.blinkpy = blinkpy\n        self.blinkpy = blinkpy\n        self.blinkpy = blinkpy\n        self.blinkpy = blinkpy\n        self.blinkpy = blinkpy = blinkpy\n        self.blinkpy = blinkpy\n        self.blinkpy = blink", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\tif isinstance(model_item.data, Edge):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, Text):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, Attribute):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "      self._varz.deserialization_failures()\n      self.on_faulted.Set(ex)\n      return\n\n    self.next_sink.AsyncProcessRequest(sink_stack, msg, stream, headers)\n\n  def AsyncProcessResponse(self, sink_stack, context, stream, msg):\n    try:\n    self._varz.message_bytes", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "        ThreadDumpRuntime runtime = new ThreadDumpFactory().fromString(out.toString());\n        assertThat(runtime.toString(Mode.VERBOSE), equalTo(out.toString()));\n        assertThat(runtime.getThreadDumpThreadSet().size(), equalTo(1));\n        assertThat(runtime.getThreadDumpThreadSet().get(0).getName(), equalTo(\"remotely", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "        return new DrumStoreEntry<>(DrumOperation.APPEND_UPDATE, data);\n    }\n    private static DrumStoreEntry<PLDTestData,?> createNewData(long key, DrumOperation op, long... neighbors) {\n        InMemoryEntry<PLDTestData> data = new InMemoryEntry<>();\n        data.set", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" 个\");\n            }\n            Next line of code:\n:\n        });\n    }\n", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "    self._ping_ar = AsyncResult()\n    self._ping_ar.SafeLink(self._SendPingMessage)\n    self._SendPingMessage()\n    self._last_ping_start = time.time()\n    self._ping_ar = AsyncResult()\n    self._ping_ar.SafeLink(self._SendPingMessage)\n    self._", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "        self.bot.loop.create_task(self.load_config())\n        self.bot.loop.create_task(self.load_guild_config())\n        self.bot.loop.create_task(self.load_channel_config())\n\n    async def load_guild_config(self):\n        try:\n            guild_config_table = self.dbi.table('guild_config')\n            guild_config_query = guild", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "    if self.parser.version < '3.0' and self.symbol == 'eq and self[0].symbol == '(string)':\n        return self[0].evaluate_string(self[1].evaluate(context))\n    elif self.parser.version < '3.0' and self.symbol == 'eq and self[0", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "        welcomeString.setText(String.format(getString(R.string.welcome), Utils.getPrefs(getActivity(), Constants.USER_PREFS_USER)));\n        return header;\n    }\n\n    private void selectGroupItem(int groupPosition, Integer childPosition) {\n        EventParent eventParent = mEventParents.get(groupPosition);\n        if (eventParent.getEvent", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "            // Notify the fragment to start the chat activity\n            ObservableRegistry.getObservable(classToNotify).notify(new ChatRegisteredParam(success, newChatId));\n        } else {\n            // Something went wrong\n            Toaster.getInstance().toast(R.string.unable_create_chat, Toast.LENGTH_LONG);\n        }\n    }\n}\nyas", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "        UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertEquals(\"SUCCESS\", response.getResultCode());\n        Assert.assertEquals(\"NATIVE\", response.getTradeType());\n        Assert.assertNotNull(response.getCodeUrl());\n    }\n\n    /**\n     * 退款\n     */\n    @Test\n    public void refund()", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "        List<Parameter> parameters = new ArrayList<>();\n        parameters.add(Parameter.create(STRING, STRING_PARAMETER_NAME_01, RANDOM_STRING_PARAMETER_VALUE_01));\n        parameters.add(Parameter.create(STRING, STRING_PARAMETER_NAME_02, RANDOM_STRING_PARAMETER_VALUE_02));\n        MessageMapperEnum messageMapper = mock(MessageMapperEnum.class", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "    public int readCodeInteger() throws IOException {\n\t\tint d1 = in.read1();\n\t\tint tag = d1 & 0x07;\n\t\tif (tag == CODEINT4_TAG)\n\t\t\treturn readSmallIntValue(d1);\n\t\telse\n\t\t\tthrow new IOException(\"Not a code-int: \"+", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "        self.management = management.Management(self)\n        self.quota = quota.Quotas(self)\n        self.mgmt_clusters = management.MgmtClusters(self)\n        self.mgmt_flavors = management.MgmtFlavors(self)\n        self.mgmt_datastore_versions = management.MgmtDatastoreVersions(self)\n        self.mgmt", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "            MacOsPingParser,\n            AlpineLinuxPingParser,\nNext line of code:\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class(timezone=self.__timezone)\n            except ParseError as e:\n                logger.debug(f\"failed to parse as {e.reason:s", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "            m.videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\r\n        } else {\r\n            m.videoFrameRate = Main.DEFAULT_VIDEO_FRAME_RATE;\r\n        }\r\n        }\r\n        // set width\r\n        if (Integer.parseInt(m.videoSetWidth.getText()) > 0) {\r\n            m.videoWidth = Integer.parseInt(m", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "            self._probe = probe\n        else:\n            self._probe = load_probe()\n        # Load the probe adjacency list of channels.\n        self._adjacency_list = _probe_adjacency_list(self._probe)\n        # Load the channels per group.\n        self._channels_per_group = _channels_per_group(self", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "      self._cdg = ControlDependence(self)\n    return self._cdg\n\n  @property\n  def entry_block(self):\n    \"\"\"\n      Returns the basic block that contains the entry point of the function.\n    \"\"\"\n    return self._entry_block\n\n  @property\n  def exit_block(self):\n", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "        FragmentObservable<QRData> observable = ObservableRegistry.getObservable(QRData.class);\n        observable.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable<QRData> observable = ObservableRegistry.getObservable(QRData.class);\n        observable.remove(this);\n   ", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n  public\n  visit\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile ddi = new File(basePath + \"/simple-ddi.xml\");\n\t\t\tFile xforms = new File(basePath + \"/simple-xforms.xml\");\n\t\t\tDiff diff = xmlDiff.diff(ddi, xforms);\n\t\t\tAssertions.assertTrue(diff.toString(), \"The DDI2XFORMS transformation is not", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "        np.sum(DiscreteDistribution([0.5, 0.5].pmf, [0.0, 1.0].X).draw(1000)),\n            [0.5, 0.5].pmf,\n        )\n        return DiscreteDistribution(\n            pmf, X", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpad state\n\n        state = stateFactory.createState(VpaidState.class);\n\n        assertThat(state instanceof TestVpadState, is(true));\n    }\n\n    @", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(final Boolean value, final FixTag tag) {\n\t\tacceptBoolean(value, tag);\n\t}\n\t\n\t@Override\n\tpublic void acceptChar(final CharSequence value, final FixTag tag) {\n\t\tacceptChar(value, tag);\n\t}\n\t\n\t@Override\n\tpublic void acceptInt(final Integer value,", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "modules/upload_contacts_from_file.py\ndef assign_groups_to_contact(contact, groups_string):\n    if not groups_string:\n        return None\n    for group_name in groups_string.split(\", \"):\n        add_contact_to_group(contact, group_name)\nmodules/upload_contacts_from_file.py\ndef assign_groups_to_contact(contact, groups_string", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                               .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfTheSystem();\n                                    return GIVEN_STRING;\n                                })\n                               .when(SystemUnderTest::failWithParameter)\n                               .then", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "        #if rem > 0:\n        #    self.append(Bit('%s' % self.rest_name, BitLen=rem))\n        #    self._offset += rem\n        #    self.BUF = self.BUF << rem\n        #    self._consumed += rem\n        #    self._", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "        # noinspection PyUnresolvedReferences\n        validate_not_abstract(model)\n        # noinspection PyUnresolvedReferences\n        validate_not_abstract(model.Meta)\n        # noinspection PyUnresolvedReferences\n        validate_not_abstract(model.Meta.Meta)\n        # noinspection PyUnresolvedReferences\n        validate_not_abstract(model.Meta.Meta", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "        return RespostaSAT.consultar_status_operacional(conteudo.get('retorno'))\n        return RespostaSAT.consultar_status_operacional(conteudo.get('retorno))\n        return RespostaSAT.consultar_status_operacional(conteudo.get('retorno)\n        return RespostaSAT.consultar_status_oper", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "    with pytest.raises(InvalidModel):\n        engine.bind(1)\n    with pytest.raises(InvalidModel):\n        engine.bind(\"hello\")\n    with pytest.raises(InvalidModel):\n        engine.bind({\"hello\": \"world\"})\n    with pytest.raises(InvalidModel):\n        engine.bind([1, 2, 3", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "    assert u6.dimensions == mass / (length ** 3)\n    assert u6.base_value == 1.0\n\n    # test that we can create a unit from a string with a non-numeric base value\n    u7 = Unit(\"kg * m**2 * s**-2 / (", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "        List<Module> modules = new ArrayList<>();\n        modules.add(new SqlModule());\n        modules.add(new LoanModule());\n        // Load commands\n        CommandLoader commandLoader commandLoader = new CommandLoader();\n        commandLoader.add(new EconCommand());\n        commandLoader.add(new AddCommand());\n        commandLoader.add(new RemoveCommand", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "        :param int index: Index into the tag list as restricted by name.\n        :param str name: Name of a type of tag to retrieve. Specify None to\n            retrieve all types of tags.\n        \"\"\"\n        name = prepare_str(name, \"ascii\")\n        tag = TAG()\n        self._call_f", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                    public void startOrderEditActivity(Account account, Order order) {\n                        Intent intent = EditActivity.getIntent(MainActivity.this,\n                                R.string.order_edit_title,\n                                order,\n                                new OrderEditController(),\n                                R.string.order_ok_button,\n                                R.string.order_cancel_button);\n                        intent.putExtra(EditActivity.EXTRA_ISNEW,", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<GalleryItemProxy>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page/{page}\")\n\tCall<ImgurResponseWrapper<List<String>>> listAccount", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "        resource = ThermometerResource(aircraft.sensors.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.sensors.thermometer.temperature, thermometer_data[\"temperature\"], 3)\n\nclass PitotTubeResourceTests(TestCase):\n    def test_get_pitot_tube_data(self", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "    column = User.age\n    value = 3\n    expected_ref = \"#n0.#n1\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0\": expected_action.value}\n\n    ref, action = reference_tracker._value_ref(column, value)\n\n    assert", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "            Platform.runLater(new Runnable() {\n                @Override\n                public void run() {\n                    Alert alert = new Alert(AlertType.INFORMATION, \"Error adding to queue failed: \" + e.getMessage(), ButtonType.OK);\n                    alert.showAndWait();\n                }\n            });\n            return false;\n        } catch (With", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "            nodes = Comment.objects.filter(post=post).filter(deleted=False)\n            if request.user.is_authenticated:\n                nodes = nodes.annotate(upvote_count=Count('votecomment__votecomment', filter=Q('votecomment__value__exact'=1))).annotate(downvote_count=Count('votecomment__votecomment',", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending terms to be displayed as gif categories,\n     * which when clicked will perform a gif search of that term\n     *\n     * @param serviceIds a {@link Map}", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "            of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::failed);\n        }\n    };\n\n    @NonNull\n    private final TimeoutHandler mTimeoutHandler = new TimeoutHandler(mWifiManager, mHandler, mHandler, mWifiConnectionCallback);\n\n    @NonNull\n    private final WifiStateReceiver mWifiStateReceiver = new WifiState", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "        LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n       ", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "        for (PlaySession playSession : stack.getPlaySessions()) {\n            playSession.addListener(this);\n        }\n        for (PlaySession playSession : stack.getArchivedStacks()) {\n            playSession.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "class SegmentVadArguments(NamedTuple):\n    vad_path: str\n    segmentation_options: MetaDict\n    num_jobs: int\n    clean: bool\n    output_directory: str\n    output_format: str\n    output_path: str\n    output_directory: str\n    output_directory: str\n   ", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "    private final Vms vms;\n    private final Deployments deployments;\n    private final Jobs jobs;\n    private final Errands errands;\n    private final Tasks tasks;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag = TAG()\nNext line of code:\n:\n        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag = TAG()\nNext line", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "                section.nbits_of_associated\n            )\n        else:\n            log.debug('Using declared length of {} for message'.format(bufr_message.length.value))\n\n        # Wire the template data if requested\n        if wire_template_data:\n            bufr_message.wire()\n\n        # TODO: 235000 cancel all", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "        moderation_home(request, report_abuse_form=report_abuse_form)\n    else:\n        report_abuse_form = ReportAbuseForm()\n    return render(request,'moderation/report_abuse.html', {\n       'report_abuse_form': report_abuse_form,\n    })\n@login_required\n@permission_required('", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "    public void listenToBenchmarkResult(final BenchmarkResult paramResult) {\n        final NiceTable myTable = new NiceTable(3);\n        myTable.addHeader(\"BenchmarkResult\",'', Alignment.Center);\n        myTable.addHeader(\"Class\",'', Alignment.Center);\n        myTable.addHeader(\"Method\",'',", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "        // Parsing application options\n        ApplicationOptions options = new ApplicationOptions();\n        options.fillIn(args);\n\n        // Parsing application arguments\n        ProtTestArgumentParser parser = new ProtTestArgumentParser(args, options);\n        if (parser.exists(PARAM_HELP) || parser.isSet(PARAM_HELP)) {\n            ProtTestPrinter.print", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.startRecording();\n\t\tNext line of code:\n:\n\t\ttropo.on(EVENT(\"completed\"), Do.redirect(Key.TO(\"http://www.google.com/\")));\n\t\tNext line of code:\n:\n\t\ttropo.on(EVENT(\"busy\"), Do.say(\"The number you dialed is busy.", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "                listaDeRespostas.getPropriedades().getEstado() == \n                EstadoDaListaDeRespostas.FINALIZADA) {\n            result.use(Resposta.class).notFound();\n            return;\n        }\n        \n        if (listaDeRespostas.getPropriedades().getEstado() ==", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code,DefaultDataConnector connector) {\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(ProgramTrack.class);\n\t\t\t\t\tadapter.setPageCls(ProgramCellView.class);\n\t\t\t\t\tadapter.setPageCls(ProgramCellView.class);\n\t\t\t\t\tadapter", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "    AdInterface adInterface;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    CuePointsRetriever cuePointsRetriever;\n\n    @Mock\n    PlayerUIController controller;\n\n    @Mock\n    PlayerAdLogicController componentController;\n\n    @Mock\n    F", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tappEvent.setExitEvent () ;\n\t\t\t\t\tPlatform.exit() ;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error occurred while setting the close event\", e);\n\t\t}\n\t\t\n\t\t// create the drive client\n\t\tclient = new Drive.Builder(httpTransport,", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "    String className = adapterName(type, INJECT_ADAPTER_SUFFIX);\n    TypeSpec.Builder typeSpec = TypeSpec.classBuilder(className)\n       .addModifiers(PUBLIC, PUBLIC, PUBLIC, FINAL)\n       .addSuperinterface(ParameterizedTypeName.get(Binding.class, SET_OF_BINDINGS))\n       .addSuperinterface(Parameterized", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "        new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\n        }\r\n        }\r\n\r\n        /**\r\n         * 打开/关闭透传消息\r\n         * @param enable 打开/关闭\r\n         */\r\n        public static void enableReceiveNormalMsg(boolean enable){\rNext line of code:\n:\n        new EnableReceive", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 0\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 1\n  assert", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "    elif is_comment_node(elem) and context.parent_map.get(elem) is None:\n        return f'/comment()[{context.position}]'\nNext line of code:\n:\n    elif is_schema_node(elem) and context.parent_map.get(elem) is None:\n        return f'/schema-element({node_name(item)})[{context", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "    def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n:\n    def fillna(self, reverse=False, fillvalue=None):\n        \"\"\"Fills the non available value sequentially with the previous\n        available position. Operates inplace.\n        \"\"\"\n", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "                TypingMessage m = (TypingMessage)message;\n\n                if (m.isTyping())\n                {\n                    _isTyping = true;\n                    addMessage(new ChatMessage(ChatMessageSource.AUDIOLOGIST, ChatMessage.TEXT_TYPING));\n                }\n                else\n                {\n                    _isTyping =", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tEXOG.append(dmy_leftvar)\n\t\tEXOG.append(dmy_rightvar)\n\t\tEXOG.append(column_product(dmy_leftvar,dmy_rightvar))\n\t\tEXOG.append(column_product(dmy_leftvar,dmy_mediator))\n\t\tEXOG.append(column_product(dmy_rightvar,d", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "        ThreadDumpThread thread = sut.thread(\"thread\");\n        assertThat(thread.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n    }\n\n    @Test\n    public void threadSleeping() {\n        ThreadDumpThread main = sut.thread(\"main\");\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n\n        ThreadDumpThread", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "                LunarCalendar tmpDate = new LunarCalendar(mRecord.getRecordTime().get(Calendar.YEAR, 1, 1));\n                DatePicker picker = new DatePicker(this, this);\n                picker.setRange(2000, 2050);\n                picker.setSelectedItem(tmpDate.get(Calendar.YEAR), tmpDate.get(Calendar.MONTH), tmp", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "        GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n       ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "    private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private ViewPager mViewPager;\n    private TabLayout tabLayout;\n    private int[] tabTitles = new int[]{R.string.tab1, R.string.tab2, R.string.tab3, R.string.tab4};\n    private int", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "        self.time_manager = TimeManager(self)\n        self.tracerouter = Tracerouter.Tracerouter()\n        self.pcap_logger = PcapLogger.PcapLogger(self)\n        self.params = {}\n        if config.use_ntp:\n            self.ntp_setup()\n        # local address may be fake for testing\n", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "    assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.deltas[4].id == \"delta-5\"\n    assert deltas.deltas[4].", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "        self,\n        emails,\n        duration,\n        interval,\n        start_at,\n        end_at,\n        buffer=None,\n        free_busy=None,\n        open_hours=None,\n    ):\n        if isinstance(emails, six.string_types):\n            emails = [[emails]]\n        elif isinstance(emails[0], list) is False", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "    (NightModeable) this);\n    activityLightLevelManager = new ActivityLightLevelManager(activityLightLevelChanger);\n    activityLightLevelManager.setLightLevel(0);\n    activityLightLevelManager.setLightLevel(0);\n\n    // TODO(jontayler): move this to a separate class.\n    gesture", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "            non_equilibrium_thermochemical_error = calculate_non_equilibrium_thermochemical_probability(parameters=parameters, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_thermochemical_error = 0\n        _log.debug('Multi-phase error: %s', multi_phase_error", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "            Str('Identity', Pt=ID(), Len=1, Repr='hum),\r\n            ])\r\n        if with_options:\r\n            self.extend([ \\\r\n            Str('LAI', Pt=LAI(), Len=3, Repr='hum),\r\n            Str('PLMNList', Pt=PLMNList(), Len", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "        self.__class_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_tc(self, device):\n        self.__logger.debug(\"parse tc: {}\".format(device))\n\n        self.__parse_tc_qdisc(device)\n        self.parse_tc", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "        result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)\n\n    \ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "pyramid_swagger/tween.py\ndef get_exclude_paths(registry):\n    \"\"\"Compiles a list of paths that should not be validated against.\n        :rtype: list of compiled validation regexes\n    \"\"\"\n    # TODO(#63): remove deprecated `skip_validation setting in v2.0.\n    regexes", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
