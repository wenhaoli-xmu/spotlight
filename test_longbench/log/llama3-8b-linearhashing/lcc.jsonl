{"pred": ":\n\t\t\t\t{\n\t\t\t\t\tif ( p!= null )\n\t\t\t\t\t{\n\t\t\t\t\t\tfor ( int j = 0; j < types.Length; ++j )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( (j==0 && initiator == initiator) || initiator == null )\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tif ( initiator == null )\n\t\t\t\t\t\t\t\tcontinue;\n", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e[1], e[2], **e[\t\t\t):\n\t\t\tZ_ = Z.copy()\n\t\t\tZ_.add_edge(e[1], e[2], **e[0], **e[0]\t:\n\t\t\tZ_.add_edge(e[1], e[2],", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        # Open the file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buff = a.read_frames(buffsize)\n        # Check that the read pointer is at the beginning\n        buff = a.read_frames(", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "        if e.text == language:\n            return True\n        else:\n            return False\n        return self.is_element_present(self._SUBTITLES_MENU)\n    def click_language(self, language):\n        els = self.get_elements_list(self._SUB_LANGUAGES)\n        for el in els:\n            if el.text", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": " * @param reader\n * @param context\n * @return\n * @throws IOException\n */\n\t\t\t\t// WMC ViewContext::LayerList::OL\n\t\t\t\txstream.registerConverter(new Converter() {\n\t\t\t\t\tpublic boolean canConvert(Class type) {\n\t\t\t\t\t\treturn WMCExtension.class.isAssignableFrom(type);\n\t\t\t\t\t}\n", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "        for a in self.answers:\n            ret += point_to_html(a)\n        return ret\nclass _AnagramData(_QAData):\n    def __init__(self, question, answers, anagram):\n        self.question = question\n        self.answers = answers\n        self.anagram = anagram\n        self", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    mob.SendNextButton(mob, 3);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a name:\");\n                    mob.SendMessage(\"Enter a description:\");\n", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": ":\n            for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n            s.println(\"  \");\n        }\n        for (byte[] b : encodedChain) {\n            s.print(\"  \");\n            s.println(new String(b));\n        }\n        s.println(\"  \");\n       ", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "            sp = new JESpace (name, path);\n            if (sl!= null) {\n                sl = newSpace (key);\n                synchronized (this) {\n                    if (sl!= null) {\n                        sl.put (key, sp);\n                        spaceRegistrar.put (name, sp);\n                        return sp;\n                   ", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t}\n\t\t\t\tAlchemizeBtn btnImp = new AlchemizeBtn( Messages.get( this, \"imp\" ) ) {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onRelease() {\n\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\thide();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tbtnImp.setRect(0", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        start_response('200 OK', [('Content-Type', 'text/xml'), ('Content-Length', str(len(response)))])\n        return [response])\n        return [response])\n        return [response])\n        return [response])\n        return [response])\n        return [response])\n        return [response])\n        return [response])\n", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "        self.base.get_account_status(self.id_, self.account_id, self.account_id)\n    def lock_status(self, status_id):\n        self.base.get_conversation(status_id, self.account_id, self.id_)\n    def unlock_status(self, status_id):\n        self.base.get_account_status(self.id_, self.account_id,", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "            return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_extract_archive(self, login, password, status_id, params, session):\n       ", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.AreEqual (SecurityZone.Union (a, b), z);\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!Union1\");\n\t\t\tZoneIdentityPermission c = new ZoneIdentityPermission (SecurityZone.No", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "        return CompositeX509TrustManager(trust_managers, keyfile, composite_ca_certs)\nclass CompositeTrustManager(TrustManager):\n    def __init__(self, trust_managers):\n        self.trust_managers = trust_managers\n    def getCertificateChain(self, key_type, issuers):\n       ", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domain);\n        request.setAttribute(\"domainInfo\", domain);\n        request.setAttribute(\"domainInfo\", domain);\n        request.setAttribute(\"domainInfo\", domain);\n        request.setAttribute(\"domainInfo\", domain);\n        request.setAttribute(\"domainInfo\",", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "        self.__datastream_address = os.path.join(self.__datastream_address, 'data')\n        self.__datastream_address = os.path.join(\n            self.__tmp_dir, 'datastream-%s-%s' % (self.__render_settings.output_format, self.__render_settings.uuid))\n        self.__datastream", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (store.IterNext(ref iter) &&!store.GetValue (iter, columnBool2)) {\n\t\t\t\t\t//only change in database if option is 2\n\t\t\t\t\t//because option 1 leaves the same percent and changes Kg (and database is in %)\n\t\t\t\t\tjumpID = (int) store", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        String[] argMessages = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n                argMessages[i] = getMessage(locale, args[i", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\t// Add the editors\n\t\tPreferenceNode windowNode = new PreferenceNode(\"window\");\n\t\tPreferencePage windowPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHELL_LENGHT, \"Window width\",\n\t\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "                }\n            }\n            public override void OnCastSpell(Mobile m, Mobile target)\n            {\n                if ( target!= null)\n                {\n                    if ( target is Mobile )\n                {\n                    if ( m.CanBeBeneficial( target ) )\n                {\n                    if (!target.CanBeBeneficial( target )", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "        for state in states:\n            if self._enable_transaction_accounting:\n                self._take_transaction_snapshot(state)\n            else:\n                self._take_transaction_events.append(\n                    event.EventListenerManager(self, self._flushing)\n                    )\n        self._flushing = True\n    def _flush(self):\n        self", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed = new ArrayList<IField>(3);\n\t\t\t\tnamed.add(field);\n\t\t\t\tnamed.add(field", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "    def get(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n            self.redirect(self.reverse_url(self.request.path, *args, **kwargs))\n            return\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\t// Lluis: added\n\t\t\tif (viewIndex!= -1)\n\t\t\t\tviewIndex = viewIndex;\n\t\t\t// Lluis: added\n\t\t\t//if (viewIndex!= -1) {\n\t\t\t//\t((View)GetActiveView()).NotifyActivation (false);\n\t\t\t", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "    parser.add_argument(\n        '-o', '--outfile', help='Path to store APs', required=True )\n    parser.add_argument(\n        '-c', '--coordfile', help='Path to coord.remain file', required=True )\n    parser.add_argument(\n        '-l', '--lat', help='Latitude',", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                        return GetNameForAttribute(SkillName.HitPoints);\n                    else if (i.SkillBonuses.GetBonus(1) > 0)\n                        return GetName", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "        for platform in platforms:\n            if platform['os'] =='mobile':\n                if platform['os'] =='mobile':\n                    mobile = True\n                    break\n            if platform['os'] =='mobile':\n                if not mobile:\n                    return\n                if not small:\n                    return\n                if not icon", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (objectID!=null) {\n\t\t\tstateBeans = StatusBL.loadByProjectTypeAndLabel(projectID, projectTypeBean);\n\t\t\tif (StatusBL.loadByProjectTypeAndLabel(projectID, objectID)!=null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (ArgumentSyntax argument in argumentByReference) {\n                if (argumentSyntaxs.Any( x => x.Parent.GetType() == typeof (ArgumentSyntax) )) {\n                    ArgumentSyntax argumentSyntax = argumentSyntaxs.First( x => x.Parent.GetType() == typeof (ArgumentSyntax) );\n                    toReplace.Add( argument", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        split_test = self._update_group_id_to_first_group()\n        # Set to second group configuration.\n        split_test = self._update_partition_id(1)\n        # The children should be different.\n        self.assertEqual(2, len(split_test.children))\n        self.assertNotEqual(split_test.children[0], split_test", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            Object[] metrics = (Object[])longTag[\"metrics\"];\n            PdfIndirectReference toUnicode = null;\n            if (metrics!= null) {\n                if (metrics.Length > 0) {\n                    if (metrics.Length > 1) {\n                        if (vertical) {\n                            toUnicode = GetToUnicode", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\t// if the cell is not at its proper depth, it is not a top-level cell\n\t\t\t\t\t\tif (graphNodes.get(cell).depth < graphCell)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// if the cell is not at its proper depth, it is not a top-level cell\n\t\t\t\t\t\t\t// find the cell", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "        };\n        task = new SoftReference<>(BitmapUtil.getBitmap(model));\n        return new BitmapUtil.getBitmap(bitmapReference);\n      }\n    public void run() {\n      bitmapReference = new SoftReference<>(BitmapUtil.getBitmap(model.getBitmap()));\n      Bitmap      bitmap = model.get();\n      Bitmap      bitmapReference = new", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                final String down = cmdHistory.goDown();\n                if (!msgTF.getText().equals(down)) {\n                    msgTF.setText(down);\n                }\n            }\n        }\n        // Autocompletion\n        else if (ke.getKeyCode() == KeyEvent.VK_TAB && autoCompleter!= null) {\n            final int caretPos", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "    VIEW = ContainerObjectFormView\n    VIEW = View\n    @property\n    def is_displayed(self):\n        return (\n            self.prerequisite.is_displayed and\n            match_page('Container', 'Container Node (Edit)')\n    )\n    @property\n    def is_displayed(self):\n        return (\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "                if (Roles == null)\n                {\n                    if (NoPermissionVisibility == Visible)\n                        writer.AddAttribute(\"style\", \"display:none;\");\n                    else\n                        writer.AddAttribute(\"style\", \"display:\" + NoPermissionVisibility.ToString());\n                    writer.AddAttribute(\"style\", \"visibility:hidden;\");\n                }\n                else\n", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tif (world.isRemote)\n\t\t{\n\t\t\tIBlockState state = world.getBlockState();\n\t\t\tIBlockState state = world.getBlockState();\n\t\t\tIBlockState state = world.getBlockState();\n\t\t\tEnumDyed color = BlockSpikeTrap.getToolEnchantment(world, world, world", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "        return \"Effect: \" + getId();\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String toXML() {\n        return toXML();\n    }\n    /**\n     * {@inheritDoc}\n     */\n    public String toXML() {\n        return toXML();\n    }\n    /**\n    ", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'lasttime': arrow.utcnow().datetime,\n       'reporttime': arrow.utcnow().datetime\n    }, '", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "                interact(self._plot_line, x_name=fixed(x), y_name=fixed(y), cmap=fixed(cmap))\n            else:\n                raise ValueError('x must be given')\n        else:\n            self._plot_line(x_name=x, y_name=y)\n    def _plot_line(self, x_name, y", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (_changedPaths.TryGetValue(path, out var value)\n                {\n                    if (value == 0)\n                    {\n                        _logger.Info(\"Ignoring change to {0}\", value);\n                        continue;\n                    }\n                }\n                if (value == _changedPaths)\n                {\n                    _logger.Info(\"Ignoring change to {", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, search(internalMap.get(key), o) {\n\t\treturn read(key, searchTransform.apply(key));\n\t}\n\t@Override\n\tpublic Map<K, E> transform(K key, I value) {\n\t\treturn new TransformingMap.Entry<K, E>(key, searchTransform, key, value);\n\t", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        cat = getToolByName(self.context, 'ubify.cyninv2theme', None)\n        cat = getToolByName(self.context, 'ubify.cynincommentslist', None)\n        cat = getToolByName(self.context, 'ubify.cynincommentslist', None)\n        cat = get", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tpublic int Hue\n\t\t{\n\t\t\tget { return m_Hue; }\n\t\t\tset { m_Hue = value; }\n\t\t}\n\t\tpublic sbyte Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": avatar \\\"{1}\\\": channel_uri: {2}\", \n                    //      scene.RegionInfo.RegionName, avatarName, channelUri);\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t}\n\t\t\tif(textDateStart.Text==\"\"){\n\t\t\t\ttextDateStart.errorProvider1.SetError(textDateStart,\"Please enter a start date\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(textDateStop.Text==\"\"){\n\t\t\t\ttextDateStop.errorProvider1.SetError(textDate", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "            lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Build a time coordinate.\n        tdim = NAMECoord(name='time', dimension=0, values=np.array(time_list))\n        # Build a time coordinate.\n        tdim = NAMECoord(name='time', dimension=0", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "    return {'success': False,'msg': _('User %s not authorized to create users via the API')}\n    return {'success': False,'msg': _('User %s not authorized to create users via the API')}\n    return {'success': False,'msg': _('User %s not authorized to create", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\t// assigning confidences\n\t\t\t\tdouble[] conf = new double[1];\n\t\t\t\t// assigning confidences\n\t\t\t\t// setting confidences\n\t\t\t\t// setting confidences\n\t\t\t\t// setting confidences\n\t\t\t\t// setting confidences\n\t\t\t\t// setting confidences\n\t\t\t\t// setting conf", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            return new SearchResults[0];\n        }\n        /// <summary>\n        /// Searches for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">The segments to search for.</param>\n        /// <returns", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "             codePoint = Character.toCodePoint(ch, string.charAt(offset));\n         }\n         if (codePoint >= 0) {\n            return _range.contains(codePoint)? offset : -1;\n         }\n         return -1;\n      }\n   }\n   static class SetC extends AbstractCharNode {\n      @Override", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        if (AccessionNumberValidator.validFormat(accessionNumber, false)) {\n            if (accessionNumberIsUsed(accessionNumber, existingRequired)) {\n                if (accessionNumberIsUsed(accessionNumber, existingRequired)) {\n                    if (AccessionNumberValidator.validFormat(accessionNumber, true)) {\n", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tLog.Write(\"server\", \"Rejected connection from {0}; password mismatch\", newConn, newConn.PlayerIndex, newConn.PlayerName);\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar player = new Player\n\t\t\t\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\treturn coll;\n\t}\n\tpublic ims.RefMan.vo.CatsReferralRefVo[] toRefVoCollection()\n\t{\n\t\treturn toRefVoCollection(CatsReferralPendingEmergencyNonEDAdmissionListVo.class);\n\t}\n\tpublic static CatsReferralPendingEmergencyNonEDAdmissionListVo[] toRefVo", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelif prnum == 'exit':\n    exit()\nelse:\n    dialog = xbmcgui.Dialog()\n    dialog.notification(__language__(32013), __language__(32013", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "  plotName = grouping + \"_\" + grouping\n  if not 'plotName' in pD:\n    return S_ERROR( \"Missing plot name!\" )\n  if not 'plotName' in pD:\n    return S_ERROR( \"Missing plot name!\" )\n  if not 'plotName' in pD", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\t// Set rally points for new production buildings\n\t\t\tif (IsTraitEnabled)\n\t\t\t{\n\t\t\t\tforeach (var p in positionsUpdatedModules)\n\t\t\t\t\tbot.SetRallyPoint(bot, newLocation, p);\n\t\t\t}\n\t\t}\n\t\tvoid SetRallyPointsForNewProductionBuildings()\n\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        // Compile the statement\n        for (int i = 0; i < plan.getPlan().getColumns().size(); i++) {\n            String colName = colName;\n            if (colName == null) {\n                colName = \"NULL\";\n            }\n            if (colName!= null) {\n", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Anchor = ((System.Windows.Forms.AnchorStyles", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte) parity;\n\t\t\tdcb.DCBlength = Marshal.SizeOf (dcb);\n\t\t\tdcb.DCBlength = 0;\n\t\t\tdcb.DCBlength = 0;\n\t\t\tdcb.DCBlength = 0", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "        page = self.get_page('/accounts/profile/%i/' % self.user.id,\n                login_as=self.admin)\n        self.assertEquals(page.context['for_user'], self.user)\n        self.assertEquals(page.context['cobrand'], None)\n        self.assert_(admin.has_perm('user_profile.change_cobranding'))\n        self", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    parser.add_argument('-c', '--configfile', dest='configfile',\n                    default=os.path.join(os.path.dirname(__file__), 'tests', 'configfile'),\n    args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    #print \"keep_tempdir is\", _keep_temp", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "Next line of code:\n\t\t\tself.newlist = self.newAPList\n\t\t\tself.newlist = self.newAPList\n\t\t\tself.newlist = self.newAPList\n\t\t\tself.newlist = self.newAPList\n\t\t\tself.newlist = self.newAPList\n\t\t\tself.newlist = self.newAPList", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                float codeX = fontX * (fCode.Length / 10);\n                float codeY = codeHeight;\n                if (codeX > 0)\n                    codeY = size * (fCode.Length / 10);\n                return new Rectangle(codeX, codeY);\n            }\n        }\n        \n        /**", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return results;\n  }\n  \n  /**\n   * Loads a comma-separated list of integers from Properties.  The list cannot include any whitespace.\n   */\n  public static int[] getBool(Properties props, String key, int[] defaultValue) {\n    String value = props.getProperty(key);\n    if (value == null)", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "        y_points = np.arange(0.0, 90.0, 2.0)\n        x_points = x_points + 180.0\n        x_points = x_points + 180.0\n        x_points = x_points + 180.0\n        x_points = x_points +", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            if (currPacket!= null)\n            {\n                Clipboard.SetDataObject(curr, true);\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            if (curr!= null)\n            {\n                LogPacket p = _packets[_index];\n                if (p", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "    elif color == 'yellow':\n        print '\\033[1;33;40m'\n    else:\n        print '\\033[0m'\n    return 0\ndef get_mfccs_from_singer(wav_dir):\n    # get the feature of the singer\n    print 'get mfcc of %", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        }\n    }\n}\n", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            this.treeView1.ImageList = this.imageList1;\n            this.treeView1.ItemHeight = 16;\n            this.treeView1.NodeFont = new System.Drawing.Font(\"Microsoft Sans Serif\", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "        if isinstance( original, wrapper._FunctionWrapper ):\n            return self.constructFunction( \n                original.__name__, original.DLL,\n                resultType = original.__name__,\n                argNames = original.__name__,\n                doc = original.__doc__,\n                argTypes = original.argTypes,\n                extension = original,\n               ", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            baos.write(emptyStreams.toByteArray());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException {\n        final List<SevenZArchiveEntry> emptyFiles = new ArrayList<>();\n        for (final SevenZArchiveEntry entry : files) {\n            if (", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                    if (rampUp)\n                    {\n                        if (alphaLevel < 255)\n                        {\n                            if (alphaLevel < 255)\n                            {\n                                if (alphaLevel < 255)\n                                {\n                                    if (alphaLevel < 255)\n                                    {\n                                        if (alphaLevel < 255)\n                                        {\n", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow_move_files_if_max_idletime_configured_and_not_paused()\n        {\n            Given", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, nanab, ItemId.ItemRazzBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, bluk, ItemId.ItemBlukBerry);\n                }\n                if", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "        f.writelines(['F) 0.0\t\t\t", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                    i += ((b & 0x04) << 5);\n                    break;\n                case 0x08:\n                    /* D */\n                    i = b & 0x03;\n                    i += ((b & 0x04) << 5);\n                    break;\n                case 0x09:\n", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        if self._course_key is None:\n            self._course_key = self._get_course_key()\n        return self._course_key\n    @property\n    def _course_key(self):\n        \"\"\"\n        Return the course key.\n        \"\"\"\n        return self._course_key\n    @property\n    def _course", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif ( splitNumber.length > 1 ) {\n\t\t\tchance = (int) (chance * Double.parseDouble(splitNumber[0]));\n\t\t}\n\t\tif ( chance > 0 ) {\n\t\t\tchance = (int) (chance * Double.parseDouble(number));\n\t\t}\n\t\treturn (int)", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "        return 0, \"Meter \" + name + \" deleted\"\n        return 0, \"Failed to delete meter\"\ndef download_cert(module, name, apiid, apikey, cert_type, cert_name):\n    body = '{\"name\": \"%s\", \"type\": \"%s\"}' % (cert_type", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.lblPrivacy.Location = new System.Drawing.Point(6, 29);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(370, 26);\n            this.lblPrivacy.TabIndex = 1;\n            this.lblPrivacy.Text = \"This will send your username to", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for plugin, pluginname, optname, optparm in self.all_options:\n            if self.opts.verify:\n                self.ui_log.info(\" %s: %s\" % (pluginname, optname))\n            if self.opts.verify:\n                self.ui_log.info(\" %s: %s\" % (plugin", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "    getRoom.convert = Conversion.roomName\n    def getRoomBookingList(self):\n        \"\"\" Session Room List \"\"\"\n    getRoomBookingList.result = IResourceBasicFossil\n    def getMaterialList(self):\n        \"\"\" Session Material List \"\"\"\n    def getMaterialListFossil(self):\n        \"\"\" Session Material List \"\"\"\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                            } catch (MessageWriterException e) {\n                                throw new MessageWriterException(\"Message import failed.\");\n                            }\n                        return true;\n                    }\n                    @Override\n                    public void close() {\n                        parent.setVisible(false);\n                    }\n                };\n                try {\n                    messageBrowser.importMessages();\n                } catch (MessageImportInvalid", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\tif (options instanceof NativeArray) {\nNext line of code:\n:\n\t\t       \t\t}\n\t\t    \t}\n\t\t    \tif (value instanceof String) {\n\t\t    \t\tif (value instanceof Number) {\nNext line of code:\n:\nNext line of code:\n:\nNext line of code:\n:\nNext line of code:\n:\nNext", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession!= null && currentSession.getState().isOpened()) {\n            if (currentSession.equals(getSession())) {\n                if (userInfoSession == null) {\n                    userInfoSession = new Session();\n                    fetchUserInfo();\n                    updateUI();\n                }\n            }\n        }\n    }\n    private void fetchUserInfo()", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (int i=0; i<emotions.length; i++) {\n\t\t\tsum += emotions[i].chance;\n\t\t}\n\t\tfor (int i=0; i<emotions.length; i++) {\n\t\t\temotions[i].chance = TextOperations.roundToEmotion(emotions[i].", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                    'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test exporting as an XML string.\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        self.assertEqual", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "    if NorthernHemisphere:\n        if 0 <= y:\n            if 500000 <= easting and easting < 500000 + 500000.0*6:  # 500,000.. 6,000,000\n                if 5000000000 <= y and y <", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "        if request.user!= user:\n            form = ReportUserForm(request.POST, instance=user)\n            if form.is_valid():\n                report = form.save()\n                messages.success(request, \"Reported %s successfully!\" % user)\n                return HttpResponseRedirect(reverse('profile', args=[user.username]))\n    else:\n        form =", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "    field_names = ['name', 'description','version','status', 'packaging']\n    @property\n    def field_names(self):\n        return ['name', 'description','status', 'packagings']\n    @property\n    def name(self):\n        return self.context.name\n    @property", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t\tforeach(Control control in form.Controls)\n\t\t\t{\n\t\t\t\tif(m_props.ApplyTo(control, m_props.Language, m_props.Language))\n\t\t\t}\n\t\t}\n#endif\n\t\t}\n\t\tpublic static void LoadTranslation(Translation translation)\n\t\t{\n\t\t\tif(translation == null)", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return the value of the number\n     */\n    public int getLength()\n    {\n        return size;\n    }\n    /**\n     * @return the value of the number\n     */\n    public int getMaximumLength", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "                if flag:\n                    new_positional_tags_list.append(\n                        TagRegex(flag, regex))\n                else:\n                    new_positional_tags_list.append(regex)\n            return new_positional_tags_list\n    def compile_tag_list(compile_tags):\n        if compile_tag_list is None:\n            return compile_tag_tag_list\n       ", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "            {\n                throw new NotImplementedException ();\n            }\n            public override bool HasElementType { get { throw new NotImplementedException (); } }\n            public override bool IsValueType { get { throw new NotImplementedException (); } }\n            public override bool IsPublic { get { throw new NotImplementedException (); } }\n            public override bool IsSealed { get {", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "        0x80: 'OBD-I',\n        0x81: 'OBD-II',\n        0x82: 'OBD-I and OBD-II',\n        0x83: 'OBD-I and OBD-II',\n        0x85: 'OBD-I and O", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.add_to_connection(self.path, self)\n\t\tself.add_to_connection(self.path, self)\n\t\tself.add_to_connection(self.path, self)\n\t\tobjects[self.path] = collection\n\t\tself.add_to_connection(self.path, self)\n\t\tself.add_to_connection(self.path, self)\n\t\tself.add_to_connection", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "                this.AddRes(index, typeof(SwitchItem), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(PrismItem), 1073466, 1, 1044253);\n                this.ForceNonExceptional(index);\n                this.ForceExceptional", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        if self._implicit_app_ctx_stack:\n            self._implicit_app_ctx_stack.pop()\n        if self._implicit_app_ctx_stack:\n            self._implicit_app_ctx_stack.pop(self._implicit_app_ctx_stack[-1])\n        if self._implicit_app_ctx_stack:\n            self.app.do_teardown_request(exc)\n        if", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "    return _pubsub_consumer(session, cluster_id, query_wrapper)\n    if needs_columns:\n        return _pubsub_consumer(session, cluster_id, query_wrapper)\n    return _pubsub_consumer(session, cluster_id, query_wrapper)\n    if needs_columns:\n        return _pubsub_consumer(session, cluster_id, query", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getConsumedRelatedResourcesByResourceType(ResourceEntity resource, ReleaseEntity release) {\n        return getConsumedRelatedResourcesByResourceType(resource,", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "        # Find distance from projection of rotation axis for each pixel\n        dx = (ray_trafo.geometry.src_radius - src_radius) * (\n            ray_trafo.geometry.src_radius) / src_radius\n        # Compute the weightings\n        if det_radius > 0:\n            if det_radius < 0.", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": ":\n        return self._buildURL(url)\nNext line of code:\n:\n:\n        return self._buildRE(regx)\n    def _getProxy(self, url):\n        \"\"\" Return the Proxyfied URL of the page \"\"\"\n        if self.isEnabled():\n            return self._buildURL(url)\n        else:\n            return", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn unit.ToString ();\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\tif (type == FontSize.NotSet)\n\t\t\t\treturn Empty.ToString ();\n\t\t\treturn unit.ToString ();\n\t\t}\n\t\tpublic string ToCss (string unit, FontUnitType unit_type)\n\t\t{\n\t\t\tif (unit_type ==", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\"BlockLength does not match modulus for Naccache-Stern cipher.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// transform into BigInteger\n\t\t\tBigInteger big1 = new BigInteger(1, block", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tAssert.That(((JObject)obj.Value).Properties[0].Value.ToString(), Is.EqualTo(\"The outermost value must be an object or array.\"));\n\t\t\tAssert.That(((JObject)obj.Value).Properties[1].Value, Is.EqualTo(\"It is an object.\"));\n\t\t}\n\t\tstring _text4 = @\"{\n", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "                for (int v = 0; v < size; v++) {\n                    int x = (v % width) * 2;\n                    int y = (v / width) * 2;\n                    if (x < width) {\n                        edges.add(T2.of(x, y));\n                    }\n                }\n", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    ds.config[\"isoelastics\"] = \"area_um\"\n    ds.config[\"isoelastics\"] = \"area_um\"\n    ds.config[\"emodulus\"] = \"area_um\"\n    ds.config[\"emodulus method\"] = \"isoelastics\"\n    ds.config[\"emodulus\"] = \"", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        final Properties properties = new Properties();\n        \n        properties.setProperty(Options.ONE_ACCESS_PATH, \"true\");\n        \n        properties.setProperty(Options.JOURNAL_MODE, \"NIO\");\n        \n        properties.setProperty(Options.JOURNAL_FILE, args[0]);\n        \n        properties.setProperty(Options.NAMESPACE, args[1]);\n        \n       ", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.105000',\n                     u", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * @return downloaded file\n\t */\n\tpublic boolean downloadAndUpdate() {\n\t\tif (isWindows()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\t// This is the code that should be added\n\t\t\t// to complete the code given below.\n\t\t\t// Please complete the code given below. \n\t\t\t// \n\t\t\t// \n\t\t\t// \n\t\t\t// \n\t\t\t// \n\t\t\t// \n\t\t\t// \n\t\t\t//", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat_inverse(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_inverse, self.x_model,\n            self._data_container.x_err, self._data_container.y_err)\n    @property\n    def x_model(self):\n", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "        return new CmsLink(m_structureId, m_anchor, m_query, m_structureId, m_type, m_target, m_type, m_target, m_target, m_internal, m_type, m_toStringRepr);\n    }\n    /**\n     * Converts this to a CmsRelation.\n     *\n    ", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "adminUser = getEucalyptusAdmin();\n                }\n                // Add it to the map\n                accountIdAccountMap.put(walrusObject.getOwnerId(), owningAccount);\n                // Get the owning user if its not already set\n                if (walrusObject.getOwner() == null) {\n                  if (", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "            set { _selectedFolderChanged += value; }\n            get { return _selectedFolderChanged; }\n        }\n        public event EventHandler SelectedFolderChanged\n        {\n            add { _selectedFolderChanged += FolderSelectedEventHandler; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public IFolderSystem", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        final ImportVmTemplateCommand command = new ImportVmCommand(\n                createParameters());\n        command.setCommandId(ImportVmCommand.CommandId.ImportVmTemplate);\n        command.setCommandId(ImportVmCommand.CommandId.ImportVm);\n        final VmTemplate template = mockVmTemplate();\n        final List<VmTemplate>", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.table1.Attach (this.labelCheck, ((global::Gtk.AttachOptions) (1)), ((global::AttachOptions) (4)), ((global::AttachOptions) (1)), null, null, new global::Gtk.AttachOptions (0));\n\t\t\tthis.table1.Attach (this.labelWhen, ((global::", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n                self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            self.system['TOTALSTATUS'] = self.totalstatus\n        self.system['STATUS'] = self.totalstatus\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic ConstructorBuilder DefineConstructor(MethodAttributes attribs, string name, ConstructorInfo constructor)\n\t\t{\n\t\t\tConstructorBuilder builder = DefineConstructor(attribs, Type.EmptyTypes);\n\t\t\tif (constructor!= null)\n\t\t\t{\n\t\t\t\tbuilder = DefineConstructor(attrib", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "      return new global::bnet.protocol.channel_invitation.SendInvitationRequest.Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                    vertices[x] = new Vector3f();\n                }\n                int[] storage = new int[4];\n                getQuad(i, storage, storage);\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertices of quad\n     * <code>i</code", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (showDateData.equals(\"false\")) {\n            result.add(\"datecreated\");\n        }\n        if (showDateData.equals(\"true\")) {\n            result.add(\"datemodified\");\n            result.add(\"datecreated\");\n        }\n        if (showDateData.equals(\"true\")) {\n            result.add(\"", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\t//  Calculate the height of the text\n\t\t\tfloat animTime = 0f;\n\t\t\twhile (selected)\n\t\t\t{\n\t\t\t\tif (selected == selectedBefore)\n\t\t\t\t{\n\t\t\t\t\tselected = false;\n\t\t\t\t\tselected = false;\n\t\t\t\t\tactiveLine.color = placeholderOffColor;\n\t\t\t\t\tplaceholderText.color = placeholder", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        m_autoHeight = false;\n        base.OnSizeChanged(e);\n        m_autoHeight = true;\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region END\n    #endregion\n  }\n}\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                    lastUser = r[\"DateCreated\"].ToString();\n                }\n                if (!string.IsNullOrEmpty(lastUser))\n                {\n                    if (!Users.Contains(lastUser))\n                    {\n                        SendEmailToUser(lastUser, AErrors);\n                    }\n                }\n            }\n        }\n        private static void SendEmailToUser(string AUserId,", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "directions |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Viewport.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.LastMousePos.Y < Game.Renderer.Viewport.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Left;\n\t\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            // if there are no criteria codes in the list then add a message\n            if (CriteriaCodesUsed.Count == 0)\n            {\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult(new EValidationException(\n                    Catalog.GetString(\"No criteria codes have been selected for this conference\"),\n                    Petra", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "                // Reading file content\n                args.Add (filename, null, filename, fullpath);\n            }\n        }\n        /*\n         * Loads specified file as binary and appends into args.\n         */\n        [ActiveEvent (Name = \".p5.io.file.load\")]\n        public static void LoadFile (Node args,", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t}\n\t\tpublic string CopyCustomDescription\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (_customRange!= value)\n\t\t\t\t{\n\t\t\t\t\tNotifyPropertyChanged(\"CopyCustom\");\n\t\t\t\t\tNotifyPropertyChanged(\"CustomRange\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn confDir;\n\t\t}\n\t\tpublic string DataDir {\n\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t}\n\t\tpublic string DataPath {\n\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t}\n\t\tpublic string CacheDir {\n\t\t\tget {\n\t\t\t\treturn cacheDir;\n\t\t\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "            if (bugAnnotation == null) {\n                throw new RuntimeException(\"bugInstance is null\");\n            }\n            if (bugInstance.getBugType() == null) {\n                throw new RuntimeException(\"bugInstance is null\");\n            }\n            if (bugInstance.getBugType() == null) {\n                throw new RuntimeException(\"", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "public class Muffins : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Muffins() : base( 0x9eb )\n\t\t{\n\t\t\tStackable = false;\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 4;\n\t\t}\n\t\tpublic M", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                        if (eFarm.Count >= Menu.GetSlider(\"LaneClearECount\") && target!= null && target.DistanceToPlayer() <=\n                        target.DistanceToPlayer())\n                        {\n                            if (EFarm.Count >= Menu.GetSlider(\"LaneClearECount\"))\n                        {\n                            SpellManager.PredCast(E, eFarm", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn new GridBagConstraints(x, y, width, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "        directory = 'gds/specials/observations/tables/germany'\n        path = 'http://www.dwd.de/obsdata/observations_germany_germany_germany.xml'\n        uvi = self._retr_list(self._pollen_dir)\n        if uvi == '':\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(\n            field_model_def, {\n                'title': 'title',\n               'model': 'test_model',\n                'rules': {\n                    'title': 'title',\n                    'rules': 'rules',\n                    'type': 'field',\n                    'type': 'title',\n                    'rules': 'rules", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new object[] {10, \"E1\"});\n                // widen to int\n                var stmtTextCreateTwo = namedWindow\n                   ? \"create window MyInfraW2 as SupportBean\"\n                    : \"create table MyInfraW2 as (f1 int, f2 string)\";\n                env.Compile", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "        c = self.copy()\n        return c.__rmul__(other)\n    \n    def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__idiv__(other)\n    \n    def __idiv__(self", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "    def render_template(self, id, values, context=None):\n        \"\"\" Update a view with the given id. The view section may embed fields to write\n        :param int id: id of the view\n        :param str value: value to write\n        :param str xpath: valid xpath to the tag", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "            value = c.getRenderer().getComponentView(text);\n            if (oldValue == null || oldValue == null) {\n                if (oldValue!= null) {\n                    c.putClientProperty(BasicHTML.rendererKey, oldValue);\n                }\n                if (htmlDisabled!= null) {\n                    c.putClientProperty(B", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "    s = create(\"html/test.\" + ext, content=content)\n    assert not s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_reference\n    assert not s.name_is_multi_global\n    assert not s.name_is_worker\n    assert not s.name_is_worker", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmCollectionSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader = new HbmCollectionLoader(mapping, mapping);\n\t\t}\n\t\tpublic void Loader(System.Type loader)\n\t\t{\n\t\t\tmapping.SqlLoader = new HbmCollectionLoader();\n\t\t}\n\t\tpublic void Loader", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\twriter.Write( (DateTime) m_Faction.State );\n\t\t\tfor ( int i = 0; i < m_FactionItems.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Faction.State = m_Faction.State;\n\t\t\twriter.Write(", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        graphQueue.pop();\n        DebugMetric metric = Debug.metric(\"InliningRuns\");\n        metric.increment();\n        DebugMetric metric = Debug.metric(\"InliningConsidered\");\n        metric.increment();\n    }\n    private void moveForward() {\n        if (graphQueue.size() > graphQueue.size()) {\n            throw new IllegalStateException();\n       ", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                self.args['artifactor_dir'] = self.args['artifactor_dir'].replace(' ', '')\n                self.args['artifactor_dir'] = self.args['artifactor_dir'].replace('/', '')\n                self.args['artifactor_dir'] = self.args['artifactor_dir']\n            self.args", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "                if (value!= null) {\n                    if (value!= null) {\n                        if (phi) {\n                            ValueNode valueNode = states.get(0).getCacheEntry(key);\n                            if (valueNode!= null) {\n                                value = states.getCachedPhi(valueNode);\n                                if (valueNode!= null", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "        if (mCallback!= null) {\n            try {\n                mCallback.handleCallSessionModifyRequest(event);\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    /** @see Connection.VideoProvider", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t\n\t\tpublic override void OnDoubleClick(Mobile M, Point3D p)\n\t\t{\n\t\t\tif (from.Following!= null)\n\t\t\t{\n\t\t\t\tif (from.InRange(p, 5))\n\t\t\t\t{\n\t\t\t\t\tfrom.SendLocalizedMessage( 1060001 ); // You", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "    'BibrecBibxxx',\n    'BibrecBibxxx',\n    'BibrecBib{0:02d}x',\n    'BibrecBib{0:02d}x',\n    'BibrecBib{0:02d}x',\n   ", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "        user = '%s@%s' % (username, domain)\n        log.debug('Remove user: %s', user)\n        data = self.module.get(user)\n        if data is None:\n            raise BackendError('User not found.')\n        else:\n            self.module.delete(user)\n        self.module.delete(user", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def to_binary(self, **kwargs):\n        \"\"\"\n        Save the string representation of the file to *fpath*.\n        **Keyword argument**:\n         ", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res['Value']:\n      gLogger.info( \"No problematics found, integrity check was successful\" )\n      gLogger.info( \"Updating transformation %s status to 'ValidatedIntegrity'\" % transID )\n      res = self.transClient.setTransformationParameter( transID, 'TransformationID', '", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\t// Check if it's a Freenet URI\n\t\t\tif(URIProcessor.processURI(action, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": ":\n        gsp = yield self.run_fake_single_build(gsp, buildResult, builds[0],\n                                             resultText, buildResult, msg)\n        result = makeReviewResult(str({'name': u'Builder0',\n                                        'build': u'build','result': buildResult}),\n                                        (GERRIT", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.scheme = 'http://www.google.com'\n    self.summary.type = 'text'\n    self.summary.text = 'Less: &lt;'\n    self.assert_(self.summary.text == 'Less: &lt;')\n    new", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "        public Map<String, AnnotationMirror> reduce(Map<String, AnnotationMirror> r1,\n                Map<String, AnnotationMirror> r2) {\n            if (r1 == null)\n                return r2;\n            if (r2 == null)\n                return r1;\n            Map<String, AnnotationMirror> result =", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "class MATERIAL_PT_node_settings(MaterialButtonsPanel, Panel):\n    bl_label = \"Node Settings\"\n    bl_options = {'DEFAULT_CLOSED'}\n    COMPAT_ENGINES = {'BLENDER_RENDER', 'BLENDER_GAME'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n        engine =", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            //MAPPER 17\n            if (_engine.Memory.Map.Mapper17!= null)\n            {\n                var map17 = (Mapper17) _engine.Memory.Map.CurrentMapper;\n                mapper17 = map17;\n            }\n            //MAPPER 18\n            if (_engine.Memory.Map.Mapper18!= null)\n           ", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "            String sTDocUrl = m_oInspector.getTDocUrl();\n            if (sTDocUrl!= null){\n                m_oInspector.getInspectorDialog().addWindowListener(oActionListener);\n                m_oInspector.getInspectorDialog().addWindowFocusListener(oActionListener);\n                m_oInspector.getInspectorDialog().", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t// Page 2\n\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party Quest\", 70028); // Party Quest Scroll [10 Red Bears]\n", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn SizeHeightToFitWithMin (min, 0);\n\t\t}\n\t\tpublic int SizeHeightToFitWithMax (int max)\n\t\t{\n\t\t\treturn SizeHeightToFitWithMin (max, 0);\n\t\t}\n\t\tpublic int SizeHeightToFitWithMin (int min, int padding)\n\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "        return self.announcement\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this cross-publication.\n        \"\"\"\n        return reverse('announcements:announcement_detail',\n                      kwargs={'slug': self.announcement.slug})\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this cross-public", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": ":php:\n    lexers.add_lexer(PhpLexer(startinline=True, linenos='table'),\n                     'php')\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                 ORDER BY groupID''', (i,))\n    print \"Processing group: \", i\n    print \"Max group is: \", max_altitude\n    print \"Processing group: \", i\n    print \"Processing group: \", i\n    print \"Processing group: \", i\n    print \"Processing group:", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "        print(\"db_set_last_snapshot\", project_id, timestamp)\n        try:\n            run(rethinkdb_connection().db('projects').get('last_snapshot').set_update({\n               'rethinkdb': timestamp_to_rethinkdb(timestamp),\n                'timestamp': timestamp\n            }))\n        except Exception as err:\n            print", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"I'm not sure what you are talking about.<br/>I'm not sure if I understand you either.<br/>I'm not sure if I want to understand you either.<br/>I'm not sure if I want to talk to you anymore...\");\n\t\t\t\tMsg(\"I'm not sure if", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass VoteAddedResponse(Response):\n    def __init__(self, cmd, restag, rescode", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "    def add_host(self, host):\n        \"\"\" record the results of a task for a single host \"\"\"\n        self._start_task(host)\n    def _start(self, host):\n        \"\"\" record the start of a task for a single host \"\"\"\n        self.host_data[host] = HostData(host, self._play", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "                if (uri!= null) {\n                    Intent intent = new Intent(\"android.intent.action.VIEW\", null);\n                    intent.setData(Uri.parse(uri));\n                    intent.putExtra(\"android.intent.extra.COMMENT\", uri);\n                    intent.putExtra(\"android.intent.extra.SHORTENED\", true);\n                    intent.putExtra(\"android.intent.extra.SH", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "    if (len(primary.keys()) > 0):\n        print(\"primary.xml contains packages:\")\n        for key in primary.keys():\n            print(\"\\t\" + build_nevra(key))\n        raise AssertionError(\"Package set in primary.xml\")\n    print(\"No packages found in primary.xml\")\n    raise AssertionError(\"No packages", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            build_ext = self.get_finalized_command('build_ext').get_outputs()\n            build_ext = self.get_final_options('build')\n            build_ext = self.get_final_options('build')\n            build_ext = self.get_finalized_options('build')\n           ", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tint[] colNumbers = PropertyTableNumbersInSelect;\n\t\t\t\tint[] colNumbers = PropertyTableNumbersInSelect;\n\t\t\t\tint[] colNumbers = PropertyTableNumbersInSelect;\n\t\t\t\tint[] colNumbers = Property", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        '-J', str(request['job_id']),\n        '-o', log_name + '.out',\n        '-e', log_name + '.err',\n        '-N', job_name,\n        '-M', 'n',\n        '-m', 'b',\n        '-l', 'jobname=' + request['job_job", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]  \n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]  \n        public ActionResult SaveEventDelegate", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                        return string.Format(\"({0},{1},{2},{3})\", ((Circle) obj).R, ((Circle) obj).G, ((Circle) obj).B, ((Circle) obj).A);\n                    }\n                    if (obj is Vector2)\n                    {\n                        return string.Format(\"({0},{1})\",", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "        if self.lastCheck == 0:\n            self.logDebug(\"Download link was not expired\")\n            self.logDebug(\"API response: %s\" % res)\n            if self.lastCheck == \"limit\":\n                self.logWarning(_(\"Download limited reached\"))\n                self.tempOffline()\n            elif self.lastCheck == \"", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (searchRadius!= null)\n\t\t\t\t{\n\t\t\t\t\tif (searchPath!= null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// If we have a valid path, we can use the last order location as a starting point.\n\t\t\t\t\t\tif (searchPath!= null && searchPath.Length > 0)\n\t\t\t\t\t\t\treturn path;\n\t\t\t\t\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                       self.logger.error(\"sync_dhcp: failed\")\n                       return False\n                    return True\n            else:\n                self.logger.info(\"sync_dhcp: skipping\")\n                return True\n            return True\n        else:\n            self.logger.info(\"sync_dhcp: skipping\")\n            return True\n    def sync_dhcp", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        }\n        return Event.newBuilder().setSource(source).setSequenceNumber(seqNo);\n    }\n    public void setLogAllMessages(boolean logAllMessages) {\n        this.logAllMessages = logAllMessages;\n    }\n    public synchronized void setFlusher(boolean logAllMessages) {\n        this.logAllMessages = log", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            for (PpmContext currentContext = context; _minimumContext!= _maximumContext; context = _minimumContext)\n            {\n                if (context.NumberStatistics == 0)\n                {\n                    if (context._escapeCount == 0)\n                    {\n                        goto NoEscape;\n                    }\n                    _escapeCount =", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "                return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Sequence VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false, false, false, 0, false,'', 1,\n", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t//if(! Util.IsNumber(tFull[3], false))\n\t\t\t//\tcontinue;\n\t\t\tforeach (Event myEvent in store)\n\t\t\t{\n\t\t\t\tif(myEvent.UniqueID == tFull[0] + \":\" + tFull[1] + \":\" + tFull[2] + \":\" + t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 9)\n        self.assertEquals(b'abcdefghij\\x00\\x00ij', self.read(o))\n    def test_smaller_than_file_across_start(self):\n        o = self.file(b'abcdefghij')\n        insert_bytes(o", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "    <td>1.2.3.4</td>\n  </tr>\n  <tr>\n    <td>Mac OS X (64-bit)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"win-bundle64\" href=\"http://dl.google.com/android", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    plt.plot(np.arange(len(cr['runs'][app][VC][app][VC]['durations'])),\n             cr['combined'][app][VC][app]['durations'],\n             'ro')\n    plt.plot(cr['runs'][app][VC][app][VC]['durations'],\n             cr['combined'][app", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "        self._testUIDGIDSwitch(1, 1, 1, 1, [0, 1, 1, 1], [0, 1, 1, 1])\nclass SuppressTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{util.suppress}.\n    \"\"\"\n   ", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlDarkShadow());\n\t\t\t\t}\n\t\t\t\tif(model.isRollover()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.drawLine(model.getControlSize(), x + 1, y + 1);\n\t\t\t\t}\n\t\t\t\tif(bDrawCross){\n\t\t\t\t\tg.drawLine(x + ", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "  if winner!= 0:\n    failures += \"Inference failed with k=3\\n\"\n  if _inferenceResult!= 0:\n    failures += \"Inference failed with k=3\\n\"\n  if _categoryDist!= 0:\n    failures += \"Inference failed with k=3\\n", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        final int arrayLength = mirror.arrayLength();\n        final int offset = (offset - headerSize) / arrayLength;\n        final int index = offset - headerSize;\n        final int offset = offset / arrayLength;\n        final", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "            if (relativePath!= null &&!relativePath.Equals(String.Empty)) {\n                string assemblyFile = SolutionTask.ResolveAssemblyFile(relativePath);\n                if (assemblyFile!= null) {\n                    return assemblyFile;\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Resolves an assembly", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "    # Remove spaces around the format string\n    string = re.sub(r'(?<!\\S)\\S','', string)\n    return string.format(*args, **kwargs)\ndef str_format_list(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of str_format, with the format string", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        i3 = i27 + i15 - 1;\n        i3 = i3 + i15 + 1;\n        i3 = i3 + i15 + i15;\n        i3 = i3 + i15 + i15;\n        i3 = i3 + i15;\n        i", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic void UpdateGraph( float remaining_weight ) {\n\t\t\tif( _current_state!= null ) {\n\t\t\t\t_current_state.UpdateGraph( remaining_weight );\n\t\t\t}\n\t\t\tif( _current_state!= null )", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                    ExtraMissileNames = new[] { \"lucianrmissile\", \"lucianrmissile\" },\n                    ExtraRange = 0,\n                    ExtraRadius = 0,\n                    ExtraDuration = 0,\n                    ExtraDelay = 0,\n                    ExtraSpeed = 0,\n                    ExtraMiss", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getEmfUser()).thenReturn(new EmfUser());\n\t\twhen(securityContext.getEmfUser()).thenReturn(new EmfUser());\n\t\twhen(securityContext.getEmfUser()).thenReturn(new EmfUser());\n\t\twhen(securityContext.getEmfUser()).thenReturn(new EmfUser());\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        context.add_adapter(\n            testlib.SCSIAdapter())\n        context.add_adapter(\n            testclass.SCSIAdapter())\n        context.add_adapter(testlib.SCSIAdapter())\n        context.add_adapter(testlib.SCSIAdapter())\n        context.add_adapter(testlib.SCSIAdapter())\n        context.add_adapter(testlib.SCSIAdapter())\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t// initialize the property service\n\t\t\t// this will initialize the resource service\n\t\t\t// and the addin tree\n\t\t\t// and the addin tree\n\t\t\t// and the addin tree\n\t\t\t// and the addin tree\n\t\t\t// and the addin tree\n\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t}\n}\n", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.verticalLayout_2.addWidget(self.settings_ui_groupbox)\n        self.verticalLayout_2.addWidget(self.settings_kernels_groupBox)\n        self.verticalLayout_6 = QtWidgets.QVBoxLayout()\n        self.verticalLayout_6.setObjectName(\"verticalLayout_6\")\n        self.verticalLayout_2.addLayout(self.verticalLayout_6", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                return false;\n            }\n            return true;\n        }\n        @Override\n        protected void onPostExecute( Forecast forecast ) {\n            View view = getActivity().findViewById( R.id.wx_detail_layout );\n            view.setVisibility( View.VISIBLE );\n            TextView tv = (TextView) view.findViewById( R.id.wx_station_id );\n            TextView", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\t// increment the query execution count\n\t\t\t\tstats = s.CreateQuery(\"from Continent\").UniqueResult().Statistics;\n\t\t\t\t// stats should be null\n\t\t\t\tAssert.AreEqual(0, stats.QueryExecutionCount, \"QueryExecutionCount should be 0\");\n\t\t\t\t// but the session should be closed\n\t\t\t\t", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "                uiByteValue = ((uint)uiByteValue << 8) ^ (uiByteValue >> 8);\n                uiCRCITTSum = ((uiCRCITTSum & 0xFF00) << 8) ^ (uiCRCITTSum >> 8);\n                uiCRCITTSum = ((uiCRC", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\t}\n\t\telse if (getOwner().isOwner(this) &&!level.isClientSide)\n\t\t\treturn level.getBlockState(getBlockPosBelowThatAffectsMyMovement()).isAir()? 0 : 1;\n\t\treturn 0;\n\t}\n\t/**\n\t * @return The block that this sent", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "            return new IHyperlink[] { \n                    new CeylonHyperlinkDetector() };\n        }\n        return new IHyperlink[] { \n            new CeylonHyperlinkDetector(),\n            new ReferencesHyperlinkDetector(),\n            new CeylonJavaHyperlinkDetector() };\n    }\n    public ITextHover", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "        self.aspect = Object3DScale(self)\n        self.scale = Object3DProperties(self)\n        self.aspect = Object3DProperties(self)\n        self.scale = Object3DProperties(self)\n        self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(self.aspect)\n        self.l.addWidget(self.scale)\n", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( m_Stack == null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tm_Stack = m_Mobile.Location;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( m_Stack == null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tm_Stack = m_Mobile.Location;\n\t\t\t\t\t\t\tbreak", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": ":\n                     Object[] valueChoicesArray = selectToValueArray(value, selectComponent);\n                     if (valueChoicesArray!= null)\n                     {\n                        if (value instanceof String)\n                     {\n                        for (Object choice : valueChoicesArray)\n                     {\n                        if (value.equals(choice))\n                        {\n                           chosenObj = value;\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\tif (avg[i][j]>0.0)\n\t\t\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+avg[i][j] +\"\\t\"+min[i][j] +\"\\t\"+max[i][", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                            //iterate through each unpriced order line\n                            foreach (KeyValuePair<int, int> unpricedLine in unstockedLines)\n                            {\n                                //get the index of the order line that could not be priced\n                                int lineIndex = unpricedLines[unpricedLine);\n                                Console.WriteLine", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\tthrow new NotImplementedException ();\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic ClientOperation ClientOperation {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic bool IsFaulted {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        final int secondUserId = new Random().nextInt(SecurityManagerImpl.MAX_USER_ID);\n        final int secondMode = 0400;\n        final int thirdUserId = new Random().nextInt(SecurityManagerImpl.MAX_USER_ID);\n        final int thirdMode = 0200;\n        final int fourthUserId = new Random", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": ":\n\t\t\treturn v.ToVector2 () * viewport.ToVector2 ().PrimaryVector () / viewport.ToVector2 ().Length ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport)\n\t\t{\n\t\t\treturn v.ToVector2 () * viewport.ToVector2 ().Length () /", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats_member(object):\n    __slots__ = ['type', 'value']\n    def __init__(self, type, value):\n        self.type = type\n        self.value = value\n    def __repr__(self):\n        parts = []\n        parts.append('endpoint_stats_member(')\n        parts.append(self", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "            notifyRequestReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Error, type, null);\n        }\n    }\n    @Override\n    public void onReadFailure(int requestId, String error) {\n        notifyRequestReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Error, null, null);\n    }\n    @Override", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  if bind_count:\n    print'   object,'\n    print'   &FunctionCallback%d<%s%s%s> %s%s%s>' % (\n        exec_name, exec_count, exec_type, exec_type_str, exec_name,\n        exec_name, exec_type, exec_type_str)\n  print '", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    response = laconia_range_json(\n        filename,\n        range_item_dict\n    )\n    \"\"\"\n    response = range_json_item(\n        filename,\n        range_item_dict,\n        items\n    )\n    return range_item_json\ndef range_json_item(request, appname, modelname, items):\n    \"\"\"\n   ", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                        new VarNode(\"lit\"), new ConstantNode(mikeIV),\n                        new ConstantNode(\"score\"), null, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(new ServiceNode(new ConstantNode(\n                        BDS.SEARCH), new VarNode(\"lit\"), new ConstantNode(\n                        relevanceIV), new ConstantNode(\"score\"),", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        if self.object and not self.request.user.is_superuser:\n            if self.request.POST.get(\"set_is_active\"):\n                return self._handle_set_is_active()\n            return self._set_is_active(request, request.POST, request.POST.get(\"user_id\"))\n        return self.get(request, *args, **kwargs)\n   ", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of objects representing persisted instances of types that extend System.Attribute. Provides a way to associate metadata with the assembly reference.\n    /// </summary>\n    public IEnumerable<ICustomAttribute> Aliases {\n     ", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            var w = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var zold = new DenseVector(input);\n            var zoldold = new DenseVector(input);\n            var zoldoldold = new DenseVector(input);\n            var zoldoldoldold = new DenseVector", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[sortedNumbers.length / 2]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[(sortedNumbers.length - 1) / 2]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the mean of an array of numbers\n\t *", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "                if ts.is_sample(v):\n                    u = reference_set_map[focal[v]]\n                    if u!= -1:\n                        raise ValueError(\"Sample set map is not consistent\")\n                    sample_count[ts.nodes.left_child[u], j] += 1\n                    sample_count[ts.nodes.right_child[u], j] +=", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        for key, value in result.items():\n            if not value:\n                result[key] = 0\n            if not value == self.enrich_backend.enriched_items:\n            if not value == self.enrich_backend.enriched_items:\n                self.assertEqual(value, self.enrich_backend.enriched_items)\n", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        frame_header = FrameHeader.from_frame(self)\n        frame_payload = self.frame_payload\n        return struct.pack('!x' + frame_header + frame_header + frame_header + frame_header)\n    def __len__(self):\n        return len(self.data) + len(self.frame_payload) + 2\n    def", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            if (cluster.BoundaryCurve!= null)\n                return;\n            if (cluster.BoundaryCurve!= null)\n                return;\n            if (cluster.BoundaryCurve!= null)\n                return;\n            if (cluster.BoundaryCurve == null)\n                return;\n            if (cluster.BoundaryCurve!= null)\n                return", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeCosine = (double)(0.0);\n}\nvoid btKinematicCharacterController::setSlopeLimit (double slopeLimit)\n{\n\tm_maxSlope = slopeLimit;\n}\nvoid btKinematicCharacterController::setStepHeight (double stepHeight)\n{\n\tm_stepHeight = stepHeight;\n", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        if (canBeLeaked(initializer)) {\n            checker.report(Result.failure(\"unique.leaked\"), initializers.get(0));\n        }\n        return super.visitNewArray(node, p);\n    }\n    private boolean canBeLeaked(ExpressionTree exp) {\n        if (isInUniqueCheckInitializers) {\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound!= null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbt = stack.getTagCompound();\n\t\t\t\tif (nbttagcompound!= null)\n\t\t\t\t{\n\t\t\t\t\tnbttagcompound = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\t\tif (nbttagcompound.hasKey(\"display\",", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute!= null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ParamHandler(CommentXmlNode, _returnNode);\n\t\t\t\t\t_returnType.LoadCommentNodes();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Loads the code expression.\n\t\t/// </summary>\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tAssert.AreEqual (myTrackBar.Width, 80, \"#SIZE2_1\");\n\t\t\tAssert.AreEqual (myTrackBar.Width, 80, \"#SIZE2_2\");\n\t\t}\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void OrientationTest ()\n\t\t{\n\t\t\tTrackBar myTrack", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\t// must be write lock\n\t\t\tverify(classCache, times(1)).executeWithWriteLock(Matchers.<Callable<?>> any());\n\t\t\tverify(instrumentationApplier, times(1)).addInstrumentationPoints(Matchers.<ClassType> any());\n\t\t\tverify(instrumentationApplier, times(", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.currentStmt!= null && this.currentStmt!= other.currentStmt)\n\t\t\treturn false;\n\t\tif (this.currentStmt!= null && this.currentStmt.equals(other.currentStmt))\n\t\t\treturn false;\n\t\tif (this.predecessor!= null && this.predecessor!= this)\n\t\t\treturn false;\n\t", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tDbgThread(() => RemoveThread_UI(process));\n\t\t\tprocess.DbgManager.Dispatcher.VerifyAccess();\n\t\t\tprocess.IsRunning = false;\n\t\t\tprocess.DbgProcess = null;\n\t\t\tprocess.DbgProcess = null;\n\t\t\tprocess.DbgProcess = null;\n\t\t\tprocesses.Remove(process);\n\t\t}\n\t\t//", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.endTag( null, name );\n\t}\n}", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif (!(aThat instanceof Contact) ) {\n\t\t\t\treturn false;\n\t\t}\n\t\tif ( (this.id == null) && (this.id!= null) ) {\n\t\t\treturn false;\n\t\t}\n\t\tif ( (this.id!= null) && (!this.id.equals( ( (aThat instanceof", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t    if n == 0:\n\t      status = 'w'\n\t    else:\n\t      status = 'a'\n\t    with open(name, 'w') as f_ID:\n\t      f_ID.write(str(body.body_location[body_offset:body_offset+body_offset+body_offset+1]))\n\t      f_ID.write(str(body.body", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        if len(cdata) == 0:\n            return\n        if (node.inputs[0].ndim == 1 and\n                all(i == 0 for i, i in enumerate(node.op.idx_list))):\n            return\n        if (node.inputs[0].ndim == 1 and\n               ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "    def __init__(self, *args, **kwargs):\n        self.user = kwargs.pop('user')\n        community = kwargs.pop('community')\n        super(PermissionGroupsForm, self).__init__(*args, **kwargs)\n        self.fields['groups'] = forms. \\\n            MultipleChoiceField(\n                choices=get", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "            :param query: The :class:`.Query` object.\n            :param query: The :class:`.Query` object.\n            :param query: The :class:`.Query` object.\n        \"\"\"\n    def after_compile(self, query, compiler, **kwargs):\n        \"\"\"Receive the :class:`", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "            xml_object = etree.Element(self._tag_name)\n            if self.show_tag_list:\n                for location in self.show_tag_list:\n                    if location in self.show_tag_list:\n                        self.runtime.add_block_as_child_node(self, xml_object)\n        return etree.tostring(\n            etree.ElementTree(self._tag_name,", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "        for axis in self.get_axes(self.filtered_data):\n            for change in data_model_changes:\n                if change.id == axis.id:\n                    self._translate_change(data_model_changes, axis, indices, change)\n                else:\n                    self._translate_change(data_model_changes, axis, indices)\n        self.update_filtered_data()\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class!= null && type!= null)\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"cannot use 'class' and 'type' attributes together for ldtoken\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (Method!= null && type!= null)\n\t\t\t{\n\t\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.label6.Text = \"label6\";\n\t\t\t// \n\t\t\t// label6\n\t\t\t// \n\t\t\tthis.label3.Location = new System.Drawing.Point(16,", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/mail/syncmail.1\",\n                                        \"test/mail/syncmail.2\",\n                                        \"test/mail/syncmail.3\"]))\n        self.assertEqual", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData!= null) {\n            for (final String key : row.get(ID_KEY).split(\"\\\\s*,\\\\s*\")) {\n                if (StringUtils.isNotBlank(key)) {\n                    String value = termData.get(ID_KEY);\n                    if (value == null) {\n                        value = \"\";\n                    }\n                    if", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(!isPassiveFlower()) {\n\t\t\tif(wand.isSneaking() && isPassiveFlower()) {\n\t\t\t\t// If the flower is not a collector, it's not passive.\n\t\t\t\tif(!isPassiveFlower()) {\n\t\t\t\t// If the flower is not a collector,", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "        return this.integrateParameter * this.getRepresentativity(component, c);\n    }\n    private float getIntrinsicCohesion(Node n, float cohesion) {\n        float nbNeighbors = 0;\n        for (Node n : c.getComponents()) {\n        }\n        return this;\n    }\n    private float get", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                                are_equal = are_equal and (flags[flagname][version][docformat] == minfo['flags'][flagname][version][docformat])\n                                if not are_equal:\n                                    logger.info(\"ERROR: Document %s: Expected flag %s and got %s\" % (str(docid), str", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t//guiThread.Abort();\n\t\t\t//guiThread.Join();\n\t\t\t//guiThread=null;\n\t\t\t//guiThread=null;\n\t\t\t//guiThread=null;\n\t\t\t//guiThread=null;\n\t\t\t//guiThread=null;\n\t\t\t//guiThread=null;\n\t\t\t//guiThread=null;\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date date : event.getExceptionDates()) {\n      exDate.add(exDate);\n    }\n    return exDate;\n  }\n  /**\n   * Gets a Datable instance from the specified date.\n   * @param date the date to convert.\n   * @return a Datable instance.\n  ", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\t}\n\t}\n\t{\n\t\tif( sourceEventBinding == null )\n\t\t{\n\t\t\t// If the target event is not specified, then we need to bind the target property to the target event\n\t\t\tif( string.IsNullOrEmpty( targetEventName ) )\n\t\t{\n\t\t\ttargetEventBinding = new df", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "            DaylightWebUtil.auditlog(\"Span Port\", userName, \"added\", DaylightWebUtil.getPortName(nodePort, switchManager)\n                    + \" to Switch \" + switchManager.getContainerName(), containerName);\n            DaylightWebUtil.auditlog(\"Span Port\", userName, \"added\", Daylight", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper.setId(new Integer(1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n    }\n    public int randomChoice(List list) {\n        return values.get(list);\n    }\n    public void setSeed(long seed) {\n        this.seed = seed;\n        this.rnd = new Random(seed);\n    }\n    public void setSeed(String propertyKey, Object value) {\n", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "                    la = LinkAnnotation()\n                    la.subject = subject_uri\n                    la.subject_type = 'entity'\n                    la.project_uuid = project_uuid\n                    la.source_id ='manual'\n                    la.project_uuid = project_uuid\n                    la.save()\n                    print('Made:'+ str(la) +'for '", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"         .shrinkToFit= \")\n               .Append(ShrinkToFit).Append(\"\\n\");\n            buffer.Append(\"         .mergeCells = \")\n               .Append(StringUtil.ToHexString(MergeCells)).Append(\"\\n\");\n            buffer.Append(\"         .indntxt     = \")\n               .Append(String", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains half-width kana.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = (byte) (value);\n\t\t\t} else if (ch >= 0x9FA5 && ch <= 0x9FAF) {\n\t\t\t\t// This", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    if   obj.mnemonic==\"LD_A\"  : dst = env.A[a]\n    elif obj.mnemonic==\"LD_D\"  : dst = env.E[a]\n    elif obj.mnemonic==\"LD_D\"  : dst = env.E[a]\n    elif obj.mnemonic==\"LD_D\"  : dst", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\t// load the properties map\n\t\t\tstream = location.openStream();\n\t\t\tstream = new Properties().load(stream);\n\t\t\treturn new JRPropertiesMap(stream);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif (stream!= null)\n\t\t\t{\n\t\t\t\tstream.close();\n\t\t\t}\n\t\t\tif (close)\n\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "            return this == NOT_SET;\n        }\n        /**\n         public boolean isAdventure()\n        return this == ADVENTURE;\n        return true;\n        return this == ADVENTURE;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isAdventure()\n       ", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\t// CommonSecurityDescriptorTest.cs - NUnit Test Cases for CommonSecurityDescriptor\n\t\t\t// Authors:\n\t\t\t//\tJames Bellinger  <jfb@zer7.com>\n\t\t\t// Copyright (C) 2012 James Bellinger\n\t\t\t// This file is part of the Mono project.", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "class AcoustidLookupThread(threading.Thread):\n    URL = \"https://api.acoustid.org/v2/lookup\"\n    URL = \"https://api.acoustid.org/v2/lookup\"\n    URL = \"https://api.acoustid.org/v2/lookup\"\n    URL = \"https://", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        if (PhotonEditor.ReLoadRpcList)\n        {\n            // check if the list is up to date\n            if (PhotonEditor.Current!= null)\n            {\n                if (PhotonEditor.Current.RpcList!= null)\n                {\n                    if (PhotonEditor.Current.RpcList.Count > 0)\n                    {\n", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        return rootLayout;\n    }\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState;\n        super.onCreate(savedInstanceState);\n        parentContext = this;\n        full_msg.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (getArguments()", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            if self.symmetry is None:\n                raise ValueError('No symmetry operations defined!')\n            if self.N_c is None:\n                raise ValueError('No k-point combinations defined!')\n            if self.nspins == 1:\n                return self.symmetry.transform_wave_function(op_cc, psit_G)\n            else:\n               ", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp, utkastRequest);\n        assertEquals(OK", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t// TODO: Remove this\n\t\t\t\t//if (block.Body.Count > 0) {\n\t\t\t\t//\tflatBody.Add(block.Body[0]);\n\t\t\t\t//\tflatBody.AddRange(block.Body.Skip(1).SelectMany(b => b.Body));\n\t\t\t\t//\tblock.Body = flatBody;\n\t\t\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t\tif (IsRagdoll!= ragdoll) {\n\t\t    //we're not a ragdoll, so let's become one\n\t\t    //TODO: this is a bit of a hack, we should be able to set the body to a ragdoll\n\t\t    //and back to a body\n\t\t    //this should", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "    def __init__(self, config={}):\n        super().__init__(config)\n        self.name = \"\"\n        self.region_ids = [ int ]\n        \"\"\"List of region indexes\"\"\"\n        self.regions = [ Region ]\n        \"\"\"List of regions\"\"\"\n        self.topology = ClassFactory(Topology)\n        self", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "        out[0] = (byte)(num >> 24);\n        out[1] = (byte)(num >> 16) & 0xff;\n        out[2] = (byte)(num >> 8) & 0xff;\n        out[3] = (byte)(num & ", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            super( source );\n            this.filter = new FilteredPatternFinder( source );\n        }\n        public FilteredPatternFinder( Iterable<PatternMatch> source,\n            Map<String, String> objectVariables, FilterExpression... expressions )\n        {\n            this.source = source;\n            this.match = new FilteredPatternMatch", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "        elif key == 'type':\n            if value == 'bool':\n                slice_json['type'] = 'bool'\n            elif value == 'date':\n                slice_json['unit'] = 'date'\n            elif value == 'float':\n                slice_json['unit'] = 'float'\n            elif value == 'percent", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            if (ClientSettings.SHOW_POPUP_MENU) {\n              if (btn.isPopupEnabled()) {\n                if (e.getX()>btn.getWidth()) {\n                  if (frameToClose!=null)\n                    if (frameToClose==frame) {\n                      frameToClose.setSelected(false);\n                      frameToClose = null;\n", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y++)\n    {\n      for (int x = 0; x < p.getRasterWidth(); x++)\n      {\n        double", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    db.update(Db.Table3.TABLE_NAME, new ContentValues().put(Db.Table3._ID, Db.Table3._ID + Db.Table3._ID), new String[] {Db.Table3._ID}, null);\n                    //Update budget items\n                    ContentValues values = new ContentValues();\n                    values.put(Db.Table3.BUD", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "                }\n        #endregion\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n        public IntPtr Pointer\n        {\n            get\n            {\n                return m_ptr;\n            }\n        set\n            {\n                if (m_ptr!= IntPtr.Zero)\n            {\n                if (m_ptr!= m_ptr)\n               ", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": ":\n\t\t\tif (Enabled)\n\t\t\t{\n\t\t\t\tvar item = queue.FirstOrDefault(q => q.Item == self.World.ActorsWithTrait<ProductionItem>().FirstOrDefault(q => q.Item == self.World.ActorsWithTrait<ProductionItem>().FirstOrDefault(q => q.Item == itemName));\n\t\t\t\tif (item!= null)\n\t\t\t\t{\n", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "        infoText += \" file\" if numberOfFiles==1 else \" files\"\n        infoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file\" if numberOfHiddenFiles==1 else", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = re_m4.sub(r'%%\\1%%', code)\n        self.env.subs = self.inputs[0].name\n        self.env.subst = subst_pc\n        self.env.subst(self)\n        return self.outputs[0].abspath()\n@taskgen_method\ndef process_pc(self", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "        self._as.set_aborted()\n        self._result = self._as.get_result()\n        rospy.loginfo(\"Send result to PlanningExecutorServer...\")\n        self._as.set_succeeded()\n        return self._result\n        rospy.loginfo(\"Received the result from PlanningExecutorServer:\")\n        self._result =", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "+ chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent ] );\n\t\t\t\t\tdelta[ 0 ][ idx + 1 ] += chemical[ 0 ][ idx + 1 ];\n\t\t\t\t\tdelta[ 0 ][ idx ] += chemical[ 0 ][ idx + reactorExtent ];\n", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                columnLocale = locale == null? this.dateLocale : dateLocaleFactory.getLocale(locale);\n                if (pattern == null) {\n                    throw JsonException.$(0, \"Locale is required\");\n                }\n                if (pattern == null) {\n                    throw JsonException.$(position, \"Missing 'name' property", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam = entity;\n\t\t\tParam = qs.NewParameter();\n\t\t\tParam = entity;\n\t\t\tParam = qs.NewParameter();\n\t\t\tParam = entity;\n\t\t\tParam = qs.NewParameter();\n\t\t\tParam = entity;\n\t\t\tParam = qs;\n\t\t\t", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object DeepCopy(object value)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object DeepCopy(object value)\n\t\t{\n", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        self.cli_load_config(self.updates)\n        self.cli_load_config(self.updates)\n        self.cli_config = self.cli\n        self.cli = self.ntp_auth_keyid\n        self.cli_config = self.updates\n        self.cli_config = self.cli_config + self.cli_config\n        self.cli = self", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            self.store.update_item(component, self.user_id)\n            self.store.update_item(component, self.user_id)\n            self.store.update_item(component, self.user_id)\n            self.store.update_item(component, self.user_id)\n            self.store.update_item(component, self.user_id)\n            self.store.update_item(component, self.user", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        for (int i = 0; i < length; i++) {\n        // This is the only place where we can use the char[] ch[] array.\n        // We don't use the start and end tags.\n        // We don't use the start and end tags.\n        // We don't use", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "    return aetypes.Range(dict)\ndef mkobjectfrommodule(dict, module):\nNext line of code:\n:\n    return aetypes.ObjectSpecifier(module, dict)\ndef mkobject(dict):\nNext line of code:\n    return aetypes.ObjectSpecifier(dict)\ndef mkinsertionloc(dict, module):\nNext line of code:\n", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            if (api == null)\n            {\n                throw new ArgumentNullException(\"api\");\n            }\n            if (ActualHttpMessageTypes == null)\n            {\n                throw new InvalidOperationException(\"No samples found for this action.\");\n            }\n            if (api.ActionDescription!= null)\n            {\n                if (api.ActionDescription.HttpMethod ==", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanProperties.add(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /*\n     * (non-Javadoc)\n     * @see org.springframework.beans.factory.config.BeanFactoryPostProcessor", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            # Create a temporary file to hold the new user entry\n            # This is used to avoid the need to re-read the file\n            # and to avoid the need to re-read the file\n            # and to avoid the need to re-read the file\n            # and to avoid the need to re-read", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "            [In, MarshalAs(UnmanagedType.IUnknown)] object pUnk,\n            [In] int dwQueue,\n            [In] int dwParam\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In] int dwEvent,\n            [In, MarshalAs(UnmanagedType.LPStruct)]", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "        checkPermission( SecurablePrincipal.class, spm.getAclKey(), spm.getAclKey() );\n        return null;\n    }\n    @Override\n    @PostMapping(\n            path = { UPDATE + \"/{id}\" },\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void addSecurablePrincipal", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        # If the element has children, then verify them.\n        if not self.verify_element(self.expected_data):\n            msg = \"Element '{0}' not found in expected data.\"\n            self.fail_test(msg.format(self.expected_data))\n            return False\n        # If the element is not found in the expected data, fail", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "        clone.ownerDocument = self\n        clone.ownerDocument = newOwnerDocument\n        clone.specified = node.specified\n        clone.specified = node.specified\n        clone.value = node.value\n        clone.specified = node.specified\n        clone.specified = node.specified\n        clone.specified =", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t// TODO: Do we want to order the components (which is assumed to be a\n\t\t\t//   signature for a signed interest).\n\t\t\t// If there is no signature, then set the signature to null.\n\t\t\tif (decoder.peekType(TlvTypeCodes.Signature, endOffset))\n\t\t\t\t", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for(int i = 0; i < myWeapons.length; i++){\n            if (ActiveWeapons.contains(myWeapons.get(i).getActiveWeapon())){\n                myWeapons.get(i).updateCD();\n            }\n        }\n        \n        //Updates the player's location on the server\n        for(int i = 0;", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setColor( color );\n        action.setRegistration( color );\n        // add cancel button\n        m_btnOk.setEnabled( false );\n        m_colorSelection.setEnabled( false );\n        m_colorSelection.setVisible( false );\n        m_btnOk.setVisible( false );\n        m_companySelection.setVisible( false );\n        m_companySelection.setEnabled", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        log.error(\"Error downloading file: %s\", url)\n        log.error(\"Error downloading file: %s\", r.url)\n        log.error(\"Error downloading file: %s\", r.headers)\n        log.error(\"Error downloading file: %s\", r.url)\n        log.error(\"Error downloading file: %", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\tresponse = service.MergeOrderDryRun(request);\n\t\t\t\tresponse = service.MergeOrderDryRun(sourceOrder);\n\t\t\t\tresponse = service.MergeOrderDryRun(sourceOrder);\n\t\t\t\tresponse = service.MergeOrderDryRun(sourceOrder);\n\t\t\t\tresponse = Platform.GetService(\n\t\t\t\t\tdelegate(IOrderEntryService service)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar request", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "    if reaction.elements is None:\n        return []\n    if reaction.elements is None:\n        return []\n    return _reaction_elements(reaction)\ndef _reaction_elements(reaction: \"Reaction) -> List[float]:\n    \"\"\"Return the metabolite components of a reaction.\n    Parameters\n    ----------\n    reaction : cobra.Re", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(\n            storestate__state=STORE_ADDED,\n            storestate__store__project__project__name=settings.POOTLE_PROJECT,\n            store__project__project__name=settings.POOTLE_PROJECT,\n            store__store__project__project__name=settings.POOTLE_PROJECT", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TrainingType',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', default=0, serialize=False, auto_created=True, primary_key=True", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                self.send_packet_in(packet, srcmac, srcip, portnum)\n                self.arp_table[dstmac] = srcip\n                self.arp_table[srcip] = self.remote_macaddr\n                self.arp_table[arp.arpop] = self.name\n                self.ipdests[", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (m_IgnoreChanges)\n      return;\n    if (check(item)) {\n      if (m_RecentItems.size() < m_MaxCount) {\n\t// add item to list\n\tm_RecentItems.add(item);\n\t// notify listeners\n\tnotifyRecentItemListenersOfAdd(item);\n      }\n     ", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            if (target is FelonyMobile)\n                return false;\n            // No more than 1 step away\n            if (target is FelonyMobile)\n                return true;\n            if (target is FelonyMobile)\n                return false;\n            // No more than 1 step away\n            if (target is", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "        if (halfTradePeriodDate == null && takeOfferDate!= null)\n            halfTradePeriodDate = new Date(takeOfferDate + (getOffer().getTradePeriod() / 2));\n        return halfTradePeriodDate;\n    }\n    public Date getHalfTradePeriodDate() {\n        if (half", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t} else if (p.typ == Node.opt) {\n\t\t\tif (p.next!= null) a = LeadingAny(p.next);\n\t\t} else if (p.typ == Node.any) a = LeadingAny(p.next);\n\t\treturn a", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((size & 0x01) == 0? 0x00 : 0x01);\n\t\t\tbuff[5] = (byte)(mWiimoteState.LEDState & 0x01);\n\t\t\tbuff[6] = (byte)(mWi", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tims.core.clinical.vo.MskJointVoCollection.this is used only in the method to raise the collection response class to the ims.core.clinical.vo.MskJointVoComparator (which is a subclass of ims.core.vo.MskJointsVoComparator) so that the ims.core.vo.MskJ", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tConsole.Write( \"Sending email...\" );\n\t\t\t\tWorld.Shutdown();\n\t\t\t\tConsole.WriteLine( \"done\" );\n\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static void SendEmail( string filePath )\n\t\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\t//should bring from cache\n\t\t\t\tIList results = session.CreateCriteria(typeof(AnotherItem))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.SetCacheMode(CacheMode.Normal)\n\t\t\t\t\t.SetFetchSize(0)\n\t\t\t\t\t.SetReadOnly(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, results.Count", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (k = 0; i < N1 + N1; i++)\n            {\n                _indx2Units[i] = _indx2Units[i];\n            }\n            for (k = 0; i < N2; i++)\n            {\n                _indx2Units[i] = _heap;\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "    def create(self, description, currency, fields):\n        add_view = navigate_to(self, 'Add')\n        add_view.fill(\n            {\n                'description': description,\n                'currency': fields\n            },\n            on_change=View.add_button,\n            no_change=View.cancel_button\n        )\n        view =", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\t// if ( useScratchBuffer )\n\t\t\t// {\n\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tif ( _lockedToScratch )\n\t\t\t\t{\n\t\t\t\t\t// throw new AxiomException( \"Invalid attempt to write to a locked buffer\" );\n\t\t\t\t}\n\t\t\t\t// if", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.scan_input_as = ConfigSelection(choices = [(\"terrestrial\", \"DVB-T\"), (\"satellite\", \"DVB-C\")], default = \"terrestrial\")\n\t\tself.scan_input_as.value = \"terrestrial\"\n\t\tself.scan_input = ConfigSelection(default = \"frequency\")\n\t\tself.scan_input = Config", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "            else {\n                throw new IllegalArgumentException(\"filter \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_XSUB:\n            if (optval!= null) {\n                throw new IllegalArgumentException(\"filter \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_XSUB_STRING:\n           ", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                }\n                for (int i = 0; i < bytesPerPixel; i++) {\n                    curr[i] += (byte)(((curr[i] & 0xff) + (curr[i + bytesPerPixel] & 0xff)) / 2);\n                }\n                for (int i = 0; i", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface(), types.InterfaceName('foo.bar'))\n        self.assertEqual(s.get_path(), types.ObjectPath('/a/b/c'))\n        self.assertEqual(s.get", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "                    for i in xrange(len(self.get_E_2_page().get_cohomology(self.options)[index])):\n                        for j in xrange(self.get_E_2_page().get_cohomology(self.options)[index].get_length()):\n                            output += str(self.get_E_2_page().get_cohomology", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \"", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t}\n\t@Override\n\tpublic void fromCollection(CollectionAliases aliases) throws HibernateException {\n\t\tfinal List keys = new ArrayList();\n\t\tfinal List values = new ArrayList();\n\t\tfinal List keysToSave = new ArrayList();\n\t\tfinal List keysToSave2 = new ArrayList();\n\t\tfinal List valuesToSave = new ArrayList();\n", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member returning an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "    _logger.info('employee: %s, modified_attendance: %s' % (\n        self.barcode, modified_attendance))\n        return action_message\n        return {\n            'name': self.name,\n            'user_id': self.id,\n            'barcode': self.barcode,\n            'attendance_id':", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\t// Specimen\n\t\t// WDEV-13944\n\t\t// WDEV-3953\n\t\t// WDEV-16224 - modifications following OCS DFT model changes\n\t\t// WDEV-3953 - add Specimen Name to the grid results\n\t\t// W", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "                return new Point(c.ReadInt32(), c.ReadInt32());\n            }\n            return c;\n        }\n        public int X { get { return Position.X; } }\n        public int Y { get { return Position.Y; } }\n        /// <summary>\n        /// The index of this item's image.\n        /// </", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "        if not self.is_fullscreen():\n            self.set_urgent(True)\n            self.set_urgency_hint(False)\n            self.set_fullscreen(True)\n        else:\n            self.set_urgency_hint(False)\n            self.set_urgent(False)\n        self.set_urgent(False)\n        self.set_urgent(True)\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                    }\n                    string name = nameArraySizeFragments[0];\n                    if ( name.Equals( \"STRUCT\", StringComparison.InvariantCultureIgnoreCase ) ) {\n                        name = nameArraySizeFragments[1];\n                    }\n                    if ( name.Equals( \"STRUCT\", StringComparison.InvariantCultureIgnoreCase ) ) {\n                        int count = 0;\n", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\tif (attributes.GetMaskedAttributes ((uint) TypeAttributes.ClassLayoutMask, (uint) TypeAttributes.ClassLayoutMask)!= TypeAttributes.ClassLayout)\n\t\t\t\t\treturn base_type!= null && base_type.IsValueType;\n\t\t\t\treturn base.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic bool IsValueType {\n\t\t\tget", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "        }\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <param name=\"args\"></param>\n        /// <returns></returns>\n        public void EvidenceLookup(object sender, EvidenceLookupArgs args)\n        {\n            return evidence_EvidenceLookup(sender", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "        self._protocol = _openssl_to_stdlib_protocol(\n            protocol, util.ssl_.HAS_SNI)\n        self._version = _openssl_to_stdlib_version(\n            _openssl_to_stdlib_version(self._version))\n        self._ciphers = _openssl_to_stdlib_ciphers(\n            self._version)\n", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.LabelProp = global::Mono.Unix.Catalog.GetString (\"_White Spaces:\");\n\t\t\tthis.hbox3.Add (this.label8);\n\t\t\tglobal::Gtk.Box.BoxChild w28 = ((global", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                headbook.remove_page(new_num)\n                headbook.insert_page(notebooks[\"board\"], notebooks[\"board\"], new_num)\n                headbook.get_children()[0].show()\n                headbook.show()\n            return True\n        headbook.connect(\"page-reordered\", page_reordered)\n    \n    def page_reorder (widget", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Close-Tab\": QKeySequence(Qt.CTRL + Qt.Key_0),\n    \"Close-Tab-Reverse\": QKeySequence(Qt.SHIFT + Qt.Key_0),\n    \"", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"JPA PersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", transactionType=\" + this.transactionType + \", mappingProvider=\" + this.getClass().getName() + \"]\";\n\t}\n}\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    IEditorPart editor = getEditor();\n    if (editor instanceof IEditorPart)\n    {\n      return ((IEditorPart)editor).isFileReadOnly();\n    }\n    return false;\n  }\n  \n  public void setFileReadOnly(boolean isFileReadOnly)\n  {\n    if (isFileReadOnly())\n    {\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(182, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82, 20);\n\t\t\tthis.butAttach.TabIndex = 7;\n\t\t\tthis.butAttach.Text = \"Attach\";\n\t\t\tthis.butAttach", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "        if (sb!= null)\n        {\n            if (sb.length() > 0)\n            {\n                if (sb.length() > 16)\n            {\n                // This is a hack to prevent the marker from being\n                // too long and causing problems with the\n                // marker\n                // TODO:", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\t// Test with a key shorter than 128 bytes (= block-size of SHA-384 and SHA-512).\n\t\tpublic void RFC4231_TC2_Legacy", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    current_sum = 0;\n\t    current_align += CDRSerializer.alignTo(current_align, 4);\n\t    current_align += 0 + CDRSerializer.alignment(current_align, 4); // Int\n\t    current_align += 0 + CDRSerializer.alignment(current_align, 4); // Int\n\t    current", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "      return null;\n      RegistryKey jdk = java.OpenSubKey(\"JavaHome\");\n      if (jdk == null)\n        return null;\n      String javaHome = jdk.GetValue(\"JavaHome\") as String;\n      if (java!= null)\n        return java.GetValue(\"JavaHome\") as String;\n      return", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = re.sub(r'^%s' % self.ansible, '', l)\n                if comment:\n                    return [comment, l]\n        return []\n    def find_job(self, name):\n        return self.find_job(name, job=self.job)\n    def find_env(self, name):\n        return self.find_env", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            if(rankCounts == null)\n            {\n                double[] emptyPeptideLengthLikelihoods = new double[totalPositivesCount];\n            }\n            else\n            {\n                double[] emptyPeptideLengthLikelihoods = new double[totalPositivesCount];\nNext line of code:\n:\n            }\n        }\n", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "        for (val vertex : vertex.neighbors()) {\n            vertex.addNeighbor(vertex.getKey());\n            vertex.neighbors().forEach(neighbors::add);\n        }\n        val iterator = vertex.iterator();\n        val neighbors = new ArrayList<Integer>();\n        for (val vertex : vertex.neighbors()) {\n            neighbors.add(vertex.getKey());\n            vertex.neighbors().", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                    elif self.choice.isdigit():\n                        try:\n                            self.packet = self.choice\n                            self.choice = int(self.choice)\n                            self.parser(self.choice, self.cap)\n                            continue\n                        except:\n                            print(self.grn+\"[!] Invalid option\"+self.blk)\n                            continue\n                    else:\n                        print(self.f", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 159);\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 6;\n            // \n            // label3\n            // \n            this.label3.AutoSize = true;\n           ", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'Meta': {'object_name': 'Scan', 'db_table': \"'main_scan'\"},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "                }\n        }\n        return false;\n    }\n    private void processGlobalAttributes(Schema schema) {\n        if (!isProcessGlobalAttributes()) {\n            return;\n        }\n        java.util.Map<QName, Property> processedTypes = getProcessedAttributes();\n        for (int i = 0; i < getProcessed", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.write(cr, uid, ids, {'state': 'validate','manager_id': False, 'parent_id': False}, context=context)\n        if self.holiday_status_id.id:\n            self.pool.get('resource.calendar.leaves').holidays_first_validate(cr, uid, ids, self.holiday_status_id", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "            set\n            {\n                if (this.Enabled!= value)\n                {\n                    if (value)\n                        this.Enabled = true;\n                    else\n                        this.Enabled = false;\n                }\n            }\n        }\n        /// <summary>\n        /// Gets the currently selected business object\n        /// </summary>\n        /// <returns", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "            return this.Name + \" (\" + this.ShortName + \")\";", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = (ims.core.admin.domain.objects.CareContext)domainObject.getCareContext();\n\t\t\tif (value10!= null)\n\t\t\t\tvalue10.setIsRIE(value10.getBoIsNotNull());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\tims.domain.lookups.LookupInstance value", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            self.ensure_build_dir() is None\n            self.build_dir()\n            status = call(\n                [\"cargo\", \"build\", \"--release\", \"--bin\", \"servo\", \"servo\", \"servo\", \"servo\", \"servo\", \"servo\", \"servo\", \"servo\",", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = this.getOptimisticEstimate(counts, true);\n\t\t\tdouble estP = this.getOptimisticEstimate(counts, true);\n\t\t\tdouble estN = this.getOptimisticEstimate(counts, false);\n\t\t\tdouble estP = this.getOptimisticEstimate(count", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "                if (gitStash == null)\n                {\n                    Stashes.Items.Clear();\n                }\n                Stashes.Items.AddRange(gitStash?.Items);\n                Stashed.LoadStatuses();\n            }\n        }\n        private void LoadStashes()\n        {\n            StashSelectedIndexChanged(null, null);\n        }\n        private", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "    assert output_buffer.cbuffer.get_object(0).out_address!= 0\n    assert job.cbuffer.get_object(\n        job.cbuffer.get_object(0).index).out_address == 0\n    assert job.cbuffer.get_object(\n        job.cbuffer.get_object(bm0_index).index).out", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return this.host == that.host\n                && this.port == that.port\n                && this.realm == that.realm\n                && this.scheme == that.scheme;\n        }\n        return false;\n    }\n    /**\n    ", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n        public System.IAsyncResult BeginAdd(int a, int b, System.AsyncCallback callback, object", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleStringAusMehrerenChargennrDtos(\n\t\t\tList<SeriennrChargennrMit", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\t// PROTECTED REGION ID(ETypedElement.CSet) ENABLED START\n\t\t\t\t\t// PROTECTED REGION END\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = value as ETypedElement.CSet;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tdefault: \n\t\t\t\t\tbase", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "    log.set_log_file(args.log_file)\n    log.msg('Using index file: {}'.format(args.log_file))\n    log.msg('Using index file: {}'.format(args.log_file))\n    log.msg('Using index file: {}'.format(args.log_file))\n    log.msg('Using index file: {}'.format(args.log_file", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        self.mosi_bits = self.bitss = self.mosi_bits = []\n        self.mosi_bits.append(mosi)\n        self.mosi_bits.append(mosi)\n        self.mosi_bits.append(mosi)\n        self.mosi_bits.append(mosi)\n        self.mosi_bits.append(mosi)\n        self.m", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                if (null == cd)\n                    return;\n                if (null == cd.channel)\n                    return;\n                if (null == cd.channel)\n                    return;\n                if (null == cd.name)\n                    return;\n                if (null == cd.viewer)\n                    return;\n                if (null == cd.last)\n                    return", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                return result\n            else:\n                return None\n    def _get_key_usage(self):\n        key_usage = self.cert.get_extension(crypto.X509ExtensionOID.key_usage)\n        return (\n            to_text(key_usage) if key_usage is not None else None,\n            to_text(self.cert.get_extension(crypto.X", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t}\n\t\t\tif (lm) {\n\t\t\t\t/* We are still connected to the signal, so we can call the slots */\n\t\t\t\tif (lm->is_valid ()) {\n\t\t\t\t\tif (lm->is_valid ()) {\n\t\t\t\t\t\t/* We are still connected to the signal, so we can call the slots */\n\t\t\t\t\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    #    1 word = 2 x 2 bytes\n    #    2 words = 4 bytes\n    #    3 words = 4 x 2 bytes\n    #    4 words = 2 x 2 bytes\n    #    5 words = 2 x ", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = la.pos; int col = la.col;\n\t\t\tint end = t.pos; int line = t.line;\n\t\t\twhile (StartOf(13)) {\n\t\t\t\tif (StartOf(29)) {\n\t\t\t\t\tSemErr(\"attribute\");\n\t\t\t\t} else {\n\t\t\t\t\tSemErr(\"this symbol kind", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "            # custom: 'product_uom_id'\n            # custom: 'product_uom_qty'\n            # custom: 'product_uom'\n            #custom: 'product_id'\n            #custom: 'price_unit'\n            #custom: 'price'\n            #custom: 'product_id'\n            #custom:", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\treturn new ServiceDescription(RESTApplication.REST_SERVLET_ALIAS, httpSSLContext);\n    }\n    private ServiceDescription getRESTServiceDescription() {\n\t\t// we need to use the http port of the http context\n\t\t// as the http context is not available at the time of activation\n\t\t", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "                }\n            }\n            if (nameMap.get(name) == null)\n            {\n                nameMap.put(name,\n                           new ArrayList<PermissionEntry>());\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    private Map<String, List<PermissionEntry>> mapPermissionsByType(String permission)\n", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": ":\n        ).match_subsystem('input')\n        for device in devices:\n            assert device\n    def test_list_devices_match_subsystem(self, context):\n        devices = list(context.list_devices().match_subsystem('input'))\n        assert list(devices)\n    def test_list_devices_match_subsystem_nomatch(self, context", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "    # login\n    user = Device(\"your_token\").check_inspection()\n    user = Device(\"your_token\").check_inspection()\n    device = Device(\"your_token\")\n    user = user.check_explore(\"your_area_id\", \"your_floor_id\", \"your_user_id\")\n    return data\n    user", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "        elif (index_elements[0] == \"Fit:\"):\n            rv['fitScatter'] = float(index_elements[1])\n        elif (index_elements[0] == \"Mode:\"):\n            rv['mode'] = index_elements[1]\n        elif (index_elements[0] == \"Stokes:", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "            if (m_Keys.Count > 0)\n            {\n                if (Resource!= null)\n                {\n                    ItemQuality quality = (ItemQuality)quality;\n                    if (quality > ItemQuality.ItemQuality)\n                    {\n                        from.SendLocalizedMessage(501690);\n                        from.SendLocalizedMessage(501689, 0,", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = (String)iter.next();\n            System.out.println(new Date() + \" Adding device \" + device);\n            Tuner tuner = new TunerHdhr(device, TunerManager.VIRTUAL_MATCHING, TunerManager", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "    if (lastSeenVersion < Version.GV1_MIGRATION) {\n      jobs.put(Version.GV1_MIGRATION, new DatabaseMigrationJob());\n    }\n    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n   ", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split.length!= 3) {\n        throw new IllegalArgumentException(\"RegexNER mapping file line \" + lineCount + \" has wrong number of tokens\");\n      }\n      List<String> regexes = new ArrayList<>();\n      List<Pattern> regex = new ArrayList<>();\n      List<String> overwritable = null;\n", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            # if we find it, return the path\n            if self._latex_path(source_dir, n, source_dir):\n                return (source_dir, n)\n        # if not, try the path in the path list\n        for p in self._latex_path(try_names, source_dir):\n            if self", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n    def wkt_features(self, keys, features):\n        \"\"\"A", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "        if self.want.port == '*':\n            self.want.update({'port': self.want.ip})\n        if self.want.ip!= self.want.ip:\n            return True\n        if self.want.ip is None:\n            if self.have.ip == '*':\n                return None\n            return self.want\n        if self.want.port!=", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "    @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text == 'Add Method' and\n            self.datastore.is_displayed and\n            self.datastore_name.text == 'Automate' and\n            self.datastore_name.is_displayed and\n", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "            notifyListeners(new EventObject(this), EventStatusType.ERROR,\n                    \"EventObject(\" + className + \")\",\n                    \"EventObject\", \"className\", \"ActionFactory\", \"getClassByName()\",\n                    \"class not found.\", null);\n            return null;\n        }\n        return result;\n    }\n    public void set", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "        self._setup_mock_request(mock_request, include_depth=True)\n        response = self.client.post(\n            reverse(\"update_thread\", kwargs={\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)}),\n            data={\"body\": \"foo\"}\n        )\n        self.assertEqual(response.status_code, 400)\n", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "            if not os.path.exists(target[0].abspath):\n                raise SCons.Errors.UserError(\"Unable to embed manifest for %s\" % target[0])\n            if env.subst('$WINDOWS_EMBED_MANIFEST') == 0:\n                raise SCons.UserError(\"Embedding manifest for %s\"", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "            final List resources = getSelectedResources();\n            if (resources == null) {\n                return;\n            }\n            final IStatus status = getProblemsTitle();\n            final MultiStatus multiStatus = new MultiStatus(status, errorStatus);\n            final IStatus[] result = new IStatus[1];\n            final I", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\treturn true;\n\t}\n\t\n\tpublic void dispose(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\tdata=null;\n\t}\n\t\n\tpublic void check(TransMeta transMeta, String baseStepname, String[] transname, int[] type) throws XStepException\n\t{\n\t\treturn", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //HomeRange\n            int homeRange = 0;\n            if (homeRange == 0)\n                homeRange = 1;\n            if (m_MapOverride!= -1)\n                homeRange", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "        session = self._get_session()\n        session = self._get_session()\n        self._cleanup_session(session)\n        self._cleanup_session()\n        self._open_session_list.append(session)\n        self._open_session_list = []\n        self._open_session_list = []\n        self._open_session_list = []\n        self", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        service.shutdown();\n        service.shutdownNow();\n        service.awaitTermination(1, TimeUnit.SECONDS);\n        System.out.println(\"Sleeping for 5 seconds\");\n        service.shutdown();\n        assertThat(sub, not(is(true));\n        assertThat(sub, not(is(true));\n        assertThat(rc, is(true));\n        System.out.println(\"", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestBeforeParameters(r);\n            }\n            this.owner.getDecorator().onSendRequestAfterParameters(r);\n            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n       ", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn 1;\n\t\t\tif (value <= 0x3FFF)\n\t\t\t\treturn 2;\n\t\t\tif (value <= 0x1FFFFFFF)\n\t\t\t\treturn 3;\n\t\t\treturn 4;\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        if one_file.is_link():\n            self.fm.execute_console(\"unmap\")\n        else:\n            self.fm.execute_console(\"unmark\")\n        self.fm.execute_console(\"unmark\")\n        self.fm.execute_console(\"unmark\")\n        self.fm.execute_console(\"unmark\")\n        self.fm.execute_console(\"unmark\")\n", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t// Create a COMTest object using the assembly name\n\t\t// and the assembly qualified name\n\t\t// of the type COMTest\n\t\t// and the assembly name\n\t\t// of the type COMTest\n\t\t// and the assembly name\n\t\t// of the type COMTest", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        locale = Locale.objects.get(code='de')\n        repo = self._setup(locale, None, Action.ACCEPTED)\n        self.assertTupleEqual(\n            _actions4appversion(self.old_av, {locale.id}, None, 100),\n            ({}, {locale.id}))\n        self.assertTupleEqual(\n           ", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            if \"user\" in cmd.parameters:\n                userstate.user = cmd.parameters[\"user\"]\n            if \"user_id\" in cmd.parameters:\n                userstate.user_id = cmd.parameters[\"user_id\"]\n            if \"user_id\" in cmd.parameters:\n                userstate", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        if colsize:\n            if colsize:\n                if colsize > 0:\n                    if colsize > self.ncols:\n                        self.maxwidth = self.colsize\n                    elif colsize > self.ncols:\n                    self.hidden_c = self.colsize\n                    self.hidden_c = self.hidden_c\n       ", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "        tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(column, tree_model, tree_model, tree_iter)\n        column._update_cell_based_on_data(None, column, tree_model, tree_iter, 1, 1, 15, 2)\n        self", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof GridColumn) {\n\t\tGridColumnBean bean = (GridColumnBean) parent;\n\t\tbean.setValues(bean.getValues());\n\t\tbean.setValuesdisplay(valuesdisplay);\n\t\tbean.setValues(values);\n\t\tbreak;\n\t    }\n\t    if (parent instanceof Grid) {\n\t\t// do nothing", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "                if (version == 1) {\n                    XmlNodeList nl = element.SelectSingleNode(\"Abilities\").ChildNodes;\n                    if (nl!= null) {\n                        int i = 0;\n                        foreach (string item in itemSigns) {\n                            int count = Convert.ToInt32(ReadElement(element, \"Abilities", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                    m_key[i] = new ExodusActivation();\n\t\t\t\t\telse if ( m_Peerless == PeerlessList.MelisandeTrammel || m_Peerless == PeerlessList.MelisandeFelucca )\n\t\t\t\t\t{\n\t\t\t\t\t\tm_key[i] = new PeerlessList.DreadHorn;\n", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\t//\t\tChangeOfServiceVo vo = ((ChangeOfServiceVo) beans.get(i);\n\t\t//\t\tChangeOfServiceVo vo1 = (ChangeOfServiceVo)vo;\n\t\t//\t\tChangeOfServiceVo vo2 = (ChangeOfServiceVo)beans[0];\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "                new Version[]{\n                        new Version(Version, 1, 7, 7, 1, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = kdf.DeriveKey(pbMsg, pbSalt, pbAssoc, pbMsg);\n\t\t\tbyte[] pb2 = new byte[32];\n\t\t\tfor(int i = 0; i < pb2.Length; ++i) pb2[i] = 5;\n\t\t\tDebug.Assert(Mem", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (dispatchManaForTool(stack, player, cost, remove) / multiplier);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the cost.\n\t * @param manaToSend", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" queue has {1} LEDs)\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tPushToQueue (NextFrame, true);\n\t\t}\n\t\t/// <summary>\n\t\t/// Adds a frame to the end of the output queue\n\t\t/// </summary>\n\t\t/// <", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage == null))\n                return false;\n            else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n                return false;\n        }\n        if ((!this.getActionTraceList().equals(other.getActionTraceList())))\n            return false;\n        if ((!this.getAction", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": ":\n        }\n        return response;\n    }\n    @Override\n    protected Object\n    responseSignalStrength(Parcel p) {\n        int response;\n        response = new DriverCall();\n        response.mm = new ArrayList<DriverCall>();\n        response.mm.add(new CallState());\n        response.mm.get(0).", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": ":\n\t\t\t\t\t\tif (odrMetadata.getLicence().equals(licence)) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(MetadataEnumType.RESOURCE)) {\n\t\t\t\t\tfor (Licence licence : availableLicences) {\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                for (int i = 0; i < xPixelsPerTile; i++)\n                {\n                    for (int j = 0; j < colorMapArray.Length; j++)\n                    {\n                        int color = value", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t// This is the value that should be returned by the server\n\t\t\tString testMethod = \"add\";\n\t\t\t// Set up the client to use the url and username and password\n\t\t\tclient = setUpClient(url, username, password);\n\t\t\t// Call the API method\n\t\t\trawResult = callApi", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn null;\n\t\t\t}\n\t\t\t}\n\t\t}\n\tpublic void setBlockSelection(final int start, final int end)\n\t{\n\t}\n\t@Nonnull\n\t@Override\n\tpublic int[] getBlockSelectionStarts()\n\t{\n\t\treturn null;\n\t}\n\t@Nonnull\n\tpublic int[] getBlockSelection", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "            out.writeBoolean(false);\n            outs.writeUTF(\"No such object\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeObject(found);\n        }\n        out.flush();\n        out.write(okHeader);\n        out.writeUTF(\"OK\");\n        out.writeUTF(\"OK\");\n        out.writeUTF(\"OK\");\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                if (minionPrediction.CollisionObjects.Count > 0)\n                                    result.Add(minion);\n                                else\n                                    result.Add(minion);\n                            }\n                            break;\n                        case CollisionableObjects.YasuoWall:\n                            var wallPrediction = Prediction.GetCollision(positions, ObjectManager.Player, objects);\n                            if (", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        if (x == y) return true;\n        if (graph.isAdjacentTo(x, y)) return false;\n        if (graph.isAdjacentTo(x, y, Endpoint.ARROW)) return false;\n        if (graph.isAdjacentTo(x, y, Endpoint.CIRCLE)) return false;\n        if (graph", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    if (pop is PlaceBase)\n                    {\n                        if (pop.Name == Name)\n                        {\n                        }\n                        else\n                        {\n                            if (pop.Name == Name)\n                                return pop;\n                        }\n                    }\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (this.fileId == null) {\n            return false;\n        } else if (other.fileId == null) {\n            return false;\n        }\n        if (this.description == null) {\n            return false;\n        } else if (other.description == null) {\n            return false;\n        }\n        if", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                        if (m_Item.OnMoveOver(from, mobiles[i]))\n                        {\n                            m_Item.Delete();\n                            Stop();\n                            return;\n                        }\n                    }\n                    if (m_Item.GetMobile()!= null)\n                    {\n                        m_Item.Delete();\n                        return;\n                    }\n                }\n                public override void OnAfterDelete()\n", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tInvokeUserMessage(user, user, msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Message(PlayerMobile user, string text, bool message = true)\n\t\t{\n\t\t\tif (!message)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!CanMessage(user, text,", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": " */\n  @Override\n  public List<WAComponent> getAvailableComponents(String userId) {\n    return mock.getAvailableComponents(userId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sUserId) {\n    return mock.getAvailableComponents(sUserId);\n  }\n  @Override\n ", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                        final DialogFragment dialog2 = ZipFilesDialog.instantiate(mActivity, mActivity.getString(R.string._selected), mListView);\n                        mode.finish();\n                        return true;\n                    }\n                    return true;\n                case R.id.actionrename:\n                    final DialogFragment dialog3 = RenameDialog.instantiate(mActivity, mListView, mActivity", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "    }\n    public void a() {\n        this.channel.attr(NetworkManager.c).set(this.spoofedUUID);\n        this.channel.attr(NetworkManager.a).set(this.spoofedUUID);\n        this.channel.attr(NetworkManager.b).set(this.spoofedUUID);\n        this.channel.attr(NetworkManager.c).", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                if z_key == 'zxx':\n                    comp = 'zxx'\n                elif z_key == 'zxy':\n                    comp = 'zxy'\n                elif z_key == 'zxy':\n                    comp = 'zxy'\n                elif z_key == 'zxx':\n                    comp = 'zxx'\n", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "      return context.getString(resourceOne, name);\n    }\n    return context.getString(R.string.IdentityUtil_unverified_dialog_many, context.getResources().getQuantityText(context, recipients.size()));\n  }\n  public static @StringRes int getUnverifiedBannerIconResId(@NonNull Context context,\n                                                           @StringRes intRes,\n                                                          ", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "            extra_path += [path.join(self.config[\"tools\"][\"gonk\"][\"rustc-root\"], \"rustc\", \"rustc\", \"bin\")]\n            extra_path += [path.join(self.config[\"tools\"][\"gonk\"][\"gonk-root\"], \"bin\")]\n            env[\"PATH\"] = os.pathsep.join(extra_path", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "            for path, tests in iteritems(type_paths):\n                for test in tests:\n                    test_path = os.path.join(tests_root, path)\n                    if test_path not in type_tests:\n                        type_tests[test_path] = set()\n                    for test_path, tests in iteritems(type_paths):\n                    if path not", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "        }\n    private void handleScriptRuntimeException(final Throwable e, final PrintStream outStream) {\n        if (e instanceof Script) {\n            final ScriptingSecurityManager scriptingSecurityManager = createAccessPermissionChecker();\n            if (scriptingSecurityManager!= null) {\n                final ScriptingPermissions specificPermissions = (Scripting", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "            throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override getting a timeout for a wrapped server adapter\n        /// </summary>\n        /// <param name=\"timeout\">The timeout in milliseconds</param>\n        protected virtual void ServerSetTimeout(int timeout)\n        {\n            throw new NotSupportedException();\n       ", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "      for i in range(grad.size):\n        for j in range(grad.size):\n          E = self.untransform(grad[i])\n          transformed_grad.append(E)   \n      for i in range(grad.size):\n        grad_means = self.y_means[i]\n        transformed_grad.append(E)\n      for i in range(grad.size):\n       ", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tims.vo.OrderedInvestigationVoCollection sortedCollection = new ims.OrderedInvestigationCollection(this.ordinvstatushistory);\n\t\tims.ocrr.vo.OrderedInvestigationVoCollection order = new ims.vo.OrderedInvestigationVoCollection();\n:\nNext line of code:\n\t\tOrderInvestigationVoRef", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertTrue(found.contains(stacks[0]);\n        assertTrue(found.contains(stacks[1]);\n        assertTrue(found.contains(stacks[2]);\n        assertTrue(found.contains(stacks[3]);\n        assertTrue(found.contains(stacks[4]);\n        assertTrue(found.contains(stacks[0]);\n        assertTrue(found.contains(stacks[1]);\n       ", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter p = new ParameterImpl();\n        p.setParameterCode(\"depth\");\n        p.setParameterValue(depth);\n        crawlParameters.add(p);\n        //MAX_DURATION\n        Parameter p2 = new ParameterImpl();\n        p2.setParameterCode(\"maxDuration\");\n        p2.setParameterValue(maxDuration);\n        crawlParameters.add(p2", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (pattern.IsTrivia)\n\t\t\t\treturn false;\n\t\t\tunmatchedAttrs = new VList<LNode>(candidate);\n\t\t\treturn true;\n\t\t}\n\t\t/// <summary>Determines whether one node matches another node, and if so, \n\t\t/// returns a new node with the specified <c>", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                    if (colisionList.Any())\n                    {\n                        extendedFarmLocation = objAiBase.Position;\n                        break;\n                    }\n                }\n                if (colisionList.Count() > 0)\n                {\n                    action = zedMenu.GetMenu().GetItem(\"koreanzed.menu.qmenu.useeif\").", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t// Context Menus\n\t\t// Context Actions\n\t\tcontextMenus = new ContextMenus();\n\t\t// Context Menus\n\t\t// Context Actions\n\t\t// Container UI\n\t\tims.pci.forms.gpcontracts.GenForm ctnContractDetails = new ims.pci.forms.gpcontracts", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "    return sh(\"pip freeze\", capture=True)\n    # We don't want to uninstall the packages that are in the list of packages to\n    # uninstall.  We need to do this in a task so that we can do it in a\n    # conditional way.\n    # We also need to do this", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "        with self.assertRaises(AssertionError):\n            f.subs.edit(index=0).name = \"whop whop\"\n        self.assertEqual(\n            [get(s) for s in f.subs],\n        ):\n        self.assertEqual(\n            [get(s) for s in f.subs],\n        ):\n       ", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    # Sum(f(x), (x, 1, n)) == Sum(f(n), (n, 1, n))\n    # is not valid because of the free symbols in the expression\n    # free_symbols is not a good way to check for this\n    # because it will return the same result", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tpushValue(l,true);\n\t\t\tpushValue(l,1);\n\t\t\tpushValue(l,2);\n\t\t\tpushValue(l,3);\n\t\t\tpushValue(l,4);\n\t\t\tpushValue(l,5);\n\t\t\tpushValue(l,6);\n\t\t\tpushValue(l,7);\n\t\t\tpushValue(l,8);\n\t\t\tpush", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "            }\n            this._newItemList = (this._newItemList = this._newItemList) = null;\n            this._newItemList = (this._newItemList = this._newItemList) = null;\n            this._newStartingIndex = this._newStartingIndex;\n            this._oldItemList = this._new", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "            int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            if (null!= testObject) {\n                Object testObject2 = getReadControlObject();\n                if (null == testDocument) {\n                    fail(\"An exception should have occurred but didn't.\");\n                    return;\n               ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                    c.Campus = Token2Csv();\n                    break;\n                case Param.OrgName:\n                    c.OrgName = Token2Csv();\n                    break;\n                case Param.OrgStatus:\n                    c.OrgStatus = Token2Csv();\n                    break;\n                case Param.OrgStatus2:\n                    c.Org", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Entry: {0}\", i);\n\t\t\t\t#endif\n\t\t\t\ticonDir.idEntries [i] = ide;\n\t\t\t}\n\t\t\t// now read in the images\n\t\t\tfor (int i = 0; i < dirEntryCount; i++) {\n\t\t\t\tIconImage ii = new IconImage", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "            }\n            if ((status & SUBROUTINE) == 0) {\n                if ((status & VISITED) == 0) {\n                    status |= PUSHED;\n                    if (status & REACHABLE) {\n                        if (status & VISITED2) {\n                            if (status & TARGET) {\n                               ", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.GetObjectAndReferenceValue(__esp, 0);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(new CSharp2ILCSharp.MethodStackObject(__domain, ptr_of_this_method, (ILType", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\t}\n\t\tprivate Position getPosition() {return Position.valueOf(comboLabelPosition.getSelectionIndex());}\n\t\tprivate Position getPosition() {return Position.valueOf(comboLabelPosition.getSelectionIndex());}\n\t\tprivate void setPosition(Position position) {\n\t\t}\n\t\tprivate LineStyle getBlockOutlineStyle() {return settingsBlock.getBlockOutlineStyle", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImageValue)-1, \"Failed to decrement the Image Animator\")\n    # Test that", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "            DatabaseNode node = tree.getDatabaseNode(connectionData);\n            if (node!= null) {\n                node.setConnectionName(connectionData.getDatabaseName());\n            }\n            if (tree.isRootNode()) {\n                tree.setRootNodeName(overallNodeName);\n            }\n            if (tree.isRootNode() &&", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "\"\"\"                self.cr.execute(\"SELECT sum(number_of_days) as sum, sum(number_of_hours) as hours\\\nNext line of code:\n\"\"\"                as sum, sum(number_of_hours) as hours\\\nNext line of code:\n                FROM hr_payslip as hr_payslip, hr_payslip_worked", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        #The following lines are used only used for ST MF and bias\n        #The following lines are used only for ST MF and bias\n        #The following lines are used only for ST bias\n        #The following lines are used only for ST bias\n        #The following lines are used only for ST bias", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        if (font!= null) {\n            d.width = getPreferredSize().width;\n            d.height = getPreferredSize().height;\n        }\n        return super.getPreferredSize();\n        if (owner!= null) {\n            setPreferredSize(d);\n        }\n        return d;\n    }\n    /**\n     * @return the owner\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "        self.all_in_all(phi=phi,flag='off_center')\n        #print self.center_point\n        self.container=np.append(self.container,[self.cal_point_in_fit(self.center_point)])\n        #print self.container\n        self.container=np.append(self.container,[self.cal_point_in_fit(self.center_point)])\n        #print", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\t// subscribe on portfolio updates\n\t\t\tTrader.MyTradesWindow.PortfolioGrid.Positions = new List<PortfolioPosition>();\n\t\t\t// subscribe on portfolio updates\n\t\t\tTrader.MyTradesWindow.PortfolioGrid.Orders = new List<OrdersWindow.OrderGrid>();\n\t\t\tTrader.MyTradesWindow.Portfolio", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                    for n in xrange(params[0]['nbins'])]\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params[1]['bins'] = [\n                    params[", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            protocol.getRoster().addLoadedMessages(contact, protocol);\n        }\n    }\n    public void queryProgressed(Protocol protocol, Query query) {\n        if (query.onMoreMessagesLoaded!= null) {\n            return;\n        }\n        protocol.addLoadedMessages(query);\n        protocol.addLoadedMessages(null);\n        if", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "                im1 = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1 = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1 = im1.convert(\"L\", rgb2g)\n            else:\n                im1 = im", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\t}\n\t\t}\n\tprotected ArrayList<byte[]> readLog24(Iso7816.StdTag tag, int sfi, int len) {\n\t\tfinal byte[] raw = new byte[0x10];\n\t\tfinal byte[] data = new byte[0x10];\n\t\tfinal byte[] data = new byte[", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t}\n\t/**\n\t * This method is called when the underlying engine is connected. It is\n\t * called by the engine when it is connected.\n\t */\n\t@Override\n\tpublic void setThreadPriority(int tid) {\n\t\tif (engine!= null) {\n\t\t\tengine.setThreadPriority(tid);\n\t\t}\n\t", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "        # Dispatch the request to the appropriate app\n        for path, app in self.apps:\n            if bton(path) in bton(environ['PATH_INFO']):\n                return app(environ, start_response)\n        return app(environ, start_response)\n", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ], sys.argv[ 2 ], sys.argv[ 3 ] )\n\t\tmodel = Model( data )\n\t\tmodel.trainmodel()\n\t\tprint \"Calculating BIC for %s\" % data.datafields[ 0 ]\n\t\tprint \"BIC = %", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (chance < 0)\n                res = EnhanceResult.Broken;\n            else if (chance > 0)\n                res = EnhanceResult.Failure;\n            else\n                res = EnhanceResult.Success;\n        }\n        public static void CheckResult(ref EnhanceResult res, int chance,", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "            entries[entry_name] = entry_value\n        # Create the enum type\n        E = self.create_user_enum(\n            type_name, entries, displayname, desc\n        )\n        return E\n    #---------------------------------------------------------------------------\n    def addressBlock_vendorExtensions(self, vendor_extensions: minidom.Element, C:", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                    lblIP.Text = \"No FOG services found\";\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"No FOG services found\");\n            }\n            pnlServices.Visible = true;\n            pnlDone.Visible = true;\n            pnlDone.Text = \"No FOG services found\";\n            btnNext.Enabled =", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "                return (bool)this.ViewState[\"SubmitText\"];\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                if(this.trianglesUsed[textureHash] > 0)\n                {\n                    if(this.currentTextureHash!= this.trianglesUsed[textureHash])\n                        throw new IllegalStateException(\"RenderingStream texture hash collision : \"\n                                + this.currentTextureHash\n                                + \" vs \"\n                                + this.currentTextureHash);\n", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    if not header in exposedHeaders:\n        response['Access-Control-Allow-Headers'] = header\n    return response\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                    if (idleDrivers.Count > 0)\n                        oldDrivers.Add(idleDrivers[0]);\n                    oldDrivers.Add(idleDrivers);\n                    oldDrivers.Add(idleDrivers);\n                    if (idleDrivers.Count > minSize)\n                        oldDrivers.Add(idleDrivers);\n                    oldDrivers.Add(idleDrivers);\n                    old", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "        # If var is a list, but not a list of numbers, then it's a string.\n        if isinstance(var, list) and not all(isinstance(var, int) or isinstance(var, float):\n            raise ValueError('Cannot use {0} as {1}'.format(name, name))\n        # If var", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "STATE_START = \"start\"\nSTATE_BINGO = \"bingo\"\nSTATE_FAILED = \"fail\"\nSTATE_COMPLETED = \"completed\"\nSTATE_EXIT = \"exit\"\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? nullable1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor((double)nullable1.Value / 60);\n\t\t\t\t\tdouble? nullable2 = this.Seconds;\n\t\t\t\t\tint num3 = (int)Math.Floor((double)nullable2.GetValueOrDefault() / 60);\n\t\t\t\t\tdouble? nullable", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "            _sCurProgram = null;\n            _sCurProgram = null;\n            _sCurProgram = null;\n            _sCurProgram = null;\n            _sCurProgram = null;\n            _sCurProgram = null;\n            _sCurProgram = null;\n            _sCurProgram = null;\n", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "        for gene in self.genes:\n            gene._reaction = set([x for x in rxn.gene_reaction_rule.split()\n                                 if x in self.genes])\n        for met in rxn._metabolites:\n            if not met in self.metabolites:\n                rxn._model = self\n", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (int i = 0; i < beans.size(); ++i)\n\t\t{\n\t\t\tcoll.add( (ims.clinicaladmin.vo.TumourGroupListVo) beans.get(i) );\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static TumourGroupListVo toVo()", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tcy = lines[selectedLine].y;\n\t\t\t\th = lines[selectedLine].height;\n\t\t\t\twhile(foundBottom){\n\t\t\t\t\tfoundBottom = false;\n\t\t\t\t\tfor(int i=0; i!=selected.size(); i++){\n\t\t\t\t\t\tif(lines[i].", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "        mListView.setAnimation(controller);\n        return true;\n    }\n    \n    private void doSync() {\n    \tif (mNavigationList.size() > 0) {\n    \t\tmSyncButton.setEnabled(false);\n    \t\tmSyncButton.setClickable(false);\n    \t\tmSyncButton.setVisibility(View.GONE);\n    \t\t\n    \t\tmNavigationBack.setVisibility(View", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "                if (PartnerInterestRow!= null)\n                {\n                    if (PartnerInterestRow.FieldKey > HighestNumber)\n                    {\n                        HighestNumber = PartnerInterestRow.FieldKey;\n                    }\n                }\n            }\n            // if no row is found, highest number is 0\n            if (HighestNumber == 0)\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tint[] \tscores \t\t= this.predictScores(protein);\n\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (scores[i] == Globals.indexUnknown)\n\t\t\t{\n\t\t\t\tErrorUtils.printError(\"Predicted score for residue \" + i +", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
