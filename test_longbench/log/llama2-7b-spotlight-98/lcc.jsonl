{"pred": "\t\t\t\tif ( m_Participants[i] is Participant )\n\t\t\t\t{\n\t\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\t\tforeach ( Mobile m in p.Find(", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\t\n\t\t\tif 'R' in roots:\n\t\t\t\troots.remove('R')\n\t\t\t\t\n\t\t\tif 'R' in roots", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        # First, read some frames,", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   def language_status_text(self, language):\n        els =  self.get_elements_list(self._SUB_LANGUAGES)\n        for el in els:\n            e = el.find_element_by_css_selector(\"a\")\n            self.", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"default\", styleValue.getDefaultValue());\n\t\t\t\t}\n\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += a.hint_string()\n        return ret\n    def is_correct(self, answer):\n        return self.is_correct(answer.lower())\nclass _AnswerData(_QAData):\n    def __init__(", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.print(\"Certificate: \");\n                cert.print(s);\n                s.println(\"***\");\n            }\n        }\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLI", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            sp.start ();\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public synchronized static void unregister (String name) {\n        JESpace sp = (", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item.quantity() == 1) {\n\t\t\t\tRedButton btnAlchemy = new RedButton(Messages.get(this,", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       request = SimpleXMLRPCRequest(environ)\n        method = request.method\n        if method == 'dispatch':\n            # dispatch method\n            args = request.args\n            if args is None:\n                args = {}\n            else:\n                args = args.items()\n           ", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "   def action_create_archive_files(self, login, password, status_id, params, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker create_archive_files %s %s\", pprint.pformat(status_id),\n                            ", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!Reference", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       for trust_manager in self.trust_managers:\n            return trustManager.getAcceptedIssuers()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Prepares the domain admin forward.\n     *\n     * @param mapping the action mapping\n     * @param domain the domain\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "       self.__datastream_transport = await self.__event_loop.create_datagram_endpoint(\n            self.__datastream_address,\n            self.__datastream_protocol)\n        self.__datastream_protocol = DataStreamProtocol(\n            self.__datastream", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1 == false) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\t\tif (jumpID != 0) {\n\t\t\t\t\t\t//jumpID is", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<String, String, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(String key, ConfigurationSection conf)\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new IntegerFieldEditor(SHELL_HEIGHT,\n\t\t\t\t\t\t\"Shell height", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.FinishSequence();\n            }\n        }\n        private class InternalTarget : Target\n        {\n            private ArchProtectionSpell m_Owner;\n            public InternalTarget(ArchProtectionSpell owner)\n                : base(Core.ML ?", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._finalize_loaded(states)\n\n    def _finalize_loaded(self, states):\n        \"\"\"Finalize the loading of a set of objects.\n        This method is called by :meth:`.Session.add_all`\n        and :meth:`.Session", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed =", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like ``r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tif (viewIndex < 0 || viewIndex >= Controls.Count)\n\t\t\t\tthrow new HttpException (\"The ActiveViewIndex is not set to a valid View control\");\n\t\t\t\t\n\t\t\tActiveViewIndex = viewIndex;\n\t\t\tbase.", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   ##\n    ## Wigle Downloader arguments\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n   ", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       # Desktop builds\n        if build == 'aurora':\n            builds = (firefox_details.firefox_aurora_builds,\n                       firefox_details.firefox_aurora_builds_l10n)\n        else:\n            builds = (fire", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (objectID!=null && objectID.equals(MatcherContext.PARAMETER)) {\n\t\t\t//parameter is always allowed\n\t\t\treturn true;\n\t\t}\n\t\tif (objectID!=null && objectID.equals(MatcherContext.PARAME", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if (argumentSyntax.Parent is MemberAccessExpressionSyntax memberAccessExpressionSyntax) {\n                    var memberName = memberAccessExpressionSyntax.Identifier.Value.StringValue;\n                    if (memberName == \"ByRef\" ||", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the user_partition_id is set to the first group.\n        split_test = self.get_item_from_modulestore(self.split_test_usage_key, True)", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           if (cff) {\n                tmp.Add(new PdfIndirectReference(new PdfString(fontName + \"-\" + encoding)));\n                tmp.Add(new PdfIndirectReference(new PdfString(fontName)));\n            }\n            else {\n                tmp", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = 0;\n\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n      return null;\n    }\n    private Bitmap loadPage() throws IOException {\n      Util.assertMainThread();\n      final int page = model.getSprite();\n      final int", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   prerequisite = NavigateToSibling('EditTags')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\n\n    def resetter(self):\n        self.prerequisite", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp,\n\t\t\tGeneralPose pose", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               ScriptManager sm = ScriptManager.GetCurrent(Page);\n                sm.RegisterScriptControl(this);\n            }\n            if (String.IsNullOrEmpty(Roles)==false)\n            {\n                string[] roles = Roles.Split(new String[]{ RoleSeparator", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolEnchantments\"))\n\t\t{", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \"probability=\" + probability;\nNext line of code:\n\n        return super.toString();\nNext line of code:\n\n        return super.toString();\nNext line of code:\n\n        return super.toString();\nNext line of code:\n\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects[0].select_related()\n        o = Organization.objects.first()\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(o.employ", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   if sel_dim:\n        widget_dim.value = widget_dim_value\n        widget_x.value = widget_x_value\n        widget_y.value = widget_y_value\n        display()\n    else:\n        widget_dim.value = widget_dim", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (rootFolder.IsIgnored)\n                {\n                    toScan.Add(path);\n                }\n                else\n                {\n                    _logger.Trace(\"Ignoring path {0}\", path);\n                    _tempIgnoredPaths.TryAdd(path, ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            isDiscussable = con", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tinternal byte m_X;\n\t\tinternal byte m_Y;\n\t\tinternal byte m_Z;\n\t\tinternal byte m_Hue;\n\t\tinternal byte m_Saturation;", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": voice enabled for parcel\",\n                    //                  scene.RegionInfo.", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = []\n        for i, t in enumerate(column_headings['Time Av or Int']):\n            matches = re.search(r'\\s*(\\d{", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group')}\n    return authz.is_authorized('group_create', context, data_dict)\ndef group_member_create(context, data_dict):\n", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\t\tint[] parentOutcomes = splittedSet.getActualOutcomes(parentIndex);\n\t\t\t\t\tint[] parentDepths = splittedSet.getActualDepths(parentIndex);\n\t\t\t\t\tint[] parentOutcomesArray =", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = codePoint - 0x10000;\n            if ('\\uDC00' <= codePoint && codePoint <= '\\uDFFF' && offset < strlen) {\n               codePoint = codePoint - 0x400;\n               if ('", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       if (existingRequired) {\n            SampleDAO sampleDAO = new SampleDAOImpl();\n            String existingStudyFormName = sampleDAO.getStudyFormName(accessionNumber);\n            if (existingStudyFormName == null) {\n", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tLog.Write(\"server\", \"Rejected connection from {0}; {1}\", newConn.Socket.RemoteEndPoint, message);\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean)beans[x]);\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (bot.IsPaused)\n\t\t\t\treturn;\n\t\t\tif (Info.HasAdequateRefineryCount)\n\t\t\t\treturn;\n\t\t\tvar rallyPoints = new List<Actor>();\n\t\t\tforeach (", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       // Execution Plan\n        // We will need to update the system catalogs with this new information\n        // If this is an adhoc query then there won't be any parameters\n        for (int i = 0; i < plan.parameters.length; ++i) {\n           ", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = 8;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb.fBinary =", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n    def test_user_with_cobrand", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    else:\n        _keep_tempdir = False\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tif entry[0] == self.iface:\n\t\t\t\t\tcurrentListEntry = entry\n\t\t\t\t\tcurrentListIndex = tmpList.index(entry)\n\t\t\t\t\tif currentListIndex is not None:\n\t\t\t\t\t\t", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               return new Rectangle(x * fontX, y * fontY, x * fontX, y * fontY);\n            }\n        }\n        \n        /** Gets the maximum area that the barcode and the text, if\n        * any, will occupy. The lower left corner", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90.0, +90.0, 73.123)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            (\"long", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           if (currPacket == null)\n            {\n                return;\n            }\n            Clipboard.SetText(currPacket.ToString());\n            toolStripButtonCopy.Enabled = false;\n            toolStripButtonConvertToBytes.Enabled = false;\n            toolSt", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   elif color == 'yellow':\n        print '\\033[1;33;40m'\nNext line of code:\n\n    else:\n        print '\\033[1;32;40m'\nNext line of code:\n\n    print '\\0", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "           }\n        }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   def nullFunction( self, functionName, dll, resultType, argTypes,\n        doc = None, argNames = (), extension = None, deprecated = False ):\n        \"\"\"Create a null function for given name\n        \n        This is used to create a null function for a given name", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, emptyStreams.length());\n            for (int i = 0; i < emptyStreams.length(); i++) {\n                baos.write(emptyStreams.get(i) ? 1 : 0);\n            }\n            header", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   if (alphaLevel == 255)\n                        inRamp = true;\n                    else\n                        alphaLevel++;\n                }\n                else\n                {\n                    if (alphaLevel == 0)\n                        inRamp = false;\n                    else", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_max", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, can", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       f.writelines(['F) ', str(psf_oversamp), '\t\t\t# PSF oversampling factor\\n'])\n        f.writelines(['G) ', str(psf_oversamp), '\t\t\t# PSF oversampling factor", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x08:\n                    /* D", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       \"\"\"\n        \"\"\"\n        return u\"{0}/{1}\".format(self._course_dict['org'], self._course_dict['number'])\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        \"\"\"\n        self._create_course", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tfor(int i=0;i<splitNumber.length;i++) {\n\t\t\tif(splitNumber[i].equals(\"\")) continue;\n\t\t\tchance=chance*10;\n\t\t\tif(splitNumber[i].equals(\"0\")) continue", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   # Delete the key and ca files\n    try:\n        os.remove('%s/%s.pem' % (config_directory,meter_id))\n    except IOError:\n        module.fail_json(\"Failed to delete key file for meter\")\n    try:\n       ", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(5, 128);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            try:\n                plugruncount += 1\n                if self.opts.verbose:\n                    self.ui_log.info(\" %s\" % plug.name)\n                if self.opts.ver", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   getRoomFullName.produce = lambda s: s.getRoom()\n    getRoomFullName.name = \"room\"\n    def getAdjustedStartDate(self):\n        \"\"\" Session Start Date \"\"\"\n    getAdjustedStartDate.convert = Conversion", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.alertError(parent, e.getMessage());\n                            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = messageWriter.importMessages(fileTextField.getText(), subfoldersCheckbox.isSelected());\n            } else", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\tif (value instanceof Integer) {\n\t\t       \t\t\tlayer = ((Integer) value).intValue();\n\t\t       \t\t}\n\t\t       \t\tif (value instanceof String) {\n\t\t       \t\t\tlayer = Integer.parseInt((String)", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.getAccessToken() != null) {\n            GraphRequest request = new GraphRequest(currentSession, \"/me\",\n                    new GraphRequest.Callback() {\n                        public void onCompleted(GraphResponse response) {\n                            if (response", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (int i = 0; i < emotions.length; i++) {\n\t\t\tfloat force = 0;\n\t\t\tfor (int j = 0; j < emotions[i].influences.length; j++) {\n\t\t\t\tint", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_dict_with_properties(self):\n        \"\"\"Test exporting as a dictonary with properties.\"\"\"\n", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   if NorthernHemisphere:\n        phi2Rad = (1-e1/2+e1*e1/4-3*e1*e1*e1/64)*sin(2*phi1)\n        phi2 = phi2Rad*_", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Reported user!\")\n            return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUserForm()\n", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return 'Add series for %s' % self.context.title\n    def initialize(self):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        self.form_fields =", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\nNext line of code:\n\n\t\t\t\tform.RightToLeft = Right", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @param arr\n     * @param offset\n     * @throws NullPointerException\n     * @throws IndexOutOfBoundsException\n     */\n    public void write", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "   for flag, regex in positional_tags:\n        new_positional_tags_list.append(\n            TagRegex(flag, regex))\n            return new_positional_tags_list\n    def default_compile_tag_regex(compile_tag_regex):\n       ", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (Type attributeType, bool inherit)\n            {\n                return new", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "class OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_ObdStandardsThisVehicleConformsTo\"\n    obdStandards = {\n        0x01: 'OBD-II as defined by the CAR", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.bus_name = dbus.service.BusName(name, allow_replacement=True, replace_existing=True)\n\t\tdbus.service.Object.__init__(self, self.bus_name, '/org/freedesktop/secrets')\n", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "               this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(Prism), 1073465, 1, 1", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       if exc is None:\n            exc = sys.exc_info()[1]\n        self.request.teardown_request(exc)\n        if self._implicit_app_ctx_stack:\n            self._implicit_app_ctx_stack.pop()", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       dx = (rot_dir[0] * angles[1] +\n              rot_dir[1] * angles[2])\n    else:\n        raise ValueError('Parker weighting window is only defined for '\n                         '2d geometries')\n    # Compute", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   def _buildRE(self, regx):\n        \"\"\" Return the Proxyfied RE string \"\"\"\n        if self.isEnabled():\n            regx = re.sub('//1', self.option, regx).replace('&', '&amp;')\nNext line of code", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (type == FontSize.AsUnit) {\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\t}\n\t\t\treturn font_size_names [type - 1];\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\t\tvar o1 = (JObject)obj.Properties[0].Value;\n\t\t\t\tAssert.That(o1.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\t\tAssert.That(o1.Properties[0].", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    Topic t = getVertexTopic(w + \" \"+h, topicmap, optionsValues);\n                    Topic t2 = getVertexTopic(w + \" \"+(h+1), topicmap", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.Isoelastics(ds)\n    i2 = iso.Isoelastics(ds,\n                          col1=\"deform\",\n                          col2=\"area_um\",\n                          channel_width=20,\n                          flow", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       final String filename = args[0];\n        final String filename2 = args[1];\n        final String filename3 = args[2];\n        final String filename4 = args[3];\n        final String filename5 = args[4];\n        final String filename6 = args[5];", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "       history = [ {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                ", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performDownloadAndInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should uninstall Yarta.\n\t * \n\t * When the function returns true Yarta will be uninstalled.\n\t * \n\t * @return true", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tif (context != IntPtr.Zero)\n\t\t\t{\n\t\t\t\tOpenGL.glDeleteContext(context);\n\t\t\t\tcontext = IntPtr.Zero;\n\t\t\t}\n\t\t\tif (window.Window != IntPtr.Zero)\n", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_inverse, self.x_model,\n            self.parameter", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_internal);\nNext line of code:\n\n        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_internal);", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 adminUser = getEucalyptusAdmin();\n                  deletedAccountIds.add(walrusObject.getOwnerId());\n                  deletedUserIds.add(walrusObject.getOwnerId());\n                } else {\n                  // If the account was previously looked up", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _intialized += value; }\n            remove { _intialized -= value; }\n        }", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        command.setIsImportAsNewEntity(isImportAsNewEntity);\n        command.setName(name);\n        CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command);\n   ", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint)(2));\n\t\t\tw10.LeftAttach = ((uint)(3));\n\t\t\tw10.RightAttach = ((uint", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n            self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sTOTAL", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    public sealed partial class Builder : pb::GeneratedBuilder<SendInvitationRequest, Builder> {\n      protected override", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = getVertices()[getVertIndex(i, x)];\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (showDateData.equals(\"true\")) {\n            result.add(\"categoryDateCreated\");\n        }\n        return result;\n    }\n    /**\n     * Returns the icon for the document list column.<p>\n     * \n     * @param columnName the column name", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\tif (inputField.text.Length == 0)\n\t\t\t\t{\n\t\t\t\t\tplaceholderRect.sizeDelta = new Vector2 (placeholderRect.sizeDelta.x, 0f);", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnClick(EventArgs e)\n    {\n      if (Enabled)\n      {\n        if (m_State == eButton", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser != string.Empty)\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            // get the email address of the user\n            SUserRow userrow = S", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\nNext line of code:\n\n\t\t\t\tdirections |= ScrollDirection.Down;\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           if (CriteriaCodesUsed.Count > 1)\n            {\n                ValidationColumn = ARow.Table.Columns[PcConferenceTable.ColumnConferenceKey];\n                // displays a warning message\n                VerificationResult = new TScreenVerificationResult(new TV", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __str__(self):\n        return \"PayloadRequirements(packages=%s, groups=%s)\" % (self.packages, self.groups)\n    def __repr__(self):\n        return 'PayloadRequirements(packages=%s, groups=%s)' % (", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\treturn Enabled && CopyCustom;\n\t\t}\n\t\tpublic bool CopyCustomEnabled\n\t\t{\n\t\t\tget { return Enabled && CopyCustom; }\n\t\t}\n\t\tpublic bool CopyCustomEnabled\n\t\t{\n\t\t\tget { return En", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t\t}\n\t\tpublic string ConfDirectory {\nNext line of code:\n\n\t\t\tget {\n\t\t\t\treturn confDir;\n\t\t\t}\n\t\t\t}", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation instanceof BugAnnotation) {\n                BugAnnotation bugAnnotation = (BugAnnotation) bugAnnotation;\n                if (bugAnnotation.getSourceLineAnnotation() == null) {\n                    System.err.println(\"BugInstance \" + bugInstance.getBugPattern().get", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic override void Serialize( GenericWriter writer )\n\t{\n\t\tbase.Serialize( writer );\n\t\twriter.Write( (int) 0 ); // version\n\t}\n\tpublic override void Deserialize( GenericReader reader )\n\t{\n\t\tbase", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady() && min", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        clean_field_model_definitions()\n    def test_field_name_model_based_", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new object[] {\"E1\", \"10\"});\n                env.UndeployAll();\n            }\n            private void SendEventLong(RegressionEnvironment env, string source, long value)\n            {\n                var path = new RegressionPath();\n                var stmtText", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "       c = self.copy()\n        return c.__imul__(other)\n    \n    def __imod__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n       ", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   self.render(cr, uid, res_id, {\n        'arch': self._pretty_arch(arch)\n    }, context=context)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n        }\n        else {\n            c.removeClientProperty(BasicHTML.propertyKey);\n        }\n        if (value != null) {\n            c.setView(value);\n        }\n    }\n    /**\n    ", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert not s.", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmSqlLoader {namedquery = namedQueryReference};\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQueryReference2)\n\t\t{\n\t\t\tif (mapping.SqlLoader", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tforeach ( PlayerState pl in m_Members )\n\t\t\t{\n\t\t\t\tpl.Serialize( writer );\n\t\t\t}\n\t\t\tm_F", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       assert graphQueue.size() <= maxGraphs;\n        invocationQueue.removeFirst();\n    }\n    private void pushInvocation(MethodInvocation methodInvocation) {\n        invocationQueue.addLast(methodInvocation);\n        assert graphQueue.size() <= maxGraphs;\n       ", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               self.pytest_command = \"py.test --pr {} --prtester --pr-appliances {} --pr-sprout-appliances {} --pr-sprout-username {} --pr-sprout-password {} --pr-sprout-description {}\".format(\n", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhiNode phi = getCachedPhi(key, value.stamp());\n                    if (phi != null) {\n                        phi.replaceUsagesWith(value);\n                    }\n                }\n            }\n        }\n", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#receiveCameraCapabilities */\n    public void", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendLocalizedMessage(1156691); // You can't use this map here.\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   'BibrecBibxxx',\n])\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   \"\"\"Remove a user from the cache.\n    :params username: The username to remove.\n    :params domain: The domain to remove the user from.\n    \"\"\"\n    data = self.module.get(username)\n    if data is None:\n        raise UserNotFound(username,", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def find(self, st, by='msgid'):\n        \"\"\"\n        Find entry which msgid (or", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n    elif not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'WaitingIntegr", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(uri.getPath() == null)\n\t\t\t\tthrow new CommentException(l10n(\"invalidFormURI\"));\n\t\t\tif(uri.getPath().startsWith(\"/\"))\n\t\t\t\tthrow new CommentException(l10n(\"invalidForm", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        msg = yield self.run_fake_single_build(gsp, buildResult)\n        result = makeReviewResult(msg,\n                                  (GERRIT_LAB", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testTitleToAndFromString(self):\n    self.category.type = 'text'\n    self.category.text = 'Less: &lt;'\n    self.assert_(self.category.type == 'text')\n", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "           Map<String, AnnotationMirror> r2) {\n                Map<String, AnnotationMirror> r = new HashMap<String, AnnotationMirror>();\n                for (Map.Entry<String, AnnotationMirror> e1 : r1.entrySet", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "   def draw_header(self, context):\n        mat = context.material\n        engine = context.scene.render.engine\n        return check_material(mat) and (mat.type in {'SURFACE', 'WIRE'}) and (engine in cls.COMPAT_", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_prgSwitchingSize = map16.Mapper16", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           _jMnuRoot.add(getOpenDocumentMenuItem(SOPENDOCUMENT));\n            _jMnuRoot.add(getOpenDocumentMenuItem(SOPENDOCUMENT));\n            _jMnuRoot.add(getOpenDocumentMenuItem(SOPENDOCUMENT", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t// Page 2\n\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\n\t\t// Page 3\n\t\tAdd(\"Party Quest\", 7002", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = 0;\n\t\t\tint w = Frame.W;\n\t\t\tint h = Frame.H;\n\t\t\tif (min > 0) {\n\t\t\t\theight = min;\n\t\t\t}\n\t\t\tif (height", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.announcement\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this announcement.\n        \"\"\"\n        return reverse('announcements:announcement_detail', kwargs={'slug': self.announcement.", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "# Add PhpLexer to lexers\nlexers.append('php', PhpLexer)\n# Add PhpLexer to pygments lexers\npygments_lexers = lexers.get('php', []) + [PhpLexer]\n#", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                ORDER BY sdate, stime ''', (i,))\n    row_0 = cursor.next()\n    row_1 = cursor.next()\n    row_2 = cursor.next()\n    row_3 = cursor.next()\n    row_4 = cursor.next()", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       print(\"db_set_last_snapshot\", project_id, timestamp)\n        try:\n            # Get the project\n            project = conn.table('projects').get(project_id)\n            # Set the last_snapshot field\n            project.last_snapshot = timestamp", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"Hey, you!<br/>What are you doing here?<br/>You're not going to steal my sheep, are you?<br/>I've been losing one or two sheep everyday since I told you about that.<br/>You're not", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()\n        self.codetail = ('name',)", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        if self.start is None:\n            self.start = host_data.start\n        self.host_data[host_data.uuid] = host_data\n\nNext line of code:\n\n    def add_host", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               else if (toastType.equals(TOAST_NONE))\n                    Toast.makeText(context, getString(R.string.toast_message_done) + uri, Toast.LENGTH_LONG).show();\n                else\n                    Toast.makeText(context, get", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        print(\"primary.xml contains packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg.", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def get_command_outputs (self):\n        \"\"\"Return the list of", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(entity, disassembledValues[j], session, entity);\n\t\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-o', log_name,\n        '-o', 'stdout',\n        '-o', 'stderr',\n        '-o', 'wallclock',\n        '-o', 'ru_utime',\n        '-o', 'ru_stime',\n        '-o', 'ru_", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new EventViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate(EventViewModel model", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2})\", circle.X, circle.Y, circle.Radius);\n                    }\n                    if (obj is Vector2)\n                    {\n                        var vector = (", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   if res:\n        res = json_loads(res)\n        if res['error_code'] == \"302\":\n            premium_url = res['next']\n        elif res['error_code'] in [\"305\", \"500\"]:\n            self", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count == 0)\n\t\t\t\treturn null;\n\t\t\t// If the harvester is full, we can't harvest anything.\n\t\t\tif (harv.IsFull)\n\t\t\t\treturn null;\n\t\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"service %s restart failed\" % service_name)\n                       return False\n                else:\n                    self.logger.info(\"dhcpd -t is not running\")\n            else:\n                utils.subprocess_call(self.logger,", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder(source, seqNo.getAndIncrement());\n    }\n}\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           for (; stateIndex < MAXIMUM_ORDER; stateIndex++)\n            {\n                PpmContext currentContext = _allocator.AllocateContext();\n                if (currentContext == PpmContext.ZERO)\n                {\n                    goto NoLoop;\n               ", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false, false, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t}\n\t\tstring [] sessionValues = sessionValuesArray.ToArray(typeof (string));\n\t\tstring [] sessionNames = new string [sessionValues.Length];\n\t\tfor(int i = 0;", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 10)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00\\x00\\x", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'],\n             csi_95, label='95%% CI')\n    ax.plot(cr['combined'][app][VC]['durations'],\n             cr['combined'][app][", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_GID(self):\n        \"\"\"\n        Check UID/GID switches when current effective GID is non-root.\n        \"\"\"\n        self._testUIDGIDSwitch(0, 1, 0, 0, [1, 0], [])", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x + 1, y + 1, controlSize - 3, controlSize - 3);\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[1])\n  if winner != 0:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n\n  winner, _inferenceResult", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(kind, (offset - headerSize()) / kind.width.numberOfBytes, value);\n    }\n    @HOSTED_ONLY\n    public void writeValue(ObjectMirror mirror, int offset, Value value) {\n        if (offset == lengthOffset", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            // if relative path is not a file, then we need to resolve it\n            // to a file\n            string assemblyFile = relativePath;\n            if (!File.Exists", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   string = string.format(*args, **kwargs)\n    return string\ndef str_format_with_color(string, color, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       n = m + i16 - 2;\n        i27 = i26 + i16 - 1;\n        i29 = i28 + i16 - 1;\n        i25 = 1;\n        if ((paramInt1 != ", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tif( name == null ) {\n\t\t\t\treturn", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Lulu\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lulu\",\n                ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.password\"));\n\t}\n\tprotected void stubLabelService() {\n\t\twhen(labelService.getLabelDefinitions()).thenReturn(new LabelServiceStub(label", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(\n            OSError,\n            lambda: subprocess.Popen(\n                ['/sbin/modinfo', '-d', 'somemodule'],\n                stdin=subprocess.PIPE,\n                stdout=subprocess.PIPE,\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (PropertiesName == null) {\n\t\t\t\tthrow new ArgumentNullException(\"PropertiesName\");\n\t\t\t}\n\t\t\tif (ConfigDirectory == null) {\n\t\t\t\tthrow new ArgumentNullException(\"ConfigDirectory\");\n\t\t\t}\n\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tinternal abstract void SetIndex (Index index);\n\t\tinternal abstract void SetIndex (Index index, bool add);\n\t\tinternal abstract void SetIndex (Index index, bool add, bool fireBefore);\n\t\tinternal abstract void SetIndex (Index index, bool add, bool fireBefore,", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout_2.addWidget(self.settings_groupBox)\n        self.verticalLayout_2.addWidget(self.settings_kernels_groupBox)\n        self.verticalLayout_2.addWidget(self.settings_project_groupbox)\n        self", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               // Show the error message\n                showError( getActivity(),\n                        getString( R.string.wx_no_station_found, stationId ) );\n                return false;\n            }\n            Cursor wxs = result[ 1 ];\n            if ( wxs == null", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(\"from Continent\");\n\t\t\t\tAssert.IsNotNull(continentStats, \"stats were null\");\n\t\t\t\tAssert.AreEqual(1, continentStats.ExecutionCount, \"unexpected execution count", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiByteValue |= (uint)p[iBufferIndex];\nNext line of code:\n\n                uiCRCITTSum = (ushort)(uiCRCITTSum ^ (ushort)(uiByteValue ^ (ushort)(uiByteValue >> 4)));\nNext line", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getAllowlistModule().getItem().getMaxDamage() / 20;\n\t}\n\t/**\n\t * @return The sentry's current target, null if none\n\t */\n\tpublic LivingEntity getTarget() {\n\t\treturn entityData.get", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector(editor), \n                    new JavaHyperlinkDetector(editor), \n                    new ReferencesHyperlinkDetector(editor), \n                    new ReferencesPopup(", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(Object3DAspect(self))\n        self.l.addWidget(Object3DScale(self))\n        self.l.addWidget(Object3DProperties(self))", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\t\tcase 3: // Set location\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\t\tshould", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedObj = selectConverter.convert(valueChoice);\n                        if (convertedObj.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tif (i!=j)\n\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+fractionWithAmount[i][j][0]+\"\\t\"+fractionWithAmount[i][j][1]+\"\\t\"+fractionWithAmount[i][j", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultType {\nNext line of code:\n\n\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final int groupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int otherGroupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int otherUserId = new Random().nextInt(SecurityManagerImpl.", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale)\n\t\t{\nNext line of code:\n\n\t\t\treturn v * viewport.Scale", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "import xdrlib\nclass XDREnum(object):\n    __slots__ = ['name', 'value']\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n    def __int__(self):\n        return self", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tRemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// send a message to a specific client\n\t\t/// </summary>", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Step) {\n                convertToStepBucketList(list);\n            } else if(type == RequestType.Activity) {\n                convertToActivityBucketList(list);\n            }\n            mRequestMap.remove(requestId);\n", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " if is_method:\n    print '                               %s%d<ReturnType%s>,' %\n              (parent_class, exec_count, exec_type_str)\n  else:\n    print '                               %s%d<' % (parent_class, exec_", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return HttpResponse(\n        simplejson.dumps(\n            [\n                range_item_dict(item)\n                for item in items\n            ]\n        ), content_type=\"application/json\"\n    )\n    \"\"\"\n    response = HttpResponse(mimetype='application", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        final ASTContainer ast = new ASTContainer(given);\n        final", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       if request.method == \"POST\":\n            form = self.get_form_class()\n            if form.is_bound(self.request.POST):\n                form.save_form(form)\n                return self.get_success_url()\n            else:\n                return", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of named byte sequences persisted with the assembly and used during execution, typically via .NET Framework helper classes.\n    /// </summary>\n    public IEnumerable<IResource", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // Initialize the solver\n            _iterator.Initialize(matrix, input, result, d, r, uodd, ueven, v);\n            // Solve the matrix equation\n            _iterator.Solve();\n            // Check if the solver has been stopped\n            if (_has", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\t\t\treturn new Apfloat[] {median};\n\t\t} else {\n\t\t\tApfloat median = sortedNumbers[left];\n\t\t\tApfloat median2 = sortedNumbers[right];\n\t\t\tApfloat", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               if sample_count[v, K] > 0:\n                    L[v] = left\n                    A[v, K] = right\n                v = parent[v]\n    # Finally, add the stats for the last tree and divide by the total\n    # length that", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for mapping in csv_mapping.mappings:\n            if mapping.name not in mapping_json:\n                result['mapping'] = mapping.name\n                result['mapping_json'] = mapping_json\n                result['mapping_error'] = mapping.error\n                return result\n        return", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots && slot.Value.LockTeam == false && slot.Value.LockTeam == false && slot.Value.LockTeam == false && slot.Value.LockTeam == false && slot.Value.LockTeam ==", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       frame_payload = frame_header + padding_bytes + self.data\n        return frame_payload\nclass PingFrame(DataFrame):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var bb = cluster.BoundingBox;\n            var bb2 = cluster.RectangularBoundary.BoundingBox;\n            if (bb.Width != bb2.Width || bb.Height != bb2.Height)\n                throw new Exception(\"bounding box of", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos (m_maxSlopeRadians);\n}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn m_maxSlopeRadians;\n}\nvoid btKinematicCharacter", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       if (initializers.size() == 1 &&\n                TreeUtils.isExplicitThisDereference(initializers.get(0))) {\n            // If an expression of type @Unique is being used as an\n            // initializer, it is not @Unique anymore.\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\t", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\tXmlNode typeNode = CommentXmlDocument.SelectSingleNode(typeAttribute.Value);\n\t\t\t\t\t_returnType = new ClassItem(typeNode, Context);\n\t\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t\t//", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isAbstractionActive() != other.isAbstractionActive())\n\t\t\treturn false;\n\t\tif (this.isImplicit() != other.isImplicit())\n\t\t\treturn false;\n\t\tif (this.getAccessPath().", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[end][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) {\n              continue;\n            }\n            int max1 = wideRExtent[start", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "               'pg_dump', '-h', 'localhost', '-U', 'postgres', '-d',\n                'barman', 'src', 'dst',\n            ],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PIPE, stdin=PI", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tvar state = process.GetOrCreateData<ProcessState>();\n\t\t\tstate.IgnoreThreadsChangedEvent = false;\n\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact)proxyThat;\n\t\t\treturn ( this.getId() == that.getId() );\n\t\t}\n\t\treturn false;\n\t}\n\t/** HashCode implementation.\n\t *", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t  if n == 0:\n\t    status = 'w'\n\t  else:\n\t    status = 'a'\n\t  with open(name, status) as f_ID:\n\t    f_ID.write(str(body_types[i]) + '\\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata is None:\n            return\n        if not isinstance(cdata, T.Constant):\n            return\n        if not isinstance(cdata, T.scalar.Constant):\n            return\n        if not isinstance(cdata, T.scalar.", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].required = True\n\n\"\"\"\n    def clean_groups(self):\n        \"\"\"Clean the groups field\"\"\"\n        groups = self.cleaned_data['groups']\n        if not groups:\n            raise forms.ValidationError(\"Please select at least", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return fn(*arg, **kw)\n        event_key = event_key.with_wrapper(wrap)\n        event_key.base_listen(retval=True)\n        if retval:\n            return event_key\n        else:\n            return fn\n    def", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "       for location in self.show_tag_list:\n            self.runtime.add_block_as_child_node(location, xml_object)\n        for child in self.get_children():\n            if child.location not in self.show_tag_list:\n                self", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for key, old_value, new_value in data_model_changes]\n        return global_changes\n    def translate_changes_bg_value(self, data_model_changes):\n        def to_global(key):\n            return self._map_filtered_to_", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class == null && type == null)\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'class' attribute with 'method' or 'field' attribute for ldtoken\");\n\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 18;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files),\n                         set([\"test/mail/syncmail.1\",\n                              \"test/mail", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, Collection<String>> datum : csvData.asMap", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower() && ticksExisted > 0 && BotaniaAPI.internalHandler.getPassiveFlowerDecay() > 0) {\n\t\t\tItemStack drop = drops.get(0);\n\t\t\tif(!drop.isEmpty())", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        return intrinsicCohesion;\n    }\n    private float getIntrinsicCohesion(Community c, float nbNeighbors) {\n        //", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if not are_equal:\n        logger.info(\"ERROR: Document %s: Expected flag %s and got %s\" % (str(docid), str(minfo['flags'][flagname][version][docformat]), str(flags[flagname][version][docformat]", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t/*\n\t\t\tif(tvComputerCluster.SelectedNode!=null) \n\t\t\t{\n\t\t\t\tif(tvComputerCluster.SelectedNode.Text.ToString().Equals(\"Computer\"))\n\t\t\t\t\tupdateListViews(\"Computer", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date exceptionDate : exceptionDates) {\n      exDateList.add(exceptionDate);\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Generates the occurrences of the specified event that occur in the specified", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo() { Component = sourceComponent, MemberName = sourceProperty };\n\t\tsourceEventBinding.DataTarget = new dfComponentMemberInfo() { Component = targetComponent, MemberName = targetProperty };\n\t\tsourceEventBinding.SourceEventName", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class,\n                    containerName, this);\n            SpanConfig spanConfig = new SpanConfig(jsonData);\n            Status result = switchManager.addSpan(spanConfig);\n           ", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n\n        int choice = 0;\n        for (int i = 0; i < size; i++) {\n            choice = rnd.nextInt(size);\n            if (choice == i) {\n                return choice;\n           ", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "   la = LinkAnnotation()\n    la.subject = man_obj.uuid  # the subordinate is the subject\n    la.subject_type = man_obj.item_type\n    la.project_uuid = man_obj.project_uuid\n    la.source_id = '", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktofit = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergecells = \")\n                .Append(StringUtil.ToHexString(", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains half-width kana.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (cjkToJis [value])) |\n\t\t\t\t\t\t(((", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   obj.operands = [dst, env.A[b], env.cst(off1.int(-1),10)]\n    if obj.mode == \"Bit-Reverse\":\n        obj.operands.pop()\n    obj.type = type_data_processing\n", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tpropertiesMap.loadProperties(stream, close);\n\t\t\treturn propertiesMap;\n\t\t}\n\t\tcatch (IOException e)\n\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator()\n        {\n            return this == SPECTATOR;\n        }\n        /**\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (\"BA\");\n\t\t\tSecurityIdentifier everyoneSid = new SecurityIdentifier (\"WD\");\n\t\t\tCommonSecurityDescriptor csd; DiscretionaryAcl d", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   def run(self):\n        self.__idle(self.__process, self.__results)\n        self.__idle(self.__progress_cb, 100.0)\n        self.__idle(self.__stopped)\n        self.__idle(self.__done)", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       if (PhotonEditor.Current.UseMyServer)\n        {\n            // get all RPCs from server\n            string[] rpcs = ServerSettings.GetRPCs();\n            // add all RPCs from server to list\n            foreach (string rpc in r", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       Button full_share_button = rootLayout.findViewById(R.id.full_share_button);\n        full_share_button.setCompoundDrawablesWithIntrinsicBounds(null, new IconicsDrawable(getActivity(), GoogleMaterial.Icon.gmd_share).sizeD", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           # Transform wave function\n            psit_G = psit_G.dot(self.symmetry.op_scc[s])\n            if time_reversal:\n                psit_G = psit_G.conj()\n            return psit_G", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygs", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILLabel) {\n\t\t\t\t\t\t// Skip labels\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    if (Owner == null) {\n\t\treturn;\n\t    }\n\t    if (Owner.IsRagdoll) {\n\t\treturn;\n\t    }\n\t", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        self.name =  \"\"\n        \"\"\"Layer Name\"\"\"\n        self.top =  ClassFactory( [InterfaceNodeSet, InterpolatedNodeSet] )\n        \"\"\"Accoding topology type interface node set or interpolated node set\"\"", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( new SimpleRegexValueGetter( objectVariables,\n                source,\n                new FilterExpression[] {\n                    new FilterBinaryNode(\n                        new FilterBinaryNode.FilterBinaryNodeExpression(\n                            new FilterExpression[] {\n                                new AbstractFilterExpression(\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   elif key == 'VALEUR':\n        slice_json['valeur'] = transform_values_holder_xml_json_to_json(value[0])\n        if value[0]['format'] == 'date':\n            slice_json['format'] = 'date'\n", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           if (ClientSettings.ICON_CLOSE_FRAME_SELECTED!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_CLOSE_FRAME_SELECTED)));\n          }\n        }\n     ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n   ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, new ContentValues(), Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, new ContentValues(),", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               else\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n            }\n        }\n        #endregion\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n       ", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "##################\n# SECURITY         #\n##################\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\nSECURE_HSTS_SECONDS = 31536000", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tvar ps = queue[0];\n\t\t\t\tps.Cancelled = true;\n\t\t\t\tps.CancelledBy = self.Owner", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       infoText += \" file\" if numberOfFiles==1 else \"files\"\n        infoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = code.replace('%', '%%')\n        # replace all variables by their values\n        for x in self.vars:\n            code = code.replace(x, self.vars[x])\n        # write the result\n        self.outputs[0].write(code", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n        #===========================\n        if self._as.is_preempt_requested():\n            rospy.log", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx - reactorExtent ] - 2 * chemical[ 0 ][ idx - reactorExtent + 1 ]\n\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            default:\n                throw JsonException.$(position, \"Invalid type\");\n        }\n    }\n    @Override\n    public int getB", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.ntp_auth_conf['authentication-keyid'] = self.ntp_auth_conf['authentication-keyid']\n        self.ntp_auth_conf['authentication-keyid'] = self.ntp_auth_conf['authentication-keyid']\n        self", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           # Verify that the component was last edited by editing_user\n            check_node(component.location, editing_user, after_create, editing_user, editing_user, after_create, editing_user)\n            # Verify that the child was last edited by editing_user\n", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n        addToCharBuff(ch, start, length);\n        updateWithCharBuf();", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mkcomparison(comparison):\n    return aetypes.Comparison(comparison)\ndef mklogical(logical):\n    return aetypes.Logical(logical)\ndef mkobject(dict):\n    return", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           if (SampleObjects.TryGetValue(typeof(HttpResponseMessage), out object sampleObject))\n            {\n                return sampleObject.GetType();\n            }\n            if (SampleObjects.TryGetValue(typeof(HttpRequestMessage), out object sampleObject))\n            {\n                return sample", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           if not value:\n                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, value, callback=callback)\n            return True\n        return False\n    def _key_up(self, path, model, column):\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        // Return the new property values\n        return beanProperties;\n    }\n    /*\n     * (non-Javadoc)\n     * @", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           f.readline()\n        except IOError:\n            # No preexisting file to remove blank lines from\n            f = None\n    finally:\n        if f:\n            f.close()\n    if state == \"present\":\n        if crypt_scheme is None:\n", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.Interface)] IMFMediaEvent pEvent,\n            [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n           ", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       spm.addPrincipalToPrincipal(\n                directedAclKeys.getPrincipal(),\n                directedAclKeys.getPrincipalType(),\n                directedAclKeys.getAclKey() );\n    }\n    @Timed\n    @Override\n    @DeleteMapping", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element.\n        This verifies the tag of the element.", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   # We don't clone the node if it's a document type node\n    # or a document fragment node.  We don't want to create\n    # a new document type node or a new document fragment node\n    # for the same document.\n    if node.nodeType ==", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.NameComponent, endOffset))\n\t\t\t\tkeyLocator.setType(KeyLocatorType.NAME);\n\t\t\telse if (decoder.readBlobTlv(TlvTypeCodes", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //Updates the HUD\n        display.update(delta", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n            .getGame() ).getPlayers().add( action );\n        GameEngine.model().getGame().getRegistrationBy", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "   raise RuntimeError(\"Error downloading file: %s\" % r.data.decode(\"utf-8\"))\n    if r.status == 200:\n        filename = get_filename(r.headers)\n        if not filename:\n            raise RuntimeError(\"No filename found in Content", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tif (response == null)\n\t\t\t\t{\n\t\t\t\t\tfailureReason = SR.ExceptionMergeOrdersTool;\n\t\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\n            \"Cannot calculate reaction weights for reactions with more than one metabolite.\"\n        )\n    else:\n        return [met.weight for met, _ in reaction.metabolites.", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(\n            store__path__startswith=pootle_path,\n            submitted_by=user,\n        )\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id', models", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   self.pox_switch.send(ofmessage)\n'''\n    def _get_table_entry(self, dpid):\n        '''Return a list of all the entries in the ARP table'''\n        # self.logger.debug(\"Switch {} ARP table: {}\".format", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    m_RecentItems.add(item);\n    if (m_RecentItems.size() > m_MaxCount)\n      m_RecentItems.remove(0);\n    writeProps();\n    updateMenu();", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Followers.Any(x => x.Defender == target) || src.Followers.Any(x => x.Attacker == target))\n                return true;\n            // In Fel or Follow the same rules as indirect spells such as wither\nNext line", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompSets() {\n\t\tCompFollowSets();\n\t\tallSyncSets = new BitArray(", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff)  >>  0);\n\t\t\tbuff[5] = (byte)((address & 0x000000ff)  >>  0);\n\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic MskJointV", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (k++; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (k++; i < N1 + N2 + N3", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       rate.create()\n        rate.delete()\n        rate.copy()\n        rate.update()\n        rate.delete(cancel=True)\n        rate.delete(cancel=False)\n        rate.delete(cancel=True)\n        rate.delete(cancel=False)\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.Lock( offset, length, BufferLocking.WriteOnly ), length", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.satfinder_scan_nims.addNotifier(self.retune, initial_call = False)\n\t\tself.satfinder_scan_nims.addNotifier(self.retune, initial_call = False)\n\t\tself.", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                tcpAcceptFilters.clear();\n                tcpAcceptFilters.addAll((List<TcpAddress.TcpAddressMask>) optval);\n            }\n            return;\n        case ZMQ.ZMQ_DELAY_ON_CLOSE:\n            delay", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Write the row of data\n                for (int i = 0; i < bytesPerRow; i++) {\n                    fout.Write(curr[i]);\n                }\n                prior = curr;\n            }\n        }\n        \n        /**\n        * @param in", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface(':1.23'))\n        s.set_", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "               except:\n                    output += \"nothing\\n\"\n        _file = open(filename, 'w+')\n        _file.write(output)\n        _file.close()\n    def massey_product_printout_no_mat(self, filename):\n        output", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"proto", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Object remove(Object key, Object value) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Object old = readElementByIndex( key );\n\t\t\tif ( old !=", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member buying an item\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return modified_attendance.attendance_action(\n            next_action)\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow row = null;\n\t\tif (orderInvestigationLiteVo.getInvestigationIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndexIsNotNull())\n\t\t{\n\t\t\t", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The index of this item", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       if self.is_child_notebook():\n            err(\"You can't create a tab while a Notebook is active\")\n            return\n        if self.get_property('visible') == False:\n            err(\"You can't create a tab while the window is hidden\")\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\"+Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                }\n                else {\n                    string nameFragment = nametypeFragments[0];\n                   ", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic bool IsGenericParameter {\n\t\t\tget { return attributes.GetAttributes ((uint) TypeAttributes.GenericParameter); }", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n        #region delegate\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"evidence\"></param>\n        /// <", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.protocol = protocol\n        self.ciphers = None\n        self.verify_mode = None\n        self.verify_callback = None\n        self.verify_caps = None\n        self.verify_caps_callback = None\n        self.verify_caps_", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.scrolledwindow2 = new global::Gtk.ScrolledWindow ();\n\t\t\tthis.scrolledwindow2.CanFocus = true;\n\t\t\tthis.scrolledwindow2.Name = \"scrolledwindow2\";\n\t\t\tthis.scrolledwindow", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "               notebooks[\"board\"].set_current_page(new_num)\n                notebooks[\"board\"].page_reordered(new_num, old_num, headbook)\n                notebooks[\"board\"].show_all()\n                notebooks[\"board\"].get_parent", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-left-reverse\": QKeySequence(Qt.CTRL + Qt.Key_9),\n    \"Move-", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn this.getClass().getName();\n\t}\n\t@Override\n\tpublic boolean equals(Object obj) {\nNext line of code:\n\n\t\tif (this == obj) {\n\t\t\treturn true;\n\t\t}\n\t\tif (obj == null)", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n\nNext line of code:\n\n    return true;\n\nNext line of code:\n\n    return false;\n\nNext line of code:\n\n    return true;\n\nNext line of code:\n\n    return false;\n\nNext line of code:\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(802, 656);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(7", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            sb.append(string.substring(i));\n        }\n        return sb.toString();\n    }\n}", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2_Legacy ()\n\t\t", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(EnumSwitchUnion.m_d) {\n\t        case option_1:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // int type\n\t            current_align += 4 + CDRSerializer.alignment", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      else\n        return java.GetValue(\"JavaHome\").ToString();\n    }\n    private static String GetJdkHome()\n    {\n      String jdkHome = null;\n      if (ResinArgs.IsService)\n      {\n        jdkHome", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               comment = name\n                return [comment, l]\n        return [comment, l]\n    def find_env(self, name):\n        # attempt to find job by 'Ansible:' header comment\n        comment = None\n        for l in self.lines:\n            if comment is", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "       modifier.target = modifier_json['target']\n        modifier.vertex_group = modifier_json['vertex_group']\nclass MeshModifierVERTEX_WEIGHT_USE_PROXIMITY(MeshModifierCommon):\n    @classmethod", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           if(rankCounts == null)\n                continue;\n            double[] rankBuckets = mScoreRankBuckets;\n            double[] rankBucketRanks = rankBuckets.clone();\n            double[] rankBucketRanksPerc = rankBuck", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def parser(self, choice, cap=None):\n        if choice.lower() == 'help':\n            self.print_usage()\n            return\n        elif choice.lower() == 'list':\n            self.parser(choice, cap=cap)\n            return\n        elif choice", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 162);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // If we get here all types were finalized correctly\n                if (isReturnAllTypes()) {\n                    QName qname = new QName(targetNamespace, sdoTypeName);\n                    getGeneratedTypes().put(qname, lookup);\n                }\n                return true;", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate', 'manager_id': False})\n    def holidays_first_validate_notificate(self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the delegate that is called when the user\n        /// double clicks on a row\n        /// </summary>\n        public RowDoubleClickedHandler RowDoubleClickedDelegate { get;", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return mixerLine.szName;\n        }\n    }\n}\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tif (valueObject.getCareContext() instanceof HibernateProxy) // If the proxy is set, there is no need to lazy load, the proxy knows the id already. \n\t\t\t{\n\t\t\t\tHibernateProxy p = (HibernateProxy) valueObject.get", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\", \"--release\", \"--target\", \"x86_64-apple-darwin-glue\", \"--no-default-features\"],\n            env=self.build_env(),\n            verbose=verbose)\n        if status:\n           ", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = predictPositives ? estP : estN;\n\t\t\tif (function.equals(WRACC)) {\n\t\t\t\treturn Math.max(this.getScore(new double[]", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, ResourceManager.Strings.Stash, gitItemStatuses, ResourceManager.Strings.Stash, gitStash.Name);\n            }\n            Loading.IsAnimating = false;\n", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   lattice.BeamMonitor()\n    lattice.Drift(length=0.3)\n    lattice.Drift(length=0.4)\n    lattice.Drift(length=0.5)\n    bm1_index = lattice.cbuffer.n_objects\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (this == o) {\n            return true;\n        }\nNext line of code:\n\n        if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return this.match(that) == 0;\n        }\nNext", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n        public void AddInt(", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleStringAusMehrerenChargennummern(\n\t\t\tList<SeriennrChargennrMitMengeDto> snrs", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n\n\t\t\t\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.bit_ss, self.bit_es = self.miso_bits[0][1], self.miso_bits[0][2]\n        self.putb([134, ['Bit 0: %d' % self.bit_ss]])\n        self", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         if (cursor >= limit) {\n            return false;\n          }\n          cursor++;\n        } while (false);\n        // call R2, line 200\n        if (!r_R2()) {\n          return false;\n        }\n        // (, line ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (cd.cls == null) {\n                    cd.cls = cls;\n                    cd.fingerprint = fingerprint;\n                    cd.last = null;\n                    cd.viewer = null;\n                    cd.viewerFrame = null;\n                ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   return result\n    def _get_key_usage(self):\n        try:\n            current_key_ext = self.cert.get_extension_for_class(x509.KeyUsage)\n            current_key_usage = current_key_ext.value\n           ", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tif (s.find (i->first) != s.end()) {\n\t\t\t\t\tstill_there = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\t\"\"\", file", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   if X.begin >= 0x10000:\n        # The first value is the same as the last value of the interval\n        # before.\n        front_value = X.begin\n        # The second value is the same as the first value of the interval\n        #", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (StartOf(13)) {\n\t\t\t\tGet();\n\t\t\t} else {\n\t\t\t\tGet();\n\t\t\t\tSemErr(\"bad string in attributes\");\n\t\t\t}\n\t\t} else {\n\t\t\tSemErr(\"", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc_list.append(edi_doc)\n        return edi_doc_list\n    def _edi_get_pricelist(self, cr, uid, partner_id, currency, context=None):\n        # TODO: refactor into common place for purchase", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openH", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testHasPermission_actualPath_virtualFolder() throws Exception\n    {", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "       subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.asbool('ID_INPUT_MOUSE')\n            assert device.sys_", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    user = device.newUser(loginId, password)\n    user.login()\n    user.mainmenu()\n    user.endTutorial()\n    user.cardUpdate()\n    user.cardCategoryUpdate()\n    user.cardCom", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "   if (index_elements[0] == \"Fit\"):\n        if (index_elements[1] == \"Scatter\"):\n            rv['fitScatter'] = float(index_elements[2])\n        elif (index_elements[1] == \"Reference\"):", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (m_Keys.Count > 0)\n            {\n                int itemID = 0;\n                foreach (Key key in m_Keys)\n                {\n                    itemID += key.KeyValue;\n                }\n                itemID /= m_Keys.Count;", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iterator = devices.iterator(); iterator.hasNext();) {\n            String device = iterator.next();\n            // DRS 20181025 - Adding model to HDHR tuners\n            String model = liveModelMap.get(device);", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS)", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length == 0) {\n        throw new RuntimeIOException(\"Couldn't read RegexNER from \" + mapping, e);\n      }\n      if (split[0].equals(\"\")) {\n        throw new RuntimeIOException(\"Couldn't read RegexNER from \" +", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           if SCons.Util.is_List(sub_path) and n in sub_path:\n                return n\n            # see if we find it using the path in env['ENV'][var]\n            if SCons.Util.is_List(sub_path) and n in", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def wkt_features(cls, keys, features):\n        \"\"\"A convenience function to wrap an iterator yielding pairs of WKT format geometry and dictionaries of\n        key-value pairs into mapnik features. Return this from PythonDatasource.features() passing it a sequence of keys\n", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   def __default(self, param):\n        result = self.want.get(param)\n        return result\n\nclass ReportableWant(Parameters):\n    def to_return(self):\n        result = {}\n        try:\n            for returnable in self.returnables", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text == 'Add Automate Method' and\n            self.datastore.is_opened and\n            check_tree_path(\n               ", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           // log error for tracking\n            getConfig().logError(getClass().toString() + \", getClassByName(), \"\n            + \"action class not found.\");\n        }\n        return result;\n    }\n    public IAction getActionObject(String className, String dbName) throws", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           embedManifestDllAction(target, source, env)\n        else:\n            raise SCons.Errors.UserError(\"Manifest file %s does not exist\" % manifestSrc)\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function run by", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           final IProgressMonitor monitor = new SubProgressMonitor(\n                    new WorkspaceJob(getShell()) {\n                        public IStatus run(IProgressMonitor monitor) {\n                            return execute(getSelectedResources(), monitor);\n                        }\n                    }, 10", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tif (super.init(smi, sdi))\n\t\t{\n\t\t\t// if we get here then it's a positive start\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// if we get here then it", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('+5..', last) == (d(2014,1,30, 22,21), now)\n    assert f('-5..', last) == (d(2014,1,31, 19,47", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //WalkingRange\n            string swalkingrange = swalkingrange;\n            if (swalkingrange.Contains(\"s\") || swalkingrange.Contains(\"m\") || swalkingrange.Contains(\"h\"))\n                swalkingrange = swalkingrange.", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest system log is dead.\")\n        if not utils_misc.wait_for(self.vm.is_", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc = service.submit(pub);\n        assertThat(rc, notNullValue());\n        assertThat(rc.get(10000), is(true));\n        assertThat(rc.get(10000), is(15));\n        assertThat", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn (uint)value;\n\t\t\telse if (value <= 0x3FFF)\n\t\t\t\treturn (uint)((value >> 8) | 0x80) + ", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.notify(descr, flags=au_flags)\n        self.fm.env.copy.append(one_file)\n        self.fm.env.cut = True\n        self.fm.env.cut_path = one_file.path\n        self.", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\", 2);\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.Id =", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       locale = Locale.objects.get(code='de')\nNext line of code:\n\n        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n       ", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            if \"texture_id\" in cmd.parameters:\n                userstate.texture_id = cmd.parameters[\"texture_id\"]\n            if \"texture_name\" in cmd.parameters:\n                user", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new ChangeLeaderEvent(group, player));\n        }\n    }\n    public static void changeLeader(Player player, Player newLeader)", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "   def __str__(self):\n        if self.cols:\n            return highlight(\n                self.toks,\n                formatter,\n                outfile,\n                colsize=self.colsize,\n                align=align,\n                fill=fill,\n                squash_c", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof GridColumn) {\n\t\t((GridColumn) parent).setColumn(column);\n\t    }\n\t} while (parent != null);\n\treturn SKIP_BODY;\n    }\n}\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                Dialog = new DialogEntry();\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i];\n                    DialogEntry d = new Dialog", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\telse if ( m_Peerless == PeerlessList.MelisandeTrammel || m_Peerless == PeerlessList.MelisandeFel", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add((ims.careuk.vo.ChangeOfServiceVo)beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = new byte[32];\n\t\t\tfor(int i = 0; i < pb.Length; ++i) pb[i] = 5;\n\t\t\tkdf.Hash(pbMsg, 0, pb.Length", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\tif(requestManaExact(stack, player, cost, remove)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Requests mana from items in a given player's inventory. This version also\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Local time zone for this installation. All choices\n# can be found here:\n# http://www.i18nguy.com/unicode/timezones.html\n# although not all choices may be available on all operating systems.\n# On Unix systems, a value of None will", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but Lights has {1})\",\n\t\t\t\t\tNextFrame.PixelCount,\n\t\t\t\t\tLightCount));\n\t\t\t// FIXME: Revisit queue-wide blend-mode after LED Queue update\n\t\t\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.callerId = p.readString();\n            dc.callerIdType = p.readInt();\n            dc.callerIdName = p.readString();\n            dc.callerIdNumber = p.readString();\n            dc.call", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                Vector3 pos = new Vector3(x, y, 1);\n                // Add a vertex\n                newVertices[x * ySizeP + y] = pos;\n                // Add", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\tObject[] params = new Object[] { testInt1, testInt2 };\n\t\t\t\n\t\t\trawResult = client.call(API_METHOD_ADD", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n\n\t\t\t\treturn new int[0];\n\t\t\t}", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"not found\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close();\n        in.", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                       16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        0, 0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPAR", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .IsValid()\n                                        &&\n                                    minionPrediction.Hitchance >= HitChance.Impossible)\n                                {\n                                    result.Add(minion);\n                                }\n                            }\n                            break;\n                        case", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new LinkedList<>();\n        path.add(x);\n        for (Node b : graph.getAdjacentNodes(x)) {\n            if (graph.isDefCollider(b, x, y)) {\n                path.add(b);\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child=pop[i];\n                    if (child is Drawable)\n                        plcs.Push(child);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descend", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentFile == null) {\n            if (other.attachmentFile != null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.matches(other.attachmentFile)) {\n            return false;\n        }\n       ", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (m_Item.Visible && m_Item.Spell != null && m_Item.Spell.IsCasting && m_Item.Spell.IsFizzle && m_Item.Spell.IsFizzle && m_Item.Spell.IsFizz", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg, formatted);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tif (IsUser(user))\n\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n}\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId) {\nNext line of code:\n\n    return mock.getAvailCompoIds(", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog2 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog2.show", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.j.writeLock().lock();\n        try {\n            while (!this.i.isEmpty()) {\n                NetworkManager.QueuedPacket networkmanager_queuedpacket = (NetworkManager.QueuedPacket) this.i.poll();\n                this.a(", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               if per == kk:\n                    z_arr[p_index, z_key] = z_dict[z_key][per]\n                    z_err_arr[p_index, z_key] = z_dict[z_key][per+1]\n", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    } else {\n      String name = recipients.get(0).toShortString();\nNext line of code:\n\n      return context.getString(resourceTwo, name);\n    }\n  }\n}\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "       env[\"PATH\"] = \":%s\" % \":%s\" % \":%s\" % \":%s\" % \":%s\" % \":%s\" % \":%s\" % \":%s\" % \":%s\" % \":%s\" % \":%s\" % \":%s", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests_paths in iteritems(type_paths):\n                if path not in self._path_hash:\n                    raise ManifestError\n                for path, tests in iteritems(tests_paths):\n                    if path not in self._path_hash:\n                       ", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            try {\n                compiledScript.remove();\n            } catch (Throwable e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n    private void compileAndCache(final ScriptingSecurityManager scripting", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (caseInsensitive); // this also works in the case that obj is null\n\t\t\t\n\t\tint res = this.getId().compareTo(obj.getId());\n\t\t\n\t\treturn res;\n\t}\n\tpublic synchronized static int generateValue", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\n        assertTrue(found.get(0).getId().equals(stacks[0].getId()));\n        assertTrue(found.get(1).getId().equals(stacks[3].getId()));\n    }\n   ", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterFamilyCode(pf.getParameterFamilyCode());\n        depthParameter.setParameterCode(String.valueOf(depth));\n        depthParameter.setParameterName(\"depth\");\n        depthParameter.setParameterType(ParameterType.", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// [$capture] (...)\n\t\t\tif (!AttributesMatch(candidate, pattern, ref captures, out unmatchedAttrs))\n\t\t\t\treturn false;\n\t\t\t// $capture or $(..capture)\n\t\t\tL", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (colisionList.Count > 0)\n                    {\n                        extendedWillHit++;\n                        extendedFarmLocation = objAiBase.Position;\n                    }\n                }\n                int shortenWillHit = MinionManager.GetMinions(", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t// Label Controls\n\t\tRuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIG", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   for line in frozen_output.splitlines():\n        if re.match(pattern, line):\n            return True\n    return False\n@task\n@timed\ndef install_python_packages():\n    \"\"\"\n    Install Python packages that need explicit installation.\n    \"\"\"\n   ", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': [(6, 0, self.env['test_testing_utilities.m2o_parent_readonly'].create({'name': 'a'}))],\n        })\n        f = Form(r)\n        with self.assertRaises(Assertion", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, 1, 2)) == Sum(x, (x, 1, 2))\n    assert Sum(x, (x, 1, 2)) == Sum(x, (x, 1, 2))\n    assert Sum(", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._notifyAction = action;\n                this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._notifyAction = action;\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            StringReader reader = new StringReader(writer.toString());\n            InputSource inputSource = new InputSource(reader);\n            Document testDocument = parser.parse(inputSource);\n", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.Campus2:\n                    c.Campus2 = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.C", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Width: {0}\", ide.width);\nConsole.WriteLine (\"Height: {0}\", ide.height);\nConsole.WriteLine (\"ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"Reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               JSR.addToSubroutine(id, nbSubroutines);\n            }\n            // adds a label l to the stack\n            if (l.status & VISITED == 0) {\n                l.status |= VISITED;\n                l.", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.select(position.getPosition());\n\t\t\tlblLabelPosition.setText(\"Label Position: \" + position.getPosition());\n\t\t}\n\t\t\n\t\tprivate void setPosition(int position) {\nNext line of code:\n\n\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImage", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       if srv_token is not None:\n            self.kexgss.ssh_accept_sec_context(self.gss_host,\n                                                 srv_token)\n        else:\n            self.kexgss.ssh_accept_sec_context(", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode node =\n                    new DatabaseNode(this.handler, connectionData, overallNodeName);\n            if (disableTreeSelection) {\n                node.setUserObject(null);\n            }\n            tree.add(node);\n            if (treeModel != null)", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "               res = self.cr.fetchone()\n                if res:\n                    result = res[0]\n                    self.cr.execute(\"SELECT sum(number_of_hours) as number_of_hours\\\n                            FROM smart_salary_simulator_p", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       dVdzdOm.append(cosmo.delta_Omega_m(zi))\n        #OK\n        #OK\n        #OK\n        #OK\n        #OK\n        #OK\n        #OK\n        #OK\n        #OK\n        #OK\n        #OK", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize() * 1.5;\n        d.height = font.getSize();\n        return d;\n    }\n    @Override\n    public void setFont(Font font) {\n        super.setFont(font);\n        setFont(", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       #the theta angle is the rotation angle, theta_res is the range of theta angle (0-pi)\n        #the phi is the rotation angle (0-2pi)\n        #the dist bw sorbate(both metal and oxygen) and atms (", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t\twindow.Visibility = Visibility.Visible;\n\t\t\twindow.Activate();\n\t\t}\n\t\tprivate static void ShowOrHide(Window window, bool show)\n\t\t{\n\t\t\tif (window == null)", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                   for n in range(params[0]['nbins'])]\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params[", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           if (query.getPagingOrder() == PagingOrder.NORMAL) {\n                protocol.getStorage().updateFirstServerMsgId(contact);\n            }\n        }\n    }\n    public void query(XmppConnection connection, Contact contact, OnMoreMessagesLoaded", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++) {\n\t\t\t\tfinal byte[] raw = tag.getBytes(i, 23);\n\t\t\t\tif (raw.length == 23) {\n\t\t\t\t\tadd", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   def createDescription(self):\n        if self.desc_func:\n            return self.desc_func(self)\n        else:\n            return \"Unknown block\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tif (socketAdapter != null) {\n\t\t\tsocketAdapter.dispose();\n\t\t}\n\t\tsocketAdapter = null;\n\t}\n\t/**\n\t * This method is called from within the constructor to initialize the\n\t * property\n\t */\n\t@Override\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       # \"The path_prefix strings must start, but not end, with a slash.\n        # Use \"\" instead of \"/\".\n        self.apps = [(p.rstrip('/'), a) for p, a in apps]\n        # \"The path_prefix strings must start, but not", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tprint \"Loading model from %s\" % sys.argv[ 1 ]\n\t\tprint \"Loading data from %s\" % sys.argv[ 2 ]\n\t\tprint \"Loading fields from %s\" % sys.argv[ 3 ]\n\t\tmodel = Model( sys", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) == 0)\n            {\n                res = EnhanceResult.Success;\n            }\n            else\n            {\n                res = EnhanceResult.Failure;\n            }\n        }\n        public static void CheckResult(ref", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           if displayname is None:\n                displayname = entry_name\n            if desc is None:\n                desc = entry_value\n            entries[entry_name] = (entry_value, displayname, desc)\n        return self.create_userenum(type_name, entries)", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"Unable to locate any modules for FOG Service!\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Unable to locate any modules for FOG Service!\");\n                this.Close();\n            }", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"] ?? true;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True to submit value of selected items\n        /// </", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(!this.textureArray[textureHash].getImage().isSelected())\n                {\n                    this.textureArray[textureHash].getImage().selectTexture", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if header not in exposedHeaders:\n        exposedHeaders = exposedHeaders + ', ' + header\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n    return response\ndef expose_headers(response):\n    \"\"\"\n    Add a header name to Access-Control-Expose", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        Interlocked.Increment(ref available);\n                    }\n                    else\n                       ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var]\n    return var\ndef _get_area_definition(area_extent, shape, resolution, upper_left_extent, center, radius, units, p, crs):\n    \"\"\"Create an AreaDefinition.\n    Parameters are used in a specific order", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addOnKill(MOBS)\nQUEST.addOnEvent(EventType.QUEST_ACCEPT, \"yes\")\nQUEST.addOnEvent(", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60) / 60);\n\t\t\t\t\tint num3 = (int)Math.Floor(((double)nullable.Value", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataStride = 0;\n            VertexDataSize = 0;\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       for reaction in self.reactions:\n            reaction._model = self\n\n        # point _model to self\nNext line of code:\n\n        for metabolite in self.metabolites:\n            metabolite._model = self\n\n        # point _model to self\n", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tcoll.add((TumourGroupListVo)beans.get(i));\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static Tum", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tdouble cx = lines[selectedLine].getCenterX();\n\t\t\t\tdouble right = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tdouble cy = lines[selectedLine].getCenterY();\n\t\t\t\tint h = lines", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       mListView.setLayoutAnimation(set);\n    }\n\t\n\t/**\n\t * Set the list loading animation.\n\t */\n    private void setAnimation() {\n    \tAnimationSet set = new AnimationSet(true);\n        Animation animation = new AlphaAnimation(0", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey == 0)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                    break;\n                }\n                else\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey +", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(pssm.getSequence()[i]) != Mappings.indexUnknown)\n\t\t\t{\n\t\t\t\tthis.predict", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
