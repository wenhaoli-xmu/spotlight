{"pred": "   private final transient JKademliaRoutingTable routingTable;\n    private final transient KademliaRoutingTable routingTable;\n\n    private final transient JKademliaStorageEntry storage;\n    private final transient KademliaStorageEntry storage;\n\n", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       // Spectaculum-Core filtersNext line of code:\n\n        // Spectaculum-Core filtersNext line of code:\n\n        // Spectaculum-Core filtersNext line of code:\n\n        // Spectaculum-Core filtersNext line of code:\n\n", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Encryption):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, x, y):\n        x = RotateLeft(x ^", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private ImmersiveEffect mImmersiveEffect;\n    private ImmersiveEffect.Listener mImmersiveEffectListener;\n    private ImmersiveEffect.Listener mImmersiveEffectListener2;\n    private Im", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "       commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessageCommand.class, MessageEvent::from", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    * 本地流量限制服务\n     */\n    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务数据管理器\n     */\n    private TaskMetaInfoManager taskMetaInfoManager;\n\n    /**\n     * ", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tif (args.dryRun()) {\n\t\t\t\tintegrityCheck.dryRun(args.vaultLocation(), args.vaultName(), args.vaultVersion(), args.vaultVersionIntroducingPasswordNormalization(), args.vaultVersionIntroducingPassword", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           // save the deviceId to the database\n            // the deviceId is the key to the device\n            // the deviceId is the key to the device\n            // the deviceId is the key to the device\n            // the deviceId is the key to the device\n            // the deviceId is", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new SignRequest(SERVER_CHALLENGE_SIGN,\n        SESSION_ID, USER_PUBLIC_KEY", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "           if self.acctA == None:\n                self.acctA = self.global_config['_radius_client'].do_acct(self.uaA.state.getData()[0], self.uaA.state.getData()[1], \\\n                 ", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def __init__(self, uri):\n        self.uri = uri\n\n    def __str__(self):\n        return self.uri\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __eq__(self, other):\n        if is", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "           if cstr_node.binary:\n              cstr_node.lhs = convert_ast_constraint(ast_node.child(0))\n              cstr_node.rhs = convert_ast_constraint(ast_node.child(1))\n            else:\n              c", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, Bundle args) {\n        if (activity != null) {\n            Log.d(TAG", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       // Get user information.\n        String login = AppSettings.getLogin();\n        String email = AppSettings.getEmail();\n        String name = AppSettings.getUserName();\n        String avatarUrl = AppSettings.getUserAvatarUrl();\n        String time = String.format", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       # pylint: disable=protected-access\n        self.assertEqual(\n            InterLayerPipeline(\n                [InputLayer(1, 1), ConvLayer(1, 1, 1, 1, 1, 1, 1, 1, ", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   def __new__(cls, *args, **kwargs):\n        init_called = True\n        return super().__new__(cls)\n\n    class User(BaseModel):\n        id = Column(String, hash_key=True)\n        email = Column(String)\n        name", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "@method(infix('?', bp=32))\ndef select_optional_map_operator(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for context.item in context.inner_focus_select(self[", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation(),\n                    new MirrorTransformation(),", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "   private static final ButterKnife.Action<View> SHOW_MOVIE_DETAILS = (view, index) -> view.setVisibility(View.VISIBLE);\n    private static final ButterKnife.Action<View> HIDE_MOV", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               if (instance == null) {\n                    throw new IOException(\"Unable to create MBean\");\n                }\n\n                writeResponse(SUCCESS, correlationId);\n\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       await wild.create_report(ctx)\n\n        await wild_report.delete(delay=10)\n\n        await wild.update(ctx)\n\n        await wild.create_task_tuple(wild.monitor_status())\n\n        await wild.update(ctx", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   if c['vocab_text']:\n        vocab_text = Vocabulary(c['vocab_text'])\n    else:\n        vocab_text = None\n    # Load data\nNext line of code:\n\n    if c['vocab", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.coeffs == (50. /", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n               ", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "       assert self.redlock.acquire()\n        assert self.redlock.locked()\n        assert self.redlock.acquire()\n        assert self.redlock.locked()\n        assert self.redlock.acquire()\n        assert self.redlock.locked()\n       ", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "       sptr = c_void_p()\n        self._get_func(\"FMOD_Sound_Get3DConeSettings\", byref(sptr))\n        return ConeSettings(sptr, \"Sound\")\n\n    def get_length(self):\n        \"\"\"Get the", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "       self._calg = calg\n\n    def __init__(self, calg, data):\n        super(CompressedData, self).__init__(data)\n        self._calg = calg\n\n    def __len__(self):\n        return len(self.data)", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "       #cell intensity\n        #img4 = img2.copy();\n        #img4 = findIntensity(img4, centers, findIntensityParameter = findIntensityParameter, method = 'Mean', size = (3,3,3), verbose = verbose, out", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           if (accuracy == Accuracy.PERFECT) {\n                if (accuracy == Accuracy.PERFECT) {\n                    if (accuracy == Accuracy.PERFECT) {\n                        if (accuracy == Accuracy.", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           while (transactionIterator.hasNext()) {\r\n\r\n                Transaction t = transactionIterator.next();\r\n\r\n                if (t != null) {\r\n\r\n                    printer.print(t);\r\n                    System.out.println(print);\r\n                    print.setLength(", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               if (query.queryType == RequestType.SELECT) {//classifyColumnsToDimAndMetrics\n                    Either<String, Tuple2<List<String>, List<String>>> dataSourceDescRes = coordinator.aboutDataSource(stmnt.dataSource, reqHeaders);", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "               UsageEncryption.OSY,\n                encryption_algorithm_parameter_name='998',\n                encryption_algorithm_parameter_value=plain_segments.encode(),\n            ),\n            key_name=KeyName(\n                KeyType.D,\n                KeyAlgorithm", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           if (env.combExpMaxRegNum == 1) {\n                                env.combExpMaxRegNum = 0;\n                            } else {\n                                env.combExpMaxRegNum = 0;\n                            }\n                        }\n                    }\n               ", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "url(r'^pipeline-config-(?P<pipeline_id>[0-9a-f-]+)/(?P<config_id>[0-9a-f-]+)/(?P<action>[\\w\\-\\+]+)$',\n    ajax_pipeline_config", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tpublic ResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData) {\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = tags;\n\t\t", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self._storage_type = storage_type\n        return self\n\n\n#\n# DB OPEN\n#\n# Opens a database in the OrientDB Server instance. It returns the number of records in the database.\n#\n# Request: (database-name:string) <-- before", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   @Override\n    public <$Argument3> WhenApplyingThreeArguments<$SystemUnderTest, $Argument, $Argument3> andArgument(\n            CheckedSupplier<$Argument3> givenStep) {\n        preparation.recordGivenStep(givenStep);\n        return", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "   try {\n      process.execute();\n    } catch (IosDeviceException e) {\n      throw e;\n    } catch (Throwable e) {\n      throw new IosDeviceException(this, e);\n    }\n\n    try {\n      process.await();\n", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (null == textColor) {\n\t\t\ttextColor = Themer.getColor(contextRef.get(), Themer.COLOR_TEXT_LIST);\n\t\t}\n\t\tif (null == textColor) {\n\t\t\ttextColor = Themer.get", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = Message.parse(xml);\n\t\tif (message instanceof ReceivedTextMessage) {\n\t\t\tReceivedTextMessage textMessage = (ReceivedTextMessage) message;\n\t\t\tString text = textMessage.content;\n\t\t\tString fromUserName = textMessage.", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   # 获取运行时特征\n    app_info = get_app_info(file_path)\n    if app_info is None:\n        return\n    \n    # 获取运行时特征\n    # 获取运行时", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @channel_checks.raid_report_enabled()\n    async def cmd_raidcity(self, ctx, *city_name):\n        \"\"\"\n        **!raid-city city-name** - sets the city for raid party\n\n        \"\"\"\n\n        city = await ctx", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertEqual(date_string_to_date(\"25/11/2015\"), \"2015-11-25\")\n        self.assertEqual(date_string_to_date(\"11/12/2012\"), \"", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file, delay_seconds=2)\n        config_actor.start()\n        gevent.sleep(1)\n\n        # setup session database\n        database_actor = DatabaseActor(999, delay_seconds=2)\n", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           if (TextUtil.isNull(picture.getComment_author())) {\n                                holder.tv_author.setVisibility(View.GONE);\n                            } else {\n                                holder.tv_author.setVisibility(View.VISIBLE);\n                            }\n", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\twrite_tm_filetype(opts.tmifile[0],\n\t\t\t\t\t\t\timage_array = positive_data,\n\t\t\t\t\t\t\tmasking_array = masking_array,\n\t\t\t\t\t\t\tmask", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               HomeFragment.class,\n                StreamsFragment.class,\n                SurveysFragment.class,\n                PromptFragment.class,\n                OAuthActivity.class,\n                OAuthFragment.class,\n                OAuthActivity.OAuthFragment.OAuthFragment.OAuthFragment", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "       self.update_hlen()\n\n    def parse(self, packet):\n        super(SignatureV4, self).parse(packet)\n        self.sigtype = SignatureType(self.bytes_to_int(packet[:1]))\n        del packet[:1]", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   else:\n        # XSD typed selection\n        for item in context.iter_self():\n            if context.item is not None and context.is_principal_node_kind():\n                if isinstance(item, (TypedAttribute, TypedElement)):\n                    yield item", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter,\n      'downed_nodes': Rate,\n      'downed_nodes_size': Counter,\n      'downed_nodes_size_avg': Rate,\n      'downed_nodes_size_max': Counter,", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send_message_with_protocol(protocol, 'hello world')\n        protocol.send_string.assert_called_once_with('11:hello world,')\n\n    def test_send_message_with_protocol_bad_length(self):\n        \"\"\"", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       // statement\n        StatementExecution se = (StatementExecution) qe;\n        assertEquals(\"query\", se.getQuery());\n        assertEquals(1, se.getSetParams().size());\n        assertEquals(1, se.getSetNullParams().size());\n        assertEquals", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionFailWithQuery() {\n        StatementExecution se = new Statement", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               # If we are not scheduled to send, continue\n                if not self._checkADRRequest(device.deveui):\n                    continue\n                \n                # If we are not queueing commands, send the request\n                if not self.config.macqueueing:\n                    yield", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                   ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# IEEE 802.15.4 PHY format\n#\n# 0x00 : 0x00\n# 0x01 : 0x01\n# 0x02 : 0x02\n# 0x", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       if (chat == null) {\n            chat = DatabaseManager.INSTANCE.getChat(getActivity());\n        }\n        if (chat == null) {\n            Log.e(getClass().getSimpleName(), \"Chat not found\");\n            return;\n        }\n", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass HITANS8(H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "           time_str = self.img_handle.getTime()\n\n        else:\n\n            time_str = self.config.time\n\n        # Add time to JSON file\n        json_dict['time'] = time_str\n\n\n        # Save the picks\n        pick", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       if (mPublicRoomsListList == null) {\n            return;\n        }\n\n        mPublicRoomsListList.clear();\n\n        for (List<PublicRoom> rooms : mPublicRoomsListList) {\n            for (PublicRoom room : rooms)", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "       self.bingo_data_generator = BingoDataGenerator(self.bot)\n        self.bingo_card_manager = BingoCardManager(self.bot)\n        self.bingo_card_writer = BingoCardWriter(self.bot)\n        self.gu", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(target_sequences,\n                                         recipe[\"genomes\"],\n                                         recipe[\"target\"],\n                                         recipe[\"blocks\"],\n                                         recipe[\"threads\"],\n                                         recipe[\"threads", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);Next line of code:\n\n        plugins.registerEvents(new InteractListener(this), this);Next line of code:\n\n        plugins.registerEvents(new SignChangeListener(this), this);Next line of code:", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   // 初始化MiPush\n                    initMiPush();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"HuaweiPush\":\n                if(shouldInit()) {Next", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<QueryExp>(QUERY_EXP));\n        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new Marsh", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public PersonalVulnsWindow() {\n        initComponents();\n        setIconImage(helper.getIconImage());\n        setTitle(\"Personal Vulnerabilities\");\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n       ", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   private void createAllChartPanel(\n            List<GCStatsChartPanel> list) {\n        ChangingPieDatasetWithTTG dataset =\n                datasetGenerator.newPieDatsetWithTTG(0);\n        GCStatsChartPanel panel =\n                new AllChartPanel(", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.isAckRequested()) {\n            AckRequest ackRequest = new AckRequest(packet, client);\n            ackManager.onAck(ackRequest);\n        }\n\n        if (packet.isAckTimeout()) {\n           ", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       lMS.addTrack(new VideoTrack(\n            appRtcClient.videoConstraints().videoTracks[0],\n            appRtcClient.videoConstraints().videoTracks[0].label(),\n            appRtcClient.videoConstraints().videoTracks[0].kind(),\n", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_BACKOFF_MS, -1L);\n            contentValues.put(JobStorage.COLUMN_BACKOFF_POLICY, JobRequest.BACKOFF_POLICY_NONE);\n            contentValues.", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private PreferenceCategory preferenceCategory;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   # if there's no last snapshot file, create one\n    if not fileutils.last_snapshot_file(basedir):\n        logger.info(CORE_LOG_PREFIX + \"No last snapshot file..\")\n        SnapshotManager(basedir).take_snapshot", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "       if self.config.debug_gdb:\n            DebugGdbSupport(self.config).update(docker_config)\n        elif self.config.debug_valgrind:\n            DebugValgrindSupport(self.config).update(docker_config)\n\n        if self", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   final String[] SectionURLs = { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\" };\n    final String[] SectionNames = { \"社区管理\", \"国内院校\",", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       //getActivity().getSupportFragmentManager().beginTransaction().add(this, \"fragment\").commit();\n        //getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, this).commit();\n        //getActivity().getSupportFragmentManager().beginTransaction().", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tif (model.getTestBase() != null) {\r\n\t    IJavaElement[] testBaseElements = model.getTestBase().getJavaElements();\r\n\t    if (testBaseElements != null) {\r\n\t\tfor (IJavaElement testBaseElement : testBaseElements) {\r\n", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       self.assertTrue(SimulatorDataMatcher().received_simulator_data_datagram(MockSimulatorDataDatagram()))\n\n    def test_received_simulator_data_datagram_with_different_time(self):\nNext line of code:\n\n", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "       if (httpMessage.getRes().getResponse() != null) {\n            textareaMessage.setText(httpMessage.getRes().getResponse());\n            textareaMessage.setCaretPosition(0);\n            textareaMessage.setLineWrap(true);\n            textareaMessage", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACTIVE\", \"BUSY", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   def _write_header(self, fileobj):\n        try:\n            fileobj.seek(self._load_file(fileobj)['ID3'].data_offset)\n        except (InvalidChunk, KeyError):\n            raise ID3NoHeaderError(\"No ID3", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r\n\r\n      return null;\r\n    }\r\n\r\n    visitProxOp(new VisitOrd3(n), query);\r\n\r\n    return null;\r\n  }\r\n\r", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EmbossTransformation(),\n                    new InvertAlphaTransformation(),\n                    new InvertTransformation(),\n                    new MaskTransformation(0xffffff00),\n                    new QuantizeTransformation(),\n                    new SaturationTransformation(),\n                ", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "           self._input_buffer = self._input_buffer[1:]\n\n            # Parse the exception class\n            exception_class = self._decode_field( FIELD_STRING )\n\n            # Parse the exception message\n            exception_message = self._decode_field( FIELD_STRING", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n\n    params = {\n        'FromSettlementDate': args.fromdate or date.today() - timedelta(days=1),\n        'ToSettlementDate': args.todate or args", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\t// album\n\t\t\t\tGalleryAlbum album = new GalleryAlbum();\n\t\t\t\talbum.setId( proxy.getId() );\n\t\t\t\talbum.setName( proxy.getName() );\n\t\t\t\talbum.setParentId(", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   assert dump_key(user, user_key) == user_key\n\n\ndef test_extract_key(engine):\n    user = User(id=\"foo\")\n    user_key = {\"id\": {\"S\": \"foo\"}}\nNext line of code:\n\n    assert", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new Percentage(100),\n        new Fraction(100, 100),\n        new Status(Status.SUCCESS),\n        new StaticString(\"Hello\"),\n        new StaticString(\"World\"),\n        new TaskName(\"Task\"),\n        new", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static Form form(Object resource) {\n\t\treturn new Form(resource);\n\t}\nNext line of code:\n\n\tpublic static Fieldset fieldset(Object resource) {\n\t\treturn new Fieldset(resource);\n\t}\nNext line of code:\n\n\t", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "           events.append(Event(e))\n\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    def list_event_details(", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n    ", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           if (mWallpaper != null) {\r\n                WallpaperPropertiesLoaderTask task = new WallpaperPropertiesLoaderTask(this);\r\n                task.execute(mWallpaper);\r\n            }\r\n        } else if (id == R.id.menu_crop) {\r\n            if", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private final static Logger logger = Logger\r\n      .getLogger(QsolToQueryVisitor.class.getPackage().getName());\r\n\r\n  private final static Logger logger = Logger\r\n      .getLogger(QsolToQueryVisitor.class.getPackage().getName());\r\n", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif args.mapper is None:\n\t\t\traise ValueError('Mapper data folder is not defined')\n\n\t\tif args.mapper_chunk is None:\n\t\t\traise ValueError('Mapper chunk size is not defined')\n\n\t\tif args.mapper_", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = self.vid_nameToBeginningTime(self.vid_name)\n\n        # If the beginning time is not found, try to read it from the file\n        if self.beginning_datetime is None:\n            self.beginning_datetime =", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   # 3. background\n    bg = objs.Sphere(np.array([0, 0, 0]), 0.0001, zscale=0.89)\n    objects = comp.ComponentCollection([bg], category='obj')\n\n    # ", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tif (FOOD_MODIFIER_ENABLED)\n\t\t{\n\t\t\tFoodModifier.onGlobalFormulaChanged();\n\t\t\tFoodHistory.get(player).onHistoryTypeChanged();\n\t\t\tFoodGroupRegistry.clear();\n", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       if request.user.email != post.user.email:\n            messages.error(request, 'You are not authorized to view this post.')\n            return redirect(reverse('ploghubapp:home_page'))\n\n        if request.user.email == post.user", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tif (selectedCells.iterator().next() instanceof IDataProvider) {\n\t\t\t\t\t\t\tIDataProvider dataProvider = (IDataProvider) selectedCells.iterator().next();\n\t\t\t\t\t\t\tif (dataProvider instanceof AnnotationGridData", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = 0x00\n\n    def parse(self, packet):\n        super(RevocationKey, self).parse(packet)\n        self.", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "       if is_processing_instruction_node(item):\n            yield item\n\n\n@method(function('comment', nargs=(0, 1), label='kind test'))\ndef select_comment_kind_test(self, context=None):\n    if context is None:\n", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "def getAS2PuffleString(client, puffles):\r\n    puffles_as2_str = list()\r\n    for puffle in puffles:\r\n        p_id, p_type, p_sub_type, p_name, p_adopt", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "def make_image_1():\n    P = objs.PlatonicSpheresCollection(pos, rad)\n    H = psfs.AnisotropicGaussian()\n    I = ilms.BarnesStreakLegPoly2P1D(npts", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "           with tqdm.tqdm(total=len(jobs)) as pbar:\n                for done, log_like in run_mp(jobs, self.logger):\n                    pbar.update(done)\n                    self.logger.debug(f\"Compiling", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   # Recompute the rotation wrt horizon\n    platepar.rot_wrt_horizon = rotationWrtHorizon(platepar.RA_d, platepar.dec_d, platepar.JD, \\\n        platepar.lat, platepar.lon, platepar.", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_EXACT, true);\n        contentValues.put(JobStorage.COLUMN_REQUIREMENTS_EN", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       if (chatRem == null) {\n            chatRem = getActivity().findViewById(R.id.chat_remove);\n        }\n        if (mDelAdapter == null) {\n            mDelAdapter = new UserAdapter(getActivity(), users);\n        }\n        if (chat", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['area', 'code']\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n    class Meta:\n        model = AreaType\n        fields = ['code']\n\n\nclass AreaFilter(django_filters.FilterSet):\n    name", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           if (fab.getVisibility() == GONE) {\n                uiHandler.postDelayed(showButton, 600);\n            }\n        }\n    }\n\n    @UiThread\n    protected void setBottomInfo() {\n        if (fab.getVisibility()", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "               return deferred.get();\n            }\n        }).then(new OnComplete<Channel>() {\n            @Override\n            protected void onComplete(final Channel value, final Throwable cause) throws Exception {\n                LOGGER.debug(\"Reconnecting transport...\");\n\n                if (", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               new RegistrationParam(success, email, password, message));\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final AtomicInteger counter = new AtomicInteger(0);\n    private final Map<RoadPoint, MatcherCandidate> candidates = new HashMap<>();\n    private final Map<RoadPoint, MatcherTransition> transitions = new HashMap<>();\n    private final Map<Ro", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private String[] urls;\n    private String[] urls2;\n    private String[] urls3;\n    private String[] urls4;\n    private String[] urls5;\n    private String[] urls6;\n    private String[] urls7;\n    private String[] urls8;\n   ", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " assert isinstance(args.gps_sv[0].getMessage(), ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "       for i in range(len(fills)):\n            if len(self.style.fill_rule) == 0:\n                lines.draw_polygon(\n                    tris[i],\n                    fill_color=fills[i],\n                    line_cap=", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"[\") && data.endsWith(\"]\")) {\n\t\t\t\t\tString[] parts = data.split(\"[\\\\s]+\");\n\t\t\t\t\tif (parts.length == 2) {\n\t\t\t\t\t\t", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt = self.beg_vect[1]\n        self.end_alt = self.end_vect[1]\n\n        # Compute the great circle\n        self.gc = greatCircle(self.beg_alt, self.end_alt)", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(ctx.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void enterMethod(@NotNull Method", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "   /**\n     * Called when the visitor first reaches a node with children.\n     * @return Determines whether the node's children will be visited.\n     */\n    boolean add(Node node);\n\n    /**\n     * Called when the visitor reaches a leaf node.\n", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "   private final AtomicReference<Swagger> runtimeCache = new AtomicReference<>();\n    private final ISpecificationGeneratorOptions options;\n\n    public OpenAPIProcessor(ProcessingEnvironment processingEnvironment) {\n        super(processingEnvironment);\n        requireNonNull(processingEnvironment);\n        requireNon", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class).to(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class).to(GerritHttpAuthDataProvider.class);\n        bind(GerritPushExtension.class).to(G", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (snapshots.get(i).getName().startsWith(zxid.substring(0, 4))) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n           ", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "       if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.has_unassigned_split]\n        elif filter_type is FilterType.Income:\n            entries = [e for e in entries if any(getattr(s", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   # JPEG segment\n    #\n    # JPEG segment is a container for JPEG meta-data\n    #\n    # JPEG meta-data is a container for JPEG image\n    #\n    # JPEG image is a container for JPEG image", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\t// Show suggestions\n\t\t\t\t\t\tsearchSuggestionsAdaper.clear();\n\t\t\t\t\t\tsearchSuggestionsAdaper.addAll(searchSuggestionsAdaper.getSuggestions());\n\t\t\t\t\t\tsearchSugg", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   # 2. coverslip\n    pos = np.array([\n        [ 11.21179157,  17.46765157,  51.33777692],\n        [ 11.", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "       result, index = apply_fast_and(left.values, right.values,\n                                           left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_, left.index)\n\n\ndef apply_", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request.getPackageName() == null) {\r\n                        mError = Extras.Error.ICON_REQUEST_PACKAGE_NULL;\r\n                        return false;\r\n                    }\r", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "       instance,\n        (int, float, Decimal, AbstractDateTime, Duration)\n        )\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        return issubclass(sub", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "       return SearchMenuPage(self._createSearchHistory(context))\nde/generia/kodi/plugin/frontend/zdf/search/SearchHistory.py\nclass SearchHistory(object):\n\n    def __init__(self):\n        self.history = []\n        self.", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "               if pattern.datafile is None:\n                    errmsg += \"Fit.validate():  Cannot Find a Matching Pattern -- %s\\n\"%(pattern.name)\n                    rvalue = False\n                    break\n\n                if not checkFileExistence(pattern.data", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'type')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n\n   ", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(basePathDDI2FO, preprocessors, postprocessors);\n\t\t\n\t\tFile inputFile = new File(basePathDDI2FO + \"/input/input.txt\");\n\t\tFile outputFile = new File(", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // TODO check if the user is already registered\n                        // TODO check if the user is already logged in\n                        // TODO check if the user is already registered\n                        // TODO check if the user is already logged in\n                        // TODO check if the user is already registered\n                       ", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^$', RedirectView.as_view(permanent=True, url='/packages')),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()),\n        name=\"package-new\"),\n    url(", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.bandIndexes[0] == NormalRateConfig.", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict[\"tierList\"][0][\"entries\"]\n\n\ndef run_save_json(tg, includeBlankSpaces=True, minimumIntervalLength=None):\n    \"\"\"\n    Mock write function and return the first tier's entry list\n\n   ", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                   procs.append(\n                        mp.Process(\n                            target=function.run,\n                            args=(\n                                self.split_directory,\n                                self.segmentation_options,\n                                self.vad_config,\n                                self.vad", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "           dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NFS')\n        dataset =", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   void validate(FixTag tag);\n    void validate(FixTag tag, Consumer<FixTag> consumer);\n    void validate(FixTag tag, IntConsumer consumer);\n    void validate(FixTag tag, LongConsumer consumer);\n    void validate(F", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "           yield data_chunk(self._traces, bounds)\n\n        return\n\n    def iter_chunks_group(self, n_samples, groups):\n        \"\"\"Iterate over chunks.\"\"\"\n        rate = self._kwargs['sample_rate']\n        chunk_size =", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAndQueryNode.Operator operator, AlvisIRAndQueryNode andQueryNode, Void param) {\n\t\t\tAlvisIRAndQueryNode queryNode = new AlvisIRAndQueryNode();\n\t\t\tExpansion", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate Validator validator;\n\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate File pipelineFolder;\n\tprivate File pipelineFolderTemp;\n\tprivate File pipelineFolderTemp2;\n\tprivate File pipelineFolderTemp3;\n\tprivate File pipelineFolderTemp4;\n\tprivate File", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (ADD_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));Next line of code:\n\n        registry.put((byte) (ADD_NOTIFICATION_LISTENER ^", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       //save the tweet\n                        saveTweet(tweet, lp, content, url, origContent);\n                        //save the tweet\n                        saveTweet(tweet, lp, content, url, origContent);\n                        //save the tweet\n", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "       elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n            lines.extend(self._render_descriptor_helper(descriptor.decoded_descriptors_all_subsets, indent + '.' *", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "       help=\"network delay [millisecond].\n        the minimum latency time is 100 ms.\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 100ms\n        \"\"\".format(\n            \", \".join([\", \".", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       if self.language:\n            self.contacts = Contact.objects.filter(phone_number=self.phone_number,\n                                                        language=self.language)\n        else:\n            self.contacts = Contact.objects.filter(phone_number=self.phone", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        pipeline.apply(\"Read live states\",\n            Read.from(new LiveProjectSource(org)));\n\n    // Convert live states to GCPResourceState objects.\n    PCollectionTuple live", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.rule = RejectRequest(\n            ContentSimhashSampling(\n                ContentSimhashSampling.get_simhash_from_response_content(\n                    \"response content\",\n                    ContentSimhashSampling.get_simhash_from_response_content(\n", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(Condition(operation, column, value))\n    if \"or\" in operations:\n        conditions.append(Condition(operation, column, value))\n        conditions.append(Condition(operation, column, value))\n    if \"not\" in operations:\n        conditions.append", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       assert get_square_idx(1, 1) == 1\n        assert get_square_idx(1, 2) == 2\n        assert get_square_idx(1, 3) == 3\n        assert get_square_idx(1, 4)", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final ICompilationUnit testClassWithSuperclass;\n\n    private final ICompilationUnit testClassWithSuperclassAndPrio;\n\n    private final ICompilationUnit testClassWithSuperclassAndPrioAndPrio;\n\n    private final ICompilationUnit testClassWith", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": " def AsyncProcessRequest(self, sink_stack, msg, stream, headers):\n    \"\"\"Process a request message, stream, and headers.\n\n    Args:\n      sink_stack - The SinkStack representing the processing state of the message.\n                   Implementors should push their", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate boolean debugSpatial = false;\nNext line of code:\n\n\tprivate boolean debugSpatialOrdering = false;\nNext line of code:\n\n\tprivate boolean debugSpatialEntity = false;\nNext line of code:\n\n\tprivate boolean debugSpatial", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "   var moduleDependencyPath = docerConf.moduleDependencyPath();\n    var moduleSourcePath = docerConf.moduleSourcePath();\n    var moduleMergedTestPath = docerConf.moduleMergedTestPath();\n    var moduleDocSourcePath = docerConf.moduleDoc", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "       return RespostaSAT.analisar(retorno)\n\n    def consultar_numero_sessao(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_numero_s", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   if gopts.git_trace2_event_log:\n      git_trace2_event_log.Write(gopts.git_trace2_event_log)\n\n    if gopts.event_log:\n      event_log.Write(gopts.event_log", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Provides @Singleton\n    SharedPreferences provideSharedPreferences() {\n        return PreferenceManager.getDefaultSharedPreferences(app);\n    }\n\n    @Provides @Singleton\n    Gson provideGson() {\n        return new Gson();\n    }\n", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(4));\n    }\n\n    @Test\n    public void testTotalCountForOutOfIndex() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution()); ", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand();\n    }\n\n    /**\n     * {@", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       // create verifiers\n        // verifiers.put(\"Local Files Exist\", new LocalFilesExistVerifierImpl());\n        // verifiers.put(\"Remote Files Exist\", new RemoteFilesExistVerifierImpl());\n        // verifiers.put(\"Valid Schema Name\", new", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           // show progress\n            showProgress(false);\n\n            // show error message\n            if (null != emailView) {\n                emailView.setError(getString(R.string.error_invalid_email));\n            }\n            if (null != passwordView) {\n                password", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    * @throws DrupalFetchException if there's an error during the request.\n     */\n    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (inv", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       self.history.add(text)\n        quirks = pesterQuirks(self.parent().testquirks())\n        self.history.add(text)\n        quirks = pesterQuirks(self.parent().testquirks())\n        self.history.add(text", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/logout', LogOutHandler),\nNext line of code:\n\n            (r'/logout', LogOutHandler),\nNext line of code:\n\n            (r'/logout', LogOutHandler),\nNext line of code:\n\n            (r'", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explan", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\n                        \"The selected criterion is not implemented.\");\n        }\n\n        return informationCriterion;\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(ty1, ty2)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a simply typed argument into a Fst.\n    \n    Arguments:\n    - `expr`: an expression or int or float\n   ", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(BatteryStatusIndicator batteryStatusIndicator);\n\n    void inject(ClassicPlaybackUi classicPlaybackUi);\n\n    void inject(ClassicBookList classicBookList);\n\n    void inject(ClassicNoBooksUi classicNoBooksUi", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   public ChartCategoryFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View view = inflater", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Response(\n        body='',\n        headers={'Content-Type': 'application/json'},\n    )\n    with pytest.raises(ResponseValidationError) as excinfo:\n        handle_request(\n            PyramidSwaggerRequest(\n                Request(\n", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t/**\n\t * \n\t */\n\tprivate final List<String> commandHistory = new LinkedList<String>();\n\n\t/**\n\t * \n\t */\n\tprivate final List<String> commandHistoryIndex = new LinkedList<String>();\n\n\t/**\n\t * \n", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "   def __repr__(self) -> str:\n        \"\"\"Object representation\"\"\"\n        return f\"<CorpusProcessWorker {self.name}>\"\n\n\nclass Job:\n    \"\"\"\n    Multiprocessing job for corpus loading\n\n    Attributes\n    ---------", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "       PressureSensorResource,\n        \"/aircraft/sensors/pressure_sensor\",\n        resource_class_args=(sensors.pressure_sensor,)\n    )\n\n    api.add_resource(\n        PitotTubeResource,\n        \"/aircraft", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetPropagate().GetVtrueKts())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n        self.assertAl", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   '--ns, --namespace NAMESPACE Filter the result set by namespace',\n    CMD_OPTION_FILTER_QUERY_LANGUAGE_LINE,\n    CMD_OPTION_FILTER_QUERY_LINE,\n    CMD_OPTION_", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t/**\n\t * 后台主页\n\t *\n\t * @param request\n\t * @return\n\t */\n\t@RequestMapping(value = \"/manage/index\", method = RequestMethod.GET)\n\tpublic String index(HttpServletRequest request) {\n\t\treturn", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           AWSLambdaException awsLambdaException = (AWSLambdaException) t;\n                            if(awsLambdaException.getErrorCode() == AWSLambdaException.ErrorCode.InvalidRequestException){\n                                logError(title, awsLambdaException.getErrorMessage());\n                            } else {", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                      join_keyword=u'\\u0915\\u0930\\u0935\\u093e\\u0915')\n\n    def test_full_e2e_english_signup_and_cancel_flow_with", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequesterForCheckins;\n  protected LocationUpdateRequester locationUpdateRequesterForPassive;\n\n  protected FragmentManager fragmentManager;\n  protected FragmentTransaction fragmentTransaction;\n\n  protected PlaceList", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   avd_path = SETTINGS.AVD_PATH\n    if avd_path == '':\n        print \"[ERROR] AVD_PATH is not set\"\n        return\n    if not os.path.exists(avd_path):\n        print \"[ERROR] A", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Bit):\n    constructorList = [\n        Int('RRC_message_type', Pt=0, Type='uint8', Repr='hex'),\n        Int('RRC_message_length', Pt=0, Type='uint8', Repr='", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\t# create adjacency set\n\t\t\tif opts.vertexdist:\n\t\t\t\tif opts.vertextriangularmesh:\n\t\t\t\t\tadjac_lh = create_adjac_voxel(v_lh, faces_l", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "     result.append(\" = \");\n    } else {\n      result.append(\" \").append(exp.getOperator()).append(\" \");\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result.append(CLOSE_BRACK", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "     cacheService.storeCacheList(new CacheList(listName));\n      loadListsFromDBService.restart();\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final Optional<String> listNameOption = Dialog", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   def __init__(self, CallName='', ReprName='', \\\r\n                 T=0, V=0, Len=1, Trans=False):\r\n    def __init__(self, CallName='', ReprName='', \\\r\n                 T=0, V=", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       TimeEntryOvertimeAggregation.class\n                )\n        );\n\n        timeEntriesTable.getColumn(\"overtime\").setCaption(messageBundle.getMessage(\"timeentry.overtime.caption\"));\n\n        timeEntriesTable.getColumn(\"overtime\").set", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "           (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ElGCipherText): ElGCipherText,\n            (True, PubKeyAlgorithm.ElGPriv): ElGPriv,\n            (True, PubKey", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "                                   ExpInfo.BOARDTYPE, self._expansion_num)\n\n    @property\n    def supported_event_types(self):\n        event_types = []\n\n        for event_type in EventType:\n            try:\n                ul.disable_event(self", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "       self.key_size = read_u16le(f)\n        self.objects = {}\n\n        for i in range(count):\n            key = read_u16le(f)\n            self.objects[key] = self.parent.dir.get(self", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "           user = create_inactive_user(email, full_name)\n            user.is_active = False\n            user.set_unusable_password()\n\n            # Send invitation email\n            subject = _('Invitation to join %s') % site.name\n            template", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       draft = await self.fetch_draft_for_channel(ctx.guild.id, ctx.channel.id)\n        if draft:\n            await Utilities.message(ctx.channel, f\"Draft {draft} has been dumped to the form.\")\n\n\n", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           ex = Hitbtc('bccbtc')\n        elif name == \"%s_ETH_BTC\" % constant.EX_HITBITC:\n            ex = Hitbtc('ethbtc')\n        elif name == \"%s_ETH_USD\" % constant", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is None:\n                pass  # '.' wildcard doesn'", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   DummySherpaServer server = new DummySherpaServer(10);\n    try {\n      Solutions solutions = helpExecuteQuery(server, 10);\n      Assert.assertNotNull(solutions);\n      Assert.assertEquals(10, solutions.size", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\tString expanderType = elt.getAttribute(AlvisIRConstants.XML_SEARCH_EXPANDER_TYPE);\n\t\t\tif (expanderType == null) {\n\t\t\t\tthrow new SearchConfigException(\"missing attribute \" + AlvisIRConstants", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   //deviceMiToken = MiPushClient.getInstance().getToken();\n                    //Log.e(MYTAG, \"使用MiPush推送\");\n                    break;\n                }\n                else {\n                    //Log.e(MYTAG, \"M", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n    private final KademliaRoutingTable routingTable;\n    private final KadDHT dht;\n\n    private final int udpPort;\n\n    private final MessageFactory messageFactory;\n\n    private final KadStatistician stat", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "           tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "   @app.route('/api/words/<token>/w/<word>')\n    @as_json\n    def words_api_route(token, word):\n        return words_api(wordnik_api, token, word)\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\t@Inject\n\tpublic TaskListByJQLActivity(Context context) {\n\t\tsuper(context);\n\t\tctx = context;\n\t\tsetTitle(R.string.task_list_by_jql);\n\t\tsetContentView(R.layout.task_list_", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertIsInstance(handle, HANDLE)\n        self.assertIsNotNone(handle)\n\n    def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False)\nNext line of", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.vms = new SpringVms(restTemplate, root);\n        this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   List<ParsedPath> paths = parserHolder.parse(currentAnnotatedElement.get(), roundEnv.getElementUtils(), roundEnv.getTypes());\n                    return paths.stream();\n                })\n                .collect(Collectors.toList());\n        LOG.debug(\"", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   protected CrawlerRequest crawlerRequest;\n\n    protected CrawlerRequest crawlerRequest;\n\n    protected CrawlerRequest crawlerRequest;\n\n    protected CrawlerRequest crawlerRequest;\n\n    protected CrawlerRequest crawlerRequest;\n\n    protected Craw", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           JPopupMenu popupMenu = new JPopupMenu(actionPopupGroup);\n            popupMenu.setBorder(null);\n            popupMenu.setFocusable(true);\n            popupMenu.setLightWeightPopup(true);\n            popupMenu.setRequestFocusEnabled(true", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiScrollingPanel channels;\n    private GuiPanel panel;\n\n    private GuiButton add;\n    private GuiButton remove;\n    private GuiButton edit;\n    private GuiButton save;\n    private GuiButton cancel;\n\n    private Gui", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_BACK_CODE:\n                return new BtnBackLight();\n            case ConstantStr.FUNC_CLEAR_BACKGROUND_CODE:\n                return new BtnClearBackground", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       Section section = toolkit.createSection(form.getForm(), Section.TITLE_BAR);\r\n        section.setText(Messages.configurationEditorTitle);\r\n        section.setExpandable(true);\r\n        section.setExpanded(true);\r\n        section.setLayout(new", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       self.assertEqual(\"string\", Type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\nNext line of code:\n\n        self.assertEqual(\"string\", Type.get_sample())\n\n    def test_type_", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "       new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStartTimeCommand.class, StartEvent::fromCommand, this::queueEvent));\n        commandProcessor.", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datas", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'api_sig': settings.FLICKR_KEY[1],\n        'perms': 'write',\n        'frob': frob,\n    }\n\n   ", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\t/* If we got a FCPBadFileException, we can't insert the message */\n\t\t\t\t\tLogger.error(this, \"Can't insert, FCPBadFileException\");\n\t\t\t\t\treturn false;\n\t\t\t\t} catch", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       if bytecode[k][2] in NO_FALL_THROUGH:\n          return\n        k -= 1\n      except IndexError:\n        break\n      cond_stack_size -= 1\n    condition_bytecode.insert(0, bytecode[k])", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   //VIEWS\n    private ScrollView scrollView;\n    private TextView textView;\n    private TextView textView2;\n    private TextView textView3;\n    private TextView textView4;\n    private TextView textView5;\n    private TextView textView6;\n    private TextView", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\n\nclass LanguageForm(forms.ModelForm):\n    class Meta:\n        model = Language\n        fields = ('lang", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\tprivate void openCustomList(CustomList customList) {\n\t\tif (customList != null)\n\t\t\tstartActivity(CustomListActivity.start(this, customList));\n\t}\n\n\tprivate void openProperty(Property property) {\n\t\tif (property != null", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   def parse(self, ping_message: Sequence[str]) -> PingStats:\n        \"\"\"\n        Parse ping command output.\n\n        Args:\n            ping_message (Sequence[str]):\n                Ping command output.\n\n        Returns:\n            PingStats", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           //trying to get chat with chatId from server\r\n            try {\r\n                chat = MessageTask.getInstance().getChat(chatId);\r\n                // Assuming that the messages are sorted by id\r\n                latestMessageOnDisplay = new AtomicLong(0);\r\n            } catch (", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic Cubeshaft() {\n\t\tthis.level = new Level();\n\t\tthis.level.setGenerator(new LevelGenerator(this.level));\n\t\tthis.level.setLight(new Vec3(0, 0, 0));\n\t\tthis.level.", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n        assertThat(qe, is(statementOrBatchStatement()));\n        assertThat(qe, is(prepared()));\n        assertThat(qe, is(prepared", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     if (serverRawResponse != null) {\n        log(\"server response received, cancelling the upload \" + getFileNames() + \" \" + serverRawResponse, null);\n        successful = true;\n        uploadFinished();\n      }\n    } else if (Utils.getXml", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   logger.info(\"Merging assembly points\")\n    logger.info(\"Merging assembly points\")\n    logger.info(\"Merging assembly points\")\n    logger.info(\"Merging assembly points\")\n    logger.info(\"Merging assembly points\")\n    logger.info(\"Merging assembly points", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "       GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        PitotTubeResource,\n        \"/aircraft/sensors/pit", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "                       fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.isInstalled())\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tif (level.getInstalledTs() == 0) {\n\t\t\t\t\t\tif (level.getAddedTs() == 0", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private final WeeklyCaptionProvider<ITEM> weeklyCaptionProvider;\n\n    /**\n     * Defines the component's active time zone.\n     */\n    private final CalendarState<ITEM> calendarState;\n\n    /**\n     * Defines the component's", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n    }\n\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   VerifierProvider rsaLocator = (signerId, keyId) -> Lists.newArrayList(new RSAPublicKeyVerifier(keyId, hmacLocator));\n\n    locators = new VerifierProviders(rsaLocator, hmacLocator);\n", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n\n    protected int mItemViewLayoutId;\n    protected int mItemViewType;\n    protected int mItemViewTypeCount", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "               } catch (FilesNotFoundException e) {\n                    assertTrue(true);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    fail(e.getMessage());\n                }\n            }\n\t\t\t\n\t\t\t// Clean up\n\t\t", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                   trackHistoryEntry = new TrackHistoryEntry(liveInfo.getTitle(), currentTime, dao);\n                    dao.insert(trackHistoryEntry);\n                }\n            });\n        }\n    }\n\n    @Override\n    public void foundRadioStation(final DataRadioStation", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "   @NonConfigurationInstance\n    private DrawerLayout drawerLayout;\n\n    @SuppressLint(\"NewApi\")\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       ((CandyBarMainActivity) mContext).selectPosition(3);\r\n                        break;\r\n                    case WALLPAPERS:\r\n                        ((CandyBarMainActivity) mContext).selectPosition(4);\r\n                        break;\r\n                    case CATEGORY:\r", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = Default.ENCODING\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = None\n\n    convert_configs = load_convert_config(\n        logger, ctx.obj[Context.CONVERT_CONFIG], subcommand=\"url\"", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "   def _getPlaylistItemID(self, item):\n        \"\"\" Match an item to a playlist item and return the item playlistItemID. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item.", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(\n            TypeError,\n            _environment_to_string,\n            u\"a=b\\0c=d\\0\\0\",\n            u\"e=f\\0g=h\\0\\0\",\n            u\"i=j\\0", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   if gopts.interactive:\n      # If interactive mode is requested, we need to run the command\n      # in a pager.\n      pager = RunPager(cmd, gopts.interactive)\n      if pager.interactive:\n        # If the pager is", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // 执行任务延时设定。\n                if (taskData.getTaskDelay() > 0 && taskData.getQueueDate() != null) {\n                    long delaySleep = taskData.getTaskDelay()\n                            - (System.", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       self.assertEqual(r.reject_status_code, None)\n\n    @async_test()\n    async def test_reject_nothing_with_arguments(self):\n        r = RejectStatusCode(reject_status_code=404)\nNext", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //用户的性别\n        stuSex = split[2];\n        //用户的年龄\n        stuAge = split[3];\n        //用户的班级\n        stuClass = split[4];\n       ", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "       self.__device = device\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__export_path = export_path\n        self.__is_parse_filter_id = is", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "       except AttributeError:\n            pass\n        if inv:\n            state[\"inventory\"] = inv\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            loc = obj.location    ", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": " public Query visit(BasicSearchType n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = false;\n\t\tthis.surveyName = \"\";\n\t}\n\t\n\t/**\n\t * It validates all ENOParameters and it is based on the following function\n\t * @", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       try {\r\n\r\n            if (dataDir == null) {\r\n                dataDir = dataLogDir;\r\n            }\r\n\r\n            if (dataDir == null) {\r\n                dataDir = snapFile;\r\n            }\r\n\r\n            if (dataDir == null) {\r\n               ", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "       except UncertainTimeError:\n            log.error(\"We couldn't find a good estimate of the accuracy of your clock. Switzerland isn't going to work!\")\n            sys.exit(1)\n\n    def quit(self):\n        \"Shut down the AliceLink and Alice", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       // Test the basic content provider query\n        Cursor movieCursor = mContext.getContentResolver().query(\n                MovieColumns.CONTENT_URI,\n                null,\n                null,\n                null,\n                null\n        );\n\n        // Make sure we get the correct cursor out", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertEqual(etree_iter_strings(self.elem),\n                         etree_iter_strings(self.elem))\n        self.assertEqual(etree_iter_strings(self.elem),\n                         etree_iter_strings(self.elem, parent", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.activity_mapview);\r\n\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(true);\r\n\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "       return ConfigCommandProcessor(\nNext line of code:\n\n        return ConfigVlanCommandProcessor(\nNext line of code:\n\n        return ConfigVRFCommandProcessor(\nNext line of code:\n\n        return PipingProcessor(\nNext line of code:\n\n        return", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n\n  assert isinstance(config, NormalRateConfig", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       resposta = RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n        return resposta\n\n    def consultar_numero_sessao(self, numero_sessao):\n        \"\"\"Sobrepõe :m", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   # TODO: better reference state handling\n    mod_srf.models = {'ref': mod_srf.models['ref']}\n    # _MIX assumption\n    prop = output.split('_MIX')[0]\n    desired_props = (f\"{prop}_M", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   api.add_resource(FlightControlsResource, \"/fdm/flight_controls\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(AccelerationsResource, \"/fdm/accelerations\",\n                    ", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   def get_word_counts(self) -> Dict[str, float]:\n        \"\"\"\n        Calculate the relative word frequency across all the texts in the corpus\n\n        Returns\n        -------\n        dict[str, float]\n            Dictionary of words and their relative frequencies\n", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   private static final String EXTRA_CAMERA_FACING = \"cameraFacing\";\n    private static final String EXTRA_CAMERA_FACING_BACK = \"cameraFacingBack\";\n    private static final String EXTRA_CAMER", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\tpublic final StringUtil string = new StringUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static void main(String[]", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       return mongoManager.getServerConfigurations();\n    }\n\n    private void installActions() {\n        ActionGroup mongoActionGroup = new DefaultActionGroup();\n        mongoActionGroup.add(new MongoServerAction(this));\n        mongoActionGroup.add(new MongoDatabaseAction(", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1\n\t\tH1(null, \"TodoMVC\");\n\n\t\t// Input\n\t\tInput(null, \"Add Todo\");\n\n\t\t// Footer\n\t\tFooter(null, \"TodoMVC\");\n\n\t\t// List", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               if(output != null) {\n                    Intent intent = new Intent(Intent.ACTION_SEND);\n                    intent.setType(\"image/*\");\n                    intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new File(output.getAb", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "   @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n        mActivity = (MainActivity) activity;\n    }\n\n    @Override\n    public void onDetach() {\n        super.onDetach();\n        mActivity", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   search = Search(\n        engine=engine, model=model, index=index, key=key, filter=None,\n        projection=\"all\", consistent=True, forward=False)\n    search.mode = \"query\"\n    search.prepare()\n    search.iterate()\n", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n        possiblyRefresh();\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,int id,String gcActivityName", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "       }\n\n        # Setup the API\n        self.api.add_resource(RestApi, '/api/v' + str(self.version))\n\n        # Setup the API\n        self.api.add_resource(RestApi, '/api/v' + str(", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "       self._tree_view = tree_view\n        self._settings_ini = settings_ini\n        self._tree_view.setModel(self._df_manager)\n        self._tree_view.setRootIndex(self._df_manager.get_root_index())\n       ", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "   MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n    group.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"round trip packet", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final static Map<Channel, ITextComponent> CHANNELS = Maps.newHashMap();\n\n    private final static Map<Channel, ITextComponent> CHANNELS_PINGED = Maps.newHashMap();\n\n    private final static Map<Channel, I", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "       void onDateClick(Date date);\n    }\n\n    public VCalendar() {\n        init();\n    }\n\n    public VCalendar(int width, int height) {\n        init(width, height);\n    }\n\n    public VCalendar(int width, int height", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_db_type(self, db_type):\n        self._db_type = db_type\n        return self\n\n    def set_db_type(self, db_type):\n        self", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onPing(client);\n            break;\n        }\n\n        case CONNECT: {\n            client.getBaseClient().schedulePingTimeout();\n            Namespace namespace =", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ActionBarPullToRefresh repoContentPull;", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\n\t\treturn new GenerationService(pipeline.getInFormat(), pipeline.getOutFormat(), preprocessors, postprocessors, identityGenerator, ddi2xformsGenerator,", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   // Read projects from the CRM API.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        pipeline.apply(\"Read live data\", Read.from(new LiveProjectSource(org)));\n    // Convert the live states to GCPResourceState", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "   return MyModel\n\n\n@pytest.fixture\ndef model_with_backups(model):\n    \"\"\"Return a clean model with backups so each test can mutate the model's Meta\"\"\"\n    class MyModel(BaseModel):\n        class Meta:\n            back", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "               self._def_reader = MeanPoolCombiner(\n                    def_num_input_words, emb_def_dim, dim, vocab, lookup,\n                    standalone_def_rnn=standalone_def_rnn,\n                    cache=self._cache", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n        _id = SocketHelpers.getLocalAddress();\n        _relayHost = SocketHelpers.getLocalAddress();\n        _rxChatListenerSockets.clear();\n", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private static final int REQUEST_CODE_VIDEO_CAMERA = 1;\n    private static final int REQUEST_CODE_VIDEO_GALLERY = 2;\n    private static final int REQUEST_CODE_VIDEO_GALLERY_FROM", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n\n    RotateOut(RotateOut.class),\n    Rotate", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "       return self.render_to_response(self.get_context_data(form=form))\n\n    def get_form_class(self):\n        if self.request.user.perfil.zonas_permitidas.count() == 0:\n            return UserForm", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "   public static FogDescriptor convert(FogDescriptor descriptor, GameObject go, Map<String, Asset> assets) {\n        Fog fog = new Fog();\n        fog.setColor(descriptor.getColor());\n        fog.setDensity(descriptor.get", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void close()\n\t{\n\t\tif(this.handle == null) return;\n\t\tthis.handle.close();\n\t\tthis.handle = null;\n\t\tall_open_handles.remove(this);\n\t}\n\t\n\tpublic void writeFloat", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plus(ActorDetailsModule actorDetailsModule);\n}\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tfinal Map<BenchmarkMethod, Integer> vals = benchmark\n\t\t\t\t\t.getNumberOfMethodsAndRuns();\n\t\t\treturn view.initProgressView(vals);\n\t\t} catch (final SocketViewException e) {\n\t\t\tthrow new", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   def get_queryset(self):\n        \"\"\"\n        Get Queryset\n        :return: queryset\n        \"\"\"\n        if not self.pk:\n            return self.get_queryset_from_cache()\n        return self.get_queryset_from_cache()\n", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Building the most suitable endpoint.\");\n\t\t\tEndpoint endpoint = getMoreSuitableEndpoint(\n\t\t\t\t\tendpointType, serviceDiscoveryInfo.getKeyService());\n\t\t\tlogManager", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue creada con éx", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self._cstr = self.ast\n    else:\n      self._cstr = self.ast.root\n\n  def __repr__(self):\n    return 'Constraint(%s)' % self.tree\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " private ActionSupportHandler<MessageAction>     messageActionSupportHandler     = new ActionSupportHandler<MessageAction>(MessageAction.class);\n  private ActionSupportHandler<RedirectAction>    redirectActionSupportHandler    = new ActionSupportHandler<RedirectAction>(RedirectAction.class);\n  private ActionSupport", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [1023])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [123456", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   if result is None:\n        raise self.error('FODF1310')\n    else:\n        return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('xs:double?', 'xs:string", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item is None:\n\t\t\t\treturn default_flags\n\t\t\telse:\n\t\t\t\treturn Qt.ItemIsSelectable | Qt.ItemIsEnabled\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       object1.array = array\n        object2.array = array\n        object3.array = array\n\n        response = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        response = Hydrator(version", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "       //TODO: C,  for multi test we really need to have it writing to multiple ring buffers.\n        //TODO: C,  for multi test we really need to have it writing to multiple ring buffers.\n        //TODO: C,  for multi test we really need", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UN", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "       containsString(\"\\\"_source\\\" : {\"));\n    }\n\n    @Test\n    public void storeWithId() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRecordsResponse(Resources.asByteSource(Resources.getResource(\"responses/d", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "           (True, PubKeyAlgorithm.FormerlyElGamalEncrypt): ElGPub,\n            (True, PubKeyAlgorithm.FormerlyElGamalSign): ElGPub,\n            (True, PubKeyAlgorithm.FormerlyElGamalEnc", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\n\t", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = Schema.get(\n                            new ExtMap().mput(Schema.InvokeKeys.ENTITY, context.get(Schema.InvokeKeys.ENTITY))\n                            .mput(Schema.InvokeKeys.ENTITY_KEYS, context.get(Schema.Invoke", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/list/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new-user'),\n    url(r'^users/(?P<user_id>[-\\w]+)/edit", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           if (stack.getNumberOfCards() > 100) {\n                                stack.removeCard(stack.getCard(0));\n                            }\n                            stack.addPlaySession(dialogFragment.getPlaySession());\n                            stack.addPlaySession(dialog", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_mentality_health);\n        initView();\n        initData();\n        initListener();\n    }\n\n    private void initView", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateBuffImg()\n        obj.updateBlockLabel()\n        obj.updateBlockWidget()\n        obj.updateComment()\n        obj.updateSocketTags()\n        obj.updateSocketLabels()\n        obj.updateSocketTags()\n        obj.updateSocketTags()", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "       d1 = Constant(d1, DP_WIDTH)\n        d2 = Constant(d2, DP_WIDTH)\n        d3 = Constant(d3, DP_WIDTH)\n\n        d1 = Constant(d1, DP_WIDTH)\n        d2", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformContext(Context node, Node newStart, Node newEnd);\n\t}\n\t\n\tprivate static class FlattenTransformer implements NodeTransformer {\n\t\tpublic Node transformConstant(ConstantNode node) {\n\t\t\treturn node;\n\t\t}", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\t// Add the commands\n\t\tcommands.add(new CommandList());\n\t\tcommands.add(new CommandSetFrom());\n\t\tcommands.add(new CommandSetTo());\n\t\tcommands.add(new CommandOpen());\n\t\tcommands.add(new CommandClose());\n", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       String data = doc.getText();\n        if (data == null) {\n            throw new IOException(\"Challenge packet was null\");\n        }\n        if (data.length() == 0) {\n            throw new IOException(\"Challenge packet was empty\");\n        }\n        if (", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\nclass TestChaskey(unittest.TestCase):\n    \"\"\"Test Chaskey.\"\"\"\n    def setUp(self):\n        self.smart_print = _get_smart_print(self)\n        self.smart_print.set_verbose_level", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private SongListAdapter mAdapter;\n\n    private Toolbar mToolbar;\n\n    private FastScroller mFastScroller;\n\n    private boolean mShowToolbar;\n\n    private boolean mShowFastScroller;\n\n    private boolean mShowPlaylistPicker;", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           if (mImmersiveSensorNavigation != null) {\n                mImmersiveSensorNavigation.deactivate();\n                mImmersiveSensorNavigation.detach();\n                mImmersiveSensorNavigation = null;\n            }\n            if (mImmersive", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       Bit('ESM_Cause', ReprName='ESM Cause', Pt=4, BitLen=4,\n            Dict=ESMCause_dict, Repr='hum'),\n        Bit('ESM_Transaction_ID', ReprName='ESM Transaction ID", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           mSongListAdapter.notifyDataSetChanged();\n        }\n    };\n\n    private PlaylistPicker mPlaylistPicker;\n\n    private Playlist mPlaylist;\n\n    private boolean mPlaylistLoaded = false;\n\n    private LoaderManager.LoaderCallbacks<List", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "       self.log_debug(f\"Parsed {self.num_files} files in {time.process_time() - begin_time} seconds\")\n        self.log_info(\n            f\"Parsed {self.num_files} files in {time.process_", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addRemittUser(UserDTO user) {\n\t\tString userName = getCurrentUserName();\n\t\tif (userName == null) {\n\t\t\tlog.error(\"userName is null\");\n\t\t\treturn false;\n\t\t}\n\t\tUser", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   /**\n     * Returns information about the API plan belonging to the given API key.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-info\")\n    Observable<ApiInfo> apiInfo(@Query(Constants.KEY) String apiKey);\n", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   @Override public void visit(LogMessage logMessage) {\n      if (logMessage.isVmOption()) {\n        vmOptionsBuilder.put(logMessage.getKey(), logMessage.getValue());\n      } else if (logMessage.isVmProperty()) {\n        vmProperties", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   \"\"\"\n    Testing the ERB function, using the Glasberg, Moore and Slaney\n    example.\n    \"\"\"\n    erb_freq = freq * bandwidth\n    erb_freq = erb_freq.take(1)\n    erb_", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "   if is_undefined_length:\n        # Read the bytes and convert to a Sequence\n        seq = read_sequence_item(fp, is_implicit_VR, is_little_endian,\n                                  encoding, offset)\n\n    return Sequence(seq", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   try {\n      for (ICommentProcessor commentProcessor : this.commentProcessors) {\n        if (commentProcessor != null) {\n          CoordinatesWalker walker = new BaseCoordinatesWalker(document) {\n            @Override\n            protected void onParagraph(Par", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   @Override\n    protected void loadDataFromNetwork() throws Exception {\n        if (searchCriteria.isEmpty()) {\n            return;\n        }\n        final Collection<SearchCriteria> searchCriteriaList = new LinkedList<SearchCriteria>();\n        for (final SearchCriteria criteria", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   @flags.register(NotationDataFlags)\n    def flags_int(self, val):\n        self._flags = NotationDataFlags(val)\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags =", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "       self.textArea.append(serverMsg)\n        self.textArea.scrollToBottom()\n        self.textInput.clear()\n        self.textInput.setFocus()\n\n    def addMessage(self, msg, isNew):\n        if not isNew:\n           ", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "def check_string(arg, type_, env):\n    arg = check(arg, env)\n    with env.errors.location(arg.location):\n        unify(arg.__type__, type_)\n    return arg\n\n\ndef check_number(arg, type_, env):", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   if not features:\n        features = {}\n    else:\n        features = OrderedDict(features)\n\n    # TODO: check if we have the right number of features\n    # TODO: check if we have the right number of features\n    # TODO: check if we have the right", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "   private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        if (isNull(fsmPlayer)) {\n            return;\n        }\n\n        if (", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 ||", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,\n                                       @Query(\"tag\") String tag,\n                                       @Query(\"limit\") @IntRange(from = 1, to = 50) Integer limit);\n\n", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       # noinspection PyUnresolvedReferences\n        \"\"\"Create a :class:`~bloop.stream.Stream` that provides approximate chronological ordering.\n\n        .. code-block:: pycon\n\n            # Create a user so we have a record\n            >>> engine = Engine()\n", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "       self.log.info(\"confusion matrix:\")\n        self.log.info(confusion_matrix)\n\n        self.log.info(\"accuracy: %2.2f%% (UAR %2.2f%%)\" % (100 * accuracy, 1", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\t@Autowired\n\tprivate SubmissionServices submissionServices;\n\t@Autowired\n\tprivate ChallengeServices challengeServices;\n\t@Autowired\n\tprivate CategoryServices categoryServices;\n\t@Autowired\n\tprivate CountryServices countryServices;\n\t@Autowired\n\tprivate BannedIp", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def __init__(self, graph, **kwargs):\n        self.graph = graph\n        self.client = graph.client\n        self.strict = kwargs.get('strict', True)\n        self.batch = kwargs.get('batch', None)\n        self.", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "   @scoped_subgraph\n    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the windowed frequency vectors as input, and is initialized with zero initial states.\n\n       ", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.slug)\n\nall_product_slugs = []\nNext line of code:\n\nfor product in Product.objects.all():\n    all_product_slugs.append(product.", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorSegmentNode", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frame frame(Attribute... attributes) {\n\t\treturn new Frame(attributes);\n\t}\n\n\tpublic static Frame frame(Attribute... attributes) {\n\t\treturn new Frame(attributes);\n\t}\n\n\tpublic static Frame frame(Attribute... attributes) {\n\t\t", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final AbstractTabularComponent.Alignment alignment = benchRes.getAlignment();\n        final AbstractTabularComponent.Alignment[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     for node in self._graph.nodes:\n        if node.kind == ControlFlow.N_LOOP:\n          loop = node\n          break\n\n      if loop is None:\n        continue\n\n      if not has_true_false_branches(self._graph.edges", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t\t\t\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "   def _get_serialization_params(self, context: XPathSchemaContext) -> dict:\n        \"\"\"\n        Get the serialization parameters from the context.\n\n        :param context: the context.\n        :return: the serialization parameters.\n        \"\"\"\n        serialization_", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   else if (Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type)) {\n                        Log.e(LOG_TAG, \"Updating room member.\");\n                        RoomState roomState = JsonUtils.toRoomState(event.content", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\t// PostProcessing\n\t\n\tprivate NoopPostprocessor noopPostprocessor = new NoopPostprocessor();\n\t\n", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "   DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationEtatsPresenceMensuel(self, _):\n        site = self.GetSelectedSite()\n        DocumentDialog(self, EtatsPres", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "           H += dot(crossmat(c - p), m * J_rot) + dot(I, H_rot)\n            H += dot(crossmat(c - p), m * J_rot) + dot(I, H_rot)\n            H += dot(crossmat(", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       if (queuedProjectResult == null) {\n            return;\n        }\n\n        if (queuedProjectResult.getQueuedProject() == null) {\n            return;\n        }\n\n        final QueuedProject queuedProject = queuedProjectResult.getQueuedProject", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "               new MigrateCommand(),\n                new RefreshCommand(),\n                new VirtualAddCommand(),\n                new VirtualRemoveCommand(),\n                new VirtualSetCommand(),\n                new VirtualPayCommand(),\n                new VirtualPayCommand(),\n                new VirtualPayCommand(),\n                new VirtualPayCommand(),\n", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "       priors = {}\n        for symbol in symbols:\n            if symbol in prior:\n                _log.info('Initializing a %s prior for the parameters.', prior['name'])\n            else:\n                _log.info('Initializing a %s prior for the parameters.', prior", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Expr.fromKind(Expr.CONSTANT, arg)\n    elif op == LOAD_NAME:\n      return Expr.fromKind(Expr.REFERENCE, arg)\n    elif op == LOAD_ATTR:\n      return Expr.fromKind(", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final SpriteBatch batch;\n\tprivate final Physics physics;\n\tprivate final FringeLayer fringe;\n\tprivate final PingPongEq eq;\n\n\tprivate final List<ClientPacket> packets = new ArrayList<>();\n\tprivate final List<ClientPacket> packetsTo", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tview", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> authorWithBooks() {\n\t\tList<Long> list = new ArrayList<>();\n\t\tAtomicInteger aInteger = new AtomicInteger();\n\t\tjdbcTemplate.query(\"SELECT AUTHOR.ID, AUTHOR.NAME, BOOK", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass, SQLQuery rootQuery) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t\tthis.rootQuery = rootQuery;\n\t}\nNext line of code:\n\n\tpublic SQLBatch(", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       # 获取当前运行的 app 的包名\n        packagename = app_info['packagename']\n        mainactivity = app_info['mainactivity']\n        if mainactivity.startswith('.'):\n            mainactivity = packagename + mainactivity\n", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "   /**\n     * Parse the specified input stream and return genotypes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genotypes\n     */\n    List<Genotype> parseGenotypes(InputStream", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n            ]),\n            Symbol.typed(IntType, 'baz'),\n        ]),\n        {'inc': inc_type},\n    )\n\n\ndef test_get():\n    inc_type = Func[[Int", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, prepared());\n        assertThat(pe, preparedOrBatchPrepared());\n        assertThat(pe", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\tdef on_kp_selection_changed_in_table(self, selection):\n\t\tif len(selection) == 1:\n\t\t\tif type(selection[0]) is KeyPoint:\n\t\t\t\tself._viewWidget.sketch_view.selected_key", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new ApiIncorrectException(cause);\n                    }\n                }\n                return cause;\n            }\n        };\n        _config = config;\n    }\n\n    /**\n     *", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(String.class, new DefaultStringRenderer());\r\n\t\tregisterRenderer(Locale.class, new DefaultLocaleRenderer());\r\n\t\tregisterRenderer(Locale.class, new Default", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_LOWER_CASE, defaultCapitalize)) {\n\t\t", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<package_name>[\\w\\-\\+]+)/(?P<release_slug>[\\w\\-\\+]+)/(?P<ci_pipeline_uuid>[\\w\\-\\+]+)$',\n        PipelineDetailView.as_view(), name", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                            intent.putExtra(Extras.EXTRA_BITMAP, bitmap);\r\n                        }\r\n\r\n                        if (Build.VERSION.SDK_INT >= Build", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   url = urlunparse(('http', 'vimeo.com', 'me', None, None, None))\n\n    try:\n        person = account_for_vimeo_id(access_token)\n    except ValueError, exc:\n        raise ValueError(\"U", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                #   (use a test pixel sum)\n                #   (use a test pixel sum)\n                #   (use a test pixel sum)\n                #   (use a test pixel sum)\n               ", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   # Generate grid of values for parameters (force to be equal length)\n    grid = _gen_grid(options['param_ests'], options['density'])\n\n    # Generate grid of values for parameters (force to be equal length)\n    grid = _gen_grid(options", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollDices();\n            Board.this.dices.enable(0);\n            Board.this.dices.enable(1);\n            Board.this.dices.enable(2);\n            Board.this.dices.enable(3);\n            Board", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "       self.assertEqual(etree_iter_paths(root, '/'),\n                         [('a', 'b1', 'c1', 'c2', 'b1', 'b2', 'b3', 'c3')])\n        self.assertEqual(etree_iter", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "   def test_do_not_reject_outside_specified_ranges(self):\n        self.rule.add(ContentHashSampling(400, 410))\n        self.rule.add(ContentHashSampling(500, 70", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n           ", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "   List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a relative.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a relative\n     */\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           // 5. Get the Signature Response\n            final EtsiResponse resp = this.client.sendRequest(req);\n            \n            // 6. Get SignatureProfile\n            final ProfileQueryResponse profileQueryResponse = this.getProfileQueryResponse(resp);\n            final String profileQuery", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Feature:\n\t\t\treturn get_icon(\"feature\")\n\t\telif type(obj) is Proformer:\n\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<PlayerOverview> playerOverview;\n\tprivate List<Game> game;\n\tprivate List<TeamLeaders> teamLeaders;\n\tprivate List<TeamLeadersResponse> teamLeadersResponse;\n\tprivate List<TeamScheduleResponse> team", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       AppliverySdk.Logger.log(\"Send feedback\");\n        AppliverySdk.Logger.log(\"Package name: \" + packageInfo.packageName);\n        AppliverySdk.Logger.log(\"Version code: \" + packageInfo.versionCode);\n        AppliverySdk.", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           if key not in self.session.scan_index(table_name):\n                raise MissingKey(\n                    \"{} doesn't have a key column\".format(obj.__class__.__name__)\n                )\n            table_index[obj.__class__.__name__]", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               draw_art(key['fingerprint'], key['description'], key['created_at'])\n            else:\n                print('{0} {1}'.format(fingerprint, description))\n                print('{0}'.format(created_at))\n\n    async def generate", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "       return RespostaExtrairLogs.analisar(retorno)\n\n    def consultar_ultima_sessao_fiscal(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consult", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), 'http://www.w3.org/XML/1998/namespace')\n        self.assertEqual(node_document_uri(document), 'http://www.w3.org", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:Next line of code:\n\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n               ", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   def _trainer_initialization(self) -> None:\n        \"\"\"Initialize training\"\"\"\n        self.logger.info(f\"Initializing training for {self.identifier}...\")\n        if self.subset and self.subset >= len(self.worker.utterances):\n", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final Builder builder;\n\n    private final SessionData sessionData;\n\n    private final String scope;\n\n    private final String redirectURI;\n\n    private final String identifier;\n\n    private final String state;\n\n    private final String guildId;\n\n    private", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Tasks tasks;\n    private final Vms vms;\n    private final Errands errands;\n    private final Jobs jobs;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "   public void setAudiologistInfo(AudiologistInfo audiologistInfo)\n    {\n        synchronized (_lockObject)\n        {\n            if (_state.getConnectionState() != FittingConnectionState.NOT_CONNECTED)\n            {\n                throw new IllegalState", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand( getLogger() );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand( getLogger() );\n    }\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        super.drawComponent(mouseX, mouseY);\n        if (this.isHovered()) {\n            this.drawCenteredString(this.getFontRenderer(), this.getText(), this", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       DATA[looptest], EPSILON, FiniteDifferenceSchemes.BACKWARD);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new blackCall(), Next line", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class,\n            AthenaGM.class\n    };\n\n\n    /**\n     * List of modules to load\n     */\n    private static HashMap<String, Module> modules = new HashMap<String, Module>();\n\n\n    /**\n     * Load modules\n    ", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    * @see #newDownloadQueue(int)\n     */\n    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize the number of", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " @Override\n  public void init(MutableConfig config) {\n    var moduleFinder = ModuleFinder.of(config.get(\"module\"));\n    var module = moduleFinder.findModule(config.get(\"module\"));\n    var packager = module.getExports().get", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    * @throws JMingoParserException {@link JMingoParserException}\n     */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {\n        Validate.notNull(element, \"parseQuerySetConfigTag::element cannot be null", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "   self.robot.ik.add(self.robot.left_foot.name, left_foot_task)\n\n    if self.cur_stance.right_foot is not None:\n        right_foot_task = ContactTask(\n            self.robot, self", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\ndef test_simple_op():\n    for op in simple_op:\n        for x in range(MIN_SIZE, MAX_SIZE):\n            for y in range(MIN_SIZE, MAX_SIZE):\n                if isinstance(x, core.Constant) and isinstance(", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP14Segment(aJPEG.mICCProfile).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew APP0Segment(aJPEG).encode(aOutput).log(aLog);\n\n\t", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           if (type == HibiscusExportType.SAMMEL) {\n                if (prenotIds.isEmpty()) {\n                    logger.log(Level.INFO, \"Keine Prenotifications erzeugt\");\n                } else if (prenotIds.size", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "\ndef generate_pronunciations_arguments(\n    log_path: str,\n    dictionaries: List[str],\n    text_int_paths: Dict[str, str],\n    word_boundary_paths: Dict[str, str],\n    ali_paths", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       ItemStack itemStack = new ItemStack(ItemLorePage.class, 1);\n        ItemLorePage.setLore(itemStack, LoreKey.fromLore(LoreLoader.getLore(category, ident)));\n\n        entityPlayer.addItemStackTo", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private static final DateTimeFormatter USER_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\nNext line of code:\n\n    private static final DateTimeFormatter CATEGORY_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\nNext line of", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\n\n\tprivate static final String[] EMPTY_STRING_ARRAY = new String[0];\n\n\tprivate static final String[] EMPTY_STRING_ARRAY_2 = new String[0];\n", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInY", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if issubclass(bvf_cipher, Cipher):\n        problem = SearchRkCh(bvf_cipher, der_mode=der_mode,\n                             search_", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "       return H()\n\n    def test_get_hosts(self):\n        \"\"\"\n        Test that we can get the hosts from the container.\n        \"\"\"\n        container = HostsContainer(get_hosts=self.get_hosts)\n        assert container.get_hosts() == [", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           if command.startswith(\"tc\"):\n                return True\n\n        return run_command_helper(\n            self.get_tc_command,\n            self.get_tc_device(),\n            tc_command_filter,\n        )\n\n    def get_tc_", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    * @return a List of Expenses\n     */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private CalendarController<MonthCalendarConfiguration, Calendar> monthController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> monthController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> monthController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> monthController;\n\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(30) == [0] * 30\n\n  def test_inf_input(self):\n    my_stream = white_noise", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               isinstance(t2, VarArgsMeta)\n            ):\n                t1.__instance__ = VarArgs[t1.__instance__]\n                unify(t1, t2, backref)\n            else:\n                raise\n\n    elif isinstance(t1, VarNamed", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       self.account_id,\n        self.client_id,\n        self.token,\n        self.host,\n        self.region_id,\n        self.client_verification_required,\n        self.available,\n        self.api_version,\n        self.", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\tdef create_model_item(self, parent_item, data):\n\t\tif data is None:\n\t\t\treturn None\n\t\tif isinstance(data, Document):\n\t\t\treturn DocumentModelItem(data, self, parent_item)\n\t\telif isinstance", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     self._log.error('Serialization failed: %s' % ex)\n      sink_stack.AsyncProcessResponseMessage(MethodReturnMessage(error=ex))\n      return\n\n    self._varz.message_bytes_sent()\n    sink_stack.AsyncProcessResponseStream(", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       assertThat(out.toString(), equalTo(\"\"));\n        assertThat(exitValue, equalTo(0));\n        assertThat(process.JMX_CONNECTION, not(nullValue()));\n        assertThat(process.JMX_CONNECTION.get(), not(", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data, DataStoreOperation.APPEND_UPDATE);\n    }\n\n    private static DrumStoreEntry<String, String> createNewData(String auxiliaryData, DrumOperation op, String... val) {\n        InMemoryEntry<String,", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaPropertiesMockBuilder()\n                .withBusiness(new BusinessStrategyMockBuilder()\n                        .withResponseStrategy(new ResponseStrategyMockBuilder()\n                                .withResponseStrategy(ResponseStrategy.RESPONSE_STRATEGY_NAME)\n                                .", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._SendMessage(self._ping_msg)\n\n  def _HandlePingMessage(self, msg):\n    \"\"\"Handles a Tping message.\"\"\"\n    self._log.debug('Received ping message.')\n    if msg.msg_type == MessageType.Tping", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert freq2lag(v) == lag2freq(v)\n\n\nclass TestCached(object):\n  def test_cached_is_cached(self):\n    f = cached(lambda x: x*2)\n    assert f(1) == ", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "   @commands.Cog.listener()\n    async def on_guild_join(self, guild):\n        self.by_guild[guild.id] = dict()\n        self.by_guild[guild.id][\"city\"] = await self.util", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   if operands[0] == operands[1]:\n        return True\n    elif operands[0] == operands[1].get_atomized_operand(context=copy(context)):\n        return True\n    elif operands[1] == operands[0].get", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(mCallbacks.getWelcomeMessage());\n\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEvents.add(new Event(R.drawable.ic_launcher_foreground, \"", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Create chat activity\n            InviteToChatFragment fragment = (InviteToChatFragment) classToNotify.newInstance();\n            fragment.setChatId(newChatId);\n            fragment.setChatPartners(selectedUsers);\n            fragment.setCh", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n\n        Assert.assertNotNull(response);\n        Assert.assertTrue(response.isSuccess());\n        Assert.assertNotNull(response.getResultCode());\n        Assert.assertTrue(response.get", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       List<Parameter> parameters = new ArrayList<>();\n        parameters.add(new Parameter(STRING, STRING_PARAMETER_NAME_01, RANDOM_STRING_PARAMETER_VALUE_01));\n        parameters.add(new Parameter(STRING, STRING_PARAME", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "   public int readSmallIntValue(int d1) throws IOException {\n\t\tint d2 = in.read2();\n\t\tint tag = d2 & 0x07;\n\t\tif (tag == CODEINT4_TAG)\n\t\t\treturn readSm", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "       self.quota = quota.Quotas(self)\n        self.quota_usages = quota.QuotaUsages(self)\n        self.quotas = quota.Quotas(self)\n        self.quotas_usages = quota.", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "       )\n\n        for parser_class in parser_class_list:\n            if typepy.is_null_string(ping_lines[0]):\n                logger.debug(\"ping_lines[0] is empty\")\n\n                return PingStats()\n\n            try:\n", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "           if (Integer.parseInt(m.videoSetFrameRate.getText()) < 1)// set minimum\r\n            // to 1\r\n            {\r\n                JOptionPane.showMessageDialog(null, \"Frame rate must be greater than 1\");\r\n                return;\r\n            }\r\n", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self._probe = _probe_adjacency_list(probe)\n        else:\n            self._probe = None\n        self._probe_adjacency_list = self._probe\n        self._probe_adjacency_list_channels =", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "     self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def compute_conditions(self):\n    \"\"\"\n      Computes the conditions associated with each ``N_CONDITION`` node\n      in the CFG. This is lazily computed", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       IntentIntegrator integrator = new IntentIntegrator(getActivity());\n        integrator.initiateScan();\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": " public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    if ((inExp.getValue() == null)\n        || (inExp.getValue() instanceof Nullable)\n        && ((Nullable) inExp.getValue()).", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile baseFile = new File(basePath + \"/base.xml\");\n\t\t\tFile targetFile = new File(basePath + \"/target.xml\");\n\t\t\t\n\t\t\tAssertions.assertTrue(baseFile.exists());\n\t\t\tAssertions.assert", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "       self.assertEqual(\n            np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n            np.array([0, 1, 2, 3, 4, 5,", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptString(final StringTag tag, final CharSequence value) {\n\t\tif (value == null) {\n\t\t\tthrow new InvalidValueException(tag, \"null\");\n\t\t}\n\t\tif (value.length() == 0) {\n\t\t\t", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "   def test_determine_date_of_birth(self):\n        self.assertEqual(\"2016-09-14\", determine_date_of_birth(dob_input=\"2016-09-14\", language=\"English\"))\n", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfTheSystem();\n                                   ", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "# P1RestOctets\nclass P1RestOctets(RestOctets):\n    # name for padding at the end\n    rest_name = 'P1_Rest_padding'\n    # GSM padding: 0x2b (for CSN1)\n    L = [", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "       # Make sure we're looking at models\n        validate_not_abstract(model)\n\n        # noinspection PyUnresolvedReferences\n        table_name = self._compute_table_name(model)\n        table_name = self._compute_table_name(model", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "       return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def consultar_ultima_sessao_fiscal(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.Funco", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   engine.bind(User)\n\n\ndef test_bind_model_with_no_hash_key(engine):\n    \"\"\"Can't bind models that don't have a hash_key\"\"\"\nNext line of code:\n\n    engine.bind(User, hash_key", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"m**2/s**2\")\n    assert u7.dimensions == mass\n    assert u7.", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "                'root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"',\n                 'root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"',\n                 'root/cimv2:TST_Person.name=", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load modules\n        List<Module> modules = new ArrayList<>();\n        modules.add(new SqlModule(configManager));\n        modules.add(new LoanModule(configManager));\n        modules.add(new CurrencyRegistryModule(currencyManager));\n        modules.add(new", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       if name is None:\n            return self.get_tag(-1, name)\n        else:\n            return self.get_tag(index, name)\n\n    def get_tag_count(self, name=None):\n        \"\"\"Retrieve the number of tags of a", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void showNewAccountDialog() {\n                        showNewAccountDialog(new AccountEditController(this));\n                    }\n\n                    @Override\n                    public void showNewOrderDialog(Account account) {\n                        showNewOrderDialog(new Order", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], ", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.age[3]\n    value = 3\n    expected_ref = \":v0[3]\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0[3]\": expected_action.value}", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           Alert alert = new Alert(AlertType.ERROR, \"Error requesting daemon:\\n\" + e.getDump().getStacktrace(), ButtonType.OK);\r\n            alert.showAndWait();\r\n            return false;\r\n        }\r\n        \r\n        if (result.getError", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "       if request.user == post.user:\n            comments = Comment.objects.filter(post=post).filter(deleted=False)\n            comments_count = comments.count()\n            if comments_count == 0:\n                messages.error(request, 'You have not commented", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of gifs to use in gif searching.\n     * Clicking on these gifs can perform searches with the gif itself as the", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionWpsListener).ifPresent(ConnectionWpsListener::isSuccessful);\n            of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::error);\n            of(mConnectionStateListener).ifPresent(ConnectionStateListener::onDisconnect);\n           ", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == ", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "       for (PlaySession playSession : stack.getPlaySessionList()) {\n            playSession.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card :", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "   def __init__(self, args: SegmentVadArguments):\n        self.vad_path = args.vad_path\n        self.segmentation_options = args.segmentation_options\n\n    def run(self):\n        \"\"\"Run the function\"\"\"\n\n       ", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Vms vms;\n    private final Deployments deployments;\n    private final Tasks tasks;\n    private final SpringInfo springInfo;\n    private final SpringReleases springReleases;\n    private final SpringDeployments springDeployments;\n    private final Spring", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag))\n        if tag.updated:\n            return tag\n        return None\n\n    def set_tag(self, index, name, data, datalen, type=None):\n       ", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "               section.end_of_message\n            )\n        else:\n            bufr_message.length.value = nbytes_write\n\n        # If the message is not serialized, the length is not written\n        if not self.serialized_bits:\n            return bufr_", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = ReportAbuseForm(request.POST)\n\n        if form.is_valid():\n            moderator = request.user\n            site = get_current_site(request)\n\n            # Log moderation event\n            log_comment = '{}'.format(form.clean", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void output(final AbstractResult paramResult) {\n        final AbstractPerfidixMethodException[] myExceptions = paramResult.getExceptions();\n        if (myExceptions.length > 0", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       // Checking PhyML binary\n        if (!PhyMLv3AminoAcidRunEstimator.checkBinary())\n        {\n        \tfinalize(1);\n        }\n\n        // Checking PhyML binary\n        if (!PhyMLv3A", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(URL(\"http://localhost:8080/record.wav\"));\n\t\tNext line of code:\n\n\t\ttropo.hangup();\n\t\tNext line of code:\n\n\t\ttropo.stopRecording();\n", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "       listaDeRespostas.getPropriedades().getEstado() == \n                EstadoDaListaDeRespostas.SALVA) {\n            //Verificando se a resposta já existe na lista\n            Questao questao = questaoDao.carrega", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onReceive(byte[] response) {\n\t\t\t\tString json;\n\t\t\t\ttry {\n\t\t\t\t\tjson = new String(response,\"UTF-8\");\n\t\t\t\t\tProgramManager.getInstance().parseTrack(json);\n\t\t", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Mock\n    MediaModel artworkMedia;\n\n    @Mock\n    MediaModel subtitlesMedia;\n\n    @Mock\n    MediaSource movieSource;\n\n    @Mock\n    MediaSource adSource;\n\n    @Mock\n    MediaSource artworkSource;\n\n", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tstop() ;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error occurred while initializing the stage\", e);\n\t\t\tPlatform.exit() ;\n\t\t}\n\t\t\n", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String className = adapterName(type.getQualifiedName());\n    String superClassName = getApplicationSupertype(type);\n    String companionClassName = className + INJECT_ADAPTER_SUFFIX;\n\n    TypeElement companionType = processingEnv.getElementUtils().getTypeElement(", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        /**\r\n         * 打开/关闭通知栏通知\r\n         * @param enable 打开/关闭\r\n         */\r", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 1\n\n\ndef test_parameters_msgtype3():\n  '''\n  Zero", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   if is_comment_node(elem) and context.parent_map.get(elem) is None:\n        return f'/comment({context.position})'\n\n    if is_schema_node(elem):\n        return f'/schema-element({context.position})'", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\n    def get(self, key):\n        \"\"\"Returns the value of a column\"\"\"\n        return self.data", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               TypingMessage m = (TypingMessage)message;\n\n                if (_isTyping)\n                {\n                    addMessage(new ChatMessage(ChatMessageSource.AUDIOLOGIST, m));\n                }\n                else\n                {\n                    addMessage(", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tif opts.surfaceinputfolder:\n\t\t\tsave_temporary_files('mediation', modality_type = surface,\n\t\t\t\tall_vertex = all_vertex,\n\t\t\t\tnum_vertex_lh = num_vertex", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       ThreadDumpThread main = sut.thread(\"main\");\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n\n        ThreadDumpThread main = sut.thread(\"main\");\n        assertThat(main.getStatus(), equalTo(", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               // 获取时间\n                Calendar calendar = Calendar.getInstance();\n                // 获取当前时间\n                int year = calendar.get(Calendar.YEAR);\n                int month = calendar.get(Calendar.MONTH);\n                int day = calendar.get(Calendar", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n    private ViewPager mViewPager;\n    private Toolbar toolbar;\n    private TabLayout tabLayout;\n    private int mCurrentTab = 0;\n    private boolean isRootDown;\n    private boolean isChameleonNavbar;", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.sniffer = Sniffer.Sniffer(self)\n        self.tracerouter = Tracerouter.Tracerouter(self)\n        self.time = TimeManager.TimeManager(self)\n        self.pcaplogger = PcapLogger.Pcap", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       return RestfulModelCollection(Webhook, self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    @property\n    def outbox(self):\n        return Outbox(self)\n\n    @property\n    def _get_", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       // TODO(jontayler): move this to the search dialog fragment.\n        // We need to do this here because we need to know the\n        // search target name to get the search dialog fragment.\n        // We also need to do this here because we need to know\n        // the", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_error = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_ther", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('Identity', Pt=Identity(), Len=8, Repr='hum'),\r\n            ] if with_options else [])\r\n\r\n################\r\n# TS 24.008, section 9.2 #\r\n# Mobility Management    #\r", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       self.__class_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_tc_shaping_rule(self, device):\n        shaping_rule", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "       result, index = apply_fast_eq(left.values, right.values,\n                                         left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   def test_validaton_error_decorator_transforms_SwaggerMappingError():\n        fake_validator_map = mock.Mock(\n            spec=ValidatorMap,\n            query=mock.Mock(spec=SchemaValidator,\n                               schema=mock.Mock(spec=", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
