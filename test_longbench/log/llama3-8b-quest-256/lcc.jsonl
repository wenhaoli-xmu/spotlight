{"pred": "\t\t\t\tParticipant p = (Participant) m_Participants[i];\n\t\t\t\tfor ( int j = \t; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = (DuelPlayer) p.Players[j];\n\t\t\t\t\tfor ( int k = 0; k < m_Participants.Count", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, **data.copy())\n\t\t\tZ_.add_edge(e_v, e_v, **data.copy())\n\t\t\tZ_.add_edge(e_v, e_v, e_v, **data.copy())\n\t\t\tZ_.add_edge(e, e, e_v, **data.copy())\n", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        buff = a.read_frames(buffsize)\n        a.write_frames(buff, buff", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "    def status_tags(self, language):\n        return self.get_text_by_css(self._STATUS_TAGS)\n    def status_tags(self, language):\n        return self.get_text_by_css(self._STATUS_TAGS)\n    def status_tags(self, language):\n        return self.get_text_by_css(self._STATUS_TAGS)\n    def status_tags", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": " * @param in\n * @param out\n * @return\n * @throws IOException\n */\npublic static String writeWMCViewContext unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value);\nNext line of code:\n:\n *", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "        for a = _QuestionData()\n        for i in range(1, 4):\n            if not self.client_ops:\n            self.client_ops = yobot_interfaces.component_registry.get_component(\"client-operations\")\n        assert self.client_ops\n        for a = _QuestionData()\n        for i in range(1", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "            for (X509Certificate c : chain) {\n                s.println(\"  certificate: \" + c);\n                s.println(\"  subject: \" + c.getSubject(c.getSubjectX509Certificate\n                (c)));\n                s.println(\"  issuer: \" + c.getIssuerX509Certificate\n                (c", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "            sp = new JESpace (name, path);\n            spaceRegistrar.put (sp);\n        }\n        return sp;\n    }\n    public static void setSpace (LocalSpace<Object,SpaceListener> sl) {\n        this.sl = sl = new JESpace (name, path);\n    }\n    public void", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\tRedButton btnImp = new RedButton(Messages.get(this, \"imp\") {\n\t\t\t\t@Override\n\t\t\t\tprotected void onClick() {\n\t\t\t\t\t{\n\t\t\t\t\t//TODO: this is a bit of code that is not", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        request = SimpleXMLElement(xml, namespace=self.namespace, pretty=True)\n        request = SimpleXMLElement(xml, namespace=self.namespace, pretty=True)\n        request = SimpleXMLElement(xml, namespace=self.namespace, pretty=True)\n        request = SimpleXMLElement(xml, namespace=self.namespace, pretty=True)\n        request = SimpleXMLElement(xml, namespace", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "        mark = \"setRepeated('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def lock", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "            return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n        return result\n    def action_extract_archive(self, login, login, login, login,", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b.Union (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z, \"!ReferenceEquals1\");\n\t\t\tAssert.IsTrue (Same (a,", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "        return self.trust_managers.getAcceptedIssuers()\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        DomainInfo domainInfo = manager.getDomain(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    }\n    /**\n     * Prepares the forward for the domain admin page.\n     *\n     * @param mapping The action mapping\n     * @param domain The domain\n     * @return The forward", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "            self.__tmp_dir, 'datastream')\n        self.__datastream_fd = os.path.join(\nNext line of code:\n            self.__tmp_dir, 'datastream')\n        self.__datastream_transport, self.__datastream_protocol = await self.__event_loop.create_unix_connection(\n            self.__datastream_address", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, columnBool1));\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, columnBool2));\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, columnBool2));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        String[] argValues = new String[4];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n                argValues[i] = getVarValue(\n                   ", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED_DATA(new ConfigFile<String, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\t@Override\n\t\t\tpublic TimedData create(String string, ConfigurationSection conf)\n\t\t\t{\n\t\t\t\treturn new TimedData(string, conf);\n\t\t\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new IntegerFieldEditor(SHELL_LENGHT, \"Short rewind\",\n\t\t\t\t\t\tgetFieldEditorParent()));\n\t\t\t\taddField(new IntegerFieldEditor(SHELL_LENGHT, \"Long", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "                m_Owner.Caster.SendAsciiMessage(\"Invalid target\");\n            }\n            protected override void OnTargetCancel(Mobile from)\n            {\n                m_Owner.Caster.SendAsciiMessage(\"Target canceled\");\n            }\n        }\n        private class InternalTarget : Target\n        {\n            private ArchProtectionSpell m_Owner;\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "        for state = self._enable_transaction_accounting and self.transaction is None:\n            for state.expire_on_commit(self, self, states)\n        if self._isinstance(self._enable_transaction_accounting and self.transaction is not None):\n            for state.expire_on_commit(self, self, states)\n        if self", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed = new ArrayList<IField>(3);\n\t\t\t\tname2Field.put(name, named);\n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "    if self._tornado.web.addslash(self.application.settings.get(\"static_handler_class\", \"static_path\", \"static_url\")):\n    self.application.settings.get(\"static_path = self.application.settings.get(\"static_handler_class\", StaticFileHandler).make_static_url)\n    if include_host is None:\n        include_host =", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.Write (\"<div id=\\\"MultiView\");\n\t\t\tif (ID!= null)\n\t\t\t\twriter.Write (\" id=\\\"\");\n\t\t\twriter.Write (ID);\n\t\t\twriter.Write (\"\\\"\");\n\t\t\tif (if (EnableViewState)\n\t\t\t\twriter.Write (\" runat=\\\"server\\\">\");\n\t\t\twriter.Write (\"\\\">\");\n\t\t\tfor (int", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "    args = parser.parse_args()\n    print args\n    print args.user\n    print args.password\n    print args.user\n    print args.outpath\n    print args.coordfile\n    print args\n    print args\n    print args\n    print args\n    print args\n    print args\n    print", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                if (mod >= 146 && mod <= 150)\n                {\n                    if (i.SkillBonuses.GetSkillBonAttribute == 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitDispel);\n                    else if (i.SkillBonuses.GetSkill(0) == 0)\n                        return", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "        builds = platforms\n    else:\n        builds = android_builds(build, android_builds(builds))\n    # Determine which build to display\n    if mobile:\n        if 'android' in builds:\n            return jinja2.contextfunction\ndef download_firefox(ctx, build='release', small=False, small", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByProjectTypeIssueTypeAssignments(projectID, issueTypeID, issueTypeID, issueTypeID);\n\t\t} else {\n\t\t\tstateBeansList = StatusBL.loadAll();\n\t\t}\n\t\tif (stateBeans", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (MemberDeclarationSyntax member in memberList) {\n                if ( member is FunctionDeclarationSyntax ) {\n                    foreach (ArgumentSyntax argument in ( (FunctionDeclarationSyntax) member ).ParameterList.Parameters ) {\n                    if ( argument is ArgumentSyntax ) {\n                        if ( argument.Expression is ArgumentSyntax is FunctionCallExpressionSyntax", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        split_test = self._update_partition(self.split_test_usage_key, 0)\n        self._get_item_from_modulestore(self.usage_key, verify_is_draft=True)\n        self._get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True)\n        self.assertEqual(2, len(self.get_item_from", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            ArrayList metrics = new ArrayList();\n            for (int k = 0; k < tmp.Length; ++k) {\n                int[] metric = (int[])tmp[k];\n                int[] metric = (int[])tmp[k];\n                if (metric[1 == 1000))\n                    continue;\n                tmp[k", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null) continue;\n\t\t\t\t\t\tif (cgn.depth == -1) continue;\n\t\t\t\t\t\t// find the top-level cell that uses this cell\n\t\t\t\t\t\t// and find the top-level cell that is used by this cell\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "        task = new ListenableFutureTask<>(context, callable);\n        return task;\n      }\n    }\n    public void addListener(final FutureTaskListener<Bitmap> listener) {\n      Util.assertMainThread();\n      if (task!= null) {\n        task.addListener(listener, listener, new ListenableFutureTask.Listener<Bitmap", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n            }\n        });\n    }\n    }\n        });\n    }\n}\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "    prerequisite = NavigateToSibling('Details\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage\n    def resetter(self):\n        # Reset view and selection\n        tb.select(\"List View\")\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.onPose(timestamp, pose);\n\t\t}\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "                if (Enabled)\n                    ImageUrl = Page.ResolveClientUrl(EnabledImageURL);\n                else\n                    ImageUrl = Page.ResolveClientUrl(DisabledImageURL);\n            }\n            base.RenderControl(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tdamage = compound = compound.getCompound()\nNext line of code:\n:\n\t\t;\n\t}\n\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = compound\nNext line of code:\n:\n\t\t;\n\t\t}\n\t\t\n\t\tNBTTagList list = compound.getEnchantmentTagList", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "        return \"Effect: \" + super.toString(getSpecification().getSpecificationName()\n            + \" \" + getID() + \" \" + getProbability() + \" \" + getScopes());\n    }\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getXMLName() {\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'private',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().strftime('%Y-%m-%", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "                    interact(self._plot_line, x=widget_x, y=widget_y=widget_y, zmin=fixed(zmin), zmax=fixed(zmin))\n                else:\n                    interact(self._plot_line, x=x=x=x=x=x, y=y, zmin=fixed(zmin), zmax=f", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (ignored.Contains(path) && ignored.Contains(path))\n                {\n                    _logger.Trace(\"Ignoring path {0\", path);\n                    continue;\n                }\n                if (rootFolderService.IsRootFolderService.All().Any(x => x.Path == rootFolder))\n                {\n                    toScan.Add(path);\n                }\n            }\n", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K,? super I,? extends E> remappingFunction) {\n\t\treturn read(key, internalMap.compute(key, transform(remappingFunction)));\n\t}\n\t@Override\n\tpublic E merge(K key,", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == ", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tpublic sbyte Z\n\t\t{\n\t\t\tget { return m_Z; }\nNext line of code:\n\t\t\tset { m_Z = value; }\n\t\t}\n\t}\n}\n}\n}\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                    m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVoice][PARCELVOICE]: region \\\"{0}\\\": avatar \\\"{1}\\\": channel_uri: {1}\",\n                                      scene.RegionInfo.RegionName, avatarName, channelUri);\n                    parcelVoiceInfo = new LLSDParcelVoiceInfoResponse(avatarName, channel", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(textDateStart.Text==\"\"\n\t\t\t\t|| textDateStop.Text==\"\"\n\t\t\t\t|| textDatePaycheck.Text==\"\")\n\t\t\t{\nNext line of code:\n:\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriods.Add(PayPeriodCur);\n\t\t\tDialogResult=", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert the time to python datetimes\n        new_time_column_headings = []\n        for i, t in enumerate(column_headings['Time Av or Int period']:\n            matches = pattern.search(t)\n            hours = 0", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "    if authz.auth_is_anon_user(context):\n        return {'success = True\n        return {'success': False,'msg': _('User %s not authorized to create groups' % user}\n    else:\n        return {'success': True}\n    return {'success': True}\n    return {'success': True", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\t// setting outcome of the child node\n\t\t\t\toutcomes[parentIndex] = node.getChildren().get(label);\n\t\t\t\t// setting confidences\n\t\t\t\tconfidences[parentIndex] = Math.pow(confidences[parentIndex], 1d / depths[parentIndex]);\n\t\t\t\t* / depths[parentIndex] = depths[parentIndex", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        }\n        /// <summary>\n        <summary>\n        /// Performs a search for an array of searches for an array of translation units.\n        /// </summary>\n        /// </summary>\n        ///", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "            codePoint = (ch & 0x3FF) << 10;\nNext line of code:\n            ch = string.charAt(offset++);\n            codePoint |= ch = codePoint | (ch & 0x3FF);\n         }\nNext line of code:\n         return _range.contains(codePoint)? offset", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        if (studyFormName == null) {\n            return ValidationResults.SAMPLE_FOUND;\n        }\n        if (studyFormName == null) {\n            return ValidationResults.SAMPLE_FOUND;\n        }\n        if (studyFormName == null) {\n            return ValidationResults.SAMPLE_FOUND;\n        }\n        if (study", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError, \"The game has already started\");\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod!= ModData.Manifest.Id)\n\t\t\t\t{\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", \"ModError\", \"The game has already", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\treturn coll;\n\t}\n\tpublic static ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo[] toRefVoArrayToCatsReferralPendingEmergencyNonEDAdmissionListVoArray(ims.RefMan.vo.interfaces.IPendingAdmissionCollection voCollection)\n\t{\n\t\tCatsReferralPending", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    dialog = xbmcgui.Dialog()\n    localtxt1 = __language__(32006)+__", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        }\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "  plotName = pD[ 'plotName\n  del( pD[ 'plotName' ] )\n  #Get plotName\n  if not 'plotName' in pD:\n    return S_ERROR( \"Missing or invalid plot name!\" )\n  plotName = pD[ 'plotName'", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\t// SetRallyPointsForNewProductionBuildings(bot);\n\t\t}\n\t\tvoid SetRallyPointsForNewProductionBuildings(IBot bot)\n\t\t{\n\t\t\t{\n\t\t\t// SetRallyPointsForNewProductionBuildings(bot);\n\t'this' is added to active/inactive production delays", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        // Output Parameters\n        for (int i = 0; i < plan.parameters.length; ++i) {\n            StmtParameter catalogParam = catalogParam = catalogStmt.getParameters().add(String.valueOf(i));\n            catalogParam.setJavatype(plan.parameters[i].getValue());\n            catalogParam.setIndex(i);\n       ", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Anchor = \":\n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.Parity = (byte)parity;\n\t\t\tdcb.StopBits = (byte)bits;\n\t\t\tdcb.XonXoff = hs == Handshake.RequestToSend == true? 1 : 0;\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "        page = self.get_page(self.user.get_profile().get_url(), login_as=admin)\n        self.assertEquals(page.status_code, 200)\n        self.assertEquals(page.context['cobrand'], None)\n        self.assertEquals(page.context['for_user'], self.user'], self.user)\n        self.assertEquals(page.context['for_user'], self", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    parser.add_argument('-h', '--help', action='help')\n    args = parser.parse_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    unittest.main()\nif __name__ == '__main__:\n    main()\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tself[\"list\"].setList(self.newAPList)\n\t\t\tself.list = self.newAPList\n\t\t\tself.listLength = self.newAPList\n\t\t\tself.oldlist = self.newAPList\n\t\t\tself.newAPList = None\n\t\t\tself.newAPList = self.oldlist\n\t\t\tself.newAPList", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                return new Rectangle(0, 0, fontX + (n * 10, fontY + barHeight);\n            }\n        }\n        \n        /** Gets the barcode text.\n        * @return the barcode text\n        */    \n        public string Code {\n            get {\n                return code;\n            }\n            set", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return results = ArrayUtils.toPrimitive(results);\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\n   *    property2 = value1,value2", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "        y_points = np.arange(-90.0, 90.0, 2.0)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            (\"grid_longitude\", x_points.flatten()),\n            (\"grid_latitude\", y_points.flatten()),\n        ]\n        result", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            if (currPacket == null)\n            {\n                return;\n            }\n            Clipboard.SetTextToClipboard.SetText(currPacket.Frame.ToString());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\nNext line of code:\n:\n            if (curr", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "    print'red\n    print '\\033[0m'\n    return 0\n    elif color == 'yellow':\n        print '\\033[1;33;33;40m'\n        print 'yellow\n        print '\\033[0m'\n        return 0\n    else:\n        print 'not", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        }\n    }\n    public override string ToString()\n    {\n        return \"RefCountedSet(\" + _refSet + \")\";\n    }\n}\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            this.AutoScaleDimensions = System.Drawing.SizeF(96, 96);\n            this.AutoScaleMode = System.Drawing.Point(0, 0);\n            this.ClientSize = System.Drawing.Size = new System.Drawing.Size(0, 0);\n            this = System.Drawing.Font = new System.Drawing.Font(\"Microsoft Sans Serif\", 8. =", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "    def nullFunction( \n        self,\n        functionName, dll, \n        resultType=ctypes.c_int, argTypes=(),\n        doc = None, argNames = None, \n        extension = None,\n        deprecated = False,\n    ):\n        \"\"\"Create a function that returns a null pointer\"\"\"\n        if", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            final DataOutputStream out = new DataOutputStream(baos);\n            out.writeUint64(out, emptyStreams.size());\n            out.write(emptyStreams.toByteArray());\n            out.write(NID.kEnd);\n        }\n    }\n    private void writeFileEmptyStreams(final DataOutput header, final SevenZArchiveEntry entry) throws IOException {\n       ", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                    alphaLevel = rampUp = true;\n                    inRamp = true;\n                }\n                for (int i = 0; i < barsCount; i++)\n                {\n                    Area primitive = buildPrimitive();\n                    primitive.transform(toCircle);\n                    ticker[i].setArea = primitive;\n                }\n                repaint();\n               ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_and_should_not_allow_move_files_if_max_idletime_not_configured_and_not_paused()\n       ", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPokeBall);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n                }\n            }\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "        f.writelines(['F) 1\t\t\t", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 4);\n                    i &= 0xFF;\n                    break;\n                    break;\n                case 0x08:\n                    /* C */\n                    i = b & 0x03;\n", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        if self._course_key is None:\n            self._course_key = CourseKey.from_string(self._course_dict['org'], self._course_dict['number, run'])\n        return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in Studio.\n        \"\"\"\n        \"\"\"\n        \"\"\"\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber[0).equals(\"any\") {\n\t\t\tchance=100;\n\t\t}\n\t\tif(splitNumber[0).equals(\"any\") {\n\t\t\tchance=100;\n\t\t}\n\t\tif(splitNumber[0).equals(\"any) {\n\t\t\tchance=100;\n\t\t}\n\t", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "        try:\n            os.remove('%s/key.pem' % (config_directory)\n        except:\n            module.fail_json(\"Could not remove \" + key.pem\")\n        try:\n            os.remove('%s/ca.pem' % (config_directory)\n        except:\n            module.fail_json(\"Could not remove ca.pem\")\n        return", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.lblPrivacy.Location = new System.Drawing.Point(6, 33, 0, 13);\n            this.lblPrivacy.Name = new System.Drawing.Size(370, 26);\n            this.lblPrivacy.Size = \"lblPrivacy\";\n            this.lblPrivacy.TabIndex = 6;\n            this.lblPrivacy.Text = \"", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for plugruncount = 0\n        for plugname, plug in self.loaded_plugin in self.loaded_plugins:\n        for plugname, plug in self.loaded in self.loaded_plugins:\n        for plugname, plug in self.loaded_plugins:\n        for plugname, plug in self.loaded_plugins:\n        for plug", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "    getRoomFullName.produce = lambda s: s.getRoom().getFullName()\n    getRoomFullName.convert = Conversion.roomFullName\n    def getRoomBookingList(self):\n        \"\"\" Session List of all material \"\"\"\n    getBookingList.result = lambda s: s.getRoom().getBookingList()\n    getBookingList", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                            throw new MessageWriterException(e);\n                        }\n                        return true;\n                    }\n                };\n                };\n                result = new MessageImporter().importMessages(fileTextField.getText(), messageBrowser, messageWriter);\n            } else {\n                result = new MessageImporter().importMessages(fileTextField.getText(), messageBrowser);\n            }\n        } catch", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession.addStatusCallback(sessionStatusCallback);\n        if (currentSession.addStatusCallback(sessionStatusCallback);\n        if (currentSession.addStatusCallback(sessionStatusCallback);\n        if (currentSession.addStatusCallback(sessionStatusCallback);\n        if (currentSession.addStatusCallback(sessionStatusCallback);\n        if (current", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.chance;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.chance /= sum;\n\t}\n}\n", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                    'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test exporting as an xml object.\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "    if NorthernHemisphere == 1:\n        phi1 = phi1 + 90.0\n    else:\n        phi1 = -phi1 + 90.0\n    C = cos(phi1*_deg2rad)\n    A = (x / (C*k0))\n    Long = Long", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.save(commit=False)\n            report.report.user = request.user\n            report.save()\n            messages.success(request, \"Reported %s reported successfully!\" % user)\n            return HttpResponseRedirect(reverse('profile-user', args=[user.username]))\n", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "    implements(IProductActionMenu, IProductSeries,'series')\n    @property\n    label = 'Add series'\n    @property\n    def field_names(self):\n        return IProductSeries\n    @cachedproperty\n    def links(self):\n        links = ['edit','review-license', text, '", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstring strTypeName = form.GetType().FullName;\n\t\t\tforeach(KPFormCustomization kpfc in m_vForms)\n\t\t\t", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "                temp >>= MAXIMUM_NO_OF_DIGITS;\n            }\n        }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "                if flag = 'isa' and flag[0] is None:\n                    flag = constants.supported_tags['isa']\n                if flag[0] is None:\n                    new_regex = constants.supported_tags['isa']\n                else:\n                    new_regex = constants.supported_tags['isa']\n                new_positional_tags", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "class OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_OxygenSensorsPresent\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 0, 1)\n    ]\nclass OBD_PID1E(OBD_Packet):\n    name = \"PID", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\t", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(SwitchItem), 1073464, 1, 1044253);\n                this.ForceNonExceptional(index);\n                this.SetNeededExpansion(index", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        # If the context was preserved we have to pop it now and push it again\n        # on the next level.\n        if self.preserved:\n            if exc is None:\n                exc = sys.exc_info()[1]\n            self.app.do_teardown_appcontext(exc)\n            self.preserved = False\n           ", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "    response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name = response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name==topic_name)\n    return response\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getConsumedRelatedResourcesByResourceType(Collection<ResourceEntity> resourceEntities, ReleaseEntity, ReleaseEntity release) {\n        Set<ResourceGroup", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "        dx = (ray_trafo.range.meshgrid[1] - ray_trafo.range.meshgrid[2])\n    else:\n        rot_dir = _rotation_direction_in_detector(ray_trafo.geometry)\n        dx = (rot_dir[0] * ray_trafo.range.meshgrid[1] +\n              rot_dir[", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "            logger.log(u\"Proxified RE: \" + regx, logger.DEBUG)\n            if self.providerType == GenericProvider.TORRENT:\n            if self.providerType == GenericProvider.TORRENT:\n            if self.providerType == GenericProvider.TORRENT:\n            if self.providerType == Generic", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn unit.ToString (fmt);\n\t\t}\n\t}\n\t}\n}\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength does not match modulus for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\t// add the blocks\n\t\t\tbyte[] output = new byte[] block1", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tAssert.That(obj.Properties[0].Value[\"In this test\"].ToString(), Is.EqualTo(\"It should be an object or an array.\"));\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "                for (int w = 0; h < width; w++) {\n                    if (w < width - 1) {\n                        edges.add(T2(h + h + w + w, w));\n                    }\n                    if (h < height -  - 1) {\n                        edges.add(T2 + h", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    i1 = iso.get_default()\n    isoel = i1.get_isomod.get_emol = 1.0\n    isoel = i1._data[\"test-LE-2D-ana-18\"][\"area_um\"][\"deform\"][\"isoelastics\"]\n    isoel = i1 =", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        final String[] args = new String[0];\n        final String[] args = new String[] { \"filename\", \"namespace\" };\n        final String[] args = new String[] { \"filename\", \"namespace\" };\n        final String[] args = new String[] { \"filename\", \"namespace\" };\n        final", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                    u'ProductDescription': 'Windows',\n                    u'InstanceType': 'g2.2xlarge',\n                    u'SpotPrice': '0.105300',\n                    u'AvailabilityZone': 'us-east-1b'}]\n        assert isclose(0.104400, alert.lowest_spotprice", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Performs the installation.\n\t * \n\t * @return\n\t */\n\tprivate boolean performInstallation() {\n\t\tif (checkFilesConsistency()) {\n\t\t\treturn performInstallerLaunch();\n\t\t}\n\t\treturn false;\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.Dispose();\n\t\t\tOpenGL.Dispose();\n\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tSDL.SDL.SDL_GL_MakeCurrent(window.Window, IntPtr.Zero);\n\t\t\tSDL.SDL_GL_SetAttribute(SDL.SDL_GL_CONTEXT_RELEASE_BEHAVIOR, SDL.SDL_GL_CONTEXT_RELEASE_BEHAVIOR_RELEASE_BUFFER);\n", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.data_cov_mat_inverse\n    @property\n    @property\n    def x_model_error(self):\n        \"\"\"1D array of 1D array containing the model *x* uncertainties.\n        :rtype: numpy.ndarray\n        \"\"\"\n", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n     return new CmsLink(m_structureId, m_target, m_query, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * @see java.lang.Object", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                  adminUser = getEucalyptusAdmin();\n                  noCanonicalIdAccountIds.add(walrusBucket.getOwnerCanonicalId());\n                } else {\n                  // Add it to the map\n                }\n              } catch (AuthException e) { // In case the account is deleted, transfer the ownership to e", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "            add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        #endregion\n        #region IFolderSystem events\n    \t/// <summary>\n    \t/// Occurs when a folder added a new folder to the folder system.\n    \t/// </summary", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        final ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters();\n        final ValidationUtils validationUtils = mock(ValidationUtils.class);\n        doReturn(true).when(command).getValidationUtils();\n        doReturn(true).when(validationUtils).validateNameSize(eq(name), any(EngineContext.class));\n        do", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.BottomAttach = ((uint)(1));\n\t\t\tw10.BottomSpacing = ((uint) = ((uint)(6));\n\t\t\tw10.LeftAttach = ((uint)(uint)(3);\n\t\t\tw10.LeftAttach = ((uint)(1));\n\t\t\tw10.RightAttach = ((uint)(2));\n\t\t\tw10", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n                self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sTOTALSTATUS' % POSTPROC_ENVIRO_ID] = \\\n                self.totalstatus\n       ", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, string name, MethodAttributes attribs, Type[] parameterTypes, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)\n\t\t{\n\t\t\tMethodBuilder mb = DefineMethod(name, attribs, null, parameterTypes,", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                    vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getVertIndex(i, x));\n            }\n        }\n    }\n    /**\n     * Returns the index of the vertex of quad <code>i</code> at <code>index</code>\n     * \n     * @param i", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (showDateData.equals(\"false\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n        }\n        return result;\n    }\n    /**\n     * Returns the page type to show.<p>\n     * \n     * @return the page type to show\n     */\n    public String getPageType() {\n", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputField.text;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdisplayText.text = inputText.text.text;\n\t\t\t}\n\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region PRIVATE ROUTINEs\n    //--------------------------------------------------------------------------------\n    #endregion\n    //--------------------------------------------------------------------------------\n  }\n  }\n  }\n}\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                    lastUser = r[\"CreatedBy='\" + AUserId + \"' AND ModifiedBy IS NULL AND DateCreated > #\" + AUserId + \"#) \" +\n                    \"OR (ModifiedBy='\" + AUserId + \"' AND ModifiedBy IS NULL AND DateCreated > #\" + AUserId + \"#) \" +\n                    \"OR", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\nNext line of code:\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions &= world.Renderer.Viewport.GetBlockedDirections();\n\t\t}\n\t}\n}\n}\n}\n}\n}\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            if (CriteriaCodesUsed.Count!= 0)\n            {\n                if (CriteriaCodesUsed.Exists(element => element == \"ROLE\") && (CriteriaCodesUsed.Exists(element => element == \"VOL\"))\n                    && (CriteriaCodesUsed.Exists(element => element == \"OTHER\"))\n                    && (CriteriaCodesUsed.Exists(element =>", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "                stream.Read (buffer, 0, (int buffer.Length);\n                // Adding file content as blob/byte[].\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "        return not self._reqs\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && CopyCustom; }\t\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t}\n\t\tpublic bool CustomRangeEnabled\n\t\t{\n\t\t\tget { return Enabled && CopyCustom; }\t\n\t\t}\n\t\tpublic", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn dataDir;\n\t\t}\n\t\tpublic string ConfigurationDirectory {\nNext line of code:\n:\n\t\t\treturn confDir;\n\t\t}\n\t\tpublic string CacheDirectory {\nNext line of code:\n:\n\t\t\treturn cacheDir;\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "            if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation line = (SourceLineAnnotation) bugAnnotation);\n                if (line.getLineNumber() < 0) {\n                    throw new RuntimeException(\"bug line number < 0\");\n                }\n            }\n        }\n        }\n        }\n        if (bugInstance", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "public class Muffins : Food\n{\n\t[Constructable]\n\t\tpublic Muffins() : base( 0x9eb )\n\t{\n\t\tStackable = false;\n\t\tthis.Weight = 1.0;\n\t\tthis.FillFactor = 4;\n\t}\n\tpublic Muffins( Serial serial", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                        if (eFarm.Count >= Menu.GetSlider(\"LaneClearECount\") && eFarm.Count >= Menu.GetSlider(\"LaneClearECount\") && \n                            && eFarm.MinionHealth > 0)\n                        {\n                            E.Cast(eMinion, target, true);\n                        }\n                    }\n                }\n            }\n", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n\t\treturn get(x, y, width, width, width, 0.0, 0.0, 2, fill, 0.0, 0.0, 2, DEFAULT_ANCHOR);\n\t}\n\t/**\n\t * Returns a", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "        fb = self._retr_file(filename)\n        try:\n            year, month, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\d\\d\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:\n            return {}\n        date = datetime.datetime(int(year),", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(\n            field_model_def['rules']['marc'][1]['function'], field_def['rules']\n            ['marc'][1]['function'])\n        self.assertEquals(\n            field_model_def['rules']['marc'][1]['function'], field_model_def['rules']\n            ['marc'][1]['function", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new object[] {\"E1\", \"E1\"});\n                // widen to widen to short\n                var stmtTextCreateTwo = namedWindow\n                   ? \"create window MyInfraW2", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "        clibrebound.reb_particle = self.copy()\n        return self\n    \n    def __trailing(self, other):\n        if not isinstance(other, Particle):\n            return NotImplemented \n        clibrebound.reb_particle_isub(byref(self), byref(other))\n        return self\n    \n    def __isub__(self", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "    def _get_view(self, cr, uid, view_id, context=None, context=None, context=None, root=True):\n        \"\"\" For a given view ``view_id, should return:\n        * the view itself\n        * all views inheriting from it (via t-extend)\n        * all views called", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "    s = create(filename, contents=content)\n    assert s.content_is_testharness\n    assert not s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert not s.name_is_reference\n    assert not", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.name = namedQueryReference = namedQueryReference;\n\t\t}\n\t\t#endregion\n\t\t#region IMapPropertiesMapper Members\n\t\tpublic void Index(string indexName)\n\t\t{\n\t\t\tmapping.index = indexName", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\twriter.Write( (PlayerState) Members[i] );\n\t\t\t}\n\t\t\twriter.WriteEncodedInt( (int) m_FactionItems", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        invocationQueue.pop();\n        graphQueue.pop();\n    }\n    private void pushInvocation(Invoke invoke, MethodInvocation method) {\n        maxMethodPerInlining++;\n        metricInliningConsidered.increment();\n        metricInliningConsidered.increment();\n        if (checkTargetConditions(invoke, invoke, method)) {\n            doInline(calls", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                self.args['pytest = self.pr_metadata.get('pytest', None)\n                self.args['sprout_appliances = self.pr_metadata.get('sprouts', 1)\n                self.args['sprout_appliances = self.pr_metadata.get('sprout_appliances, 1)\n                self.args['", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "                if (value!= null) {\n                    if (phi) {\n                        ValuePhiNode phi = getCachedPhi(key, value.stamp());\n                        effects.addFloatingNode(value, phi, \"readCachePhi\");\n                        entry.setValue(phi);\n                    }", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "        if (mCallback!= null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n        }\n    }\n    /** @see Connection.VideoProvider", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonianWallMapGump(from));\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic class EodonianWallMapGump : Gump\n\t\t{\n\t\t\tpublic EodonianWallMapGump(Mobile from)\n\t\t\t{\n\t\t\t\t// 100, ", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "        user = '%s@%s' % (username, domain)\n        log.debug('Remove user: %s', user)\n        data = self.module.get(user)\n        if data is None:\n            raise UserNotFound(username, domain, resource, reason)\n        else:\n            self.module.delete(self.module.delete(user", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def __str__(self):\n        \"\"\"\n        Return the string representation of the mo file.\n        \"\"\"\n        ret, headers = '', _strsplit(self.header", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    elif not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, transID, 'Status', 'ValidatedOutput' )\n     ", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\t// If the form element is a plugin, we need to check if it's allowed.\n\t\t\tif (action.startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t// @see freenet.client.filter.GenericReadFilterCallback", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        gsp = yield self.run_fake_single_build(gsp, buildResult, expWarning=False)\n        result = makeReviewResult(msg,\n                                  (GERRIT_LABEL_VERIFIED, verifiedScore),\n                                  (GERRIT_LABEL_REVIEWED, 0))\n        gsp.sendCodeReview.assert_called_once_with(self", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n    \n  def testCategoryToAndFromString(self):\n    self.category.scheme = 'http://www.google.com'\n    self.category.term = 'test'\n    self.assert_(self.category.scheme == 'http://www.google.com')\n    self.assert_(self.category.term == 'test')\n   ", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "                Map<String, AnnotationMirror> r2) {\n            {\n            if (r1 == null) return r2;\n            if (r2 == null) return r1;\n            Map<String, AnnotationMirror> r = new HashMap<String, AnnotationMirror>();\n            for (Map.Entry<String, AnnotationMirror> entry", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "class MATERIAL_PT_lightgroup_exclusion(MaterialButtonsPanel, Panel):\n    bl_label = \"Light Group Exclusion\"\n    bl_options = {'DEFAULT_CLOSED'}\n    COMPAT_ENGINES = {'BLENDER_RENDER'}\n    @classmethod\n    def poll(cls, context):\n        mat = active_node_mat(context.material)\n       ", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            //MAPPER 17\n            if (_engine.Memory.Map.Cartridge.Mapper17.MapperNo == 17)\n            {\n                var map17 = (Mapper17) _engine.Memory.Map.CurrentMapper;\n                mapper17_IRQEnabled = map17.IRQEnabled;\n                mapper17_irq_counter = map17.irq", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "            JMenuItem jMnuOpenDocument = new JMenuItem(\"Open Document\");\n            jMnuOpenDocument.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));\n            jMnuOpenDocument.addActionListener(oActionListener);\n            jMnuOpenDocument.add(jM", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t//----------------\n\t\t// General Shop\n\t\t//----------------\n\t\t// Page 1\n\t\tAdd(\"Aranwen's Shop\", 70025); // Party Quest Scroll [10 Red Bears\n\t\t// Page 2\n\t\tAdd(\"Aranwen's Shop\", 70026); //", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn 0;\n\t\t}\n\t\tpublic int SizeWidthToFitWidthTo (int min)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\tpublic int SizeWidthToFitWithMin (int min)\n\t\t{\n", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                 ORDER BY sdate, stime ''', (i,))\n    row_count = cursor.fetchall()\n    print \"Nos rows in group: \", i, \" is: \", row_count\n    if row_count > 1:\n        print \"GroupID = 0:5:0\"        # Time in hrs", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "        print(\"db_set_last_snapshot\", project_id\", project_id, timestamp)\n        try:\n            rethinkdb.db(\"db_set_last_snapshot = timestamp_to_rethinkdb(timestamp)\n            db_set_last_snapshot = rethinkdb_connection()\n            db_set_last_snapshot(new_snapshots)\n            db_set_last = rethinkdb.db(\"", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "//--- Aura Script -----------------------------------------------------------\n// Deian\n//--- Description -----------------------------------------------------------\n// Shepard - manages the sheep at Tir Chonaill Grassland\n//--- End -----------------------------------------------------------\npublic class DeianScript : NpcScript\n{\n\tpublic override void Load()\n\t{\n\t\tSetRace(10002);\n\t\tSetName(\"_de", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\t\"\"\"\n        Response.__init__(name, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()\n        self.codetail = ('name',)\n        self.coderep = ()\nclass VoteAddedResponse(Response):\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "    def add_host(self, host_data):\n        self.host_data[host_data.host_uuid] = host_data\nNext line of code:\n:\n    def __eq__(self, other):\n        return self.uuid == other.uuid\nNext line of code:\n    def __ne__(self, other):\n        return self.uuid", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "    if (nevra == pkg.nevra()):\n        del primary.items[key]\n        found = True\n        break\n    if (len(primary.items) > 0):\n        raise AssertionError(\"primary.xml contains additional packages\")\n    if (len(primary.items) > 0):\n        raise AssertionError(\"primary.xml contains", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def get_final_options (self):\n        \"\"\"Return a dictionary of the command-line options for this command,\n        as they would be passed to the 'byte-1", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembler, disassembledValues, lazyPropertyColumnAliases[j], snapshot, snapshot, snapshot);\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        # -N is the name of the job, it's used to identify the log_name = request['job_jobname'] + '_' + str(request['job_id] # -N is the name of the job, it's used to\n        '-N', job_name,\n        '-o', log_name,\n", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            ViewBag.ModelId = new int?(id);\n            return View(\"Form\", new DelegateViewModel());\n        }\n        }\n        // Add a relationship (EventDelegate) between Event (Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin,SaveEventDelegate\")]\n        public ActionResult SaveEvent", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                        var circle = (Circle) obj;\n                        return string.Format(\"({0}, {1}, {2}, {3}, {4}, {4}, {5}, {5})\", circle.Position, circle.Radius, circle.Dash, circle.Fill, circle.FillColor, circle.Stroke, circle.StrokeColor", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "                elif res['error_code'] == \"404\":\n                    self.fail(_(\"File not found\")\n                elif res['error_code'] == \"501\":\n                    self.tempOffline()\n                elif res['error_code'] == \"502\":\n                    self.resetAccount()\n                elif res['error_code'] == \"503\":\n                    self", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t// If no harvestable resources were found, give up.\n\t\t\tif (path == null)\n\t\t\t\treturn null;\n\t\t\t// If resources were found, but not in the last harvested cell, give up.\n\t\t\t// This is to prevent the harvester from getting stuck in a cell.\n\t\t\tif (", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                       self.logger.error(\"dhcpd restart failed\")\n                       return False\n                else:\n                    return True\n            elif which_dhcp_module == \"manage_:\n                self.logger.error(\"dhcpd restart failed\")\n                return False\n                return True\n            elif which_dhcp_module == \"manage_:\n                self.logger", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        return Event.newBuilder().setSource(source, source).setSeqNo(seqNo.getAndIncrement());\n    }\n    @Override\n    @Override\n    public void setLogAllMessages(boolean logAllMessages) {\n        this.logAllMessages = logAllMessages;\n    }\n}\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            PpmContext context1 = context;\n            PpmContext context2 = context.Suffix;\n            PpmContext context3 = context3 = context2.Suffix;\n            PpmContext context4 = context4 = context3.Suffix;\n            PpmContext context5 = context5 = context4.Suffix", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[3]);\n\t\t\tif(! session_l.Contains(sessionID))\n\t\t\t\tcontinue;\n\t\t\tsessionValuesArray.Add(sessionID);\n\t\t}\n\t\tif(sessionValuesArray.Count == 0)\n\t\t{\n\t\t\tlabel_delete_cannot.Show();\n\t\t\tlabel_delete_cannot.Text = Catalog", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        o = self.file(b'abcdefghij')\n        insert_bytes(o.seek(4, 9)\n        self.assertEquals(b'abcdefghij\\x00\\x00ij', self.read(o))\n    def test_larger_than_file_middle(self):\n        o = self.file(b'abcdefghij')\n        insert_bytes(o, ", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "    <td><?cs var:sdk.win64_bundle_bytes?> bytes</td>\n    <td><?cs var:sdk.win64_checksum?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (intel)</td>\n    <td>\n  <a onClick=\"return onDownload(this", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    plt.plot(cr['runs'][0][app][app][app][app][VC]['stats'][stat],\n             label='Individual %s' % (stat))\n    plt.plot(csi_95[0], label='95%% CI')\n    plt.legend()\n    plt.show()\ndef plot_app_vc_all_runs", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "        self._testUID = util.runAsEffectiveUserTests\n        self.assertEqual(self.mockos.seteuid, startUID, wantUID, wantUID, wantGID, startUID, startGID, wantUID, wantGID, wantUID, wantUID, wantGID, startUID, start", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRect(x + 1, y + 1, controlSize - 3, controlSize - 3);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(model.isPressed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y,", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "  winner, _inferenceResult, dist, categoryDist = knn.infer(v[1])\n  if (dist!= 0.0):\n    failures += \"Inference failed with k=3\\n\"\n  winner, _inferenceResult, dist, dist, _categoryDist = knn.infer", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public void writeValue(Kind kind, ObjectMirror mirror, int offset, int offset, Value value) {\n        if (offset == length", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "            if (relativePath == null || relativePath.Length == \"\") {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(Parent.GetFullPath(relativePath));\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }\n            return null;\n        }\n        /// <summary>\n       ", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\"\"\"\nUtilities\n\"\"\"\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        n = m + i16 - 2;\nNext line of code:\n        i27 = i27 + i16 - 1;\nNext line of code:\n        i29 = i29 + i16 - 1;\nNext line of:\n        i8 = i8 - 1;\nNext line of", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.name + \"\\n\";\nNext line of code:\n:\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s = null;\n\t\t\t{\n\t\t\t\tif( s.name == name ) {\n\t\t\t\t\treturn s;\n\t\t\t\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                    CanBeRemoved = true,\n                    ForceRemove = true,\n                    CollisionObjects = new[] { CollisionObjects = new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.Minions, CollisionObjectTypes.YasuoWall } },\n                });\n            #endregion\n            #region Lulu\n            Spells.Add(\n               ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.tenant\"));\n\t}\n\t}\n\t/**\n\t * Stubs the code list service with the provided code list definitions.\n\t *\n\t * @param codeList definitions\n\t */\n\tprotected void stubCodelistService(String... code", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        proc = subprocess.Popen(\n            ['somecommand', 'a', 'b'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_fds=True)\n        proc.communicate('in')\n        self.assertEquals('somecommand', proc.returncode)\n    @testlib.with_context\n    def", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertyService = new PropertyService(new PropertyServiceConfigurator() {\n\t\t\t\tPropertiesFileName = propertiesName,\n\t\t\t\tPropertiesConfigDirectory = configDirectory,\n\t\t\t\tPropertiesDataDirectory = dataDirectory\n\t\t\t});\n\t\t\tResourceService = new ResourceService(new ResourceServiceConfigurator() {\n\t\t\t\tProperties = PropertyService", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//call once before ConstraintCollection is set\n\t\t//can throw an exception to prevent the set\n\t\tinternal abstract void SetConstraintCollectionSetup (ConstraintCollection collection);\n\t\tinternal abstract void SetConstraintCollectionCleanup (ConstraintCollection collection);\n\t\tinternal abstract void SetConstraintCollection (ConstraintCollection collection)\n\t\t{\n", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.retranslateUi(Dialog)\n        self.settings_ui_groupbox.setTitle(\"settings_ui_groupbox\")\n        self.settings_kernels_groupBox.setTitle(\"settings_kernels_groupBox\")\n        self.settings_project_groupbox.setTitle(\"settings_project_groupbox\")\n        self.settings_misc_groupBox.setTitle(\"settings_misc_groupBox\")\n        self.settings", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                return false;\n            }\n            String stationId = wxs.getString( wxs.getString( Wxs.STATION_ID ) );\n            mStationId = stationId;\n            String siteTypes = wxs.getString( wxs.getString( Wxs.STATION_SITE_TYPES ) );\n            if (!siteTypes.contains( \"", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tITransaction tx = s.BeginTransaction();\n\t\t\t\tstring continents = \"from Continent\";\n\t\t\t\tint results = s.CreateQuery(continents).List().Count;\n\t\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(continents);\n\t\t\t\tAssert.IsNotNull(continentStats, \"stats were null\");\n\t\t\t\tAssert.AreEqual(", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "                uiCRCITTSum = uiCRCITTSum ^ uiByteValue;\n                if (uiCRCITTSum & 0x8000) uiCRCITTSum = uiCRCITTSum = uiCRCITTSum << 1 ^ 0x1021;\n                else uiCRCITTSum = uiCRCITTSum", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t}\n\t/**\n\t * @return The entity's head rotation in degrees\n\t */\n\tpublic float getHeadRotation() {\n\t\treturn entityData.get(HEAD_ROTATION);\n\t}\n\t/**\n\t/**\n\t}\n\t * @param level The level to get the head rotation from\n\t * @param entityData The", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "            return new CeylonParseController(editor);\n            return new CeylonParseController(editor);\n        }\n        IHyperlinkDetector[] detectors = \n                new IHyperlinkDetector[] { \n                new CeylonHyperlinkDetector(controller),\n                new CeylonParseController(editor),\n                new ReferencesHyperlink", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "        self.aspect = Object3DAspect(self)\nNext line of code:\n        self.scale = Object3DScale(self)\n        self.privateInterface = Object3DPrivateInterface(self)\n        self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(self.aspect)\n        self.l.addWidget(self.scale = Object3DS", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t// Get the location\n\t\t\t\t\t\t// Get the location\n\t\t\t\t\t\t// Get the location\n\t\t\t\t\t\t// Get the location\n\t\t\t\t\t\t// Get the location\n\t\t\t\t\t\t// Get the location\n\t\t\t\t\t\t// Set", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (i!=j)\n\t\t\t\t\tsb.append(\"\"+i+\"change\\t\"+i+\" \\t\"+min[i][j] +\"\\t\"+max[i][j] +\"\\t\"+avg[i][j]+\"\\n\"); \n\t\t\t}\n\t\tsb.append(\"\\n\\n\\nFraction of trees with specific number", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int lineIndex = unpricedLine.Value;\n                                //check", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic MethodInfo TaskMethod {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResult {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t[M", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        final int groupMode = 0700;\n        final int groupOwner = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int groupOwner = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int group = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n       ", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport)\n\t\t{\n\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Vector2 v, Viewport viewport)\n\t", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint(XDRUnion):\n    __slots__ = ['key', 'value','stats']\n    def __eq(self, other):\n        if type(self)!= type(other):\n            return False\n        if self.key!= other.key:\n            return False\n        if self.value!= other.value:\n            return False", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t//Console.WriteLine(\"Disconnecting client \" + i);\n\t\t\t\t\t//workerSocket.BeginDisconnect(new AsyncCallback (OnClientDisconnect), null), null);\n\t\t\t\t\t//m_workerSocketList.RemoveAt(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\t}\n\t\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  if is_method:\n    print'   object,'\n  if exec_type_str:\n    print'   %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s' % (optional_class, optional_class, optional_class, optional_class, optional_class, optional_class, optional_class", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    response = HttpResponse(mimetype='text/plain')\n    response['Content-Disposition'] = (\n        u'attachment; filename=\"{0}.json\"'.format(filename)\n    )\n    writer = json_data = {}\n    if len(day) >= 1:\n        on_air = day = day[0]\n        if on", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                        new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                        Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n            }\n            whereClause.addChild(new com.bigdata.rdf.sparql.ast.ServiceNode.ASTContainerBindingSetOptimizer(\n                    new StatementPatternNode(new VarNode", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        if \"set_is_active\" in self.request.POST:\n            return self._handle_set_is_active()\n        return super(UserDetailView, self).post(request, *args, **kwargs)\n", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of objects representing objects representing persisted instances of types that extend System.Attribute. Provides an extensibility mechanism to associate metadata with the referenced assembly.\n    /// </summary>\n    public IEnumerable<ICustomAttribute", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            var w = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var = new DenseVector(input.Count);\n            var = new DenseVector(input.Count);\n            var = new DenseVector(input.Count);\n            var = new DenseVector(input.Count);\n            var = new DenseVector(input.Count", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the mean of an array of sorted numbers\n\t * @param sortedNumbers Array of sorted numbers\n\t *", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "                if reference_set_map[v]!= -1:\n                    sample_count[reference_set_map[v]] += 1\n                v = parent[v\nNext line of code:\n                if reference_set_map[v]!= -1:\n                    sample_count[reference_set_map[v]] += 1\n                v = parent[v", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        for key, mapping in mapping_json.items():\n            if key == self.enrich_index:\n                for field, mapping in mapping_json.items():\n                    if field == 'properties' in mapping_json.items():\n                        if 'properties' in mapping_json:\n                            if 'properties' in mapping_json.items():\n                                if 'properties", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        return frame_header + padding_bytes + self.data + self.data\nclass RSTStreamFrame(Frame):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 1 1 2 3 4 5 6 7 7 7 7 ", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            if (cluster.BoundaryCurve!= null)\n                return;\n            if (cluster.BoundaryCurve == null) {\n                if (cluster.BoundaryCurve = c.RectangularBoundary.RectangularHull();\n                if (c.BoundaryCurve!= null)\n                    b.Add(c.BoundaryCurve.BoundingBox);\n            }\n       ", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeCosine = (double)(0.0);\n}\nvoid btKinematicCharacterController::setInterpolateUp (double fraction)\n{\n\tm_interpolateUp = true;\n}\nvoid btKinematicCharacterController::setInterpolateUp (double fraction)\n{\n\tm_interpolateUp = true;\n}\nvoid", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        for (ExpressionTree exp : initializers) {\n            if (canBeLeaked(exp)) {\n                checker.report(Result.failure(\"unique.leaked\"), exp);\n            }\n        }\n        return super.visitNewArray(node, p);\n    }\n    private boolean canBeLeaked(ExpressionTree exp) {\n        return at", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute!= null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem = new ClassItem(Context, CommentXmlNode, _returnNode);\n\t\t\t\t\t;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");\n\t\t}\n\t\t}\n\t\t[Test]\n\t\t[Category (\"NotWorking\")]\n\t\tpublic void SizeTestSettingOrientation ()\n\t\t{\n\t\t\tIntPtr handle;\n\t\t\tint default_height = 45;\n\t\t\tint default_height2 = 42;\n\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");\nNext line of code:\n:\n\t\t\t// must be read only write lock\n\t\t\t// not touching the write lock\n\t\t\t// not instrumented\n\t\t\t// not instrumentedPoints(agentConfiguration, classCache);\n\t\t\t// not instrumentedPoints(agent", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\t// deliberately ignore postdominators\n\t\tif (this.isImplicit!= other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.dependsOnCutAP!= other.dependsOnCutAP)\n\t\t\treturn false;\n\t\tif (this.isAbstractionActive()!= other.isAbstractionActive())\n\t\t\treturn", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "            int min = (min2 = min1 > min2? min1 : min2);\n            if (min > narrowL) {\n              continue;\n            }\n            int max1 = wideRExtent[start][parentState] = end;\n              if (end < narrowRExtent[start][parentState", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "                'rsync','src', 'dst', '-a', '--exclude=--exclude=mock.ANY, close_fds=True\n    def test_protect_ssh_invocation(self, popen, pipe_processor_loop):\n        ret = 0\n        ret = 0\n        out = 'out'\n       ", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.DbgProcess_RuntimesChanged += DbgProcess_RuntimesChanged;\n\t\t}\n\t\t// DbgManager thread\n\t\tvoid DbgProcess_RuntimesChanged(DbgProcess process) {\n\t\t\tprocess.DbgManager.Dispatcher.VerifyAccess();\n\t\t\t// If the process is running, we can", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\t*/\n\t}\n\t/**\n\t * Writes a parameter with a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.\n\t * @param   value   Value of the parameter.\n\t *\n\t * @throws  XMLException if an XML-related exception occurs.\n\t */\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null ) {\n\t\t\t return false;\n\t\t}\n\t\tif (!( aThat instanceof Contact ) ) {\n\t\t\t return false;\n\t\t}\n\t\tContact that = (Contact)proxyThat;\n\t\tif ( this.getContactDate() == null ) {\n\t\t\t if ( that.getContactDate", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t    if n == 0:\n\t      status = 'w'\n\t    else:\n\t      status = 'a'\n\t    with open(name, status) as f_ID:\n\t      f_ID.write(str(body_types[i]) + '\\n')\n\t      for j in range(body_types[i]):\n\t\torientation = bodies[body_offset +", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        if cdata[0] == (0, 1, 2, 2, 2, 1, 2, 3, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "from django import forms\nfrom django.forms import ValidationError\nfrom django.contrib.auth.models import Group\nfrom community.constants import COMMUNITY_ADMIN, COMMUNITY_PRESENCE_CHOICES\nfrom community.models import Community, Community, Community, Community, Community, CommunityPage, RequestCommunity\nfrom community.utils get_groups, get_groups, get", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                    return fn(*arg, **kw)\nNext line of code:\n        event_key = event_key = event_key.with_wrapper(wrap)\n        event_key.base_listen(**kw)\n        return event_key\n    def after_compile(self, query, query):\n        \"\"\"Receive the :class:`.Query` object after it", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "            show_tag = etree.Element('show')\n            show_tag.text = self.runtime.add_block_as_child_node(child, show_tag)\n            xml_object.append(show_tag\n        return xml_object\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "                          for change in data_model_changes:\n        for axis in self.get_axes(self.filtered_data):\n        for key in change.key:\n            if key in self.current_filter:\n                if len(self.get_raw_data()[key]) == 1:\n                    self.get_sample = self.get_raw_data()[key]\n                else:\n                   ", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class!= null && type == null)\n\t\t\t{\n\t\t\t\tif (Method = context.ClassLoader.LoadClassByDottedName(Class).GetMethodWrapper(Sig!= null? context.ClassLoader.FieldTypeWrapperFromSig(Sig, LoadMode.LoadOrThrow).TypeAsArrayType : context.ClassLoader.FieldType", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t// \n\t\t\t// objYText\n\t\t\t// \n\t\t\tthis.objYText.Location = new System.Drawing.Point(", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.5, 0)\n        self.assertEqual(c.who, \"warner)\n        self.assertEqual(set(c.files), set([\"ChangeLog\"]))\n        self.assertEqual(c.comments, \"\\t* NEWS: started adding new features\\n\")\n       ", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        }\nNext line of code:\n:\n        termData.putAll(csvData);\n    }\nNext line of code:\n:\n    }\nNext line of code:\n", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\t// TODO: Add code here to handle the wand being used on the player.\n\t\treturn false;\n\t}\n\t@Override\n\tpublic boolean onWandableCanWand() {\n\t\treturn false;\n\t}\n\t@Override\n\tpublic boolean isValidBinding() {\n\t\treturn linkedCollector!= null && linkedCollector instanceof I", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "            intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCase3(ArrayList<Community> newCommunitiesToReturn, THashSet<Community> commonCom", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                                v1 = flags[flagname][version][version][version][docformat]\n                                v2 = minfo['flags[flagif\n", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t//guiThread.Abort();\n\t\t\tbase.Dispose( disposing );\n\t\t\t//guiThread.About();\n\t\t\t//guiThread.Abort();\n\t\t\t//guiThread.About();\n\t\t\t//guiThread.Abort();\n\t\t\t//guiThread.About();\n\t\t\t//guiThread.Abort();\n\t\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date exceptionDate : exceptionDates) {\n      exDateList.add(new ExDate.from(exceptionDate);\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Gets the iCal4J calendar with the specified start and the specified event.\n   * @param event the", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceEventBinding.SourceEventName = SourceEventName;\n\t\tsourceEventBinding.SourceEventBinding.TargetEventName = TargetEventName;\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "            ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName, this);\n            if (switchManager == null) {\n                IConnectionManager spanPortName = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName, this);\n                if (switch", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "super(id, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Interface image alert_103 = c\n\t\tpublic void setAlertAllergyEtcNewImage(Image image)\n\t\t{\n\t\t\timage_1 = image;\n\t\t}\n\t}\n\t\tpublic Image getAlertAllergyEtc()\n\t\t", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n    }\n}\n", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "                    la = LinkAnnotation()\n                    la.subject = man_obj.uuid  # the subordinate is the subject\n                    la.subject_type = man_obj.item_type\n                    la.project_uuid = man_obj.project_uuid\n                    la.source_id = 'label-match'\n                    la.predicate_uri ='skos:closeMatch'\n                    la", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"         .shrinktofit= \").Append(ShrinkToFit)\n               .Append(\"\\n\");\n            buffer.Append(\"         .mergecells = \").Append(MergeCells)\n               .Append(\"\\n\");\n            buffer.Append(\"\\n\");\n            buffer.Append(\"         .shrinktofit= \").Append", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\tvalue = (byteLength = byteLength) | (byte) (extraToJis [value)) |\n\t\t\t\t\t\t(((int)(extraToJis[value + 1])) << 8);\n\t\t\t} else if (ch >= 0x2010 && ch", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    if   obj.mnemonic==\"LD_A\"  : dst = env.A[a]\n    elif obj.mnemonic==\"LD_B\"  : dst = env.B\n    elif obj.mnemonic==\"LD_D\"  : dst = off1\n    elif obj.mnemonic==\"LD_DA\" : dst = off3", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.openStream();\n\t\t\treturn loadProperties(stream, close);\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new JRReportException(\"Could not load properties from \" + location, e);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif (stream!= null)\n\t\t\t{\n", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (\"BA\");\n\t\t\tSecurityIdentifier everyoneSid = new SecurityIdentifier (\"WD\");\n\t\t\tCommonSecurityDescriptor csd; DiscretionaryAcl dacl; CommonAce ace;\n\t\t\tcsd = new Common", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "                else:\n                    error = \"response status error\"\n        if error:\n                    print_w(\"[fingerprint] Lookup failed: \" + error)\n        # emit progress\n        self.__idle(self.__progress_cb, float(len(results))\n                / self.MAX_SONGS_PER_SUBMISSION)\n    def run(self):\n       ", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        foreach (string rpc in PhotonNetwork.PhotonServerSettings.RpcList)\n        {\n            if (rpc!= null)\n            {\n                additionalRpcs.Add(rpc;\n            }\n        }\n        PhotonNetwork.PhotonServerSettings.RpcList = additionalRpcs.ToArray();\n    }\n    /// <summary>", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        transport = GlobalTransport.getInstance();\n        message = transport.getMessage(msgid);\n        if (message == null) {\n            is_corrupt = true;\n        }\n        }\n        if (is_corrupt) {\n            full_subj.setText(R.string.error_msg = R.string.error_msg_corrupt);\n            full_msg.setText(R", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            #            if time_reversal:\nNext line of code:\n            #                return psit_G.conj()\nNext line of code:\n            #            else:\nNext line of code:\n            #                return psit_G\nNext line of code:\n            #            return psit_G\n            #            return", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp, utkastRequest", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILBasicBlock child in block.GetSelfAndChildrenRecursive<ILBasicBlock>()) {\n\t\t\t\t\tif (prevChildAsBB = child as ILBasicBlock) {\n\t\t\t\t\t\t// We have a label = new ILExpression(ILCode.Br, prevChildAsBB.EntryGoto);\n\t\t\t\t\t\t// prevChildAs", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t\t#if UNITY_EDITOR\n\t\tif (DebugMovement) {\n\t\t\tDebug.Log (\"WORLDBODY: SetRagdoll \" + Owner.IsRagdoll.ToString () + \" in \" + name);\n\t\t}\n\t\t}\n\t\t#endif\n\t\t//if we're already a ragdoll then", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "    def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.f\n        self.layer_type = LayerType.fracture\nclass StratumLayer(GeoLayer:\nNext line of code:\n:\n    def __init__(self, config={}):\n        super().__", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "        out[outOff + 3] = (byte)(byte)(byte)(num >> 24 & 0xff);\n        out[out[outOff + 2] = (byte)(num >> 16 & 0xff);\n        out[outOff + 1] = (byte)(num >> 8 &", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            super( source, new Predicate<PatternMatch>()\n            {\n                public boolean apply( PatternMatch match )\n                {\n                    for ( PatternNode node : objectVariables.values() )\n                    {\n                        if (!match.contains( node ) )\n                        {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "        elif key == 'TAUX:\n            slice_json['valeur'] = transform_values_holder_xml_json_to_json_to_json(value[0]\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment'] = u'\\n\\n\\n'.join(comments)\n    return slice", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            if (ClientSettings.ICON_ENABLE_FRAME_ENABLE_FRAME_ENABLE_FRAME!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_ENABLE_FRAME)));\n          } else {\n            if (ClientSettings.ICON_DISABLE_FRAME!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_DISABLE_FRAME)));\n          }\n", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi), Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi), Util.px2mm(offset.x, dpi), Util.px2px(offset.y, dpi), Util.px2mm(offset.x", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    ContentValues cv = new ContentValues();\n                    cv.put(Db.Table1.ID_GROUP_ID, newId);\n                    db.update(Db.Table1.TABLE_NAME, cv, Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, Db.Table4", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "                else\n                {\n                    Marshal.FreeCoTaskForHGlobal(m_ptr);\n                }\n                m_ptr = IntPtr.Zero;\n            }\n            m_meth = AllocMethod.HGlobal;\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n        #endregion\n    }\n    }\n    internal static class", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/accounts/profile/'\n##################\n", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t}\n\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tvar amountToCancel = Math.Min(numberToCancel, queue.Count);\n\t\t\t\tfor (var n = \t; n < amountToCancel; n++)\n\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\t{\n", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "        infoText += \" file\" if numberOfFiles==1 else \" files\"\n        infoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file\" if numberOfFiles==1 else \"", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = re.sub(r'%%', '%', code)\n        code = re.sub(r'%%', '%', code)\n        code = re.sub(r'%%', '%', code)\n        code = re.sub(r'%%', '%', '%', '%', code)\n        code = re.sub(r'%%", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "        result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer:\")\n        return result\n        return result\n        return result\n        return result\n        return result\n        return result\n        return result\n        return result\n        return result\n        return result", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );\nNext line of code:\nNext line of code:\n:\nNext line of code:\n:\nNext line of code:\n:\nNext line of code:\n:\nNext line of code:\n:\nNext line of code:\n:\nNext line of code:\n:\n", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale, utf8, index));\n                break;\n            case ColumnType.STRING:\n                columnTypes.add(typeManager.nextStringAdapter().of(utf8, index));\n                break;\n                break;\n            default:\n                throw JsonException.$", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@cti_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.cti_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\tParam = qs.NewParameter();\n\t\t", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object original, object originalOwner, object target, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] GetClass\n\t\tpublic object GetPropertyValue(object component, int property)\n\t\t{\n", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        if self.trusted_key == 'enable:\n        self.module.fail_json(\n            msg='Error: key_id is not digit.')\n        if self.trusted_key == 'enable':\n            trusted_key = 'true'\n        else:\n            trusted_key = 'false'\n        if self.ntp_auth_conf['authentication']", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            self.store.update_item(component,  # TNL-764\n            self.user_id,\n            self.user_id)\n            child = self.store.get_item(child.location,\n            self.course_locations[self.MONGO_COURSEID],\n            'html',\n            'test_x1a_1',\n            'test_html',\n           ", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        digest.update((byte) (TEXT_CODE &  updateWithCharBuf();\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {\n        digest.updateWithCharBuff();\n    }\n    public void processingInstruction(String target, String data) throws SAXException {\n        digest.update", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "    if dict = unpack(dict, 'range')\n    return unpack(record, formodulename)\n    #\n    # The following are special\n    #\n    if t == 'rang:\n        record = desc.AECoerceDesc('reco')\n        return mkrange(unpack(record, formodulename)\n", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            Type type = api.ActionDescriptor.ParameterParameterBindingParameterTypes.FirstOrDefault(p => parameterNames.Contains(p.Name)).ParameterType;\n            if (type == null)\n            {\n                type = api.ActionDescriptor.ReturnType;\n            }\n            formatters = new Collection<MediaTypeFormatter>();\n            if (ActualHttpMessageTypes.TryGetValue(type,", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "                value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value, value, value,\n                    entry, callback=None)\n            return True\n        elif event.keyval in (gtk.keysyms.F3, gtk.keysyms.F2):\n            if isinstance(entry, gtk.Entry):\n               ", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, new RuntimeBeanReference(\n                    LegacyConfigPostProcessor.BEAN_NAME_GLOBAL_PROPERTIES));\n            // Invalidate cached merged bean definitions\n            ((BeanDefinitionRegistry) beanFactory).registerBeanDefinition(\n                    LegacyConfigPostProcessor.BEAN_NAME_RE", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            for line in f:\n                if not line.strip():\n                    raise ValueError(\"Blank line found in %s\" % path)\n            f.close()\n        except ValueError:\n            f.close()\n    if not check_mode:\n        try:\n            f = open(path, \"a\")\n            f.close()\n        except IOError:\n", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "            [In, MarshalAs(UnmanagedType.LPStruct)] IntPtr] object pUnk\n            );\n        [PreserveSig]\n        int SetEventInterestPointers(\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid] Guid guidEventInterest\n            );\n        [PreserveSig]\n        int GetService", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "        spm.addPrincipalToPrincipal( directedAclKeys );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = REMOVE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void removePrincipalFromPrincipal( @RequestBody DirectedAclKeys directedAclKeys )", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element matches what is expected.\n        This will fail the tag of the element against the expected data. If the\n        tag is not", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "        if node._in_document(node, node.namespaceURI, node.localName, node.publicId,\n        if node.ownerDocument.isSameNode(node.ownerDocument):\n            clone.ownerDocument, node.ownerDocument = newOwnerDocument\n        clone.__dict__['value = node.ownerDocument = newOwnerDocument\n        clone.__", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* @generated\n\t*/\n\t@Test\n\tpublic void testValidateEMSSceneSection", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset) && keyLocator.getKeyLocatorDigest().size() > 0) {\n\t\t\t\tkeyLocator.setKeyData(keyLocator.getKeyLocatorDigest().buf());\n\t\t\t}\n\t\t\t// TODO: Do we want to order the components (except for ANY", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        //Updates the HUD\n        for(int i", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setColor( color );\n        hide();\n      }\n    } );\n    hpanel.add( m_panel.add( new HTML( \"<b>\" + MAppBoard.s_messages.warningTeamAllowed() + \"</b>\" ) );\n    if( GameEngine.model().getGame().getGame().getMaxTeamAllowed() <=", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            msgs = [e[\"msg\"] for e in err[\"errors]]\n            raise RuntimeError(\", \".join(msgs))\n    filename = get_filename(r.headers[\"content-disposition\"])\n", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.Order;\n\t\t\t\tfailureReason = null;\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\t// TODO: handle exception\n\t\t\t\tExceptionHandler.Report(e, e, SR.ExceptionMergeOrderDryRun, this.Host.Des", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "    if len(reaction.metabolites)!= 1:\n        raise ValueError(\"reaction.metabolites\")\n    return [met.elements.get(\"C\", 0) * coeff for met, coeff in reaction.metabolites.items.items()]\ndef _total_components_flux(\n    flux: float,\n    components: List[float", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(\n            store__store__pootle_path__startswith=pootle_path,\n            store__store__store__pootle_path__startswith=pootle_path,\n            store__store__pootle_path__startswith=pootle_path,\n            store__store__p", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "                ('created', models.TextField()),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n            ],\n        ),\n        migrations.CreateModel(\n            name='Training',\n            fields',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('training", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                    self.logger.debug(\"Got ARP request: {}\".format(str(poxpkt.payload)))\n                    arp = poxpktlib.arp()\n                    arp.opcode = poxlib.arp.REQUEST\n                    arp.srcip = poxlib.arp\n                    arp.dstip = poxlib.arp\n                    arp.dst", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (m_RecentItems.size() > m_MaxCount) {\n      m_RecentItems.remove(0);\n      m_RecentItems.add(item);\n    }\n    else\n      m_RecentItems.add(item);\n    writeProps();\n  }\n  /**\n   * Removes all items from the list.\n   */\n", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            if (target is ShadowKnight && (target.X!= p.X || target.Y!= p.Y))\n            {\n                return false;\n            }\n            if (target is ShadowKnight && (target.X!= p.X || target.Y!= p.Y!= p.Y))\n            {\n                return false;\n            }\n            // Checked", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "        if (halfTradePeriodDate == null && takeOfferDate!= null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n        return halfTradePeriodDate;\n    }\n    public long getLockTimeAsBlock", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a = a = LeadingAny(p.next);\n\t}\n\t\n\tstatic void CompSyncSets() {\n\t\t/*  CompFirstSets();  /* AW 2002-03-14 */\n\t\tCompFirstSets();\n\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff00ff)  >> 24);\n\t\t\tWriteReport(buff);\n\t\t\tmReadDone = true;\n\t\t\treturn buff;\n\t\t}\n\t\t/// <summary>\n\t\t/// Write data to Wiimote\n\t\t/// </", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\t// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)\n// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.\n// This code was generated by Barbara Worwood using IMS Development Environment (version ", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyyMMdd_HHmmss\" );\n\t\t}\n\t}\n}\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWith", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (k++; i < N1 + N2 + N3; i++, i < N1 + N2 + N3 + N4; i++, i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (i =", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "        add_view = navigate_to(self.create_add_view\n        add_view.fill_with(\n            {\n                'description': new_rate.description,\n                'currency': new_rate.currency,\n                'fields': new_rate.fields\n            },\n            on_change=add_view.add_button,\n            no_change=add_view.cancel_button\n        )\n       ", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\t// writeData = shadowBuffer.Lock( offset, length, BufferLocking.Discard );\n\t\t\t// Memory.Copy( src, writeData, length );\n\t\t\t// shadowBuffer.Unlock( writeData );\n\t\t\t// writeData = shadowBuffer.Lock( offset, length, BufferLocking.Discard );\n\t\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "from Screens.ScanSetup import ScanSetup import buildSatelliteTransponder, buildCabTransponder, buildTerTransponder, buildTerTransponder, buildTerTransponders, buildTerrestrialTransponders, TerrestrialTransponders, TerrestrialTransponders, TerrestrialTransponders, TerrestrialTranspond", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "            else {\n                tcpAcceptFilters.add(TcpAddress.TL;\n            }\n            return;\n        case ZMQ.ZMQ_ZMQ_ZMQ_DELAY_ON_CLOSE:\n            delayOnClose = (Integer) optval;\n            return;\n        case ZMQ.ZMQ_ZMQ_DELAY_ON_DISCONNECT:\n            delayOnDisconnect =", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                // Write the prior row to the output stream\n                try {\n                    fout.WriteTo prior = new byte[bytesPerRow];\n                    for (int i = 0; i < bytesPerRow; i++)\n                        prior[i] = curr[i] = curr[i];\n                    for (int i = 0", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('foo.bar)\n        s.set_interface('foo.bar')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertTrue(s.has_interface('", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "                    except (m_product) in amap.get_domain().get_basis():\n                    for thing in z_level[position].get_product().get_basis():\n                        elt = e2.get_E2.get_dual_resolution(self.options\\\n                        ).get_map_list()[z_index].get_domain(\\\n                        ).element_from_vector(position, thing", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field named \" +\n                \"\\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfor ( Object o : m.entrySet() ) {\n\t\t\t\tfinal Entry e = (Entry) o;\n\t\t\t\tqueueOperation( new Put( e", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member viewing an item being returned\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "        return action_message\n    @api.multi\n    def attendance_action_kiosk_mode(self):\n        \"\"\" Returns an action to the \"My Attendances menu \"\"\"\n        self.ensure_one()\n        action = self.env.ref('ir.actions.act_window').read()[0]\n        action['view_mode'] = 'tree,form", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\t// WDEV-3953\n\t\t/*boolean isConfidentialInv = orderInvestigationLiteVo.getInvestigationIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndexIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndex().getConfidential", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "                return pt;\n            }\n        }\n        /// <summary>\n        /// The height of this item.\n        /// </summary>\n        public int Height\n        {\n            get\n            {\n                LVCOLUMN lvi = new LVCOLUMN();\n                lvi.mask = LVCF_SUBITEM | LVCF_WIDTH;\n", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "        # FIXME: This is a hack to get the current terminal to be the last_active_term\n        # FIXME: This is a hack to get the current terminal to be the last_active_term\n        # FIXME: This is a hack to get the current terminal to be the last_active_term\n        # FIXME:", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                    toReturn.Add( new StructTypeInfo( nameArraySizeFragments[0], managedType, marshalAttribute, arraySize ) );\n                }\n                }\n                else {\n                    throw new UnknowStructNameException( 6, null, string.Empty );\n                }\n            }\n            return toReturn.Add( new StructTypeInfo( fragments", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\tif (IsEnum)\n\t\t\t\t\treturn true;\n\t\t\t\tif (base_type == null)\n\t\t\t\t\treturn false;\n\t\t\t\tif (base_type.IsValueType)\n\t\t\t\t\treturn true;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t}\n\t\tpublic override bool IsClass {\n\t\t\tget { return attributes.GetMaskedAttributes ((", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "        self._context = OpenSSL.SSL.Context(_openssl_versions[protocol])\n        self._context.set_options = self.context\n        self._context.options = self._context.options\n        self._context.options = self._context.options\n        self._context.options = self._context.options\n        self._context.options =", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.Label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.LabelProp = global::Mono.Unix.Catalog.GetString (\"_White Spaces:\");\n\t\t\tthis.label8.UseUnderline = true;\n", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                headbook.reorder_child(child, new_num)\n                notebooks[\"board\"].reorder_child(key2gmwidg[child].boardvbox, new_num)\n                notebooks[\"statusbar\"].reorder_child.reorder_child(key2gmwidg[child].statusbar, new_num)\n                notebooks[panel.__name", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_0),\n    \"Move-Tab-to-right\": QKeySequence(Qt.CTRL + Qt.Key_0),\n    \"Move-Tab-Reverse\": QKeySequence(Qt.CTRL + Qt.Key_0),\n", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\" + this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", jtaDataSource=\" + this.jtaDataSource + \", nonJtaDataSource=\" + this.nonJtaDataSource + \",", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    IEditorPart editorPart = getEditorPart();\n    if (editorPart!= null)\n    {\n      IEditorInput input = editorPart.getEditorInput();\n      if (input instanceof IFileEditorInput)\n      {\n        IFileEditorInput fileInput = (IFileEditorInput)input;\n        return file", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(883, 44, 8, 0, 25);\n\t\t\tthis.butAttach.Name = new System.Drawing.Point(0, 0);\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(75, 25);\n\t\t\tthis.butAttach.TabIndex = ", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "        if (sb!= null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, hmac, data, result);\n\t\t}\n\t\t[Test]\n\t\t// Test with a key shorter than the length of the HMAC output.\n\t\tpublic void RFC4231_TC2_Legacy ()\n\t\t{\n\t\t\tbyte", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch (EnumSwitchUnion._d) {\n\t        case option_1:\nNext line of code:\n\t        case option_2:\n\t            current_sum += 4 + 4; // intVal\n\t            break;\n\t        case option_3:\n\t            current_sum += 4 + CDRSerializer.alignment(current_sum,", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "        return null;\n      String javaHome = java.GetValue(\"JavaHome\").ToString();\n      if (java.Close();\n      return javaHome;\n    }\n    private static String GetJavaHome\n    private static String GetJavaHome(String javaHome)\n    {\n      if (javaHome == null)\n        javaHome = Find", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = l\n        return None\n    def find_env(self, job=None, env=None):\n        if env:\n            return self._find_env(self.module, module, env)\n        else:\n            return self._find_job(self.module, module, env)\n    def find_env(self, name, name,", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "        modifier_json['falloff_type'] = modifier.mask_constant\n        modifier_json['mask_tex_map_object'] = BLObject.to_json(instance=modifier.mask_tex_map_object)\n        modifier_json['mask_tex_mapping'] = modifier.mask_tex_mapping\n        modifier_json['mask_tex_use_channel'] = mask_tex_use_channel", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            if(rankCounts == null)\n            {\n                rankCounts = new double[totalBuckets];\n                pepLenRankCounts.put(peptideLength, rankCounts);\n            }\n            }\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                if(rankCounts[i] == ", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\nNext line of", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                    elif self.choice.isdigit():\n                        self.choice = int(self.choice)\n                        if choice > len(self.cap):\n                            print(self.fatal+\"Invalid packet number\"+self.blk)\n                            continue\n                        else:\n                            self.parser(self.choice, cap=self.cap)\n                            continue\n                    else:\n                                self.parser(self.choice)\n", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 159);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = \n            this.rptComboBox.TabIndex = 0;\n            // \n            this.rptComboBox.SelectedIndexChanged += new System.EventHandler(this.rptComboBox", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': \"'created_scan_set', 'to': \"orm", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "                throw SDOException.typeNotFound(targetNamespace, sdoTypeName);\n            }\n        }\n        return false;\n    }\n    private void preprocessGlobalTypeDefParticle(ComplexType sdoType, ComplexType complexType, String targetNamespace, ComplexType sdoType, String sdoType, String sdoType,", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.holidays = self.holidays_validate_notificate(cr, uid, ids, context=context)\n        self.holidays_first_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state': 'validate','meeting_type':'meeting_type','meeting_id", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "            set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the <see cref=\"IBusinessObjectCollection\"></see> that is displayed in the <see cref=\"IBOColSelector\"></see>.\n        /// </summary>\n        /// <value>The <see cref=\"IB", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "            return \"Mixer Line: \" + this.mixerHandle + \" \" + this.mixerHandleType + \" \" + this.mixerLine.dwDestination + \" \" + this.mixerHandleType + \" \" + this.mixerLine.dwSource + \" \" + this.mixerHandleType + \" \" + this.mixerLine.dwComponentType", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = (ims.core.admin.domain.objects.CareContext)domainFactory.getDomainObject(valueObject.getCareContext().getDomainObject());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\tdomainObject.setCustomID(valueObject.getCustomID();\n\t\treturn domainObject;\n\t}\n}", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            [\"cargo\", \"build\"] + opts,\n            env=env, env=env, verbose=verbose)\n        if status:\n            return status\n        if android:\n            # Build the APK\n            with cd(self.android_support_dir()):\n                status = call(\n                    [\"cargo\", \"build\"],\n                    env=self", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\t// For reasonable utility functions adding just negatives decreases\n\t\t\t// negatives decreases the score.\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[] { 0, n }, false));\n\t\t}\n\t}\n\t@Override\n\t@Override\n\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "                Stashed.SetStashDiffs(gitStash, gitStash);\n            }\n            Loading.Visible = false;\n            Loading.IsAnimating = false;\n            Loading.IsAnimating = false;\n            Stashes.Enabled = Stashes.Enabled = true;\n            Stashes.Enabled = true;\n            refreshToolStripButton_customMessage.Enabled", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "    assert lattice.cbuffer.get_object(bm1_index).out_address!= 0\nNext line of code:\n    assert lattice.cbuffer.get_object(bm2_index).out_address!= 0\nNext line of code:\n    assert lattice.cbuffer.get_object(bm0_index).out_address ==  == ", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.host == that.host == null\n            && this.port == that.port\n            && this.realm ==", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult result) {\n            object[] results = this.EndInvoke(result);\n            return ((int)(results[0]));\n        }\n        public System.IAsyncResult BeginAddInt(int a, int b, System.AsyncCallback callback, System.I", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\nNext line of code:\n:\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static List<SeriennrChargennrMitMengeDto> add2S", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n:\n:\n\t\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tdefault: \n\t\t\t\t\tbase.CSet(feature, value);\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "    archive_index = load_archive_index(args.index_file)\n    if args.func is None:\n        parser.print_help()\n        sys.exit(1)\n    args.func(archive_index, args)\n    sys.exit(0)\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        self.mosi_bits = mosi_bits = self.sr.get_mosi_bits(mosi)\n        self.mosi_bits = self.sr.get_mosi_bits(mosi)\n        self.mosi_bits = self.sr.get_mosi_bits(mosi)\n        self.mosi_bits = self.sr.get_mosi", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "          cursor = limit - v_3;\n          // (, line 201\n          // literal, line 201\n          if (!(eq_s(1, \"a\\u015Fti\"))) {\n            return false;\n          }\n          // ], line 201\n          ket = cursor;\n          // literal, line", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                o = dins.readObject(cls);\n            } catch (Exception ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n            if (cd == null)\n            {\n                if (o!= null)\n                    System.out.println(\"Got a new channel \"+channel+\" \"+o.getClass().getName()+\" \"+", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                return result\n            else:\n                return None\n        return None\n    def _get_key_usage(self):\n        return self._get_extension('keyUsage')\n    def _get_extended_key_usage(self):\n        return self._get_extension('extendedKeyUsage')\n    def _get_basic_constraints(self):\n        return self", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = _slots.find (i->first)!= _slots.end ();\n\t\t\t}\n\"\"\", file=f)\n    if not v:\n        print(\"\\t\\t\\tif (still_there) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    # -- The first value is the first value of the first value of the interval\n    #     in the first word (1 word (1 word = 2 bytes) utf16 encoded).\n    # -- The second value is the value of the second word (2 words = 4 bytes) utf16 encoded", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = la.pos; int col = la.col;\n\t\t\twhile (StartOf(11)) {\n\t\t\t\tif (la.kind == 26) {\n\t\t\t\t\tGet();\n\t\t\t\t\tint beg = la.pos;\n\t\t\t\t\twhile (StartOf(11)) {\n\t\t\t\t\t\tif (la.kind == 27) {\n\t\t\t\t\t\t\tGet();\n", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n        #", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", RESTApplication.REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server._openhab-https._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "                permissions = new ArrayList<>();\n                nameMap.put(nameMap.put(name,\n                                                                 permissions);\n            }\n        }\n        return nameMap.put(name,\n                                                                 nameMap);\n    }\n    private PermissionEntry asTypedPermissionEntry(final String permission,\n                                               final NodeRef nodeRef,\n                                               final String asUser)\n    {\n        return", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "        for device in devices:\n            assert device is not None\n    @pytest.mark.parametrize('device_data', pytest.config.udev_device_sample)\n    def test_get_device(self, context, device_data):\n        device = Device.from_path(context, device_data.device_path)\n        assert device is not None\n    def test", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "    opener = buildOpener()\n    device = Device(deviceToken = deviceToken)\n    user = device.newUser(loginId, password)\n    user.login()\n    data = user.mainmenu()\n    print data.response.body\n", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "        elif (index_elements[0] == \"Mode:\"):\n            rv['mode'] = index_elements[1]\n        elif (index_elements[0] == \"Stokes:\"):\n            rv['stokes'] = index_elements[1]\n        elif (index_elements[0) == \"Fit:\"):\n           ", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "            if (m_Keys.Count > 0)\n            {\n                ItemID = 0x1011 + m_Keys.Count;\n            }\n            }\n            else\n            {\n                ItemID = 0x1011;\n            }\n        }\n        private class InternalTarget : Target\n        {\n            private Key", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            // DRS 20181103 - Added 1 - Added 1 - Concurrent Modification Exception\n            TunerHdhrTuner hdhrTuner = new TunerHdhr(device,", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {\n      jobs.put(Version.DAY_BY_DAY_STICKERS, new StickerAdditionMigration", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split.length < 3) {\n        throw new IllegalArgumentException(\"RegexNER mapping file \" + line + \" has fewer than 3 columns\");\n      }\n      }\n      }\n      if (split[0].equals(\"#\") || split[0).equals(\"\")) {\n        // log.info(\"Skipping line \" +", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            # see if we find it using the path in the source_dir\nNext line of code:\n:\n            # see if we find it in the path in the environment\nNext line of code:\n:\n            # if we find it, return the name\nNext line of code:\n:\n            # if we don't", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "        ctx = Context()\n        [ctx.push(x) for x in keys]\n        def make_it(feat(f, idx):\n            f = Feature(ctx, idx)\n            geom, attrs = feat\n            for k, v in attrs.iteritems():\n                f[k] = v = v\n            return f\n       ", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "        if self.want.update_attributes = self.have.destination\n        if self.want.port!= self.have.port is None:\n            self.want.update({'port': self.have.port})\n        if self.want.port is None:\n            self.want.update({'port': self.have.port': self.have.port})\n        if self.want.port is None", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "    @property\n    def is_displayed(self):\n        return (\n        return (\n            self.in_explorer and\n            self.title.text == 'Add Automate Method' and\n            self.datastore.is_opened and\n            check_tree_path(\n                self.datastore.tree.currently_selected,\n                self.context['", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "            notifyListeners(new EventStatusType.INFORMATION,\n                    getClass().toString() + \", getClassByName(), \"\n                    + \"class (\" + className + \"/\" + classPath + \") not found.\", null);\n        }\n        return result;\n    }\n    public IAction getActionObject(String className, Object dbManager) throws Exception", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_create_thread_id = \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "            embedManifestDllAction(target, source, env)\n        else:\n            return 0\n    return 0\ndef embedManifestDll(target, target, target, target, source, env):\n    if env.get('WINDOWS_EMBED_MANIFEST', 0):\n        manifestSrc = target[0].abspath", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "            Job job = new Job(getOperationMessage()) {\n                {\n                public IStatus run() {\n                    try {\n                        errorStatus[0] = execute(prunedList, new SubProgressMonitor(getShell().getProgressMonitor(), 1000));\n                    } catch (CoreException e) {\n                        errorStatus[0", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tif (meta.getFields(data.outputRowMeta, getStepname, null, null, this) == null)\n\t\t{\n\t\t\tlogError(BaseMessages.getString(PKG, \"AggregateRows.Log.CouldNotFindField\",meta.getFieldName()[i])); //$NON-NLS-1$ //$NON-NLS-2$\n", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "    assert f('+5..', last) == (d(2014,1,1,30, 22, 21), d(2014,1,30, 22, 21))\n    assert f('-5..', last) == (last_rounded, now)\n    # both relative", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //WalkingRange\n            string swalkingrange = swalkingrange;\n            if (swalkingrange.Contains(\"s\"))\n                swalkingrange = swalkingrange.Remove(swalkingrange.Length - 1);\n", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "        self._open_session = self._open_session()\n        self._open_session_list.append(session)\n        self._open_session_mem = self._get_session()\n        self._open_session_mem = self._get_session()\n        self._open_session_list.append(session = self._get_session())\n        self._open_session_list", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        service.submit(pub);\n        service.shutdown();\n        assertThat(rc.get();\n        System.out.println(\"Received \" + rc.get() + \" messages\");\n        System.out.println(\"Received \" + rc.get() + \" messages);\n        System.out.println(\"Received \" + rc.get() + messages);\n        System.out.println(\"Received", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) catch (", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\t}\n\t\t\telse if (value <= 1FFFFFFF) {\n\t\t\t\twriter.Write((byte)((value >> 24) | 0xC0));\n\t\t\t\twriter.Write((byte)(value >> 16));\n\t\t\t\twriter.Write((byte)(value >> 8));\n\t\t\t\twriter.Write((byte)value);\n\t\t\t}\n", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        if one_file.path is not one of the copied files, then it is not in the original path of the file.\n        if path is not one of the copied files:\n            if one_file is not one of the copied files:\n                self.fm.fm.thistab.redraw_main_column()\n            else:\n               ", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tActivator.CreateInstance (null, null);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void CreateInstance_StringStringCustomType ()\n\t\t{\n\t\t\t", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        de = Locale.objects.get(code='de)\nNext line of code:\n:\n        repo = self._setup(de, de, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects.all()\nNext line of code:\n:\n       ", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            if \"muted\" in cmd.parameters:\n                userstate.muted = cmd.parameters[\"muted\"]\n            if \"self_muted\" in cmd.parameters:\n                userstate.self_muted = cmd.parameters[\"self_muted\"]\n            if \"deaf\" in", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "        PlayerGroup group = player.getPlayerGroup2();\n        if (group!= null) {\n            group.onEvent(new ChangeGroupLeaderEvent(group, player));\n        }\n    }\n    public static void changeMember(Player player) {\n        PlayerGroup group = player.getPlayerGroup2();\n        if (group!= null) {\n           ", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        return highlight([(t, s) for (t, s) in self.t, s) for (t, s) in self.toks], formatter, formatter, formatter, outfile, squash_c, head, tail, head, self.maxwidth, self.maxwidth, self.maxwidth, self.maxwidth,", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "        column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        column._update_cell_based_on_data(None,", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\tGridColumnBean grid = (GridColumnBean) parent;\n\t\tgrid.setValues(column.getValues);\n\t\tgrid.setValuesDisplay(column.getValuesDisplay);\n\t\tgrid.setValuesDelimiter(column.getValuesdelimiter);\n\t\tgrid.setDisplay(column.getDisplay);\n\t\tgrid.setTarget(column.getHref);\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "                if (version >= FileVersion.v1_1) {\n                    ImageIndex = Convert.ToInt32(ReadElement(element, \"ImageIndex\"));\n                    GrayImageIndex = Convert.ToInt32(ReadElement, \"GrayImageIndex\");\n                }\n                if (version >= FileVersion.v2_2) {\n                    Perception =", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                    m_key[i] = new ExodusSummoningTomeActivation();\n                    else if (m_Peerless == PeerlessList.MelisandeFelucca)\nNext line of code:\n                    m_key[i] = new MelisandeMelisandeActivation();\n                    else if (m_Peerless == Peer", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\treturn coll;\n\t}\n}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "                new Version(1, 0, new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pbC = kdf.ComputeDerivedKey(pbMsg, pbMsg, pbMsg.Length, p);\n\t\t\tif(!MemUtil.ArraysEqual.ArraysEqual(pbC, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon2-1\");\n\t\t\t// ======================================================\n\t\t\t// From the same as above", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, stack, stack, stack, player, cost, remove);\n\t}\n\t/**\n\t/**\n\t * Returns the total discount for all tools equipped by a player.\n\t * @param player\n\t * @return\n\t */\n\tpublic static float getFullDiscountForTools(EntityPlayer player)", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\"expected {1})\", NextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\t// Clone the layer over to avoid any reference links\n\t\t\t\tLayer result = NextFrame.Clone ();\n\t\t\t\t// Update the layer blending mode to the queue default\n\t\t\t\t// FIXME: FIXME: FIXME:", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage!= null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList!= null", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "            dc.number =  PhoneNumberUtils.co\n            dc.number =  PhoneNumberUtils.co\n            dc.number =  PhoneNumberUtils.co\n            dc.number =  PhoneNumberUtils.co\n            dc.number =  PhoneNumberUtils.co\n            dc.number =  PhoneNumberUtils.co\n            dc.number =  PhoneNumberUtils.co\n           ", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "if (licence.isDomainCode()) {\nrelevantLicences.add(licence);\n}\n\t\t\t\t} else if (odrMetadata.getType().equals(\n\t\t\t\t\t\tMetadataEnumType.APPLICATION)) {\n\t\t\t\t\tfor (Licence licence : availableLicences) {\n\t\t\t\t\t\tif (licence.isDomainCode()) {\nNext line of code:\n", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                newVertices[y * xSizeP + x] = new Vector3(leftBottomCorner + x * 0.5f, y * 0.5f, 1f);\n                newNormals[y * x", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\tObject[] params = new Object[] { testInt1, testInt2 };\n\t\t\t\n\t\t\trawResult = client.call(API_METHOD_ADD, params);\n\t\t\t\n\t\t\tif (rawResult!= null)\n\t\t\t{\n\t\t\t\tresult = (int) rawResult;\n", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n:\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionStarts()\n\t\t\t{\nNext line of code:\n:\n:\n\t\t\t}\n\t\t\t@Nonnull\n\t\t", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "            out.writeBoolean(false);\n            out.writeUTF(\"No such name not found.\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeUTF(found.identifier);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n    /**\n     * Returns the list of exported objects that contains exported", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                        16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        0,\n                        0,\n                        Machine.pens[0],\n                        Machine.visible_area,\n                        Machine.visible_area,\n                        Machine.pens[0],\n                        0);\n                pixel_x += ", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                    spell.From.To2D().Distance(minionPrediction.CastPosition.To2D()) <= spell.Range)\n                                {\n                                    result.Add(minionPrediction.CollisionObjects\n        /// <summary>\n        ///     The skillshot cone prediction\n        /// </summary>\n        /// <summary>\n        /// <summary>\n        ///", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        if (graph.reorientAllWith(Endpoint.CIRCLE);\n        List<Node> allNodes = dag.getAdjacentNodes(x);\n        List<Node> measured = new ArrayList<>();\n        for (Node node : allNodes) {\n            if (node.getNodeType()!= NodeType.MEASURED) throw new IllegalArgumentException();\n       ", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    plcs.Push(pop[i] as PlaceBase);\n                }\n            }\n            return null;\n        return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">Name of the", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (this.attachmentId == null) {\n            if (other.attachmentId!= null) {\n                return false;\n            }\n        } else if (!this.attachmentId.equals(other.attachmentId)) {\n            return false;\n        }\n        if (this.fileId == null) {\n            if (other.fileId!= null", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                        Mobile mobile = mobiles[i];\n                        if (mobile == null || mobile.Map == null || mobile.Map!= m_Item.Map ||!m_Item.Deleted || mobiles[i].Deleted || mobiles[i].AccessLevel == null || mobiles[i].AccessLevel == AccessLevel.Player)\n                        return;\n                        if", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.AddOrUpdate(\n\t\t\t\t\tuser,\n\t\t\t\t\tmsg,\n\t\t\t\t\t(u, \n\t\t\t\t\tWorldChat.CMOptions.HistoryBuffer > 0? DateTime.Now, \n\t\t\t\t\tWorldChat.CMOptions.HistoryBuffer > 0? DateTime.Now : DateTime.Now));\n\t\t\t}\n\t\t\treturn true;\n\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": " */\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sUserId) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                        }\n                    }\n                    final DialogFragment dialog2 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog2.show(mActivity.getFragmentManager(), mActivity.getFragmentManager(), BrowserActivity.TAG_DIALOG);\n                    return true;\n                case", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "    }\n    public boolean g() {\n        return this.channel!= null && this.channel.isOpen();\n    }\n    public void close(IChatBaseComponent ichatbasecomponent) {\n        if (this.channel!= null) {\n            this.channel.close();\n        }\n        if (this.channel!= null) {\n            this.channel.close", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                jj = z_index_dict[z_key][1]\nNext line of code:\n:\n                z_arr[p_index, kk, jj] = z_dict[z_key][per][per]\nNext line of code:\n:\n                z_err_arr[p_index, kk, jj] = z_dict[z_key][per]\nNext line", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "            env[\"PATH\"] = \":\".join([env[\"PATH\"]] + extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join([env[\"LD_LIBRARY_PATH\"]] + extra_lib)\n        if gonk:\n            env[\"B2G\"] = self.config[\"gonk\"][\"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "            for rel_path, manifest_items in iteritems(type_paths):\n                source_file = source_files.get(rel_path, manifest_items)\n                if source_file is None:\n                    source_file = SourceFile(tests_root,\n                                         rel_path,\n                                         source_file.url_base)\n                    source_files[rel_path] = source_file\n", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "            throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n            throw new NotSupportedException();\n        }\n        ///", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "      for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf = Etf*grad_var+energy_var*grad_Etf\n        grad_E = np.nan_to_num((y - self.y_means) / self.y", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (this.id == null)\n\t\t{\n\t\t\tif (caseInsensitive; _x == true)\n\t\t\t\treturn 0;\n\t\t\telse\n\t\t\t\treturn 1;\n\t\t}\n\t\tif (this.id == null)\n\t\t{\n\t\t\tif (caseInsensitive == true)\n\t\t\t\treturn 0;\n\t\t\telse", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertEquals(found.size(), 3);\n    }\n    @Test\n    @Test(dependsOnMethods = \"shouldFindStacksWithSpecifiedTags\")\n    public void shouldFindStacksWithSpecifiedTagsAndScope() throws Exception {\n        stacks[0].setScope(\"search-scope\");\n        stacks[1].", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter pDepth = new ParameterImpl();\n        pDepth.setParameterCode(\"DEPTH\");\n        pDepth.setValue(depth);\n        crawlParameters.add(pDepth.addParameter(pDepth);\n        //EXCLUSION REGEXP\nNext line of code:\n:\n        Parameter pExclusionRegexp = new ParameterImpl();\n        pExclusionReg", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// $capture or $(..capture)\n\t\t\t// $capture or $(..capture or $(..capture)\n\t\t\t// $capture or $(..capture\n\t\t\t// $capture or $(..capture\n\t\t\t// $capture or $(..capture\n\t\t\t// $capture or $(..capture\n", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                    if (colisionList.Count() == 0)\n                    {\n                        extendedWillHit++;\n                    }\n                    else\n                    {\n                        extendedWillHit = 0;\n                    }\n                    if (extendedWillHit >= param)\n                    {\n                        actionQueue.EnqueueAction(\n                        laneClearQueue,\n                        () => true,\n                       ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t// Context Menus\n\t\tcontextMenus.ContextMenus.getContractMenu = factory.getMenu(0);\n\t\tcontextMenus.ContextMenus.getGPContractsMenu = factory.getMenu(1);\n\t\tcontextMenus.ContextMenus.getGPContractsMenu.getSubMenuItem(0).setText(\"Select);\n\t\tcontextMenus.ContextMenus.getGP", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "    for line = re.findall(pattern, frozen_output)\n    if line:\n        return True:\n    return False\ndef python_prereqs_installation():\n    \"\"\"\n    Installs Python prerequisites\n    \"\"\"\n    for req_file in PYTHON_REQ_FILES:\n        pip_install_req_file(req_file)\ndef pip_install_req_file(req", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'm2m': [(6, 0, self.env['test_testing_utilities.sub2.m2o'].create({'name': 'a'}).id}).ids))]\n        f = Form(r)\n        with self.assertRaises(AssertionSub):\n            f.m2m.add(self.env['test_testing_utilities.sub", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    assert simplify(Sum(x, (x, 1, 2)) + 3)) == Sum(x, (x, 1, 2))\n    assert Sum(3*x, (x, 1, 2)) == 2)) == 3*Sum(x, (x, ", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine.WWW.UnescapeURL(a1);\n\t\t\t\tpushValue(l,true);\n\t\t\t\tpushValue(l,ret);\n\t\t\t\treturn 2;\n", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                this._oldItemList = (changedItems == null)? null : ArrayList.ReadOnly(changedItems);\n                this._oldStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._notifyAction = action;\n                this._newItemList = (changedItems == null)? null : ArrayList.ReadOnly(ch", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "            int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeAfter, sizeBefore);\n            StringReader reader = new StringReader(writer.toString();\n            Object testObject = getWriteControlObject();\n            XMLDescriptor desc = null!= XMLDocument) {\n                XMLRoot xmlRoot = (XMLRoot) objectToWrite", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                    c.Campus = Token2Csv();\n                    break;\n                case Param.OrgType:\n                    c.OrgType = Token2Csv();\n                    break;\n                case Param.OrgType2:\n                    c.OrgType2 = Token2Csv().ToInt();\n                    break;\n                case Param.OrgType:\n                   ", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Entry: {0} {1} {2} {3} {4} {4} {4} {4} {5} {5}\", i, ide.width, ide.height, ide.colorCount, ide.reserved, ide.planes, ide.bitCount, ide.bytesInRes,", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "                if ((l.status & Label) & Label.REACHABLE) {\n                    // l is a reachable basic block that is not a JSR target\n                    // or a RET target\n                    // or a JSR target that is not the JSR block\n                    // or a JSR target that is not the", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(StackObject.Stack", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t}\n\t\tcomboLabelPosition.select((PageSupport.setLabelPosition(position)));}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void widgetDefaultSelected(SelectionEvent e) {\n\t\t}\n\t\t@Override\n\t\tpublic void widgetSelected(SelectionListener e) {\n\t\t}\n\t\t@Override\n\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currChannelValue), int(lastChannelValue)-1, \"Failed to decrement the", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "        K = pow(self.f, self.x, self.f, self.p)\n        # okay, build up the hash H of\n        hm = Message()\n        hm.add(self.transport.local_version, self.transport.remote_version)\n        hm.add_mpint(self.transport.local_kex_init, self.transport.remote_kex_init)", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "            // Get the node\n            DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getRoot();\n            // Get the node for the connection\n            DatabaseNode databaseNode = (DatabaseNode) node.getUserObject();\n            // Set the connection\n            databaseNode.setConnection(connectionData);\n            // Set the name of the", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "\"\"\"            \"\"\"a class that will be used into the python code, mainly for usability purposes\"\"\"\n\"\"\"            def sum(self, code, code, from_date, to_date=None):\n                if to_date is None:\n                    to_date = from_date\n                result = 0.0\n                self.cr.execute(\"SELECT", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        #No little h\n        #Need to give mass * h and get the sigma without little h\n        #The following lines are used only for ST MF and ST MF and ST bias\n        sigma_m = np.array([cosmo0.sigma_m0.sigma_m(m/cosmo0._h) for", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        d.width = font.getSize() * 2;\n        d.height = font.getSize() * 2;\n        return d;\n    }\n    /**\n     * The FigSingleLineText is a FigText, so it can be edited by the FigText\n     * class.  This method is called when the Fig", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "        self.all_in_all(phi=share_edge\n:\n        self.all_in_all(phi=phi,ref_p=p0=self.edge[0:0],p1=share_edge\n:\n        self.share_edge\n:\n        self.share_face_init(self.flag)\n        self.cal_point_in_fit(self.container\n:\n        self", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate void SecurityPicker_OnSecurityPickerSelected(object sender, SecurityPickerEventArgs e)\n\t\t{\n\t\t\tvar security = e.Security;\n\t\t\tif (security = null)\n\t\t\t\treturn;\n\t\t\t// create new market data subscription\n\t\t\tvar md = Trader.CreateMarketDataSubscription(security", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                    for i\nNext line of code:\n:\n                    for n in xrange(params[0]['nbins'])\nNext line of code:\n:\n                    for n in xrange(params[1]['nbins'])\nNext line of code:\n:\n                    for n in params[3]['nbins']\nNext line of code:\n:\n                   ", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            contact.lastServerMsgId = query.getLastMessageId();\n            contact.lastServerMsgId = query.getLastMessageId();\n            protocol.getRosterStorage().updateLastServerMsgId(contact);\n        }\n    }\n    private Query findQuery(String queryId) {\n        synchronized (queries) {\n            for (Query query =", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "                im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L, im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void parseLog24(Application app, ArrayList<byte[]> log) {\n\t\tif (log.size() > 0) {\n\t\t\tfinal byte[] d = log.get(0)[0];\n\t\t\tif (d == 0x00) {\n\t\t\t\tapp.setProperty", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "class BlockParser(Parser):\n    PARSER_INFO = {\n    format = (\n        (Bit, \"extend\", \"Whether the header is extended\"),\n        (NullBits, \"unused\", 15, \"Unused bit flags\")\n    )\n    def parseFlags(self):\n        yield BaseFlags(self, \"flags\", \"Unknown", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": ":\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n:\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model( datafile = sys.argv[ 1 ], modelfile = sys.argv[ 3 ] )\n\t\tprint \"Score = %s\" % model.score()\n\t\tprint \"Top. Order = %s\" \n\t\tprint \"Network = %s\" % model.network\n\t\tprint \"", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (chance <= 0)\n                res = EnhanceResult.Failure;\n            else\n                res = EnhanceResult.Success;\n        }\n    }\n}\n", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "            if displayname is None:\n                self.msg.fatal(\n                    \"enumeratedValue is missing required tag 'displayName'\",\n                    self.src_ref\n                )\n            if desc is None:\n                self.msg.fatal(\n                    \"enumeratedValue is missing required tag 'description'\",\n                    self.src_ref\n                )\n           ", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                    MessageBox.Show(\"No FOG Service not found!\");\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Unable to locate FOG Service!\");\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (isConfigFilePresent())\n            {\n                pnlIP.Visible = false", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True to submit the value of the selected items (", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                if(this.trianglesUsed[textureHash == 0)\n                    continue;\n                if(!this.textureArray[textureArray[textureHash].getImage().isSelected())\n                    this.textureArray[textureArray[textureHash].getImage().selectTexture();\n                Main.opengl.glBegin(this.beginEnd = true;\n                for(int", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    if header not in exposedHeaders:\n        exposedHeaders += ','+ header\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n    return response\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                    Driver driver = idlePool.Peek();\n                    if (driver.IdleSince < now - (int)settings.IdleConnectionTimeout * 1000)\n                    {\n                        oldDrivers.Add(driver);\n                        EnqueueIdle(driver);\n                    }\n                    }\n                    else\n                        break;\n                }\n            }\n            return oldDrivers;\n", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "        var = (var = (var, 'units', units, p, crs)\n        var, center = _convert_units(var, 'center', units, p, p, p, p, p, crs)\n        upper_left_extent = _convert_units(upper_left_extent, 'upper_left_extent", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor((double)seconds1.Value - (double)num * 60 * 60 - (double)num1 * 60);\n\t\t\t\t\tdouble? seconds2 = this.Seconds;\n\t\t\t\t\tint num3 = (int)Math", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Attributes = new AttributeCollection(this);\n        }\n        public void Use()\n        {\n            if (Active) {\n                if (!Started) {\n                    Started =", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "        for met = self\n        for gene in self.genes:\n            gene._model = self.genes.get_by_id(gene.id)\n        for rxn in self.reactions:\n            _model = self.reactions.get_by_id(rxn.id)\n        return self\n    def trim(self, inplace=True):\n", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tif (beans.get(i)!= null)\n\t\t\t{\n\t\t\t\tcoll.add(new TumourGroupListVo((ims.clinicaladmin.vo.beans.TumourGroupListVoBean)beans.get(i)));\n\t\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\t\th = lines[selectedLine].height;\n\t\t\t\twhile(foundBottom){\n\t\t\t\t\tfoundBottom = false;\n\t\t\t\t\tfor(int i=0; i!=lines.length; i++){\n\t\t\t\t\t\tif(lines[i].contains(left, left, lines[i].y+lines[i].", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "        new LayoutAnimationController(set, 0.25f);\n        mListView.setLayoutAnimation(controller);\n    }\n    \n    /**\n     * Fill the data in the list.\n     */\n    private void fillData() {\n    \tmNavigationList.clear();\n    \tmNavigationList.add(new WeaveBookmarksListActivity.this, m", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "                if (!PartnerInterestRow.IsFieldKeyNull())\n                {\n                    if (HighestNumber = Math.Max(HighestNumber, PartnerInterestRow.FieldKey);\n                }\n                }\n                if (HighestNumber!= 0)\n                {\n                    ARow.SetFieldKey = HighestNumber + 1;\n                }\n            }\n       ", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(structure[i]!= Mappings.indexUnknown)\n\t\t\t{\n\t\t\t\tthis.addWindowToDatabase(pssm, i, structure);\n\t\t\t}\n\t\t}\n\t}\n\t}\n\t\n\t\n\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
