{"pred": "\t\t\t\tParticipant pl = (Participant)m_Participants[i];\n\t\t\t\tpl.CloseGumps( types, defs );\n\t\t\t}\n\t\t}\n\t\tpublic void Finish( Mobile winner )\n\t\t{\n\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\n\n\n\n\n# Example usage:\n\n# Create a random graph\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        a.seek(0)\n        b = a.read_frames(1024)\n        a.seek(1024)\n        c = a.read_frames(1024", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   page = VideoPage(self.browser)\n    page.open_video_page(\"VIDEO_ID\")\n    page.add_translation()\n    page.follow_text()\n    page.subtitle_languages()\n    page.language_status(\"EN\")\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += a + \" \"\n        return ret\n    def is_correct(self, answer):\n        return self.is_match(answer)\n    def is_match(self, answer):\n        for a in self.answers:", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n        s.println(\"***\");\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public synchronized static void removeSpace (String name) {\n        spaceRegistrar.remove (name);\n    }", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\t\t//Alchemical Catalyst\n\t\t\t\t\t\t//TODO: add button to consume Alchemical Catalyst?\n\t\t\t\t\t//RedButton btnConsume = new RedButton(Messages.get(this, \"consume\")) {\n\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       # Create a SOAP message\n        soap_message = SOAPMessage.createMessage()\n        # Set the soap action\n        soap_message.setSOAPAction(self.action + self.name)\n        # Set the soap method\n        soap_message.setMethod(self.", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "self.webview.execute_javascript(\"setRepeatedStatus('%s');\" % status_id)\n\ndef mark_status_as_repeated(status_id):\n    mark = \"setRepeatedStatus('%s');\" % status_id\n    self.", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "   def action_list_files(self, login, password, path, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker list_files %s %s\", pprint.pformat(path),\n                             pprint.pformat(login))\n           ", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!Reference", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   def getTrustManagers(self):\n        return self.trust_managers\n\n    def init(self, trust_store):\n        self.trust_store = trust_store\n        self.trust_managers = [self._get_ca_certs_", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "```\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnJump);\n\t\t\t\t\t//don't catch 0 value\n\t\t\t\t\t\twhile ( store.IterNext(ref iter", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                argValues[i] = \"\";\n            } else {\n                argValues[i", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf)\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\t\t\t// Create the shell\n\t\tShell shell = new Shell(parent, SHELL_HEIGHT, SHELL_LENGHT);\n\t\tshell.setImage(Image.fromFile(ICON_PATH_PLAY));\n\t\tshell.addListener(S", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "           }\n        }\n        private class InternalTarget : Target\n        {\n            private ArchProtectionSpell m_Owner;\n            public InternalTarget(ArchProtectionSpell owner)\n                : base(Core.ML ? 10 : 12, true,", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "   def _connection_for_bind(self, bind, close_with_with_result=True):\n        if bind is None:\n            bind = self.get_bind()\n        return bind\n\n    def get_bind(self, mapper=None, clause=None):\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getFieldName();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\tnamed = new", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like `removeslash`, but for the opposite operation.\n\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if self.request.path.endswith(\"/\"):\n            if self.", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n    wigle_downloader = WigleDownloader(args.user, args.password, args.coordfile, args.outpath)\n    wigle_downloader.run()\n\nI have added the code for the arguments", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(0) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds = android_builds(build, builds=mobile_details.android_builds)\n    else:\n        builds = [\n            {'os': 'os_windows', 'os_pretty': 'Windows',\n             'arch': 'x86', 'arch_pretty", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (objectID==null) {\n\t\t\t//no state bean found by label\n\t\t\treturn false;\n\t\t}\n\t\tstateBeansList = StatusBL.loadByLabel(objectID.toString());\n\t\tif (stateBeansList==null ||", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                var reference = argument.Parent as ReferenceExpressionSyntax;\n                if (reference != null) {\n                    var member = memberList.FirstOrDefault(x => x.Parent.Parent == reference.Parent);\n                    if (", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the child verticals have been updated to match the new group configuration.\n        self.assertEqual(2, len(split_test.children))\n        vertical_0 = self.get_item_", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           // Generate the CIDFontType2 dictionary\n            PdfIndirectReference fontDescriptor = writer.GetFontDescriptor(ref, fontType);\n            PdfStream toUnicode = GetToUnicode(metrics);\n            PdfDictionary cidFontType2 = GetCIDFont", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\t// place the cell at its proper depth\n\t\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.depth = findDepth(cgn.depth, cell.getDepth());\n\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        task.addListener(new ListenableFutureTask.Listener<Bitmap>() {\n          @Override public void onSuccess(Bitmap result) {\n            bitmapReference = new SoftReference<>(result);\n          }\n          @Override", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   # Register Node to keep on consistency on container objects navigations\n    @navigator.register(Node, 'All')\n    @navigator.register(NodeCollection, 'All')\n    class All(CFMENavigateStep):\n        VIEW = NodeAllView\n       ", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               base.Render(writer);\n            }\n        }\n    }\n}\n}\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tdamage = compound.getInteger(\"Damage\");\n\t\t\n\t\tif (compound.hasKey(\"FireAspect\"))\n\t\t{\n\t\t\tfire = compound.getShort(\"FireAspect\")\n\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \"probability=\" + probability\n            + \", scopes=\" + (scopes == null ? \"null\" : scopes);\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'public',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "   def test_circular_reference_deltas_3(self):\n        self.circular_reference_deltas_3(Document, Document)\n        self.circular_reference_deltas_3(DynamicDocument, DynamicDocument)\n        self.circular_", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "           else:\n                print('Please select a dimension and a variable')\n        else:\n            x = x if x else self._inspector.dim_name_to_size[x]\n            y = y if y else self._inspector.dim_name_to_size", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (rootFolder.IsIgnored())\n                {\n                    toScan.Add(path);\n                    _tempIgnoredPaths.AddOrUpdate(path, 1, (key, value) => value + 1);\n                }\n                else\n                {\n                ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E getAndCompute(K key,\n\t\t\t\t\t\t\tFunction<? super K, ? extends E> mappingFunction) {\n\t\tFunction<K, I> function = k -> write(", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            isDiscussable = con", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t}\n\t}\n\tpublic class TileList\n\t{\n\t\tpublic Tile[] m_Tiles;\n\t\tpublic int m_Count;\n\t\tpublic TileList( int count )\n\t\t{\n\t\t\tm_Count = count;\n\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // get the parcel voice channel\n                    //m_log.log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region {0} parcel {1} avatar {2} getting voice channel\",\n                    //                  scene.RegionInfo.", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriods.Update(PayPeriodCur);\n\t\t\tDialogResult=DialogResult.OK;\n\t\t}\n\t}\n\t#endregion\n}", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_or_org_member_create', context, data_dict)\n\ndef _check_group_auth_for_package(context, data_dict):\n    # FIXME This code is shared amoung other logic.auth files", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\texample.setValue(predictionAttribute, example.getValue(predictionAttribute));\n\t\t\t\t// updating confidences\n\t\t\t\tconfidences[resultIndex] *= Math.pow(confidences[parentIndex], 1d / depth);\n\t", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        #endregion // Methods\n        #region Overrides\n        public override string ToString()\n        {\n            return this.translationProvider.ToString", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = Character.toCodePoint(ch);\n            if (codePoint < 0x10000) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n}", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "     SampleDAO sampleDAO = new SampleDAOImpl();\n      String sampleStatus = sampleDAO.getSampleByAccessionNumber(accessionNumber).getStatus();\n      if (sampleStatus.equals(RecordStatus.NotRegistered.toString())){\n        // if the sample is", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Man", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor (int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n\n\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "xbmc.sleep(1000)\nxbmc.executebuiltin(\"Reboot\")\n\nPlease help me to complete this code.\n\nThank you in advance.\n\nRegards,\n\n[Your Name]\n\n\n\n\n\n\n\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (Info.NewProductionCashThreshold <= bot.Cash)\n\t\t\t{\n\t\t\t\tforeach (var b in builders)\n\t\t\t\t\tb.SetRallyPoint(bot);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       return plan.getPlanGraph();\n    }\n    public void assertPlan(CompiledPlan plan, String... expectedPlan) {\n        assert(plan != null);\n        assert(plan.getPlanGraph() != null);\n        assert(plan.getPlanGraph().size() == expected", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Location = new System.Drawing.Point(59, 168);\n\t\t\tthis.textBox2.Name = \"textBox2\";\n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (Parity)parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = (StopBits)bits", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n    def test_user_with_cobrand", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    else:\n        _keep_tempdir = False\n    #print \"keep_tempdir is\", _keep_tempdir\n    TestMethods(tempdir", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tself[\"list\"].add(self.newAPList[i])\n\t\t\t\tself[\"list\"].setCurrent(self.newAPList[i])\n\t\t\t\ti = i + 1\n\t\t\t\tif i == len(self.newAPList", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               return new Rectangle(x * size, y * size, fontX * size, barHeight * size);\n            }\n        }\n    }\n}\n```\n\nThis code is a implementation of the barcode 39 and barcode 39 extended, it uses the iText", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n}\n}", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90, 90, 2)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            (\"longitude\", x_points.flatten()),", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.ToClipboardString());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            byte[] bytes =", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   elif color == 'yellow':\n        print '\\033[1;33;40m'\n    else:\n        print '\\033[1;32;40m'\n\ndef main():\n    # get the wavs_dir\n    wav", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "       }\n    }\n}\n\\end{code}\n\nPlease help me complete this code by writing the remaining methods and properties.\n\nNote: I have only included the methods and properties that are missing in the provided code, if there are any other methods or properties that are not necessary, please let", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.Text = \"DummySolutionExplorer\";\n            this.Text += \" (2 projects)\";\n            this.Load += new System.EventHandler(this.DummySolutionExplorer_Load);\n            // \n            // DummySolutionExplorer_Load\n", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   def nullFunction(self, functionName, *args, **named):\n        raise NotImplementedError(functionName)\n\nI need help in completing the code by writing the implementation for the function `nullFunction` and also for the `wrapContextCheck` function.\n\nCan someone", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           baos.write(emptyStreams.toByteArray());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException {\n        boolean hasEmptyFiles = false;\n        for (final", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   if (alphaLevel > 0)\n                    {\n                        alphaLevel -= 5;\n                        if (alphaLevel < 0)\n                            alphaLevel = 0;\n                    }\n                    else\n                    {\n                        alphaLevel += 5;", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_over", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, can", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       f.write(' 2')\n        f.write(' 3')\n        f.write(' 4')\n        f.write(' 5')\n        f.write(' 6')\n        f.write(' 7')\n        f.write(' 8')\n       ", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += (((b & 0x04) << \n                          5) & 0xFF);\n                    break;\n                case 0x08:\n                    /* D */\n                    i = b & 0x23;\n                    i", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self.course_key.make_locator()\n    def _create_course(self):\n        \"\"\"\n        Create the course in the studio.\n        \"\"\"\n        course_data = {\n            'org': self.org,\n            'number': self.number,\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tchance=Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\treturn (int) (chance*100);\n\t}\n}\n */\n\n", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   if action == \"create\":\n        # Create the meter\n        body = '{\"name\":\"' + name + '\"}'\n        response, info = http_request(module, name, apiid, apikey, data=body, action=\"create\")\n        if info['status'] !=", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(5, 19);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "   def _run_plugin(self, plugname, *args, **kwargs):\n        plugruncount += 1\n        try:\n            return self.loaded_plugins[plugname].run(*args, **kwargs)\n        except KeyboardInterrupt:\n            raise\n", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "# from MaKaC.conference import IConferenceFossil\n# from MaKaC.conference import IConferenceParticipationFossil\n# from MaKaC.conference import ILocalFileFossil\n# from MaKaC.conference import", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.alertError(parent, \"Error importing message: \" + e.getMessage());\n                            setVisible(true);\n                            return false;\n                        }\n                        return true;\n                    }\n                };\n                messageBrowser.setMessageWriter(messageWriter);\n", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\tlayer = ((Scriptable) value).getIntValue(LAYER, -1);\n\t\t\t\t\t\n\t\t\t\t} else if (value instanceof Number) {\n\t\t\t\t\tlayer = (int) value;\n\t\t\t\t} else {", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.getAccessToken() != null) {\n            GraphUser user = getUser();\n            if (user != null) {\n                // Update the UI with the user's profile picture and name\n                connectedStateLabel.setText(user.getFirst", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.strength;\n\t\t}\n\t\tfor (Emotion emotion : emotions) {\n\t\t\temotion.strength = sum / emotions.length;\n\t\t}", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n                }\n            }\n        ],\n        self.build.stages_to_list())\n    def test_add_stage_with_duration(self):\n        \"\"\"Test adding a stage with a duration.\"", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   LatRad = phi1*_deg2rad\n    LongRad = LongOriginRad + (x*cos(phi1Rad) + y*sin(phi1Rad))*_deg2rad\n    Lat = LatRad*_deg2rad\n    Long = LongRad*_deg", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.save(commit=False)\n            messages.error(request, \"Reporting user...\")\n            return HttpResponseRedirect(reverse('profile'))\n    else:\n        form", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @cachedproperty\n    def series_and_releases(self):\n        \"\"\"Get a batch of series and release\n        Each entry returned is a tuple of (series, release).\n        \"\"\"\n        series_and_and_releases = []\n        for series in self.product", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t}\n\t\t}\n#endif\n\t}\n}\n#if !KeePassLibSD\n[Serializable]\n#endif", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}\n\npublic class NumberVariableLengthTest\n{\n    public static void main(String[] args)\n    {\n        NumberVariableLength variable = new NumberVariableLength(\"Track\", new byte[", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "   def compile_tag_regex(positional_tags):\n        if not positional_tags:\n            return positional_tags\n        else:\n            new_positional_tags_list = []\n            positional_tags = positional_tags[0]\n            for flag,", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "           return new object[0];\n        }\n        }\n    }\n}\n\nPlease help me to complete this code.\n\nAnswer:\n\nThe code you provided is a partial implementation of the `GenericParameter` class from the `System.Metadata` namespace. The class is intended to represent", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "packet = OBD_Packet(packet_type, *fields)\n\nI am trying to create a class for each of the OBD_PID packets, and then use the class to create an instance of the packet. However, I am getting an error that the class does not have a", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tif ready_pipe:\n\t\t\tself.ready_pipe = True\n\t\t\tself.dbus.service.Object.emit(self, 'Ready', None)\n\t\telse:\n\t\t\tself.dbus.service.Object.emit(self, 'Not", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           }\n            }\n        }\n\n        public override void OnCraftFinished(int index, Mobile from)\n        {\n            base.OnCraftFinished(index, from);\n            if (Core.ML)\n            {\n                int type = (int)GetRes", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "   def __enter__(self):\n        self.push()\n        return self\n\n    def __exit__(self, exc_type, exc_value, tb):\n        self.pop(exc_value)\n        if exc_type is not None:\n            self.app.", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}\n}\n}", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   axis_proj = _axis_in_detector(ray_trafo.geometry)\n    rot_dir = _rotation_direction_in_detector(ray_trafo.geometry)\n    # ...\n    # Compute angles\n    phi = np.arctan(", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   def _doLogin(self):\n        if self.username and self.password:\n            try:\n                self.session.login(self.username, self.password)\n            except:\n                logger.log(u\"Unable to login to provider\", logger.WARNING)\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (type == FontSize.AsUnit)\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\telse\n\t\t\t\treturn font_size_names [type];\n\t\t}\n\t}\n}\n\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "           for (int w = 0; w < width; w++) {\n                Topic vertex = getVertexTopic(w + \" \" + h, topicmap, optionsValues);\n                if (vertex != null) {\n                    edges.add(T2.create(vertex", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   # test_with_rtdc_get()\n    # test_with_rtdc_set()\n    # test_with_rtdc_add()\n    # test_with_rtdc_sub()\n    # test_with_rtdc_mul()", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       final LocalTripleStore t1 = new LocalTripleStore(File.createTempFile(\"t1\", \".ttl\"));\n        final LocalTripleStore t2 = new LocalTripleStore(File.createTempFile(\"t2\", \".ttl\"));\n        //        final LocalTri", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "   assert alert.lowest_spotprice(history, 'us-east-1b') == 0.105200, \"Lowest spot price for us-east-1b should be 0.105200\"\n    assert alert.lowest_", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tcontext = IntPtr.Zero;\n\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tcontext = IntPtr.Zero;\n\t\t\tSDL.SDL_GL_DestroySurface(window.Surface);\n\t\t\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       (projected onto the *y* axis).\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_inverse", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       CmsLink link = new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n        return link;\n    }\n    @Override\n    public String toString() {\n        return ReflectionToStringBuilder.", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 adminUser = getEucalyptusAdmin();\n                  }\n                }\n              } catch (AuthException e) { // In case the account is deleted, transfer the ownership to eucalyptus admin\n                // account\n                LOG.warn(\"Account ID \" + wal", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _initialized += value; }\n            remove { _initialized -= value; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        command.setIsImportAsNewEntity(isImportAsNewEntity);\n        CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command);\n    }\n}\n\n...\n\n```", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "   self.run()\n\n    def run(self):\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n        # Run Post-Processing", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes)\n\t\t{\n\t\t\tMethodBuilder mb = DefineMethod(name", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder(prototype);\n    }\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    public static class Builder {\n      public static SendInvitationRequest DefaultInstance", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "vertices[x] = getVertex(i, x);\n            }\n        }\n    }\n    protected Vector3f getVertex(int i, int x) {\n        if (i < getQuadQuantity() && x >= 0 && x < 4) {\n           ", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       result.addAll(CmsDateUtil.getDateColumns(showShowDateData));\n        return result;\n    }\n    /**\n     * Returns the page type (default, search, etc.).<p>\n     * \n     * @return the page type\n     */\n", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n}\n```\n\nYou will need to add the `InputField` component to the `GameObject` in the Unity editor, and then assign", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    #endregion\n  }\n  }\n}\n```\n\nPlease help me complete this code. I am new to C# and I am", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!string.IsNullOrEmpty(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            // send email to each user\n            foreach (string user in Users", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\t\tif (Viewport.LastMousePos.Y >= EdgeCornerScrollThreshold)\n\t\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n\t\t}\n\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // call SaveData() to save the data\n            SaveData();\n        }\n        private void SaveData()\n        {\n            // save data to dataset\n            FMainDS.PcConference.Clear();\n            FMainDS.PcConference.ConferenceKey = F", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as blob/byte[].\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n}\n```\nThis code defines a `Load` class with two methods:", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __str__(self):\n        return \"PayloadRequirements(apply_called_for_all_requirements=%s, apply_cb=%s)\" % (self.apply_called_for_all_requirements, self.apply_cb)\n\nI have added the missing", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && CurrentDisplaySet != null; }\n\t\t}\n\t\t#endregion\n\t\t#region Event Handlers\n\t\tprivate void OnImageBoxSelected(object sender, ImageBoxImageBoxSelectedEventArgs e)\n\t\t{\n\t\t\tCurrent", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tdataDir = value;\n\t\t\t}\n\t\t}\n\t}\n}\n\nThis code is a Gnome application that inherits from the IN", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getType() != BugAnnotation.TYPE_SOURCE_LINE) {\n                throw new IllegalArgumentException(\"Invalid bug annotation type: \" + bugAnnotation.getType());\n            }\n        }\n    }\n}\n\n\n\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic class BreadCrumbs : Food\n\t{\n\t\t[Constructable]\n\t\tpublic BreadCrumbs() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic BreadCrumbs( int", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        {\n            if", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, getFill(x), anchor);\n\t}\n}\n\nPlease complete the code by filling in the missing values for the GridBagConstraints object.", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "   def _retr_file(self, filename):\n        self.lock.acquire()\n        self._connect()\n        self._buffer = bytearray()\n        try:\n            self._ftp.retrbinary(\"RETR {}\".format(filename), self._buffer_file)", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        self.assertEquals(\n            field_def['rules']['json'],\n            field_model_def", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new object[] { \"E1\", 10L });\n                );\n                // widen to int\n                env.CompileDeploy(\"alter column MyInfraW.f1 set data type to int\", path);\n                env.CompileDeploy(\"create index MyIn", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__idiv__(other)\n    \n    def __idiv__(self, other):", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   def save_embedded_field(self, cr, uid, el, context=None):\n        Model = self.pool[el.get('data-oe-model')]\n        field = el.get('data-oe-field')\n        column = Model._all_columns", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n            c.putClientProperty(BasicHTML.propertyKey, value);\n        }\n        else {\n            c.removeClientProperty(BasicHTML.propertyKey);\n        }\n        if (oldValue != null) {\n            old", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/html/test.\" +", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.sqlloader = new HbmSqlLoader(namedQueryReference);\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string[] parameterNames)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\tint memberCount = (int) m_Members.Count;\n\t\t\twriter.WriteEncodedInt( memberCount );\n\t\t\tfor ( int i = 0; i < memberCount; ++i )\n\t\t\t{\n\t\t\t\tPlayerState pl", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.removeFirst();\n        assert contains(currentGraph());\n    }\n    private void moveForward() {\n        assert contains(currentGraph());\n        assert invocationQueue.peekFirst().callee().numberOfMethods() > 0;\n        popInvocation();\n", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "   def handle_watch(self):\n        if self.args['watch']:\n            print(\"  WATCHING...\")\n            while True:\n                try:\n                    self.docker_instance.wait()\n                except KeyboardInterrupt:\n                    print(\"  TER", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode phi = getCachedPhi(value, value.getStamp());\n                    if (phi != null) {\n                        entry.setValue(phi);\n                    }\n                } else {\n                    entry.setValue(", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n}\n\nPlease help me complete the code.\n\nThank you.", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonianWallMapGump(from));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfrom.SendLocalizedMessage(1042011); // You must be in range to", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   'BibrecBibxxx',\n    'Bibxxx',\n    'RecordMetadata',\n    'utils',\n    'db',\n    'current_app',\n    'utils.TableNameMixin',\n    'utils.TableFromCamelNameMixin',", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def remove_user_session(self, username, domain, resource):\n        user = '%s@%s' % (username, domain)\n        session = self.module.get(user).get('sessions', set()).pop(resource)\n        if session is None:\n           ", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath)\n    def find(self, st, by='msgid'):\n        \"\"\"\n        Find entry which msgid (or property identified by the *", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    else:\n      self.integrityClient.setTransformationParameter( transID, 'Status', 'WaitingIntegrity'", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\t// Check if the form action is a valid Freenet URI\n\t\t\t// If it is, then we can use the Freenet\n\t\t\t// \n\t\t\t// If it is not, then we will have to\n\t\t\t// use the formPassword to", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        d = yield self.run_fake_single_build(gsp, buildResult, expWarning=False)\n        result = yield d\n        self.assertEqual(result, make", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n    self.category.term = 'http://example.com/category'\n    self.category.scheme = 'http'\n    self.category.extension_attributes['foo'] = 'bar'\n    self.assert_(self.category.", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "           Map<String, AnnotationMirror> r2) {\n            // If the type variable is not bound, it is not immutable\n            // and the type is not immutable, it is not immutable\n            // If the type variable is bound, it is immutable\n            //", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "   def draw_header(self, context):\n        self.layout.prop(context.material, \"use\", text=\"\")\n\n    def draw(self, context):\n        layout = self.layout\n        mat = context.material\n        row = layout.row()\n        row.", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_irq_enabled = map16.IRQEnabled;", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenu jMnuOpenDocument = new JMenu(\"Open Document\");\n            JMenuItem jMnuItem = new JMenuItem(\"Open\");\n            jMnuItem.addActionListener(oActionListener);\n            jMnuOpenDocument.add(jMnuItem);\n            _", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Blue Bears]\n\t\tAdd(\"Party Quest\", 700027); // Party Quest Scroll [10 White Bears]\n\t\tAdd(\"Part", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint size = MeasureHeight (MeasureSpec.MakeMeasureSpec (0, 0));\n\t\t\tsize = Math.Max (size, min);\n\t\t\treturn size;\n\t\t}\n\t}\n}\n}\n}\n}\n}\n\n", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   def save(self, *args, **kwargs):\n        \"\"\"\n        Save the cross-publication.\n        \"\"\"\n        # Save the cross-publication\n        super(AnnouncementTwitterCrossPublication, self).save(*args, **kwargs)\n        # Save", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "```\nimport os\nimport shlex\nimport sphinx\nimport sphinx_material\n\n# ...\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "   time_return = time.mktime(time_add(row[4], row[5]))\n    print \"Time return is: \", time_return\n    #\n    # Now add the flight to the flight_log\n    #\n    cursor.execute('''INSERT INTO flight_", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       # Do the queries\n        for project_id, timestamp in new_snapshots.items():\n            # Connect to the database\n            conn = rethinkdb_connection()\n            # Get the current last_snapshot for this project\n            project = conn.table('projects.", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tif (HasKeyword(\"deian_01\"))\n\t\t\t\t{\n\t\t\t\t\tGiveKeyword(\"deian_01\");\n\t\t\t\t\tMsg(\"(Missing dialog: Deian's explanation)\");\n\t\t\t\t", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead =", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nThe code is a callback plugin for Ansible, which writes playbook output to a JUnit formatted XML file. The plugin makes use of the `junit_", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "           }\n        }\n    }\n}\n\\end{code}\n\nThis code is from an Android app that resolves URLs using Unshorten.it API. It uses the `AsyncTask` class to perform the resolution in the background, and it displays a toast message to the user when", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if primary.keys() != []:\n        raise AssertionError(\"Primary repodata has packages.\")\n    else:\n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "   def run_command (self, command):\n        # Run the given command, and get its output as a list of files.\n        return self.get_outputs(command)\n\nI'm not sure what the code is doing, but it seems to be related to installing Python modules.", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], session, entity", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "   # Kludge, execute() don't accept a namedtuple nor an\n    # OrderedDict so convert it explicitly to a dict.\n    d = jobs[sge_jobnumber][1]._asdict()\n    d = dict(d.items())\n    self.cursor", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate(DelegateViewModel", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{0},{1})\", circle.X, circle.Y, circle.Radius);\n                    }\n                    return obj.ToString();\n                }\n            }\n            catch (Exception ex)", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   def checkDownload(self, *args):\n        check = self.load(self.URLS[1], *args, decode=True)\n        return check\n\nI'm not sure what the issue is, but I think it might be related to the `checkDownload` function. The", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t{\n\t\t\t\t// If the search found a harvestable cell, use that as the new last harvested cell.\n\t\t\t\tharv.LastHarvestedCell = path[0;\n\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "   def write_tftpd_files(self):\n        self.logger.info(\"rendering TFTPD files\")\n        self.tftpd.write_tftpd_files()\n        self.tftpd.regen_ethers()\n\n    def make_", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       Event.Builder eventb = new Event.Builder();\n        eventb.setSeverity(EventSeverity.INFO);\n        eventb.setMessage(\"This is a test event\");\n        eventb.setSource(\"test\");\n        eventb.setType(\"test\");\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           do\n            {\n                PpmContext currentContext = context;\n                context = currentContext.Suffix;\n                if (context == PpmContext.ZERO)\n                {\n                    goto NoLoop;\n                }\n                if (context.NumberStatistics ==", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false, false, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[0]);\n\t\t}\n\t\t//now we have the list of sessions to delete\n\t\t//now we have to check if the user wants to delete all the tests or just the ones that are not in the sessions\n\t\t//if", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 1, 8)\n        self.assertEquals(b'abcdefghij\\x00\\x000ij', self.read(o))\n    def test_small", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# Load and crunch the result sets\ncrunched_results = load_and_crunch_result_sets(filenames)\n\n# Plot the results\nplot_app_vc(crunched_results, 'startup', 'mz-app-visually-complete')", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_GID(self):\n        \"\"\"\n        Check GID/UID switches when current effective GID is non-root.\n        \"\"\"\n        self._testUIDGIDSwitch(0, 1, 0, 0, [0, 0], [])\n", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t}else if(bDrawCheck || bDrawCross){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlColor());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - ", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " def simulateClassifier(self, knn, patternDict, testName):\n    failures = \"\"\n    for i in range(len(patternDict)):\n      pattern = patternDict[i]['pattern']\n      category = patternDict[i]['category']\n      if knn.learn", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror) {\n        visit", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            // attempt to resolve assembly reference\n            string assemblyFile = ResolveAssemblyReference();\n            if (assemblyFile == null) {\n                Log(Level.Warning, \"Assembly reference could not", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   if len(args) > 0:\n        string = string.format(*args)\n    return string\ndef get_random_string(length=10):\n    \"\"\"\n    Generates a random string of the specified length\n    \"\"\"\n    import random\n    return ''.join", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "     }\n    }\n  }\n}\n\n\n\n// File up to here is fine\n\n// Now the actual implementation of the method\n\n// First, we need to compute the local indices of the non-zero elements\n// of the input arrays\n\nint i, j, k,", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\t\n\tpublic class State {\n\t\tpublic string name;\n\t\tpublic AnimationGraph graph;\n\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               });\n            #endregion Lucian\n            #region Maokai\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Maokai\",\n                    SpellName = \"MaokaiQ\",\n                    Slot = Spell", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.password\"));\n\t}\n}\n\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(subprocess.CalledProcessError, lambda: subprocess.Popen(\n            ['/bin/sh', '-c', 'echo', 'hello'],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE))\n\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertyService.Start();\n\t\t\tResourceService.Start();\n\t\t\tAddInTree.Start();\n\t\t\tMessageService.Start();\n\t\t\tLoggingService.Start();\n\t\t\t\n\t\t\t// run startup tasks\n\t\t\tforeach (", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t// Call the base class's Initialize method to perform any\n\t\t// initialization that is common to all constraints.\n\t\tbase.Initialize (dataSet);\n\n\t\t// Call the Initialize method of the DataTable to perform any\n\t\t// initialization that is specific to this Data", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout_3.addWidget(self.default_zoom_label)\n        self.verticalLayout_3.addWidget(self.default_zoom_option)\n        self.verticalLayout_3.addItem(self.spacerItem)\n        self.", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "           } else {\n                // Get the TAF data\n                Forecast forecast = new Forecast();\n                String icing = wxs.getString( wxs.getColumnIndex( Awos1.WX_ICING_CONDITION ) );\n                String turbulence = w", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring continents = \"from Continent\";\n\t\t\t\tint results = s.CreateQuery(continents).List().Count;\n\t\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(continents);\n\t\t\t\tAssert.Is", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "           }\n            return (ushort)uiCRCITTSum;\n        }\n        private void generate_crc_table()\n        {\n            // initialize crc table with precomputed values\n            for (int i = 0; i < 256; i++)", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 10;\n\t}\n}", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "       return new IHyperlinkDetector[] { \n                new CeylonHyperlinkDetector(controller), \n                new JavaHyperlinkDetector(), \n                new ReferencesHyperlinkDetector(), \n                new CeylonHyperlinkDetector(controller), ", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(Object3DPrivateInterface(self))\n        self.l.addWidget(VerticalSpacer(self))\n        self.setWindowTitle(\"Object3D Properties\")\n        self", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\t\tshouldSend = true;", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedChoice = selectConverter.convert(valueChoice);\n                        if (convertedChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\t\tif (i!=j)\n\t\t\t\t\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\t\t\tfractionWithAmount[i][j][k] = fractionWithAmount[i][", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "   }\n}\n\nNote: The above code is just an example and may not work as is. You will need to modify it to suit your specific requirements and environment.\n\nPlease let me know if you have any questions or need further assistance.", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t}\n}\n```\n\nPlease help me complete this code. I am not able to understand the purpose of this class and how to use", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       replay(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        permission.addUserACE(ACE_ACCESS_TYPE.DENIED, ownerId, mode);\n        assertEquals", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn Vector2.Transform (v, Matrix.CreateTranslation (viewport.Center));\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 up)\n\t\t{\nNext line of code:\n\n\t", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "xdre = XDREnum('xdr', 0)\nev = endpoint_value(1)\nes = endpoint_stats(2, 3)\npacker = xdrlib.Packer()\npacker.pack_into(xdre)\npacker.pack", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// if there are any clients still connected and not disconnecting\n\t\t\t// send the message to them\n", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Step:\n                    logDataSet(list);\n                    break;\n                case Activity:\n                    logActivityBucketList(list);\n                    break;\n            }\n        }\n    }\n    @Override\n    public void on", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "def Generate(bind_count, exec_count, function_name, parent_class):\n  \"\"\"Generate the helper function which creates a callback.\"\"\"\n  # The single use helper function\n  GenerateHelperFunction(bind_count=bind_count,\n                           exec_count=", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   response = HttpResponse(\n        simplejson.dumps(items), content_type=\"application/json\"\n    )\n    return response\n    \"\"\"\n    response = HttpResponse(\n        simplejson.dumps(items), content_type=\"application/json\"\n    )\n   ", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        // Test the optimizer.\n        final ASTSearchOptimizer optimizer = new A", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       form = UserForm(self.request.POST or None, request=request)\n        if form.is_valid():\n            self.save_form(form)\n            return self.get_success_url()\n        else:\n            messages.error(request, form.errors)", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    #region IAssemblyReference Members\n    IAssembly IAssemblyReference.ResolvedAssembly {\n      get { return this.ResolvedAssembly; }\n    }\n    AssemblyIdentity IAssemblyReference.Unified", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // Perform the TFQMR iteration\n            for (int k = 0; k < 100; k++)\n            {\n                // Perform the TFQMR iteration\n                TFQMR.PerformTFQMR(matrix, input, result, d, r,", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\t\t\treturn new Apfloat[] {median};\n\t\t} else {\n\t\t\tApfloat leftMedian = sortedNumbers[left];\n\t\t\tApfloat rightMedian = sortedNumbers[right];\n\t\t", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "   while v != -1:\n        if sample_count[v, K] > 0:\n            L[v] = left - last_update[v]\n            A[v, K] = L[v] * sample_count[v, :K]\n            last_", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "   def test_items_to_raw(self):\n        result = self._test_items_to_raw()\n        self.assertEqual(result['items'], len(self.items))\n        self.assertEqual(result['raw'], len(self.items))\n\n    def", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tvar bot = botController.AddBot(slot.Value);\n\t\t\t\t\t\t\t\t\t\tslot.Value.Bot = bot;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\n\nclass SettingsFrame(Frame):\n    frame_type = FrameType.SETTINGS\n    defined_flags = FrameFlag.create_flag_set('END_STREAM', 'ENABLE_PUSH', '", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var b = cluster.BoundingBox;\n            var r = cluster.RectangularBoundary;\n            var bb = r.BoundingBox;\n            if (b.Width < r.BoundingBox.Width || b.Height < r.BoundingBox.Height) {\n", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "void btKinematicCharacterController::setGhostObject(btRigidBody* ghostObject)\n{\n\tm_ghostObject = ghostObject;\n}\nvoid btKinematicCharacterController::setRigidBody(btRigidBody* rigid", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (int i = 0; i < initializers.size(); i++) {\n            ExpressionTree exp = initializers.get(i);\n            if (canBeLeaked(exp)) {\n                checker.report(Result.failure(\"unique.leaked\"), exp);\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\tif (nbttagcompound1 !=", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(typeAttribute.Value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//--------------------------------------------------------------------\n\t\t//", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\t\tmyTrackBar.Width = 80;\n", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t\t//", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (postdominators == null) {\n\t\t\tif (other.postdominators != null)\n\t\t\t\treturn false;\n\t\t} else if (!postdominators.equals(other.postdominators))\n\t\t\treturn false;\n\t\t\n\t", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[end][r.rightChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "   def test_pgdata_invocation(self, popen, pipe_processor_loop):\n        ret = 0\n        out = 'out'\n        err = 'err'\n        pipe = _mock_pipe(popen, pipe_processor_loop, ret, out, err", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tvar state = process.GetOrCreateData<ProcessState>();\n\t\t\tstate.IgnoreThreadsChangedEvent = false;\n\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact)proxyThat;\n\t\t\tif ( this.getId() == that.getId() ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   # Calculate body length for the RFD\n    if i == 0:\n      b.calc_body_length()\n    else:\n      b.body_length = bodies[-1].body_length\n\n    # Append bodies to total bodies list\n    bodies.append(b", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata is None:\n            # This is a Subtensor of the form X[0, :] -> X[0]\n            # Remove it\n            ret = Subtensor(node.op.idx_list)(*node.inputs[1:])\n            # Copy over previous", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "from django.contrib import admin\nadmin.autodiscover()\n\nfrom . import forms\nfrom . import views\n\nadmin.site.register(Community, forms.EditCommunityForm)\nadmin.site.register(RequestCommunity, forms.EditCommunityRequestForm)\nadmin", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return None\n        else:\n            return fn\n\n    def __init__(self, *arg, **kw):\n        self.query = None\n        self.column_descriptions = []\n        self.event_listeners = []\n        self.retval = False\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   def get_icon_class(self):\n        new_class = 'other'\n        # HACK: This shouldn't be hard-coded to two types\n        # OBSOLETE: This obsoletes 'type'\n        class_priority = ['problem', 'video", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "   def register_adapter(type):\n        \"\"\"Class decorator to register new adapter\n        Parameters\n        ----------\n        type : type\n            Type associated with adapter class.\n        \"\"\"\n        def decorate_class(cls):\n            if type not in REGISTERED", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Method != null)\n\t\t\t{\n\t\t\t\tif (Class == null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'method' attribute without 'class", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 19;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assert", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        termData.addAll(csvData);\n    }\n    protected abstract CSVFormat setupC", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\t// Passive flower wand interaction\n\t\t\t// ...\n\t\t}\n\t\treturn super.onWanded(player, wand);\n}\n}\n\nPlease help me complete this code.\n\nNote: This", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        return intrinsicCohesion;\n    }\n}\n\nPlease provide the code you want me to complete and I will be happy to help you.", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if are_equal:\n        # Upgrade successful\n        logger.info(\"Upgrade successful for record %s\" % recid)\n        return True\n    else:\n        # Upgrade failed\n        logger.info(\"Upgrade failed for record %s\" % recid)\n       ", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\te.Cancel = true;\n\t\t\tthis.Close();\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(date);\n    }\n    return new ExDate(exDateList);\n  }\n  private static Date toDatable(Date date, int hour) {\n    // Hack to", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.DataTarget = DataSource;\n\t\tsourceEventBinding.DataEventName = SourceEventName;\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<df", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class,\n                    containerName, this);\n            SpanConfig config = gson.fromJson(jsonData, SpanConfig.class);\n            switchManager.addSpanConfig(config", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}\n\nI have a feeling that this code is incomplete, but I'm not sure where. Can someone please help me complete it?\n\nThank you,\n[user]", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "   def replace_hierarachy(self, parent, child):\n        \"\"\" Add a hiearchy assertion for\n            linked entities\n        \"\"\"\n        try:\n            parent = LinkEntity.objects.get(uri=parent)\n        except LinkEntity.DoesNotExist:\n", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktofit = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergecells   = \")\n                .Append(StringUtil.ToHexString", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// Half-width katakana.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (cjkToJis [value])) |\n\t\t\t\t\t\t(((int", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   src1 = env.A[b]\n    off10 = off1//off2\n    src2 = env.cst(off10.int(-1),10)\n    obj.operands = [src1, src2, dst]\n    if obj.mode", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tJRPropertiesMap properties = new JRPropertiesMap();\n\t\t\tproperties.load(stream);\n\t\t\treturn properties;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new JRException(e);\n\t\t}", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n    }\n}\n\nPlease complete the code by filling in the missing variables and methods.", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor (false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.DiscretionaryAcl = new DiscretionaryAcl (true, true, 0);\n\t\t\t", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   def run(self):\n        while not self.__stopped:\n            try:\n                result = self.__queue.get(False)\n                if result:\n                    self.__process(result)\n                    self.__idle(self.__progress_cb,\n                                float(", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       // check if there are any RPCs in the list that are not in the current settings\n        foreach (var rpc in PhotonNetwork.rpcList)\n        {\n            if (!PhotonEditor.Current.CurrentRPCs.Contains(rpc))\n            {\n", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       return rootLayout;\n    }\n    @Override\n    public void onResume() {\n        super.onResume();\n        if (parentContext != null) {\n            parentContext.onResume();\n        }\n    }\n    @Override\n    public void onP", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "   def get_count(self, rank):\n        \"\"\"Return number of k-point/spin combinations on this CPU.\"\n        rank: int\n            Rank of CPU.\n        Returns: ndarray\n            Number of k-point/spin combinations on this CPU.\n        \"\"\"\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamnamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(inty", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tfor (int i = 0; i < block.Body.Count; i++) {\n\t\t\t\t\tILNode child = block.Body[i];\n\t\t\t\t\tif (child.IsBasicBlock()) {\n\t\t\t\t\t\t// Add the", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (!IsRagdoll && ragdoll) {\n\t\t//wait for this to finish before the next update\n\t\t_worldBodyNetworkUpdateTime = NetworkManager.WorldBodyUpdateRate;\n\t\t_bodyAnimatorNetworkUpdateTime = NetworkManager.BodyAnimatorUpdate", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\n        self.name = \"Fracture\"\n        self.top = ClassFactory( [InterfaceNodeSet, InterpolatedNode", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte)((num >> 24) & 0xff);\n        out[outOff + 2] = (byte)((num >> 16) & 0xff);\n        out[outOff + 1] =", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables,\n                    PatternMatcher.this, null ) );\n        }\n    }\n}", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "# Handle legislative parameters in XML format (and convert then to JSON).\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "         }\n        }\n      });\n    }\n    catch (Exception e1) {\n      e1.printStackTrace();\n    }\n  }\n  public final void remove(InternalFrame frame) {\n    try {\n      Integer n = (Integer)buttonsNr.get(", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   from clientBase import *\n\nI'm not sure what the code is doing, but it seems to be defining some functions that interact with a server in some way. There are several functions defined, including `getBasePath`, `getServerFile`, `generateConfig`, `getSocket`, `zmq", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   for (int y = 0; y < p.getRasterHeight(); y += toolDiameterInPx/2)\n    {\n      for (int x = leftToRight ? 0 : p.getRasterWidth() - 1; \n        (leftTo", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "db.update(Db.Table1.TABLE_NAME, new String[] {Db.Table1.ID_GROUP + \" = \" + newId}, null);\n\n\n\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, new String[]", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "           }\n        }\n        #endregion\n    }\n}\n\nPlease help me complete the code by filling in the missing parts.\n\nThank you.", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "   from django.conf import settings\n    from django.urls import path\n    from django.views.generic import TemplateView\n\n    # ...\n\n    # URLconf for the project\n    urlpatterns = [\n        path('', TemplateView.as_view(template_name='index", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       infoText += \" file\" if numberOfFiles==1 else \"files\"\n        infoText += \"<br>\"\n        infoText +=  str(numberOfHiddenFiles) \n        infoText += \" hidden file\" if numberOfHiddenFiles==1 else \"hidden files\"\n        infoText", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(lambda x: x.group(self.env), code)\n        self.outputs.append(self.env.find_or_declare(self.name + \".pc\"))\n        self.outputs.append(self.env.find", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "   def __del__(self):\n        rospy.loginfo(\"Cleaning up PlanningServer ...\")\n        self._planningSolverClient.cancel_goal()\n        self._knowledgeParserClient.cancel_goal()\n        self._planningExecutorClient.cancel_goal", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx - reactorExtent ] + chemical[ 0 ][ idx - reactorExtent - 2 ]\n\t\t\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            default:\n                columnTypes.add(typeManager.nextAdapter().of(type));\n                break;\n        }\n    }\n   ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn base.ReceberAutoIncremento(qs, entity);\n\t\t}\n\t}\n}\n```\nPlease note that this is a generated code and you should not try to modify it.\n\nYou should also note that this code is using the `MSTech.", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic System.Type Returned", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "   def cli_config_ntp_auth_keyid(self):\n        \"\"\"Config ntp authentication keyid by CLI\"\"\"\n        if self.ntp_auth_conf['authentication'] != self.authentication:\n            if self.authentication == 'enable':\n                state = 'true", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           # Check that the changes were propagated to the ancestors\n            check_node(component.location, editing_user, after_create, editing_user, None, after_create, editing_user)\n            check_node(sibling.location, editing_user, after_create", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        addToCharBuff(ch);\n        updateWithCharBuf();\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict.get('start', 0), dict.get('end', 0))\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict.get('op', 'eq'), dict.get('value', 0))\ndef", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = null;\n            // First, try to get the type from the <see cref=\"ActualHttpMessageTypes\"/>.\n            if (ActualHttpMessageTypes.TryGetValue(new MediaTypeHeaderValue(api.GetSampleRequestMediaType()), out type))\n            {", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_open_remote(record, column.name, create=True,\n                value=value, entry=entry, callback=callback)\n            return True\n        else:\n            return False\n    def _key_up", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanFactory.registerBeanDefinition(beanName, beanProperties);\n        }\n        return beanProperties;\n    }\n}\n}\n}\n```\nThis code is a Spring BeanFactoryPostProcessor that upgrades old-style Spring overrides that add location paths to the <code>", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "   if f:\n        for line in f:\n            if line.strip():\n                break\n        else:\n            f.close()\n            raise ValueError(\"File %s contains only blank lines\" % path)\n    if not os.path.exists(path):\n        raise Value", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In] int hrStatus,\n            [In, MarshalAs(Unmanaged", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       var sp = Principals.getCurrentSecurablePrincipal();\n        var aclKey = spm.lookup( sp );\n        if ( !directedAclKeys.getType().equals( PrincipalType.USER ) ) {\n            ensureReadAccess( aclKey );\n", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "   def verify_tag(self, element):\n        \"\"\"Verify the tag of the element.\n        This verifies that the tag of the element is what is expected.\n        Arguments:\n        element Element object.\n        Returns:\n        True if the tag is what is expected. False", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\ndef _nssplit(qname):\n    prefix, localName = qname.split(':', 1)\n    return prefix, localName\ndef _is_id(node):\n    return node.nodeName in _id_names\ndef _id_search", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.NameComponent, endOffset))\n\t\t\t\tkeyLocator.appendComponent(new Name.Component\n\t\t\t\t  (new Blob(decoder.readBlobTlv(TlvTypeC", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.updateCooldown(delta);\n        }\n    }\n    @Override\n    public void draw(Game", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().getGameJoinManager().addGameJoin( action );\n        hide();\n        GameEngine.model().getGame().getGameJoinManager().fireGameJoin( action );\n      }\n    } );\n    h", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "   raise RuntimeError(\"Bad request: %s\" % r.data.decode(\"utf-8\"))\n    return None\n\ndef download_file_json(socket_path, url, progress=True):\n    \"\"\"Download a file as JSON data, saving it to the CWD with the included", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\n            \"Only one metabolite can be used to compute reaction weight.\"\n        )\n    return [\n        coeff * met.weight for met, coeff in reaction.metabolites.", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "   def get_for_path(self, pootle_path, user):\n        # ...\n        units = self.filter(path__startswith=pootle_path)\n        # ...\n        return units\n\n    def get_for_translation(self, translation):", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "           ],\n        ),\n        migrations.CreateModel(\n            name='Subject',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   def get_table_entry(self, dpid):\n        return self.pox_switch.get_table_entry(dpid)\n\n    def get_flow_table(self):\n        return self.pox_switch.get_flow_table()\n\n    def", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    if (m_IgnoreChanges)\n      return;\n    readProps();\n    updateMenu();\n  }\n \n  @Override\n  public void notifyRecentItemListenersOfSelect(T item) {\n    Iter", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Followers.Any(x => x.Defender == target) || src.Followers.Any(x => x.Attacker == target))\n                return true;\n            return false;\n        }\n    }\n}\n\\end{code}\n\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       return halfTradePeriodDate;\n    }\n    public long getTradePrice() {\n        return tradePrice;\n    }\n    public NodeAddress getTradingPeerNodeAddress() {\n        return tradingPeerNodeAddress;\n    }\n    public String getErrorMessage", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a != null) return a;\n\t\t\ta = LeadingAny(p.down);\n\t\t\tif (a != null) return a;\n\t\t\treturn null;\n\t\t}\n\t\treturn p;\n\t}\n\t\n\tstatic", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\t// signal the read report finished\n\t\t\tmReadDone.Set();\n\t\t\treturn mReadBuff;\n\t\t}\n\t\tpublic byte[] ReadRegister(int address)\n\t\t{\n\t\t\tbyte[]", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           // UPGRADE_ISSUE: The following fragment of code could not be parsed and was not converted. \"ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   rate.create()\n\n    ...\n\n    def fill_with(self, updates, on_change=None, no_change=None):\n        \"\"\" Fill the rate details with the given updates\n        Args:\n            updates (dict): -  nested dictionary listing the Rate", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, dest, length );\n\t\t\t\tshadowBuffer.Unlock();\n\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.newConfig()\n\t\t\tself.openFrontend()\n\t\t\tself.createSetup()\n\t\t\tself.tuner = Tuner(self.frontend)\n\t\t\tself.retune(None)\n\t\t\tself.tun", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           TcpAddress.TcpAddressMask mask = new TcpAddress.TcpAddressMask(filterStr);\n            tcpAcceptFilters.add(mask);\n            return;\n        }\n        throw new IllegalArgumentException(\"unknown option \" + option);\n    }\n}\n\\", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               prior = curr;\n                curr = new byte[bytesPerRow];\n            }\n            // Write the decoded image to the output stream\n            for (int i = 0; i < fout.Length; i++)\n                fout[i] = curr[i];\n           ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('org.freedesktop.DBus'))\n        s", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   for i in range(len(map_list)-5):\n        amap = map_list[i]\n        for element in amap.get_domain().get_generator_list():\n            output += \"<h1(8, 4)0, h4(4, ", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "       }\n        private const string ExoticText =\n            \"123\\n\" +\n            \"123.5\\n\" +\n            \"0.125\\n\" +\n            \"123e15\\n\" +\n            \"123", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tmap.clear();\n\t\tdirty();\n\t}\n\t@Override\n\tpublic Set<Object> keySet() {\n\t\treturn new KeySet( map.", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\tm_Writer.WriteLine( \"## Returned to {0}\", auction.Owner.Name );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n}", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "   def _get_attendance_action_menu(self):\n        return {\n            'My Attendances': self.attendance_action('My Attendances'),\n            'Kiosk Mode': self.attendance_action('Kiosk Mode')\n        }\n\nI", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults().getRows().get(form.grdResults().getRowIndex(orderInvestigationLiteVo.getInvestigationIsNotNull() ? orderInvestigationLiteVo.getInvestigation().getInv", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        internal SystemListView SystemListView { get { return sw.SystemListView; } }\n    }\n    internal class SystemListViewColumn\n    {\n        readonly string title;\n", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\"+Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn.AsEnumerable();\n        }\n        private struct StructTypeInfo", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsClass {\n\t\t\tget {\nNext line of code:\n\n\t\t\t\treturn base_", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               return null;\n            }\n        }\n        #endregion\n    }\n}\n\nPlease help me complete the code by adding the missing methods and properties.\n\nThank you.", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "   self. protocol = protocol\n    self.openssl_context = OpenSSL.SSL.Context(self. protocol)\n    self.ssl_context = util.SSLContext(self.openssl_context)\n    self.HAS_SNI = self.openssl_context.has", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "   headbook.set_tab_reorderable(True)\n    headbook.connect(\"tab-reordered\", page_reordered)\n    \n    # Connecting the game widgets\n    \n    for gmwidg in key2gmwidg.values():\n        g", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"New-tab\": QKeySequence(Qt.CTRL + Qt.Key_T),\n    \"New-window\": QKeySequence(", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn super.toString();\n\t}\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return getModel() != null && getModel().isFileReadOnly();\n  }\n  \n  protected void setFocus()\n  {\n    hasFocus = true;\n  }\n  \n  protected void clearFocus()\n  {\n    hasFocus = false;\n  }\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(883, 656);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(7", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       return enc;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t\t\t}\n\t\t\t}\n\t\t\t[Test]\n\t\tpublic void RFC4231_", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += CDRSerializer.getMaxCdrSerializedSize(current_sum, EnumSwitchUnion.class);\n\t    return current_align;\n\t}\n\t\n\t\n\tpublic static void main(String[] args) {\n\t\tEnumSwitchUnion e1 = new", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      else\n        return java.GetValue(\"JavaHome\") as String;\n    }\n    private static String GetJreHome()\n    {\n      String jreHome = null;\n      RegistryKey regKey = Registry.LocalMachine.OpenSubKey(", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   def _read_user_execute(self):\n        # Read the crontab from the user\n        (rc, out, err) = self.module.run_command(self.cron_cmd, use_unsafe_shell=True)\n        if rc != 0", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "   modifier.vertex_group = modifier_json['vertex_group']\n\nExpected output:\n\n    modifier.vertex_group = BLObject.from_json(instance=modifier, json=modifier_json['vertex_group'], instance_field='ver", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           for(int i = 0; i < rankCounts.length; ++i)\n            {\n                double rank = rankCounts[i];\n                if(rank == 0)\n                {\n                    rank = minLikelihood;\n                }\n                else\n               ", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.contains(1));\n        assertEquals(2, neighbors", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def parser(self, choice):\n        try:\n            if choice.lower() == 'list':\n                self.list_packets(self.cap)\n            elif choice.lower() == 'help':\n                self.help()\n            elif choice.lower() == 'exit':", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 161);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "   def __init__(self, *args, **kwargs):\n        super(main.Scan, self).__init__(*args, **kwargs)\n        self.created = timezone.now()\n        self.creator = self.get_creator()\n        self.last_updated =", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // If we get here, then the type was not found in the schema, so we need to check if it was defined in the import\n                // If it was defined in the import, then we need to add it to the list of types to be generated\n                // If it was not defined in the", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_first_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state': 'validate', 'holiday_status_id': False})\n    def holidays_first_", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        #region IBOColSelector Members\n        int IBOColSelector.NoOfItems\n        {\n            get { return this.Rows.Count; }\n        }\n        #endregion\n        #endregion\n       ", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"Mixer Line {0}: {1}\", mixerLine.dwLineID, Name);\n        }\n    }\n}\n}\n}\n}\n\nPlease complete the code by writing the necessary code to implement the properties and methods listed in the code snippet above.", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainFactory.getDomainObject(ims.core.admin.domain.objects.CareContext.class, valueObject.getCareContext().getId());\n\t\t\tdomainObject.setCareContext(value10);\n\t\t}\n\t\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = predictPositives ? estP : estN;\n\t\t\tif (function.equals(WRACC)) {\n\t\t\t\tscore = cov * (pnRel / (p + n)", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Name, Module.GetStashDiffFiles(gitStash.Name), ResourceManager.Strings.Stash, gitItemStatuses);\n            }\n        }\n        private void ResizeStashesWidth()\n        {\n", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   lattice.Drift(length=1.0)\n    lattice.Drift(length=1.5)\n    lattice.Drift(length=2.0)\n    lattice.Drift(length=3.0)\n    lattice.Drift(length=4.0)", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (this == o) {\n            return true;\n        }\n        if (o.getClass() != getClass()) {\n            return false;\n        }\n        AuthScope that = (AuthScope) o;\n        return LangUtils.equals(this.scheme, that", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}\n\n", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static BigDecimal[] erstelleMengenAusMehrerenSeriennummern(\n\t\t\tList<SeriennrChargennrMitMengeDto>", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "load_archive_index(path)\n\nExpected output:\n\nSuccessfully loaded archive index\n\nActual output:\n\n===== First Time Setup =====\nYou\\'ll need to set a password used to encrypt the archive index\n\nPlease enter a password:\n\nNew Index Password", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "   def putx(self, data):\n        self.out_ann.putx(data)\n\n    def putb(self, data):\n        self.out_ann.putb(data)\n\n    def putbit(self, bit, data):\n        self.out", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "       } while (false);\n\n    }\n    return true;\n  }\n  private boolean r_main() {\n    int among_var;\n    int v_1;\n    int v_2;\n    int v_3;\n    // setlimit, line 2", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (cd.viewer != null) {\n                    cd.viewer.setObject(o = cls.newInstance());\n                }\n            } catch (Exception ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n        }\n    }", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def _get_key_usage(self):\n        try:\n            return self.cert.get_key_usage()\n        except AttributeError:\n            return None\n    def _get_extended_key_usage(self):\n        try:\n            return self.cert.", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tfor (%sSlots::iterator i = s.begin(); i != s.end(); ++i) {\" % typename, file=f)\n\nI hope this helps! Let me know if you have any questions.\n\nPaul", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # Split the interval into a range below and above 0xFFFF. This corresponds\n    # to the number of bytes required to represent the first and the last character\n    # of the number set. The number of bytes per character increases monotonously,\n    # so only borders have to be considered", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "}\n\n}\n\n}\n\n", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['date_order'] = line.date_order\n            edi_doc['partner_ref'] = line.partner_ref or False\n            edi_doc['notes'] = line.note or False\n            edi_doc['product_id'] =", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"https\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\",", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               nameMap.put(name, permissions = new ArrayList<>(Arrays.asList(permissionEntry)));\n            }\n            else\n            {\n                permissions.add(permissionEntry);\n            }\n        }\n        return nameMap;\n    }\n    private void assertPermissions(", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "# -*- coding:\n# Copyright (C) 2010, 2011, 2012 Sebastian Wiesner <lunaryorn@gmail.com>\n# This library is free software; you can redistribute it and/or modify\n# it", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   dev = Device(deviceToken)\n    user = dev.newUser(loginId, password)\n    user.login()\n    print(user.mainmenu())\n    user.cardUpdate()\n    user.cardCategoryUpdate()\n    user.cardComboUpdate()\n    print", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "   # Calculate the closure phase.\n    print \"    calculating closure phase\"\n    obs = miriad.obs(vis=dsets[0], stokes=\"i\", device=\"/null\",\n                     options=\"log,nopol,qusolve\", select=selstring)\n   ", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (m_Keys.Count > 0)\n            {\n                ItemID = m_Keys[0].ItemID;\n            }\n            else\n            {\n                ItemID = 0;\n            }\n        }\n    }\n}\n}\n\\end{code", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String device : devices) {\n            // DRS 20190422 - Removed non-responsive tuners\n            if (ipAddressMap.containsKey(device)) {\n                Tuner hdhrTuner = new TunerHdhr(", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    return jobs;\n  }\n  private static boolean isLegacyUpdate(@NonNull Context context)", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length != 5) {\n        throw new RuntimeIOException(\"Bad line \" + lineCount + \" in \" + mapping + \": \" + line);\n      }\n      String regex = split[1];\n      String type = split[3];\n      Set<String> over", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       # FIXME: also look for the class or style in document[class|style]{}\n        # FIXME: also look for the argument of bibliographystyle{}\n        # FIXME: also look for the keyword in document[keyword]{}\n        # FIXME:", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def __getitem__(self, item):\n        return self.features(Query(self, item))[0]\n\n    def __len__(self):\n        return len(self.features(Query(self, ())))\n\n    def __iter__(self):\n        return self.", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   def __default(self, param):\n        if getattr(self, param) is None:\n            return None\n        return getattr(self.have, param)\n\ndef main():\n    m = AnsibleModule(argument_spec=f5_argument_spec)\n   ", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   class MethodAddView(AutomateExplorerView):\n        title = Text('#explorer_title_text')\n        location = BootstrapSelect('cls_method_location', can_hide_on_select=True)\n        inline_name = Input('cls_method_name')\n       ", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           result = null;\n        }\n        return result;\n    }\n    public void addEventListener(IEventSubscriber subscriber) {\n        // do nothing\n    }\n    public void removeEventListener(IEventSubscriber subscriber) {\n        // do nothing\n    }", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "   env['MT_EMBED_MANIFEST'] = 1\n    return embedManifestDllAction(target, source, env)\ndef CheckVersions(target, source, env):\n    # Check for MSVC version\n    if env.get('MSVC", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           // 1FV0B3Y: ITPUI:ALL - sub progress monitors granularity issues\n            new ProgressMonitorDialog(shell, true, getOperationMessage(), new ISchedulingRule() {\n                public boolean isCritical() {\n                    return true", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Check if we can find the input stream...\n\t\tif (meta.getInputStream()==null)\n\t\t{\n\t\t\tlogError(BaseMessages.getString(PKG, \"AggregateRows.Log.NoInputStreamSpecified\")); //$NON-", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   # XXX the `-3..-2` case seems counterintuitive.\n    # is \"{until-x}..{now-y}\" really better than \"{now-x}..{now-y}\"?\n    #\n    # (?) assert f('-3..-2',", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //WalkingRange\n            string swalkingrange = swalkingrange;\n            if (swalkingrange.Contains(\"s\") || swalkingrange.Contains(\"m\") || swalkingrange.Contains(\"h\"))\n                swalkingrange = swalkingrange.", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "   def setup_runlevel(self, test, session):\n        self.test = test\n        self.session = session\n        self.runlevel = session.cmd_output(r'wmic sysdriver where PathName=\"C:\\\\Windows\\\\System32'\n                                                 r'", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc.get();\n\nExpected result:\n\nThe test passes without any issues.\n\nActual result:\n\njava.util.concurrent.ExecutionException: java.util.concurrent.TimeoutException\n    at org.zeromq.test.PubSubTest.testUnsubscribe", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (uint)((value & 0x7F) | 0x80) | (value >> 8 & 0x40) | (value >> 16 & 0x20) | (value >> 24 & 0x10);", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.ui.notifications.add(descr, level=1)\n        self.fm.env.get_directory(original_path).load_content()\n        self.fm.env.get_directory(one_file.path).load_content()\n        self", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_TypeWithCtor ()\n\t\t{\n\t\t\tNonCOMTest objNonCOMTest = (NonCOMTest)Activator.CreateInstance (typeof (NonCOMTest));\n\t\t\tAssert.AreEqual (0, objNon", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       # Create a new appversion for the other locale\n        self.new_av = AppVersion.objects.create(\n            code='fx1.2',\n            version='1.2',\n            accepts_signoffs=True,\n            fallback=self.old_av)\n", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.debug(\"Modifying user state\")\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        else:\n            self.", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new ChangeLeaderEvent(group, player));\n        }\n    }\n}\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "   def highlight(self, toks, formatter=None, outfile=None):\n        formatter = formatter or Formats.get(conf.UI.formatter)\n        outfile = outfile or StringIO()\n        formatter.format(toks, outfile)\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null);\n\treturn super.doStartTag();\n    }\n}\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                Dialog = new DialogEntry();\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i];\n                    string[] lines = n.", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\tm_key[i] = new ExodusSummoningTomeActivation();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic void OnBeforeSpawn( Mobile mob )\n\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add((ChangeOfServiceVo)beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "       Version v1 = new Version(1, new int[]{0, 0, 0, 0}, new ECBlocks[]{new ECBlocks(2, 2, 2), new ECBlocks(2, 2, 2)}, 16);\n        Version v2", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\t\t\t// ======================================================\n\t\t\t\t\t\t\t// Computed using the official b2sum tool\n\t\t\t\t\t\t// (test vector for Argon2d 1.3)\n\t\t\t\t\t\tbyte[] pbC =", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tIManaDiscountArmor discountArmor = player.getArmor(IMana", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but was given {1})\",\n\t\t\t\t\tLightCount, NextFrame.PixelCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = p.readString();\n            dc.type = p.readInt();\n            response.add(dc);\n        }\n        return response;\n    }\n\n    @Override\n    protected Object\n    responseCellList(Parcel p) {\n       ", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                // Calculate U,V\n                float u = (x + 0.5f) / (float) xSizeP;\n                float v = (y + 0.5f)", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_METHOD_ADD, new Integer(testInt1));\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = (Integer) rawResult;\n\t\t\t\tLog", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t};\n\t}", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"Not found: \" + name);\n        }\n        else {\n            try {\n                out.writeBoolean(true);\n                out.writeObject(found.object);\n            }\n            catch (NotSerializableException", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "   pixel_x += 6;\n}\n\n    public static WriteHandler[] writehandlers = new WriteHandler[16];\n    public static WriteHandler handler_stactics_videoram_b = new WriteHandler() {\n        public void handler(int offset, int data", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(position) <= spell.Range &&\n                                    minionPrediction.CastPosition.To2D().Distance(position) <= spell.Range)\n                                    result.Add(minion);\n                            }\n                            break;\n                        case Collision", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new ArrayList<>();\n        path.add(x);\n        for (Node z : graph.getAdjacentNodes(y)) {\n            if (path.contains(z)) {\n                return true;\n            }\n            path.add(z);\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child = pop[i];\n                    if (child is Drawable)\n                        continue;\n                    plcs.Push(child);\n                }\n            }\n            return null;\n        }\n        public void Dispose()\n        {\n            ScriptManager.Dis", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (getClass() != other.getClass()) {\n            return false;\n        }\n        FinancialEntityAttachment other = (FinancialEntityAttachment) other;\n        if (description == null) {\n            if (other.description != null) {\n                return", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i].Deleted || mobiles[i].Map == null)\n                            continue;\n                        // Check if any other players are using this potion\n                        for (int j = 0; j < m_Item.m_Users.Count;", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg, formatted);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Kick(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tuser.SendMessage(\"You have been kicked", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n}\n}", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           final DialogFragment dialog = ZipFilesDialog.instantiate(new File((String) mListView\n                                    .getItemAtPosition(key)));\n                            mode.finish();\n                            dialog.show(mActivity.getFragmentManager(), BrowserActivity.TAG_DIAL", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "   }\n}\n\nI'm not sure what you're asking for, but I'll do my best to help! Please provide more context or clarify your question.", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "   # fill in Z and T from the dictionaries\n    for f_key in z_dict[per]:\n        z_arr[p_index, 0, 0] = f_key[0]\n        z_arr[p_index, 0, 1] =", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    } else {\n      String names = recipients.stream().map(Recipient::toShortString).collect(Collectors.joining(\", \"));\n      return context.getString(resourceMany, names);\n    }\n  }", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = os.pathsep.join(extra_path)\n        if extra_lib:\n            env[\"LIBRARY_PATH\"] = os.pathsep.join(extra_lib)\n        if gonk:\n            env[\"GOONK_BUILD_ID", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "   def sourcefile_items(self, tests_root, url_base, rel_path, status):\n        tests_root, url_base, rel_path, status = args\n        source_file = SourceFile(tests_root,\n                                 rel_path,\n                                 url", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.setScript(null);\n            compiledScript = null;\n        }\n    }\n    private CompilerConfiguration createCompilerConfiguration() {\n        return new CompilerConfiguration(new ImportCustomizer[] {\n                new ImportCustomizer", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           }\n        }\n    }\n}\n\nThis code is for a network layer class that is designed to be more flexible and easier to use than the standard network layer class provided by CANAPE. It provides a base class that can be used to implement different types of network layers, such as a", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": " for i in range(energy.size):\n    grad_Etf = grad[i].flatten()\n    grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n    grad_E = np.reshape(grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (this.getClass().equals(obj.getClass()))\n\t\t{\n\t\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo)obj;\n\t\t\tint retVal = this.getId().compareTo(", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\n    }\n    @Test(dependsOnMethods = \"shouldFindStacksWithSpecifiedTags\")\n    public void shouldFindStacksWithSpecifiedScope() throws Exception {\n        stacks[0].setScope(\"new-scope\");", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       crawlParameters.add(new Parameter(pf, depth));\n        //EXCLUSION REGEXP\n        crawlParameters.add(new Parameter(pf, exclusionRegexp));\n        //INCLUSION REGEXP\n        crawlParameters.add(new Parameter", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// [$capture] (...)\n\t\t\tif (!AttributesMatch(candidate, pattern, ref captures, out unmatchedAttrs))\n\t\t\t\treturn false;\n\t\t\t// $capture or $(..capture)\n\t\t\tsub", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   extendedWillHit += colisionList.Count();\n                    extendedFarmLocation += objAiBase.Position;\n                }\n                int shortenWillHit = MinionManager.GetMinions(q.Range).Count();\n                int param = zedMenu.Get", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tcontextMenus = new ContextMenus();\n\t\tcontextMenus.setContextMenu(startControlID, new ims.framework.contextmenus.ContextMenu(menuName, menuName, contextMenus));\n\t}\n\tprotected void setFormReferences()\n\t{", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   for line in frozen_output.splitlines():\n        match = re.search(pattern, line)\n        if match:\n            return package_name\n    return False\ndef compute_fingerprint(paths):\n    # ...\n    return hashlib.sha1(os.", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': (6,)\n        })\n        f = Form(r)\n        with self.assertRaises(AssertionError):\n            f.subs.add(r.subs[0])\n        with self.assertRaises(AssertionError):", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x, (x, n, m)) + Sum(x, (x, m + 1, a))) == \\\n        Sum(x, (x, n, a)) + Sum(x, (x, m + 1, a))\n    assert simplify", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._notifyAction = action;\n                this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._notifyAction = action;\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           writer.close();\n            result.getXMLStreamWriter().close();\n            writer.flush();\n            writer.close();\n            objectToXMLDocumentTest(testDocument);\n        }\n    }\n    public void testObjectToXMLStreamWriterASCIIEncoding() throws Exception {\n       ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "           }\n            NextToken(TokenType.RParen);\n        }\n        private string ParamEnum(string param)\n        {\n            switch (param)\n            {\n                case \"Program\":\n                    return Param.Program;\n                case \"Division\":\n                    return", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\tif (ide.width == width && ide.height == height) {\n\t\t\t\t\timageData [i] = ide;\n\t\t\t\t\tsizeObtained = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n#else\n", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           }\n            // finds all the blocks that are reachable from the current block\n            // without following any JSR target\n            for (int i = 0; i < nbSubroutines; i++) {\n            // finds the first label of the series to which this label belongs\n           ", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImage", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "   def _parse_kexgss_error(self, m):\n        raise SSHException(\n            'Received SSH2_MSG_KEXGSS_ERROR (%d bytes): %s' % (\n                len(m), m.get_string()))\n\n    def", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           // Create the folder node\n            DatabaseNode folderNode = new DatabaseNode(this.handler, connectionData);\n            folderNode.setUserObject(overallNodeName);\n            // Add the folder node to the tree\n            tree.add(folderNode, PROGRESS_NODE_", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "           result = self.cr.execute(\"SELECT sum(amount) as sum\\\n                            FROM smart_salary_simulator_payslip as hp, hr_payslip_input as pi \\\n                            WHERE hp.employee_id = %s AND hp.state", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   cl1h, cl2h, cl = integrate_kkhalo(ell, lnzarr, chiarr, dVdzdOm, marr, mf, BDarr, rhobarr, rho_crit_arr, bias, Darr, pk, zs", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize() * 1.5;\n        d.height = font.getSize();\n        return d;\n    }\n    @Override\n    public void setFont(Font font) {\n        super.setFont(font);\n        if (font", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.cal_p2(ref_p=None,phi=phi,flag=flag)\n        self.all_in_all(phi=phi,ref_p=None,flag=flag)\n        #print_path=print_path\n        #if print_path is", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t}\n}\n\nI have a problem with the code, I am not sure how to make the \"OnConnectionChanged\" method work.\nPlease help me with this.\n\nThank you.", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "for i in range(1, len(self)):\n    self[i] = self[i]\n    self.SetBinContent(i + 1, self[i])\n    self.SetBinError(i + 1, self.GetBinError(i + ", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           protocol.getStorage().updateFirstServerMsgId(contact);\n        }\n    }\n}\n\nNote: This is just a sample implementation of the `MessageArchiveManagement` class, and it may not work as-is in your application. You may need to modify it to fit your specific", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\twhile (rsp.isOkey()) {\n\t\t\t\taddLog24(rsp, ret);\n\t\t\t\trsp = tag.readRecord(sfi);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   def __getstate__(self):\n        return self.createState()\n    def __setstate__(self, state):\n        self.createFields()\n        self.current_size = 0\n        self.body_size = 0\n        self.parseFlags(self)\n", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter = null;\n\t}\n}\n}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       path_info = environ.get('PATH_INFO', b'')\n        for app in self.apps:\n            if path_info.startswith(app[0]):\n                return app[1](environ, start_response)\n        raise ValueError('No matching WSGI", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\t# Load model\n\t\tmodel = BicBayes( sys.argv[1], sys.argv[2], sys.argv[3] )\n\t\t# Set network\n\t\tmodel.setnetwork( sys.argv[4] )\n\t\t# Train model\n\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(100) < chance)\n            {\n                res = EnhanceResult.Success;\n            }\n            else\n            {\n                res = EnhanceResult.Failure;\n            }\n        }\n    }\n}\n\n", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           entries[entry_name] = rdltypes.UserEnum(entry_value, displayname, desc)\n        return entries\n    #---------------------------------------------------------------------------\n    def parse_field_vendorExtensions(self, vendorExtensions: minidom.Element) -> Dict[str,", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"No Modules found in the FOG Service!\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Unable to locate the FOG Service!\");\n                this.Close();\n            }\n        }", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"];\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        private void AfterStoreAdd(object sender, StoreAddedEventArgs e)\n        {\n            this", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               for(int tri = 0, vi = 0, ci = 0, ti = 0; tri < this.trianglesUsed[textureHash]; tri++)\n                {\n                    if(insideBeginEnd)\n                    {\n                        beginTriangle(this.", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if header not in exposedHeaders:\n        response['Access-Control-Expose-Headers'] = exposedHeaders + ', ' + header\n        return response\n    return response\n\ndef handle_404(request, *args, **kwargs):\n    \"\"\"\n    Decorator to handle", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                    }\n                    else\n                    {\n                        // we are not going to close this", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var] * len(var)\n        return var\n    return var\ndef _get_crs_from_user_input(\n        area_def: Union[str, dict],\n        description: str,\n        projection: str,\n        units: str,\n", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "st = player.getQuestState(qn)\nif not st : return\n\nPlease help me complete the code.", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tempty = string.Concat(PlayTime.HeadTimeTagRegex, num.ToString(\"D2\"), \":\", num1.ToString(\"D2\"));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tempty =", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataStride = 0;\n            VertexDataSize = 0;\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = -", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "from .solvers import optimize\nfrom . import Object\nfrom . import _trim\nfrom . import _dissociate\nfrom . import _associate\nfrom . import _reaction\nfrom . import _metabolites\nfrom . import _genes\nfrom . import _solution\nfrom .", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tims.clinicaladmin.vo.beans.TumourGroupListVoBean bean = (ims.clinicaladmin.vo.beans.TumourGroup", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcx = lines[selectedLine].getCenterX();\n\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\t\th = lines[selectedLine].", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       getListView().setAnimation(set);\n    }\n\t\n\t\n\tprivate void fillData() {\n\t\tmCursor = mDbAdapter.fetchBookmarks();\n\t\t\n\t\tif (mCursor.moveToFirst()) {\n\t\t\tdo {\n\t\t\t", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "           }\n            HighestNumber = PartnerInterestRow.FieldKey;\n            ARow.FieldKey = HighestNumber + 1;\n        }\n        #endregion\n        #region Event Handlers\n        private void cmbPPartnerInterestInterestCategory_SelectedValue", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tthis.predict(pssm, scoresSol);\n\t}\n\t\n\t\n\tprivate void predict(Pssm pssm, int[] scoresSol)\n\t{\n\t\tif (this.isTrained)\n\t\t{\n\t\t\tthis.classifier.", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
