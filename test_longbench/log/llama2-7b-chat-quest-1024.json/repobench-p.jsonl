{"pred": "   private final transient JKademliaRoutingTable routingTable;\n    private final transient JKademliaStorageEntry storageEntry;\n\n    private final transient Timer timer;\n\n    private final transient int refreshInterval;\n\n    private final transient int maxConcurrency", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       // Load the effects from the assets\n        loadEffectsFromAssets();\n\n        // Add the effects to the menu\n        mParameterToggleMenuItem = mActivity.getMenu().addSubMenu(R.menu.spectaculum_effects);\n        for (Effect effect : m", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "   class MyCipher(Cipher):  # noqa: D101\n        key_schedule = KeySchedule1\n        encryption = MyFunction\n        rounds = 1\n\n    # ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   public EffectManager(Activity activity) {\n        mActivity = activity;\n        mParameterListView = (ViewGroup) mActivity.findViewById(R.id.parameter_list);\n        mParameterListAdapter = new EffectParameterListAdapter(mActivity, this);\n        mParameterToggleMenuItem =", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "       commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(AddTagCommand.class, AddTagEvent::from", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "   private LocalRateLimiter localRateLimiter;\n\n    private TaskRunnerConfig taskConfig;\n\n    private TaskProperties taskProperties;\n\n    private TaskMetaInfoManager taskMetaInfoManager;\n\n    private TaskListenerManager taskListenerManager;\n\n    private RunnerTaskListener runnerTask", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tList<Problem> problems = new ArrayList<>();\n\t\t\tStream<Path> paths = walk(args.vault());\n\t\t\tpaths.filter(isRegularFile()).forEach(path -> {\n\t\t\t\ttry (BufferedWriter writer = new BufferedWriter(new", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           // notify the registered device\n            // notify the registered device\n            // notify the registered device\n            // notify the registered device\n            // notify the registered device\n            // notify the registered device\n            // notify the registered device\n            // notify the registered device\n            // notify the registered device\n           ", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN,\n        new byte[] {0x01, 0x02, 0x03, 0x04});\n\n    assertEquals(new", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "   def placeOriginate(self, route):\n        #print 'placeOriginate', route\n        if self.uaO == None:\n            self.uaO = UA(self.global_config, event_cb = self.recvEvent, conn_cbs = (self.", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "\n\nclass FlagList(Signature):\nNext line of code:\n\n\nclass ByteFlag(Signature):\nNext line of code:\n\n\nclass Boolean(Signature):\nNext line of code:\n\n\nclass CreationTime(Signature):\nNext line of code:\n", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": " def convert_ast_constraint(self, ast_node):\n    raise NotImplementedError\n\n  def __repr__(self):\n    return \"Constraint(ast=%s, cstr=%s, live=%s)\" % (self.ast, self.cstr, self.", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static boolean useInternPlayer(TDActivity activity) {\n        return activity.getApplicationContext().getSharedPreferences(TDConfig.PREFS_", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       // Create a new instance of the API client.\n        OkHttpClient.Builder client = new OkHttpClient.Builder();\n\n        // Set the base URL for the API.\n        client.baseUrl(BaseUrls.getBaseUrl());\n\n        // Set the API endpoint for the", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "   def test_invalid_args(self):\n        ''' Invalid arguments. '''\n        with self.assertRaises(TypeError):\n            InterLayerPipeline(InputLayer, ConvLayer, FCLayer, PoolingLayer)\n        with self.assertRaises(TypeError", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   def __new__(cls):\n        init_called = True\n        return super().__new__(cls)\n\n    user = User(id=\"user_id\", email=\"user@domain.com\")\n    assert init_called\n\n\ndef test_load_custom_init(engine", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "   raise self.error('XPST0017', 'unable to find a matching simple map')\n\n\n@method(infix('?'))\ndef evaluate_optional_expression(self, context=None):\n    if not self:\n        return None\n    return self.", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new Marble", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "   private final Unbinder unbinder = Unbinder.bind(this);\n    private final MovieDetails movieDetails = PopularMoviesApplication.getMovieDetailsComponent().getMovieDetails();\n    private final MovieTrailersAdapter movieTrailersAdapter = new MovieTrailersAdapter(this, movie", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               if (instance != null) {\n                    writeResponse(SUCCESS, correlationId);\n                } else {\n                    writeResponse(FAILURE, correlationId);\n                }\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(UNREGISTER_", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       await wild_report.add_reaction(emoji.emojis.get(MyEmojis.WILD_SPAWN))\n        await wild_report.add_reaction(emoji.emojis.get(MyEmojis.WILD_SP", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   if c['vocab_text']:\n        vocab_text = vocab.get_vocab_text()\n    else:\n        vocab_text = None\n\n    # Load model\n    if c['model'] == 'simple':\n        model = Simple(", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n\n\ndef test_params_doppler_poly_zero():\n  '''\n  Zero doppler polynomial parameters test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--g", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n               ", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "   def test_release(self):\n        assert not self.redis.exists(self.redlock.key)\n        self.redlock.acquire()\n        assert self.red.exists(self.redlock.key)\n        self.redlock.release()\n        assert", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "   def get_length(self):\n        \"\"\"Get the length of the sound in seconds.\n\n        :rtype: float\n        \"\"\"\n        return ckresult(self._get_func(\"FMOD_Sound_GetLength\"))\n\n    def get_position(self):\n", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "   def __init__(self, *args):\n        super(CompressedData, self).__init__()\n        self.calg = args[0]\n        self.data = args[1]\n\n    def parse(self, packet):\n        self.calg = packet[", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "   #    out.write(timer.elapsedTime(head = 'Cell Shape'));\n    \n    #    cellIntensity = findCellIntensity(imgshape, centers, findCellIntensityMethod = findCellIntensityMethod, verbose = verbose, out = out", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "       Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 200f);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume /", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           while (transactionIterator.hasNext()) {\r\n                printer.print(transactionIterator.next());\n                System.out.println(print);\n                print.setLength(0);\n            }\n        }\r\n    }\r\n    }\n\n    private boolean checkDirectoryValid(File directory)", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "\n            }\n        }\n        return pgm;\n    }\n\n\n    public void postProcess(Program<BaseStatementMeta> pgm) {\n        for (BaseStatementMeta stmnt : pg.getAllStmnts()) {\n            if (stmnt instanceof Query", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "   def decrypt(self, message: FinTSMessage):\n        raise NotImplemented()\n\n    def sign_prepare(self, message: FinTSMessage):\n        raise NotImplemented()\n\n    def sign_commit(self, message: FinTSMessage):\n        raise", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                       if (env.regs[i].isCombExp()) {\n                            env.numCombExpCheck++;\n                            break;\n                        }\n                    }\n                }\n            } // USE_CEC\n        } // USE_CEC\n\n", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "   url(r'^(?P<app_name>[\\w\\-\\+]+)/(?P<view_name>[\\w\\-\\+]+)+/(?P<arg_name>[\\w\\-\\]+)+$', include([\n        url(r'^$', include_docs", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tpublic ResourceData (Resources res, String meterName, SRSLevel srsLevel) {\n\t\t\tthis.meter = Meter.getMeter (res, meterName);\n\t\t\tthis.tags = new EnumMap (SRSLevel.class);\n\t\t\tthis", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self._storage_type = storage_type\n        return self\n\n    def get_db_name(self):\n        return self._db_name\n\n    def get_storage_type(self):\n        return self._storage_type\n\n\n#\n# DB OPEN\n", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public GivenArgumentWhenSteps<$SystemUnderTest, $Argument> andArgument(\n            CheckedSupplier<$Argument> givenStep) {\n        preparation.recordGivenStep(givenStep);\n        return this;\n    }\n\n    @Override\n    public Given", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "     try {\n        process.waitFor();\n      } catch (InterruptedException e) {\n        throw new IosDeviceException(this, e);\n      }\n\n      if (process.exitCode() != 0) {\n        throw new IosDeviceException(this, \"", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (null != Themer.getColor(contextRef.get(), R.attr.colorAccent)) {\n\t\t\ttextColor = Themer.getColor(contextRef.get(), R.attr.colorAccent);\n\t\t} else {\n\t\t\ttextColor", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = Message.parseFromXml(xml);\n\t\tif (message != null) {\n\t\t\tString fromUserId = message.FromUserName;\n\t\t\tString toUserId = message.ToUserName;\n\t\t\tString messageType = message.MsgType;", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   # 如果该 apk 文件存在，则直接返回\n    if os.path.exists(file_path):\n        return\n\n    # 其他情况下，则运行该 apk 文件，并将运行时特", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   async def cmd_raidcity(self, ctx):\n        \"\"\"\n        **!raid-city [city]** - sets the city for the raid party\n\n        \"\"\"\n        city = await ctx.city()\n        await self.set_raid_city(city)\n\n\n", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       date_string = \"25/11/2015\"\n        date = date_string_to_date(date_string)\n        self.assertEqual(date.year, 2015)\n        self.assertEqual(date.month, 11", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file, delay_seconds=2)\n        config_actor.start()\n        gevent.sleep(1)\n\n        if honeypot_first:\n            # Honeypot message first\n            honeypot_session", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           Picture picture = mPictures.get(position);\n                            String picUrl = picture.getPics()[0];\n                            if (picUrl.endsWith(\".gif\")) {\n                                Intent intent = new Intent(mActivity, ImageDetailActivity.class);\n                               ", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\toutdata = np.column_stack((positive_data,negative_data))\n\t\t\t\t\toutdata = np.column_stack((outdata, -np.log10(1-positive_data)))\n\t\t\t\t\toutdata =", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               ResponseSyncAdapter.class,\n                ResponseFiles.class,\n                ResponseFiles.ResponseFile.class,\n                ResponseFiles.ResponseFile.class,\n                ResponseFiles.ResponseFile.class,\n                ResponseFiles.ResponseFile.class,\n                Response.ResponseFile.class,\n", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "       self.update_hlen()\n\n    def update_hlen(self):\n        self.header.length = self.int_to_bytes(self.header.length)\n        self.body.length = self.int_to_bytes(len(self.body))\n\n   ", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   # XSD typed selection\n    elif context.axis == 'attribute':\n        for item in context.iter_self():\n            if isinstance(item, (AttributeNode, TypedAttribute)):\n                yield item\n            elif is_schema_node(item):\n                for xsd_", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter,\n      'penalty': Penalty,\n      'idle': Gauge\n    }\n\n  class Heap(object):\n    \"\"\"A utility class to perform heap functions.\"\"\"\n    def __init__(self, size):\n      self", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send(K, '11:hello world@'.encode('utf-8'), protocol)\n        protocol.send_string.assert_called_once_with('11:hello world@'.encode('utf-8'))\n\n    def test_send_string_with", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       // statement\n        StatementExecution se = (StatementExecution) qe;\n        assertTrue(se.isSuccess());\n        assertTrue(se.isBatch());\n        assertTrue(\"is prepared\", se.getParamIndexes().contains(1));\n        // end::query[]\n", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testPreparedCount() {\n        ProxyTestDataSource ds = new Pro", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "   def _createLinkADRRequest(self, device):\n        \"\"\"Creates a Link ADR request message.\n        \n        Args:\n            device (Device): The device for which the ADR request is being\n                               sent.\n        \n        Returns:\n            A Link A", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n\n                while True:\n                ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "def IEEE802154_unpack(data):\n    # 16-bit address\n    Addr = int(data[0:2], 16)\n    # 2-bit type\n    Type = int(data[2:3], 2)", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       DatabaseManager.INSTANCE.getChatDAO().getChat(getArguments().getInt(\"chatId\"), new GetTask<Chat>() {\n            @Override\n            public void onTaskFinished(Chat chat) {\n                ChatSettingsInfo.this.chat = chat", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass HITANS8(H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "           # Get Julian date from time\n            jd = datetime2JD(self.img_handle.current_frame)\n\n            # Add to JSON file\n            json_dict['time'] = jd\n\n        else:\n\n            # Get Julian date from config\n            jd", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       // refresh the public rooms list\n        mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n        for (int i = 0; i < mHomeServerNames.size(); i++) {\n            String server = mHomeServerNames.get(i);\n           ", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "       self.bingo_data_generator = BingoDataGenerator(self.dbi)\n        self.bingo_card_manager = BingoCardManager(self.dbi)\n        self.bingo_card_writer = BingoCardWriter(self.dbi)\n       ", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = AdjacencyInferer(target_sequences,\n                                         synteny_backend.get_available_block_sizes())\n\n    #running overlap and gap closure\n    overlap.check_binary()\n    gap_closure = None\n   ", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockLockerCommand(this), this);\n\n        plugins.registerEvents(new BlockPlaceListener(this), this);\n\n        plugins.registerEvents(new InteractListener(this), this);\n\n        plugins.registerEvents(new SignChangeListener(this", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "               }\n                stopHwPush();\n                startMiPush();\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n        }\n    }\n\n    private boolean shouldInit() {\n        // 检查是", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<String>>(\n                SET_OBJECT_NAME));\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public PersonalVulnsWindow() {\n        initComponents();\n        // set up the tree\n        TreeModel model = new DefaultTreeModel();\n        // load the vulns from the file\n        loadVulnsFromFile();\n        // set the tree model\n        vulntree.", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   private void createBreakdownChartPanelMulti(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingPieDatasetWithTTG dataset =\n                datasetGenerator.newPieDatsetWithTTG(metric", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.isAckRequested()) {\n            ackManager.onAck(client, packet);\n        }\n\n        if (packet.getType() == PacketType.EVENT) {\n            handleEvent(packet, client, transport);\n       ", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "     lMS.addTrack(\n          VideoTrack.create(\n              \"video\",\n              appRtcClient.videoConstraints().video.width,\n              appRtcClient.videoConstraints().video.height,\n              appRtcClient.videoConstraints().video.frameRate));\n     ", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_BACKOFF_MS, -1L);\n            contentValues.put(JobStorage.COLUMN_BACKOFF_POLICY, \"\");\n\n            return contentValues;\n        }\n\n        protected ContentValues createJob", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // Set the content layout\n        setContentView(R.layout.settings);\n\n        // Initialize the preferences\n        initPreferences();\n\n        // Set the initial values for the prefer", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   # check if system is ready to be used\n    if not action_check(obj):\n        raise Exception(CORE_LOG_PREFIX + \"System is not ready to be used\")\n\n    # check if system has a valid clock\n    if not fileutils.last_snapshot", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "   def determine_executable(self, desktop_file):\n        raise NotImplementedError('determine_executable not implemented')\n\n    def find_desktop_file(self):\n        raise NotImplementedError('find_desktop_file not implemented')\n\n    def", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   Iterable<Board> its = SMTHHelper.getInstance().wService.getAllBoards().flatMap(new Function<ResponseBody, Observable<Board>>() {\n      @Override public Observable<Board> apply(@NonNull ResponseBody responseBody) throws Exception {\n        try {\n         ", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       // Register background task\n        SpinnerObservable.getInstance().registerBackgroundTask(new GetImageWithoutSavingTask(SearchContactFragment.class, null));\n\n        // Register for search\n        searchSpinner = getActivity().getSpinner(R.id.search_spinner);\n", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\t\t// create test-class from TML-file (if not generated before)\n\t\tif (testmethodPrefix == null || testmethodPostfix == null) {\n\t\t\ttestmethodPrefix = \"test\";\n\t\t\ttestmethodPostfix = \"Method\";\n\t\t}", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       fdm_data = FlightDataMessage()\n        fdm_data.time = 1000\n        fdm_data.gps.latitude = 0\n        fdm_data.gps.longitude = 0\n        fdm_data.gps", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           showResponse = true;\n            textareaMessage.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_HTML);\n            textareaMessage.setEditable(true);\n            textareaMessage.setLineWrap(true);\n            textareaMessage.set", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert compare_tables(SimpleModel, description)\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"CREATING\", \"CREATING\", ready),\n    (\"CREATING\", None, ready),", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   def save(self, filething=None, v1=1, v2_version=4, v23_sep='/', padding=None):\n        \"\"\"save(filething=None, v1=1, v2_version=4, v23_sep='/", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitProxOp(new VisitOrd3(n), query);\n\n      return null;\n    }\n\n    visitCheckForProx(new VisitCheckOp4(n), query);\n\n    return null;\n  }\r\n\n  public void visitCheckForBoolean(", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new GradientTransformation(),\n                    new GrittyTransformation(),\n                    new HueAdjustTransformation(),\n                    new InvertAlphaTransformation(),\n                    new InvertTransformation", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "       raise PyOrientBadMethodCallException(\n            exception_class.decode(), exception_message.decode())\n\n    def _encode_field(self, field):\n        if isinstance(field, (list, tuple)):\n            return [ self._encode_field( x ) for x", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n    if not api.get_data(**{'BM Unit ID': args.bmid or 'NULL'}) or \\\n       not api.get_data(**{'Settlement Date': args.date or", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\t// create a new gallery album\n\t\t\t\tGalleryAlbum album = new GalleryAlbum();\n\t\t\t\talbum.setId( proxy.getId() );\n\t\t\t\talbum.setTitle( proxy.getTitle() );\n\t\t\t\talbum", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   assert dump_key(user) == user_key\n\n\ndef test_extract_key(engine):\n    user = User(id=\"foo\")\n    key = {\"id\": {\"S\": \"foo\"}}}\n    assert extract_key(key, user) == user\n\n", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new Percentage(10, \"Work done\"),\n        new Fraction(10, \"Work done\"),\n        new Spinner(\"-====>\"),\n        new Status(\"\"),\n        new TaskName(\"Task name\"),\n        new StaticString(\"\"),\n        new ProgressBar", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static A a(String href) {\n\t\treturn new A(href);\n\t}\n\n\tpublic static A a(String href, String title) {\n\t\treturn new A(href, title);\n\t}\n\n\tpublic static A a(String href, String title", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "   def __init__(self, data, manager):\n        self.id = data.get(\"id\")\n        self.name = data.get(\"name\")\n        self.description = data.get(\"description\")\n        self.created_at = data.get(\"created_at\")\n", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /////////////////////////////////////////////////////////////////////////////\n    // CallableBatchExecutionAssertions\n    /////////////////////////////////////////////////////////////////////////////", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           applyWallpaper();\n        } else if (id == R.id.menu_cancel) {\n            cancelWallpaper();\n        }\n    }\n\n    private void applyWallpaper() {\n        WallpaperApplyTask task = new WallpaperApplyTask(this", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private static final int MAX_DEPTH = 50; // arbitrary limit on depth of parse tree\n\n  private static final int MAX_TOKEN_LENGTH = 100; // arbitrary limit on length of token strings\n\n  private static final int MAX_BOOST_DE", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\t#if not ARG_CHECKER.check(args,mode='converting'):\n\t\t#\tprint \"Error in converting mode, exiting\"\n\t\t#\tsys.exit()\n\n\t\t#if not os.path.isfile(args.genot", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = filenameToDatetime(self.vid_file_name)\n\n        # If the beginning time is None, then the file is not a UWO vid file\n        if self.beginning_datetime is None:\n            print('Not a UWO", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   # 3. background\n    bkg = objs.Sphere(zpos=0, radius=0.1, color='k', alpha=1.0)\n    bkg_rad = np.random.randn(100, 3) * 0.1", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tPacketBase packet = new PacketConfigSync();\n\t\tpacket.pack(new byte[0]);\n\t\tplayer.sendPacket(packet);\n\t}\n\n\tpublic static void sync(EntityPlayer player)\n\t{\n\t\tPacketBase packet =", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       comment = Comment.objects.filter(parent=post).first()\n        if comment:\n            comment_form = self.form_class(request.POST or None, instance=comment)\n            if comment_form.is_valid():\n                comment_form.save()\n                messages", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tIEditorPart part = getPart();\n\t\t\t\t\t\tif (part != null) {\n\t\t\t\t\t\t\t\tpart.setFocus();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = 0x0x01\n\n    def parse(self, packet):\n        super(RevocationKey, self).parse(packet)\n       ", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "       if is_processing_instruction_node(item):\n            yield item\n\n    raise StopIteration()\n\n\n# vim: et:\n```\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "def getAS2PuffleString(client, puffles):\n    # ...\n\ndef handleAdopt(client, _type, name, sub_type, sendPuffleAdopt = True):\n    # ...\n\ndef handlePufflePlay(client, puffle,", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   def make_clean_figure(figsize, remove_tooltips=False, remove_keybindings=False):\n        fig = pl.figure(figsize=(figsize[0], figsize[1]))\n        ax = fig.add_subplot(111, projection", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "   def compile_information_arguments(self) -> List[CompileInformationArguments]:\n        \"\"\"\n        Generates arguments for the compile_information function\n\n        See Also\n        --------\n        :func:`~montreal_forced_aligner.alignment.multiprocessing.", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   # Compute the FFT alignment\n    platepar, _ = alignPlatepar(config, platepar, calstars_list, catalog_stars, _fft_refinement)\n\n    # Recompute the distortion coefficients\n    platepar.distortion_", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);\n        contentValues.put(JobStorage.COLUMN_EXACT, validInterval);\n        contentValues.put(JobStorage.COLUMN_ID, 1);\n", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       // Get the list of users from the fragment's arguments\n        Bundle args = getArguments();\n        users = args.getStringArrayList(CHAT_ID);\n\n        // Initialize the adapter\n        mDelAdapter = new UserAdapter(getActivity(), users);\n\n        // Set the adapter", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['indicator', 'target', 'area', 'code']\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n    class Meta:\n        model = AreaType\n        fields = ['code', 'name']\n\n\nclass AreaFilter(", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           fab.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View v) {\n                    if (v.getId() == R.id.fab) {\n                        GoogleAnalyticsSender.getInstance(getContext()).send(\"click_fab\");\n", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "           @Override\n            protected void onSuccess(final Channel channel) {\n                context.setConnectionState(new ConnectedConnectionState(channel, true));\n                context.fireConnectionStateChanged();\n            }\n        });\n\n        return deferred.get();\n    }\n\n   ", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "           new RegisterFragment().onPostRegisterExecute(success, email, password, message));\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final int k; // number of HMM states\n    private final int t; // time step\n    private final AtomicInteger[][] counters; // counters for HMM state transitions\n    private final AtomicInteger[][] counters2; // counters for HMM state em", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private int[] bottomMargins;\n\n    private List<FilterType> filterTypes;\n\n    private List<String> filterUrls;\n\n    private int menuCount;\n\n    private int currentPosition = 0;\n\n    public DropMenuAdapter(Context context, On", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      '--message-type', 'one']\n  args = parser", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "   def _render_stroke(self):\n        stroke = self.style.stroke\n        stroke_width = self.style.stroke_width\n\n        is_miter = self.style.stroke_linejoin == 'miter'\n\n        miter_limit = self.style.", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\ttry {\n\t\t\t\t\ta = IconPackManager.getApp(contextRef.get(), data);\n\t\t\t\t\t\tif (a != null) {\n\t\t\t\t\t\t\tapps.add(a);\n\t\t\t\t\t\t}", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (isOpsNeed2Add) {\n                    // do something\n                    // ...\n                }\n\n                if (isPlayNeed2Add) {\n                    // do something\n                    // ...\n                }\n\n                if (isAppSetNeed2", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.duration = np.linalg.norm(self.beg_vect - self.end_vect)\n\n        # Compute solar longitude of the beginning\n        self.lasun = np.radians(datetime2JD(self.jd_array[0]))\n", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tString name = fhead.ID().getText();\n\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(name);\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "   void add(Node node);\n\n    void enter(Node node);\n\n    void exit(Node node);\n\n    void visitInvisible(Node node);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "   @Override\n    public void init(ProcessingEnvironment processingEnvironment) {\n        super.init(processingEnvironment);\n        this.typeUtils = processingEnvironment.getTypeUtils();\n        this.elementUtils = processingEnvironment.getElementUtils();\n        this.messager = processingEnvironment.getMess", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class).toProvider(new GerritCheckoutProvider.Provider() {\n            @Override\n            public GerritCheckoutProvider get() {\n                return new GerritCheckoutProvider();\n            }\n        });\n\n        bind(Gerrit", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (zxid.contentEquals(getZxidFromName(snapshots.get(i).getName()))) {\r\n                        snapFile = snapshots.get(i);\r\n                        break; // break out of loop and set snapFile to the correct value.", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "   def _set_hidden_panes(self, hidden_panes):\n        self.hidden_panes = hidden_panes\n        for pane in self.panes:\n            pane.view.invalidate()\n\n    def _set_panes_from_file", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   'def __init__(self, *args, **kw):',\n    '    if len(args) > 0:',\n    '        self.Seg_dict = args[0]',\n    '    elif len(args) > 1:',\n    '        self.", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\t// Show empty list message\n\t\t\t\t\t\temptyText.setText(R.string.main_empty);\n\t\t\t\t\t\ttabLayout.setVisibility(View.VISIBLE);\n\t\t\t\t\t\tscanButton.setVisibility(View", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   # 2. coverslip\n    coverslip = np.random.rand(POS.shape[0], 1, 1) < 0.1\n    coverslip = np.zeros(POS.shape[0], dtype=np.float32) * 0.1", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "       result, index = apply_fast_and(left.values, right.values,\n                                          left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and(left.values, right), left.index)", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "               if (RequestFragment.sSelectedRequests.get(i).getIcon() == null) {Next line of code:\n                    mError = Extras.Error.ICON_REQUEST_NULL;\n                    return false;\n                }\n\n                IconRequest iconRequest = new Icon", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "```\n    def __subclasshook__(cls, subclass: type) -> bool:\n        return issubclass(subclass, (int, float, Decimal, AbstractDateTime, Duration))\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        return is", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "   def _createSearchHistory(self, context):\n        searchHistory = SearchHistory()\n        for teaser in context.teasers:\n            item = self._createItem(teaser)\n            searchHistory.addEntry(item)\n        return searchHistory\n\n    def createPage", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "               # 2.2 parameter consistency\n                for paramname in self.ParamDict:\n                    if self.ParamDict[paramname]._checkValue():\n                        errmsg += \"Error in parameter consistency: \" + paramname + \"\\n\"\n                        rvalue = False", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'type')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<Star>();\n\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n\n    private", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService();\n\t\tgenerationService.setPreprocessors(preprocessors);\n\t\tgenerationService.setPostprocessors(postprocessors);\n\t\tgenerationService.setDdi2FoGenerator(ddi2fo);", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Save the user to the database\n                        DatabaseManager.INSTANCE.saveUser(user);\n\n                        // Send the email\n                        // ...\n\n                        // ...\n\n                        // ...\n\n                        // ...\n\n                        // ...\n\n                       ", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^$', PackagesView.as_view(), name=\"packages\"),\n]\n\nproducts_urls = [\n    url(r'^$', ProductsView.as_view(), name=\"products\"),\n    url(r'^new$', staff_member_", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.bandIndexes[0] == NormalConfig.G", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict[\"tierList\"][0][\"entryList\"]\n\n\ndef test_save_textgrid(tg):\n    # Test that save function works\n    savedTg = run_save(tg)\n    assert savedTg == tg\n\n", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "   def segment_vad_function(self, *args, **kwargs) -> None:\n        \"\"\"\n        Multiprocessing function for running segmentation\n\n        Parameters\n        ----------\n        *args : list[SegmentVadArguments]\n            Arguments for each", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "   def _check_dataset(self, dataset):\n        # check sequence meta information\n        for seq_name, seq_metas in dataset.seq_metas.items():\n            for n in range(len(seq_metas)):\n                start_frame = seq_metas[", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   void add(FixTag tag, Object value);\n\n    void add(FixTag tag, BooleanSupplier supplier);\n\n    void add(FixTag tag, DoubleSupplier supplier);\n\n    void add(FixTag tag, IntSupplier supplier);\n", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "   def _create_thresholder(self):\n        return Thresholder(self._create_probe_adjacency_list(),\n                             self._create_channels_per_group(),\n                             self._create_weak_thresholds(),\n                             self._create", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult expandAtom(List<MatchExplanation> explanations) {\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tfor (MatchExplanation explanation : explanations) {\n\t\t\t\tresult.addExplanation(ex", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tpublic ParameterizedGenerationService(PipelineGenerator pipelineGenerator, ValorizatorParameters valorizatorParameters) {\n\t\tthis.pipelineGenerator = pipelineGenerator;\n\t\tthis.valorizatorParameters = valorizatorParameters;\n\t}\n\n\tpublic void generate(EN", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (SEND_NOTIFICATION ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (UNREGISTER_MBEAN ^ RESPONSE_MASK), new", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       File f = new File(BabelConfig.getInstance().getPathToScrapingFolder() + \"/\" + lang + \"/\" + source + \"/\" + id + \".txt\");\n                        FileUtils.writeStringToFile(f, content, \"UTF-8\");\n\n                ", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "       else:\n            raise PyBufrKitError('Unknown descriptor type {} for rendering'.format(type(descriptor)))\n\n        return lines\n\n    def render(self, obj):\n        if isinstance(obj, BufrMessage):\n            return self._render_buf", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "   parser.set_default_values()\n    return parser\n\n\ndef main():\n    parser = get_arg_parser()\n    args = parser.parse_args()\n\n    if args.import_setting:\n        set_tc_from_file(\n            logger,\n", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       contacts = Contact.objects.filter(phone_number=self.phone_number).first()\n        if contacts:\n            self.contacts = contacts\n        else:\n            self.contacts = []\n\n        if self.contacts:\n            self.language = self.contact", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   pipeline.apply(\"Read live data\", Read.from(new LiveProjectSource(org)));\n\n    // Convert project data to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        pipeline.apply(\"Convert live data", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       super().setUp()\n\n    def test_similar_path_generation(self):\n        engine = Engine()\n        rule = SimilarPathGenerator()\n        entry = Entry.create(\"http://example.com/test\", response_content=\"response\")\n        path = rule.generate", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "   conditions.append(Condition(AndCondition(\n        Condition(ComparisonCondition(column, \"gt\", value)),\n        Condition(ComparisonCondition(column, \"lt\", value))\n    )))\n    return conditions\n\n\ndef test_condition_for():\n    c = Mock", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       for i in xrange(10):\n            square = get_square_idx(i)\n            assert 0 <= square < 10 ** 2\n\n\nclass TestMultiply(object):\n    \"\"\"\n    Testing multiplying two numbers\n    \"\"\"\n\n   ", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final Testprio selectedTestprio;\n\n    private final Button selectMethodButton;\n\n    private final Text methodText;\n\n    private final Button selectMethodButton;\n\n    private final GroupMethodSelectionCtrl methodCtrl;\n\n    private final JUTPreferences preferences;\n", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "self.next_sink.Close()\n\nclass SinkProvider(object):\n  def CreateSink(self, sink_properties):\n    raise NotImplementedError()\n\n  def Close(self):\n    raise NotImplementedError()\n\nclass SinkRole(", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tpublic void setDebugImages(boolean debugImages) {\n\t\tthis.debugImages = debugImages;\n\t}\n\n\tpublic void parse(LapdfDocument document) {\n\t\tAbstractModelFactory factory = document.getModelFactory();\n\t\tSpatialOrdering spatialOrder", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "   Files.walkFileTree(input.toAbsolutePath(), new FileVisitor<Path>() {\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attributes) {\n        var path = file.getFileName().toString();\n        if (path.ends", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "   def consultar_numero_sessao(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_numero_sessao`.\n\n        :return: Uma resposta SAT espec", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPEAKER_ACTION", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   try:\n      result = self.commands[name](gopts, argv)\n    except NoSuchProjectError:\n      raise DownloadError('No such project: %s' % name)\n    except NoManifestException:\n      raise DownloadError('No manifest file: %s", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Provides @Singleton\n    Gson provideGson() { return new Gson(); }\n\n    @Provides @Singleton\n    TypeToken<List<Board>> provideBoardTypeToken() {\n        return new TypeToken<List<Board>>() { };\n   ", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(5));\n    }\n\n    @Test\n    public void testBatchCallableCount() {\n        List<CallableBatchExecution> callableBatchExecutions = new ArrayList<>();\n        callableBatchExecutions.add(getMockCall", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "   return new SvnJavaChangeLogCommand();\n}\n\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand();\n    }\n\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheck", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       // create verifiers\n        // ...\n\n        // add verifiers to the map\n        // ...\n\n        // set the initial verifier\n        // ...\n    }\n\n    public void createSettings() {Next line of code:\n\n        // create the settings panel\n        //", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n            Toast.makeText(getActivity(), R.string.error_login_failed, Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    private Boolean yasmeDeviceCheck() {\n        // Check if there is a device in the Database", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "   }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       self.chum.handle = quirks.changeCheckState()\n        self.chum.handle = quirks.removeCurrent()\n        self.chum.handle = quirks.addQuirkGroup()\n\n        self.chum.handle = quirks.changeCheckState()", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/problem', ProblemHandler),\n            (r'/status', StatusHandler),\n            (r'/debug', DebugHandler),\n            (r'/problemlist", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRNearQueryNode nearQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getNearQueryNodeExplanations(nearQueryNode);\n\t\treturn expandAtom(ex", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Invalid selection criterion: \" + criterion);\n        }\n\n        return informationCriterion.getChunk();\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.pro", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(ty1, ty2, e1, e2)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a simply typed function\n    into a Fst.\n    \n    Arguments:\n    - `expr`:", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(EventBus eventBus);\n\n    void inject(KioskModeHandler kioskModeHandler);\n\n    void inject(MainSettingsFragment.SettingsUi settingsUi);\n\n    void inject(PlaybackSettingsFragment.SettingsUi playbackSettingsUi);\n", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   public ChartCategoryFragment() {\n        // Required empty public constructor\n    }\n\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View view = inflater.inflate", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   with pytest.raises(ResponseValidationError):\n        handle_request(\n            Request(None, None, None),\n            ValidatorMap(None, None),\n            response=Mock(content_type='')\n        )\n\n\ndef test_response_content_type_", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\tpublic void execute(String[] args) {\n\t\tif (args.length == 0) {\n\t\t\tlog.info(\"Usage: <command> [<args>]\");\n\t\t\treturn;\n\t\t}\n\t\tString command = args[0];\n\t", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "           except TextGridParseError as e:\n                self.return_dict[\"decode_error_files\"].append(e)\n\n            except Exception as e:\n                self.return_dict[\"decode_error_files\"].append(e)\n\n            finally:\n                self.finished", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "   for sensor in sensors:\n        api.add_resource(\n            SensorResource,\n            \"/aircraft/sensors/%s\" % sensor.name,\n            resource_class_args=(sensor,))\n\n        api.add_resource(\n            SensorDataResource", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueKts())\n\n        fdmexec.GetIC().SetLatitudeDegIC(0.0)\n        fdmexec.GetIC().SetLongitudeD", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   # pylint: enable=line-too-long\n    # pylint: enable=E501\n\nINSTANCE_QUERY_HELP_LINES = [\n    'Usage: pywbemcli [GENERAL-OPTIONS] instance query [", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t\n\t@RequestMapping(value = \"/manage\", method = RequestMethod.GET)\n\tpublic String manage(Model model) {\n\t\tList<Users> users = userServices.getAllUsers();\n\t\tmodel.addAttribute(\"users\", users);\n\treturn \"manage", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                       logError(title, t);\n                        } else {\n                        logError(title, t);\n                        }\n                    }\n                }\n            });\n        } finally {\n            setControlsEnabled(true);\n            operationInProgress = false;\n        }\n", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "   def run_e2e_flow_for_language(self, language, person_name, join_keyword):\n        # Set up the language and person name\n        self.language = language\n        self.person_name = person_name\n        # Set up the contact and the date", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_place);\n\n    // Set up the UI\n    setHasOptionsMenu(true);\n    getActionBar().setDisplayHomeAsUp(", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   try:\n        # Connect to ADB\n        adb = getADB(DYNAMIC_TOOL_DIR)\n        print \"\\n[INFO] Connected to ADB\"\n        # Install APK\n        install_result = subprocess.check_output([", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "   LAI.LAC = 0x0000\n    LAI.LAC_dict = IANA_dict.get(LAI.LAC())\n    LAI.LAC_str = LAI.LAC_dict.get('LAC_str')\n", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\t# Create adjacency set\n\t\t\tCreateAdjacSet(data, v_lh, faces_lh, v_rh, faces_rh, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "     result.append(\" = \");\n    } else {\n      result.append(\" \");\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result.append(CLOSE_BRACKET);\n  }\n\n  public void visit", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "     cacheService.storeCacheList(new CacheList(listName));\n      cacheService.addListener((ProgressEvent event) -> updateStatus(event.getMessage(), event.getProgress()));\n      loadListsFromDBService.start();\n      loadFromDBService.start();\n    }\n", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   'CallName', 'ReprName', 'Pt', 'PtFunc', 'Val', 'Len', 'LenFunc', 'Type', 'Repr', 'Trans', 'TransFunc'\n    ]\n\n    def __init__(self, CallName='', ReprName='',", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "               TimeEntryOvertimeAggregation.createAggregationInfo(timeEntriesTable, workdaysTools, timeSource, workTimeConfigBean))));\n\n        dateFrom.setValue(timeSource.currentTimestamp());\n        dateTo.setValue(timeSource.currentTimestamp());\n", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "   def parse(self, packet):\n        super(PubKeyV4, self).parse(packet)\n        self.created = packet[0]\n        del packet[0]\n\n        self.pkalg = packet[0]\n        del packet[0]\n\n        self", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "   self.expansion_info)\n\n    def get_expansion_info(self):  # -> ExpansionInfo\n        return ExpansionInfo(self._board_num, self._expansion_num)\n\n    def get_expansion_name(self):  # -> str", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "       self.key_size = read_u16le(f)\n\n        for i in range(count):\n            key = read_u16le(f)\n            value = read_u8(f)\n            self.objects[key] = value\n\n        s", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "           create_inactive_user(email, full_name)\n\n            # Send invitation email\n            send_connect_email(\n                subject='Invitation to Connect',\n                template='connect/accounts/views/email/invitation.txt',\n                recipient=email,", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       await Utilities.message(ctx.channel, f\"{Draft.dump_content}\")\n\n        return await Utilities.message(ctx.channel, f\"{Draft.status}\")\n\n\n    @command(aliases=[\"load-form\"], pass_context=True)", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "   # elif name == \"%s_BT1_BTC\" % constant.EX_HITBITC:\n    #     ex = Hitbtc('BT1BTC')\n    # elif name == \"%s_BT2_BTC\" constant.EX_HITBIT", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           yield item\n\n    else:\n        raise self.wrong_context()\n\n\n@method(nullary('..'))\ndef select_ancestor_shortcut(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   helpTestData(10);\n  }\n\n  public void helpTestData(int rows) {\n    DummySherpaServer server = new DummySherpaServer(rows);\n    try {\n      Solutions solutions = helpExecuteQuery(server, 10);", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new ExpanderTextExpander(expanderIndexReader, null);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tresult.setSort(FacetSpecification.get", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "               MiPushClient.init(this, new MiPushClient.OnInitResultListener() {\n                    @Override\n                    public void onResult(int rtnCode, TokenResult tokenResult) {\n                        Log.e(MYTAG, \"MiPush init result: \" + r", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n\n    private int connectAttempts = 0;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "   else:\n        output.append(tablefmt.format(rows, headers, numalign=numalign,\n                                        stralign=stralign))\n\n    if status:\n        output.append(status)\n\n    return '\\n'.join(output)\n\n\ndef get", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "   from web.routes.api_word import words_api\n\nNameError: name 'words_api' is not defined\n\nI have tried to define the `words_api` function in the `api` module, but it still gives me the same error.\n\nI have also tried to", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.task_list_by_jql_activity);\n\t\t// ...\n\t}\n\n\t@Override\n\tpublic void onBack", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "   self.assertIsInstance(handle, HANDLE)\n\n    def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False)\n        self.assertRaises(WindowsAPIError, CloseHandle", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.vms = new SpringVms(restTemplate, root);\n    }\n\n    @Override\n    public Info get(String deploymentName) {\n        return info.get(deployment", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   List<ParsedPath> result = new ArrayList<>();\n                    for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(parserHolder.getSupportedAnnotation())) {\n                        result.add(parsedPaths.get(annotatedElement));\n                   ", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   protected ExecutorService executorService;\n\n    protected ReentrantLock reentrantLock = new ReentrantLock();\n\n    protected Condition notFullCondition = new Condition();\n\n    protected CountDownLatch countDownLatch = new CountDownLatch(1);\n", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           ActionManager actionManager = ActionManager.getInstance();\n            actionPopupGroup.add(new AddKeyAction(actionManager));\n            actionPopupGroup.add(new AddValueAction(actionManager));\n            actionPopupGroup.add(new DeleteKeyAction(actionManager));\n\n", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiButton saveButton;\n\n    public GuiSettingsChannel(ServerSettings settings) {\n        super(settings);\n        this.channel = settings.getChannel();\n        this.channels = new GuiScrollingPanel();\n        this.channels.setLayout(new", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_SHOT_CODE:\n                return new BtnScreenShot();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreen", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       Composite webModuleComposite = toolkit.createComposite(form.getForm());\r\n        webModuleComposite.setLayout(new GridLayout(2, false)); //$NON-NLS-1$\n        webModuleComposite.setBorder(Border", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       type = Type(name=\"my_type\", category=\"my_category\")\n        type_sample = type.get_sample()\n        self.assertEqual(\"my_type\", type_sample.name)\n\n    def test_type_get_comparable_values(self):", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "       new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetEndTimeCommand.class, SetEndEvent::fromCommand, this::queueEvent));\n        commandProcessor", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datas", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'perms': 'write',\n        'frob': frob,\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPFetchException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPFetchException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t} catch(FCPException e) {\n", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       if bytecode[k][2] in (JUMP_OPCODES + OP_FRAME_POP):\n          # Pop the condition from the stack\n          cond_stack_size -= 1\n          k -= 1\n          continue\n\n        # Check if the condition", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   //Get the active credit card from the fragment's arguments\n    if (getArguments() != null) {\n        activeCreditCardId = getArguments().getInt(Arguments.CREDIT_CARD_ID);\n        activeCreditCard = getCreditCardFromArguments(active", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "   admin.site.register(Language, LanguageAdmin)\n    admin.site.register(LanguageSet, LanguageSetAdmin)\n    admin.site.register(Platform, PlatformAdmin)\n    admin.site.register(Product, ProductAdmin)\n    admin.site.register(Release, Release", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t\t\t\t}, e -> {\n\t\t\t\t\t\tAnimations.fadeFlip(loadingProgress, listsPager);\n\t\t\t\t\t\tSnackbar.show(this, R.string.error_connectionfailure);\n\t\t\t\t\t}, () ->", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   def parse(self, ping_message: Sequence[str]) -> PingStats:\n        return self.__parser.parse(ping_message)\n\n    def parse_icmp_reply(self, ping_message: Sequence[str]) -> List[str]:\n        return", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           //load messages from server\n            GetNewMessagesForChatTask task = new GetNewMessagesForChatTask(chatId);\n            task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, (Void[]) null);\n        }\n\n        //", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic Cubeshaft() {\n\t\tsuper(\"Cubeshaft\");\n\t\tthis.level = new Level();\n\t\tthis.player = new Player();\n\t\tthis.levelRenderer = new LevelRenderer();\n\t\tthis.particleEngine = new ParticleEngine();\n", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_userinfo(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, is(batchStatement()));\n\n        // query count\n        assertThat(ds, totalQueryCount(5));\n        assertThat(ds, selectCount(3));\n        assertThat(ds, insertCount(3));\n        assertThat(ds, otherCount", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     }\n  }\n\n  private void parseResponse(String response) {\n    parseAjaxResponse(response);\n  }\n\n  private void sendRequest(String payload, RequestCallback callback, String... params) {\n    if (fileInput == null) {\n      fileInput =", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points = merge_assembly_points(assembly_points=original_assembly_points,\n                                                    min_cw=args.c_merging_cw_min,\n                                                                    strategy=args.c_merging_strategy,\n", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "   api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_class_args=(sensors.gyroscope,)\n    )\n\n    # ...\n\n    # Add the rest of the sensor resources", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "                       fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def load", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (!level.isInstalled()) {\n\t\t\t\t\t\tshowProgressDialog(getString(R.string.downloading));\n\n\t\t\t\t\t\tdownloadFile.setDownloadHandler(new DownloadHandler() {\n\t\t\t\t\t\t\t@Override", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private final WeeklyCaptionProvider weeklyCaptionProvider;\n\n    private final DesignContext designContext;\n\n    private final KeyMapper<String> keyMapper;\n\n    private final ContentMode contentMode;\n\n    private final DesignAttributeHandler designAttributeHandler;\n\n    private final", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root);\n    }\n\n    @Override\n    public Info info() {\n        return this.info;\n    }\n\n    @Override\n    public Releases releases() {\n        return this.releases;\n   ", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   (signerId, keyId) -> Lists.newArrayList(new RSAPrivateKeySigner(new RSAPrivateKey(signerId, keyId)) {\n      @Override\n      public byte[] getSignatureAlgorithm() {\n        return \"RSA-SHA", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeChangeListener;\n\n    public MultiItemTypeAdapter(Context context, List<T> datas) {\n        this.mContext = context;", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                   assertFalse(client.containerExists(containerName));\n                } catch (FilesException e) {\n                    // Ignore\n                }\n            }\n\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "           });\n        }\n    }\n\n    @Override\n    public void onPlayerStateChange(PlayState playState) {\n        if (playState == PlayState.Playing) {\n            startMeteredConnectionListener();\n        } else if (playState == PlayState.P", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "   @ViewById(R.id.drawer_layout)\n    DrawerLayout drawerLayout;\n\n    @ViewById(R.id.action_bar_activity_main)\n    ActionBar actionBar;\n\n    @NonConfigurationInstance\n    private static MainActivity instance;\n\n   ", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       if (home.getType() == Home.Style.Type.LANDSCAPE) {\r\n                            ImageConfig imageConfig = new ImageConfig(mContext, home.getUrl());\r\n                            ImageLoader.displayImage(imageConfig.getUrl(), imageConfig.getImage", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = Default.ENCODING\n\n    else:\n        encoding = encoding\n\n    convert_configs = load_convert_config(\n        logger, ctx.obj[Context.CONVERT_CONFIG], subcommand=\"url\", app_configs=app_configs\n", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "   def getPlaylistItem(self, item):\n        \"\"\" Return the playlist item for the given item. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item\n        raise NotFound('Playlist item not", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(TypeError, _environment_to_string, 42)\n\n    def test_empty_environment(self):\n        self.assertEqual(\n            _environment_to_string(None),\n            u\"\")\n\n    def test_environment", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   result = cmd.run(gopts, argv)\n\n    if result:\n      print(\"repo: error: %s\" % result, file=sys.stderr)\n      return 1\n\n    return result\n\n  def main(self, argv):\n    \"\"\"", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // 通知监听器\n                for (RunnerTaskListener runnerTaskListener : runnerListenerList) {\n                    runnerTaskListener.onTaskSuccess(taskData);\n                }\n            } catch (Exception e) {\n                // 执行任务", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       await r.reject(None, None)\n        self.assertIsInstance(r.result, RejectRequest)\n\n    @async_test()\n    async def test_reject_404(self):\n        r = RejectStatusCode()\n        await r.", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //用户的邮箱\n        stuEmail = utils.getSpEmail(stuXH);\n        //用户的昵称\n        stuNick = utils.getSpNick(stuXH);\n        //用户", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "       self.device = device\n        self.ip_version = ip_version\n        self.logger = logger\n        self.tc_command_output = tc_command_output\n        self.export_path = export_path\n        self.is_parse_filter_id = is", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "           state[\"inventory\"] = [self.serialize_item(i) for i in inv]\n        except AttributeError:\n            pass\n\n    def add_stats_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": " public Query visit(Ord4Search n, Query query) {\n    List<Occur> occurs = null;\n\n    if (n.f0.tokenImage.length() == 2) {\n      occurs = rfOpToOccur.get(n.f0.token", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t}\n\n\tpublic void generate(String surveyName, String pipelineName, String parametersType) {\n\t\tthis.surveyName = surveyName;\n\t\tthis.pipelineName = pipelineName;\n\t\tthis", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       try {\n\n            // Load zklogtool configuration\n            PropertiesReader.load(propertiesFile);\n\n            // Get zxid from name\n            long zxid = getZxidFromName(zxid);\n\n            // Get data directory\n            String dataDir =", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "   def get_from_queue(self):\n        # Wait til there's something in the queue\n        self.q_work.acquire()\n        if len(self.queue) == 0:\n            self.q_work.wait()\n        else:\n            self.", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       cursorById.close();\n\n        // Test the basic content provider query with a where clause\n        where = new MovieSelection();\n        where.id(movieRowId);\n        cursorById = mContext.getContentResolver().query(MovieColumns.CONTENT_URI,null,where.", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "   def EvtGenerationContrat(self, _):\n        ContratAccueilModifications(self.inscrit, self.current_cotisation[0]).Generate()\n\n    def EvtGenerationAvenant(self, _):\n        AvenantContratAccueilMod", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       element = ElementTree.Element('schema')\n        children = node_children(element)\n        self.assertEqual(len(children), 3)\n        self.assertIsInstance(children[0], ElementNode)\n        self.assertIsInstance(children[1], ElementNode)", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\t// Get the map view and set the map type\n\t\tmapView = (MapView) findViewById(R.id.mapview);\n\t\tmapView.setMapType(MapView.MAP_TYPE_HYBRID);\n\n\t\t// Get the location manager\n\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "           self.write_line(\"cisco-2960\")\n            self.write_line(\"switch\")\n            self.write_line(\"config\")\n            self.write_line(\"end\")\n            self.write_line(\"}\")\n\n            self.write_line(\"cis", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n\n  assert isinstance(config, NormalRateConfig", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       resposta = RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n        if resposta.EEEEE not in ('11000',):\n            raise ExcecaoRespostaSAT(resposta)\n        return res", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   # T and P\n    cond_dict = {}\n    points = calculate_dict[\"points\"][0]\n    # T and P\n    cond_dict[v.T] = calculate_dict[\"T\"][0]\n    cond_dict[v.P] = calculate_", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   from huginn.rest import (FDMResource, AircraftResource, GPSResource,\n                         AccelerometerResource, GyroscopeResource,\n                         ThermometerResource, PressureSensorResource,\n                         PitotTubeResource, InertialNavigationSystemResource,\n", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   def get_cmvn(self) -> Union[str, None]:\n        \"\"\"\n        Get the cmvn for the corpus\n\n        Returns\n        -------\n        str\n            cmvn for the corpus\n        None\n            cmvn not found\n        \"\"\"\n        if self", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   private CameraSourcePreview mPreview;\n    private GraphicOverlay<OcrGraphic> mGraphicOverlay;\n    private OcrDetectorProcessor mOcrDetectorProcessor;\n    private ExpenseManagerDAO mExpenseManagerDao;\n    private CameraSource", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tUtil util = Util.getInstance();\n\t\tSystem.out.println(util.io.readFile(\"path/to/file.txt\"));", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       List<ServerConfiguration> serverConfigurations = new ArrayList<>();\n        try (InputStream inputStream = new FileInputStream(new File(\"path/to/mongoSettings.xml\"))) {\n            Document document = Document.read(inputStream);\n            Element element = document.getRootElement();", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tFluent header = container.section(\"header\");\n\t\theader.classs(\"header\").h1(Att.H1, \"TodoMVC\");\n\t\theader.inputNext(Att.Input, \"search\");\n\n\t\t// Footer with Li line of code", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               Intent result = new Intent();\n                result.putExtra(MediaStore.EXTRA_OUTPUT, Uri.parse(\"file:///sdcard/camera_output.jpg\"));\n                setResult(RESULT_CODE, result);\n                finish();\n            }\n        });\n\n       ", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "   @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.song_list_fragment, container, false);\n\n        mRecyclerView = (RecyclerView) view.findViewById", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   with pytest.raises(InvalidSearch):\n        Search(\n            engine=engine,\n            model=model,\n            index=index,\n            key=key,\n            filter=None,\n            projection=\"all\",\n            consistent=True,\n            forward=False\n       ", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n\n            // do nothing\n        }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,int id,String gcActivityName) {\n\n            // do nothing\n       ", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "       # Add the API routes\n        self.api.add_resource(self.resources)\n\n        # Start the Flask app\n        self.server.run(debug=True)\n\n    def getProperties(self(self, a):\n        \"\"\"Method to get the properties of an", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "   def set_directory(self, directory):\n        self._directory = directory\n        self.sync_project_config_path()\n        self.signalDirectoryCreated.emit(directory)\n\n    def sync_project_project_config_path(self):\n        orig_path = self", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "   if __name__ == \"__main__\":\n        main()\n\n    return_code = run_command_helper(\n        \"tcset\",\n        device=device,\n        rate=bandwidth_rate,\n        latency_time=latency_time,\n       ", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final Map<Channel, Rectangle> channels = Maps.newHashMap();\n\n    public ChatTray(Gui gui) {\n        super(gui);\n        this.setLayout(new BorderLayout());\n        this.addComponent(new GuiNewChatTC(this", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        */\n        void onDateClick(Date date);\n    }\n\n    public VCalendar() {\n        initWidget(outer);\n        outer.setStyleName(PRIMARY_STYLE);\n\n        // set default values\n        firstDay = 1;\n        lastDay", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_client_id(self, client_id):\n        self._client_id = client_id\n        return self\n\n    def set_user(self, user):\n        self._user = user", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onUpgrade(client);\n            break;\n        }\n\n        case DISCONNECT: {\n            client.getBaseClient().send(new Packet(PacketType.DIS", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitTask commitTask;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private RepoContentTask repoContentTask;\n    private List<", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\n\t\t// Identity Generator\n\t\tidentityGenerator.setPipeline(pipeline);\n\t\t\n\t\t// DDI2XFORMS\n\t\tddi2", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<KV<GCPResource, GCPResourceState>>> projectStates =\n        pipeline.apply(\"Read project states from CRM API\", Read.from(\n            new LiveProjectSource(org))););\n\n    // Convert project states to GCPResourceState objects.\n", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "   return MyModel()\n\n\ndef test_model_creation(session):\n    # Test that the model can be created\n    model = session.Meta.model_class(name=\"MyModel\")\n    assert model.Meta.name == \"MyModel\"\n\n\ndef test_", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "\n    def _get_def_embeddings(self, def_id):\n        if self._disregard_word_embeddings:\n            return self._word_to_id[def_id]\n        else:\n            return self._word_to_id[def", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n        _lockObject.lock();\n        try\n        {\n            // Set up RX chat sockets.\n            for (int i = 0; i < RX_SOCK", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_video_pick);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(tool", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "           return self.render_to_response(self.get_context_data(form=form))\n        else:\n            return self.render_to_response(self.get_context_data(form=form))\n\n    def get_form_class(self):\n        if", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "   public static Fog convert(FogComponentDescriptor descriptor, GameObject go,\n            Map<String, Asset> assets) {\n        // find fog asset\n        Fog fog = (Fog) assets.get(descriptor.getFogID());\n\n        if (fog", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\t\t// Handle the LOCK\n\t\t\tint nbLocked = 0;\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tboolean isLocked = false;\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorDetailsComponent plus(ActorDetailsModule actorDetailsModule);\n}\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\treturn view.showProgressView();\n\n\t\t} catch (final SocketViewException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t}\n\n\tpublic void runBenchmark() {\n\t\ttry {\n\t\t\tben", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   pipeline_config_manager = PipelineConfigManager()\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.pipeline_config_manager = pipeline_config_manager\n\n    def get_pipeline", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\t\"Building a wrapper from the given service discovery: \"\n\t\t\t\t\t\t\t+ serviceDiscoveryInfo);\n\t\t\t\treturn activateLoginIfRequested(createMostSuitable", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       planillas_modelo = PlanillaModelo.objects.all()\n        planilla_de_relevamiento = None\n        if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self._cstr = Const(data=root.data)\n    else:\n      self._cstr = Comparator(data=root.data)\n    self.tree = self._cstr\n\n  def __repr__(self):\n    return 'Constraint(ast=%s,", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " public Tropo() {\n\n    super();\n    setName(\"tropo\");\n  }\n\n  public Tropo(Key... keys) {\n\n    super(keys);\n    setName(\"tropo\");\n  }\n\n  public static class Say {\n\n", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tthrows PlayerOfflineException;\n\t\tthrows PlayerPresentException;\n\t\tthrows RoundFullException;\n\t}\n\n\t/**\n\t * Removes this {@link MGPlayer} from the given {@link Round round}.\n\t *\n\t * @param", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [1023])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [123456", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   return result\n\n\n@method(function('format-datetime', nargs=(2, 3),\n                 sequence_types=('xs:datetime?', 'xs:string', 'xs:string?', 'xs:string')))\ndef evaluate_format_datetime_function(self,", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item.data.name == \"New sketch\":\n\t\t\t\tdefault_flags |= Qt.ItemIsEditable\n\t\t\telif model_item.data.name == \"Sketch instance\":\n\t\t\t\tdefault_flags |= Qt.ItemIs", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       response = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        response = Hydrator(version2, versions, []).hydrate_object(object_dto, object2)\n\n        self.", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         //TODO: D,  for multi test we really need to have it reading from multiple ring buffers.\n          PrimitiveReader reader = new PrimitiveReader(catBytes, 0, catBytes.length);\n          //read the preamble\n          reader.position = 0;", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(DFO, DopplerPoly(DopplerBase.TWO_PI, (1,)))\n\nNext line of code:\n\nto_map_and_back(TFO, TCXOPoly(TCXOBase.UN", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "       containsString(\"Total: 100\"));\n    }\n\n    @Test\n    public void storeWithId() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRecordsResponse(Resources.asByteSource(Resources.getResource(\"responses/d", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "           (False, PubKeyAlgorithm.RSAEncryptOrSign): RSAPriv,\n            (False, PubKeyAlgorithm.RSAEncrypt): RSAPriv,\n            (False, PubKeyAlgorithm.RSASign): RSAPriv,\n            (False", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\t// Instantiates the GeoJSON writer\n\t\tGeoJSONWriter geoJSONWriter = new GeoJSONWriter();\n\n\t\t// Sets the default writer\n\t\t", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                   res = Schema.get(\n                        new ExtMap().mput(\n                            Schema.InvokeKeys.ENTITY,\n                            context.get(Schema.InvokeKeys.ENTITY, ExtUUID.class)\n                        )\n                        .mput(\n", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/$', users_list, name='users_list'),\n    url(r'^new_user/$', new_user, name='new_user'),\n    url(r'^edit_user/(?P<user_id>[-\\w]+)/$", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           stack.setCurrentPlaySession(dialogFragment.getPlaySession());\n                            stack.setCurrentSession(dialogFragment.getPlaySession());\n                            stack.setCurrentQuizlet(dialogFragment.getQuizlet());\n                            stack.setCurrentSessionID(dialogFragment.", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   private void initData() {\n        // 请求数据\n        OkhttpManager.getRequest(Config.API_URL + \"/get_mentality_health\", new Callback.CommonCallback<String>() {\n            @Override\n            public void onSuccess(String response) {", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateBuffImg()\n        return obj\n\n    def updateBuffImg(self):\n        from blocks.Block import Block\n        from blocks.BlockShape import BlockShape\n        from blocks.InfixBlockShape import InfixBlockShape\n        from blocks.CollapseLabel import", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "       f = XorDiff.from_pair(d1, d2)\n        beta = XorDiff.from_pair(d3, d)\n        result = self._find_preimage(f, beta)\n\n        assert result is not None\n\n        assert result.i", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic static Node getTransform(Node node, NodeTransformer transformer) {\n\t\t\tif(node == null) {\n\t\t\t\treturn null;\n\t\t}\n\t\t\tif(node.getClass().equals(ConstantNode.class)) {\n\t\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\t// Add the listeners\n\t\tgetServer().getPluginManager().addEventHandler(this, new Event.Listener() {\n\t\t\t@Override\n\t\tpublic void onEvent(Event event) {\n\t\t\tif (event.getType().equals(Event.Type.", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       connection.send(new Challenge(challengeData));\n        resetParser();\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        connection.send(new Success(doc));\n        resetParser();\n    }\n\n    private void parseFailure(Element doc)", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\n\ndef test_search_ch_skch(self):\n    # https://www.cosic.esat.kuleuven.be/nessie/testvectors/\n    # key =\n    # 80000000 00000", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private AdapterWithHeader mAdapterWithHeader;\n\n\n    private List<Song> mSongList;\n\n\n    private int mCurrentPosition;\n\n\n    private int mCurrentSortOrder;\n\n\n    private boolean mIsPlaying;\n\n\n    private boolean", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           // Create a new flow abs effect instance\n            FlowAbsEffect flowAbsEffect = new FlowAbsEffect();\n            // Set the effect parameters\n            flowAbsEffect.setParameter(Parameter.FLOW_ABS_THRESHOLD, 0.5f);\n", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       Bit('ESM', ReprName='ESM Information', Pt=4, BitLen=4, Repr='hum'),\n        Bit('ESM_Cause', ReprName='ESM Cause', Pt=5, BitLen=4, Repr='hum'),\n", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           // update the song's id3 tags\n            updateSongTags();\n        }\n    };\n\n\n    public ArtistFragment() {\n        // Nothing here\n    }\n\n\n    public static ArtistFragment newInstance(long artistId) {\n        ArtistFragment fragment", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "   def _load_corpus_from_source(self) -> None:\n        \"\"\"\n        Load a corpus without using multiprocessing\n        \"\"\"\n        begin_time = time.time()\n        sanitize_function = None\n        if hasattr(self, \"san", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\t\t// Add the user to the REMITT system\n\t\t\t\t// \n\t\t\t// @param user\n\t\t\t// @return\n\t\t// Payload describing user creation status\n\t\t// \n\t\t// Note: This method is only called when the user", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiPlan> apiPlan(@Query(Constants.KEY) String apiKey);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(LogMessage message) {\n      if (message.getLevel().isInfo() || message.getLevel().isDebug()) {\n        // ignore\n      } else if (message.getLevel().isWarn() || message.getLevel().isError()) {\n        //", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   erb = erb(freq, bandwidth)\n    assert almost_eq(erb, gammatone_erb_constants(freq, bandwidth))\n\n\nclass TestGammatone(object):\n\n  def test_gammatone_example(self):", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "   def read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset=0):\n    \"\"\"Read and return a single Dataset instance from the file.\n\n    Parameters\n    ----------\n    fp : an opened", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   for (ICommentProcessor commentProcessor : this.commentProcessors) {\n      if (Objects.isNull(commentProcessor)) {\n        continue;\n      }\n      try {\n        // create a new context root object for each processor\n        T contextRoot = createContextRoot(document,", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected void loadDataFromNetwork() throws Exception {\n        if (searchCriteriaList.isEmpty()) {\n            return;\n        }\n        super.loadDataFromNetwork();\n    }\n\n    protected OAuthRequest getRequest() {\n        return new OAuthRequest(Verb.", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   def flags_int(self, val):\n        self._flags += val\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags = self.bytes_to_int(val)\n\n    def __init__(self", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "   def addMessage(self, lexmsg, isnew):\n        if isnew:\n            self.history.add(lexmsg)\n        self.textArea.addMessage(lexmsg)\n\n    def removeMessage(self, index):\n        self.textArea.removeMessage(", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "   def check_arg(arg, type_, env):\n        arg = check(arg, env)\n        with env.errors.location(arg.location):\n            unify(arg.__type__, type_)\n        return arg\n\n    def check(arg, env):\n        if", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   # Initialize the model\n    model_coefficients = np.zeros((N,))\n    for i in range(N):\n        model_coefficients[i] = 1\n\n    # Initialize the feature matrix\n    feature_matrix = np.zeros((N,", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "   private void pausePlayerAndSHowVpaid(PlayerUIController controller,\n            PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        // pause the player\n        controller.getContentPlayer().pause();\n\n        // show", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\n            ProximitySensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 8 || type ==", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,\n                                       @Query(\"term\") String term);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       stream = Stream(model=model, engine=self)\n        stream.heartbeat()\n        return stream\n\n    def validate_not_not_abstract(self, *objs):\n        for obj in objs:\n            if isinstance(obj, AbstractModel):\n               ", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "       self.log.info(\"confusion matrix\")\n        self.log.info(confusion_matrix)\n\n        # noinspection PyTypeChecker\n        self.log.info(\"accuracy on all classes: %2.2f%% (UAR %2.2f", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\t@Autowired\n\tprivate ChallengeServices challengeServices;\n\t@Autowired\n\tprivate SubmissionServices submissionServices;\n\t@Autowired\n\tprivate CategoryServices categoryServices;\n\t@Autowired\n\tprivate CountryServices countryServices;\n\t@Autowired\n\tprivate BannedIp", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def __getitem__(self, key):\n        if isinstance(key, slice):\n            return self.registry.get(key.stop, None)\n        elif isinstance(key, VertexCommand):\n            return self.client.command(key.command)\n        else", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "   def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the expected output at the previous time step as input, and is initialized with zero\n        initial states.\n\n        Returns\n       ", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "   for slug in TRANSIFEX_SLUGS:\n        all_platform_slugs.append(slug)\n\n    for slug in ZANATA_SLUGS:\n        all_platform_slugs.append(slug)\n\n    for slug in D", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorSegmentNode", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static Head head(Attribute... attributes) {\n\t\treturn new Head(attributes);\n\t}\n\n\tpublic static Hr hr(Attribute... attributes", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final AbstractMeter[][] meters = benchRes.getMeters();\n        final Method[] methods = benchRes.getMethods();\n        final Class<?>[] classes = benchRes.getClasses();\n\n        // Check if there are any data providers for dynamic input\n       ", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     def get_parent_loop(node):\n        parent_loop = None\n        for edge in visitor.edges:\n          if edge.kind == ControlFlow.E_LOOP:\n            parent_loop = edge.data\n            break\n        return parent_loop\n\n    self", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "   from .xpath30_helpers import UNICODE_DIGIT_PATTERN, DECIMAL_DIGIT_PATTERN, MODIFIER_PATTERN, decimal_to_string, int_to_roman, int_to", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   }\n            });\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.room_activity);\n\n        // get the room id from the intent\n        Intent intent", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tpublic Pipeline getPipeline() {\n\t\tPipeline pipeline = new Pipeline();\n\t\t\n\t\t// In2Out\n\t\tpipeline.add(identityGenerator);\n\t\tpipeline.add(ddi2xformsGenerator);\n\t\tpipeline.add(", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationEtatsPresenceMensuel(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "           H += dot(crosstens(J_rot), cross(crosstens(J_trans), R)) + dot(I, cross(crosstens(J_rot), R))\n        return H\n\n    def compute_angular_momentum_jacob", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       // Display the queued project details\n        displayPattern(queuedProjectResult.getPattern());\n        displayYardage(queuedProjectResult.getYardage());\n        displayGauge(queuedProjectResult.getGauge());\n        displayNotes(queuedProject", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "       // Register the economy service\n        game.getServiceManager().setProvider(this, EconomyService.class, economyService);\n        // Register the virtual economy service\n        game.getServiceManager().setProvider(this, EconomyService.class, virtualEconService);\n        // Register", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "   def _fit(self, *args, **kwargs):\n        \"\"\"\n        Fit the parameters using the MCMC sampler.\n\n        Parameters\n        ----------\n        *args\n        **kwargs\n\n        \"\"\"\n        _log.info('Fitting parameters with %s", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Ref(data=arg)\n    elif op == LOAD_GLOBAL:\n      return Ref(data=arg)\n    else:\n      return Undef(data=None)\n  else:\n    return Undef(data=None)\n\n  return Undef(", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\t\tpublic void dispose() {\n\t\t\tdisposed = true;\n\t\t\tfor (ClientEntity e : entities) {\n\t\t\t\te.dispose();\n\t\t\t}\n\t\t}\n\n\t\tpublic void update(float delta) {\n\t\t\t", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tv =", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> findAll() {\n\t\treturn authorRepository.findAll();\n\t}\n\n\t@Transactional(readOnly = true)\n\tpublic List<AuthorWithBooks> findAllWithBooks() {\n\t\tList<Long> authorIds", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic void executeServer(E exp, ForestReader in, ForestWriter out) {\n\t\t//TODO Auto-generated method stub\n\t}\n\n\tpublic SQLTranslation getPrim(String op, SQLTranslation[] args) {\n\t\tPrim prim = new Prim(op, args", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       # 开始自动化测试\n        auto_app_test(adb, app_info)\n        \n        # 下载 logs\n        download_logs(adb, download_dir)\n        \n        # 结束动态分析\n", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "   Genotype parseGenotype(InputStream inputStream);\n\n    Genome parseGenome(InputStream inputStream);\n\n    Carrier parseCarrier(InputStream inputStream);\n\n    DrugResponse parseDrugResponse(InputStream inputStream);\n\n    Relative parseRelative(InputStream input", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_optional():\n    inc_type = Func[[IntType], IntType]\n", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, prepared());\n        assertThat(pe, batchPrepared());\n        assertThat(pe, prepared", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new APIIncorrectException(cause);\n                    }\n                }\n                return cause;\n            }\n        };\n        // Set up the RestAdapter\n        mAdapter = new RestAdapter.", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\n\t\tregisterRenderer(Token.class, new DefaultTokenRenderer());\n\t\tregisterRenderer(IfToken.class, new DefaultIfTokenRenderer());\n\t\tregisterRenderer(SilentErrorHandler.class, new DefaultSil", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSubQueryType getFacetSubQueryType(SearchConfig search, Element elt) {\n\t\t", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<ci_pipeline_id>[\\w\\-\\+]+)/(?P<package_name>[\\w\\w\\-\\+]+)$',\n        NewCIPipelineForm.as_view(form_class=NewCIPipelineForm), name=\"", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       mContext.startActivity(intent);\n                        mDialog.dismiss();\n                    } catch (OutOfMemoryError e) {\n                        LogUtil.e(\"Error applying wallpaper\", e);\n                    }\n                }\n            } else if (id == R.", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   account = account_for_vimeo_id(access_token.url_id)\n    if not account.person:\n        person = Person(\n            display_name=access_token.display_name,\n            avatar_url=access_token.avatar_url", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                #   using the test pixel sum\n                pointing_dir_dir = np.arctan2(np.mean(np.sin(mask_segment[y_mean, x_mean])), \\\n", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   # Initialize psyfunction object\n    psyfunction = _psyfunction(data, options['param_ests'], options['param_free'], options['priors'])\n    \n    # Define function to approximate posterior\n    def _approximate_posterior(x):\n        return", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollBtn.addAction(Actions.sequence(Actions.alpha(0.7f, 0.4f), Actions.alpha(1, 0.5f))));\n            Board.this.rollBtn.setVisible(true);\n            Board.this.", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "       for child in etree_iter_paths(root, '//'):\n            print(child)\n\nOutput:\n\nb1\nc1\nc1\nc2\nc3\nb2\nb3\nb3\nc3\n\n        self.assertEqual(etree", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "   async def test_detect_soft_404(self):\n        entry = Entry.create(\"http://example.om/test\", response=StaticResponse(404, {}))\n        await self.runner.run(entry)\n        self.assertTrue(self.rule", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n           ", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "   List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return an ancestry.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into an ancestry\n    ", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           // Send the request to the MSSP\n            this.client.sendRequest(req);\n\n            // 5. Get the signed ASiC file\n            File signedFile = new File(this.RESULT_FILE);\n            signedFile.delete();\n            this.client.", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 12 || type == 0) {\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\n        }\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tpublic Team(String teamId) {\n\t\tthis.teamId = teamId;\n\t\tthis.teamSummary = getTeamSummary(teamId);\n\t\tthis.roster = getRoster(teamId);\n\t}\n\n\tpublic TeamSummary getTeamSummary() {", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       AppliveryDataManager.INSTANCE.saveAppData(AppData.Companion.newBuilder()\n                .setEmail(email)\n                .setScreen(screen)\n                .setType(userFeedback.getType().getStringValue())\n                .build());\n\n        App", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           request[object_index] = {\n                \"Key\": key,\n                \"ConsistentRead\": consistent,\n            }\n\n            object_index.add(obj)\n\n        if len(object_index) > 0:\n            self.session.get_all_items", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "           draw_art(fingerprint, size=10)\n            print(f'{fingerprint} - {description} ({created_at})')\n\n    async def upload_key(self, user, key):\n        backend = await self.open_backend()\n        await", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentInline)\nadmin.site.register(Progress, ProgressInline)\n\nI have tried to follow the documentation and the examples provided in", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "   def cancelar_ultima_venda(\n            self,\n            chave_cfe,\n            dados_cancelamento,\n            *args,\n            **kwargs):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.Funcoes", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertIsNone(node_document_uri(self.elem))\n        self.assertIsNone(node_document_uri(self.document))\n        self.assertEqual(node_document_uri(ElementTree.parse(io.StringIO('<A xmlns:ns=\"", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new Comparator<CalendarItem>() {\n\n                        @Override\n                        public int compare(CalendarItem o1, CalendarItem o2) {\n                            return o1.getStartTime().compareTo(o2.getStartTime());\n                ", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   def _trainer_initialization(self) -> None:\n        \"\"\"\n        Initialize the trainer\n\n        Raises:\n            :class:`~montreal_forced_aligner.exceptions.TrainingError`\n                If the trainer could not be initialized\n       ", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final List<OAuth2Guild> guilds = new LinkedList<>();\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = client", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n        this.releases = new SpringReleases(restTemplate, root);\n        this.stem", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "   public void setAudiologistPicture(String picture)\n    {\n        synchronized (_lockObject)\n        {\n            if (_state.getConnectionState() != FittingConnectionState.NOT_CONNECTED)\n            {\n                throw new IllegalStateException(\"Audiologist", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand( getClientManager(), getFileSet(), getBasedir() );\n    }\n\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand( getClientManager(), getFileSet(), getBasedir", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    public void onMouseClick(GuiMouseEvent event) {\n        if (event.getButton() == 0) {\n            if (event.getButtonTime() > 0) {\n                channel.openSettings();\n            }\n        }\n    }\n\n", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "         DATA[looptest][looppc][0], DATA[looptest][looppc][1], DATA[looptest][looppc][2], DATA[looptest][looppc][3], DATA[looptest][looppc][", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           // Load modules\n            for (Class<Module> clazz : moduleClasses) {\n                try {\n                    Module module = (Module) clazz.newInstance();\n                    module.plugin = AthenaGM.getPlugin();\n                    module.load();\n                } catch (", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "   public static DownloadQueue newDownloadQueue() {\n        return new DownloadQueue(3);\n    }\n\n    public static DownloadQueue newDownloadQueue(int threadPoolSize) {\n        return new DownloadQueue(threadPoolSize);\n    }\n\n    public static DownloadRequest newDownloadRequest(", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " @Override\n  public void init(Config config) {\n    // ...\n  }\n\n  @Override\n  public void configure(Config config) {\n    // ...\n  }\n\n  @Override\n  public void watch(WatcherRegistry registry) {\n    // ...\n", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "   private Set<String> parseQuerySetConfigTag(Element element) {\n        Set<String> querySets = Sets.newHashSet();\n        NodeList nodeList = element.getChildNodes();\n        for (int index = 0; index < nodeList.getLength();", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ == '__main__':\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "   def update_robot_ik(self):\n        prev_lf_task = self.robot.ik.tasks[self.robot.left_foot.name]\n        prev_rf_task = self.robot.ik.tasks[self.robot.right_", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "   BvNot, PopCount, Reverse, PopCountSum2, PopCountSum3, PopCountDiff, LeadingZeros]\n\n\n\ndef test_ops(size):\n    op = simple_op[size]\n    x = Variable(size)\n    y = Variable", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\taOutput.writeInt16(SegmentMarker.IHDR.CODE);\n\t\t\taOutput.writeInt16(aJPEG.mScanBlockCount);\n\t\t\taOutput.writeInt16(aJPEG.mMCUBlock", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           if (type == HibiscusExportType.SAMMEL) {\n                // Send the entire prenotification as a single last\n                // notification to Hibiscus\n                DataLastschriftMandat selected = getSelectedEinzellast();\n                if (selected", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "   from montreal_forced_aligner.alignment.pretrained import PretrainedAligner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n        if (!properties.hasLore(key)) {\n            properties.addLore(key);\n        }\n\n        PacketSyncLore.updateLore(entityPlayer);\n\n        entity", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   public List<AccountSummary> getAccountSummaries(Long userId) {\n        List<AccountSummary> summaries = new ArrayList<>();\n        BudgetDAO budgetDAO = new BudgetDAO();\n        BudgetTypeDAO budgetTypeDAO = new BudgetTypeDA", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger log = Logger.getLogger(Util.class);\n\n\tprivate Util() {\n\t\t// empty\n\t}\n\n\tpublic static CollectionsUtil collUtil() {\n\t\treturn CollectionsUtil.instance;\n\t}\n\n\tpublic static ClasspathUtil", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    ZoomIn(ZoomIn.class),\n    ZoomInDown(ZoomIn", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode, search_mode=search_mode)\n\n    if check:\n        assert problem.is_feasible()\n\n    if check:\n        assert problem.is_optimal()\n\n    if check:", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "   def test_get_hosts(self):\n        # Test that the hosts are returned in the correct order.\n        hosts = HostsContainer.get_hosts(self)\n        assert hosts == [h1, h2, h3, h4]\n\n    def test_get_", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           return command.startswith(\"--src-network\") or command.startswith(\"--src-port\")\n\n        return self.tc_command_output.get_command_history(tc_command_filter)\n\n    def run_command(self, command):\n        if self.", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses = new ArrayList<>();\n\n        Cursor cursor =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   public MonthCalendar(Context context) {\n        this(context, null);\n    }\n\n    public MonthCalendar(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public MonthCalendar(Context context, AttributeSet attr", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0] * 25\n\n  def test_inf_input(self):\n    my_stream = white_noise", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               t1 = t1.with_metaclass(TypingMeta)\n                t2 = t2.with_metaclass(TypingMeta)\n                unify(t1, t2, backref)\n            )\n\n    else:\n        raise NotImplemented", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       host=\"immedia-semi.com\",\n        client_id=None,\n        account_id=None,\n        token=None,\n        region_id=None,\n        motion_interval=None,\n        refresh=None,\n        timeout=None,\n        motion", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\tdef create_model_item(self, parent_item, data):\n\t\tmodel_item = QStandardItem()\n\t\tmodel_item.setParent(parent_item)\n\t\tmodel_item.setData(data)\n\t\treturn model_item\n\n\tdef", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     raise MethodDiscardMessage(ex, 'Client timeout')\n\n    else:\n      self.next_sink.AsyncProcessResponseMessage(buf, headers)\n\n  def AsyncProcessResponse(self, sink_stack, context, stream, msg):\n    pass\n\n  def _", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       //        assertThat(out.toString(), equalTo(\"\"));\n        //        assertThat(out.toString(), startsWith(\"Thread dump\"));\n        //        assertThat(out.toString(), endsWith(\"remotely-observed-thread\"));\n    }\n\n    @Test\n", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data, DataStoreMatcher.NODE_ID_MATCHER);\n    }\n\n    private static void assertThat(LinkedHashMap<Long, String> dataStoreContent,\n                                    DataStoreMatcher.Matcher matcher) {", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaPropertiesMockBuilder()\n                .withBusiness(new BusinessMock())\n                .withResponseStrategy(new ResponseStrategyMock())\n                .build();\n    }\n\n    private BusinessMock getBusiness() {\n        return new BusinessMock();\n    }\n\n", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self.send_message(self._BuildHeader(1, MessageType.Type.Tping, 0))\n    self.send_message(self._BuildHeader(1, MessageType.Tping, 1))\n    self.send_message(self._BuildHeader(1,", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert freq2lag(v) == v\n\n\nclass TestMetaMethods(object):\n\n  class Meta(NewMeta):\n    class __new__(Meta, *args, **kwargs):\n      return NewMeta\n\n  def test_new_meta_creation(self):", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "   @commands.command(name=\"config\", help=\"Configure various aspects of the bot.\")\n    async def config(self, ctx):\n        ...\n\n    @commands.command(name=\"city\", help=\"Set the city the bot is in.\")\n    async def city(self, ctx", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   return operands[0].evaluate(context) if operands[0].symbol == '(' else operands[1].evaluate(context)\n\n\n@method('eq')\n@method('ne')\n@method('lt')\n@method('gt')\n@method('le", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(R.string.personalize_welcome);\n\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEventParents = new ArrayList<>();\n\n        // Load the events from an asset file", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "       // Notify the fragment to show the chat activity\n        InviteToChatFragment inviteToChatFragment = (InviteToChatFragment) getActivity().findFragmentByTag(InviteToChatFragment.class.getName());\n        if (inviteToChatFragment !=", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n\n        Assert.assertNotNull(response);\n        Assert.assertTrue(response.getResultCode().equalsIgnoreCase(\"SUCCESS\"));\n    }\n\n    @Test\n    public void refund() throws", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       List<Parameter> parameters = creator.findParameters();\n        assertEquals(2, parameters.size());\n        assertEquals(STRING_PARAMETER_NAME_01, parameters.get(0).getName());\n        assertEquals(STRING_PARAMETER_NAME_02,", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "   public int readSmallIntValue(int d1) throws IOException {\n\t\treturn d1 & 0x07;\n    }\n\n    public BigInteger readBigInt() throws IOException {\n\t\treturn readOperand().asBigInt();\n    }\n\n    public", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "   def __repr__(self):\n        return '<Client %s>' % (self.username,)\n\n    def get_token(self):\n        return self.token\n\n    def refresh_token(self):\n        return self.refresh_token\n\n    def get_auth", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "           MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n\n        for line in ping_lines:\n            try:\n                parser_class = next(\n                    (\n                        getattr(ping_parser, name)\n                        for name, ping", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "           m.videoSetFrameRate.setEditable(false);\n            m.videoSetFrameRate.setBackground(new Color(255, 0, 0));\n            m.videoSetFrameRate.setText(\"1\");\n\n        } else if (e.getActionCommand", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self.probe = probe\n        else:\n            self.probe = _probe_adjacency_list(self._load_probe())\n\n        # Initialize the spike detector.\n        self.detector = Thresholder(\n            n_pcs", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": " def analyze(self):\n    self.walker = Walker(self.graph, self.edge_visitor)\n    self.walker.traverse(self.entry)\n    self.walker = None\n    self.graph = None\n    self.edge_visitor =", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       // Get the QR code data from the intent\n        IntentIntegrator intentIntegrator = new IntentIntegrator(getActivity());\n        intentIntegrator.initiateScan();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        //", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": " public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    final Object value = inExp.getValue();\n    if (value == null)\n      throw new QueryGrammarException(\"Cannot use NULL value in IN()\");", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile inputFile = new File(basePath + \"/input.xml\");\n\t\t\tFile outputFile = new File(basePath + \"/output.xforms\");\n\t\t\t\n\t\t\tPreprocessor[] preprocessors = new Preprocessor[] {\n\t\t\t\t\t", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "       # Test a Bernoulli distribution\n        bern = Bernoulli(\n            engine=np.random.uniform,\n            conditional={'p: 0.5': np.array([0, 1])},\n            seed=42\n        )\n        draws = b", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptString(final StringTag tag, final CharSequence value) {\n\t\tif (value == null) {\n\t\t\tthrow new InvalidValueException(tag, \"null value not allowed\");\n\t\t}\n\t\ttry {\n\t\t\tString str = value.toString", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "   def test_determine_date_of_birth(self):\n        self.assertEqual(\"1990-01-01\", determine_date_of_birth(month_of_pregnancy=12, date_of_sign_up=\"2", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfTheSystem();\n                                   ", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "   def show(self, with_trans=False):\n        re, tr = '', ''\n        # ...\n        str_lst = [e.show().replace('\\n', '\\n ') for e in self]\n        # ...\n        return ''.join(str_lst)[:-", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "       # Make sure we're not looking at an abstract model\n        validate_not_abstract(model)\n\n        # Create the table name\n        table_name = self._compute_table_name(model)\n\n        # Create the table\n        self.session.create_table(", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "       return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def consultar_ultima_sessao_fiscal(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.Funco", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   class MyNonModel(object):\n        pass\n\n    engine.bind(MyNonModel)\n\n\ndef test_bind_non_table(engine):\n    \"\"\"Can't bind things that aren't tables\"\"\"\n    class MyNonTable(object):\n        pass\n", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"kg/m**3 * s**-1\")\n    assert u7.dimensions == mass\n    assert", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "   ['Verify instance command references --no, returns paths',\n     ['references', 'TST_Person.name=\"Mike\"', '--no'],\n     {'stdout': ['\"root/cimv2:TST_Person.name=Mike\"', 'member'],\n", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load modules\n        List<Module> modules = new ArrayList<>();\n        modules.add(new LoanModule());\n        modules.add(new SqlModule());\n        modules.add(new CurrencyRegistryModule());\n        // Load commands\n        List<CommandLoader> commandLoaders =", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       ckresult(\n            getattr(_dll, self._get_func)(\n                self._sptr, byref(self.in), byref(self.out), byref(self.outvol),\n                index, name\n            )\n        )\n        return TAG(", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void onResume() {\n                        super.onResume();\n                        getPortfolioViewModel().setOnResume();\n                    }\n\n                    @Override\n                    public void onPause() {\n                        super.onPause", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<GalleryItemProxy>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], ", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.id\n    value = 3\n    expected_ref = \":v0.#n0\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0.#n0\": expected_action.value}", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           result = d.addQueue(url, downloadAction, targetFileOrFolder);\n        } catch (NoSuchBuildNumberException e) {\n            e.printStackTrace();\n            result = d.addQueue(url, downloadAction, targetFileOrFolder);\n        } catch (NoS", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "   def get_post_url(self, *args, **kwargs):\n        return reverse('ploghubapp:view_post', args=(args, username, slug))\n\nI have a feeling that the issue is with the `get_post_url` function, but I'", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji();\n\n    @GET(\"trending_terms\")\n    Call<TrendingTermResponse> getTrendingTerms();\n\n    @GET(\"trending_gifs\")\n    Call<TrendingGifResponse> getTr", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::failure);\n            of(mConnectionErrorCodeListener).ifPresent(ConnectionErrorCodeListener::failure);\n            of(mDisconnectionErrorCodeListener).ifPresent(DisconnectionErrorCodeListener::failure", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\n\n            ProximitySensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type ==", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "   }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack.getArch", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "   def __init__(self, *args, **kwargs):\n    def __init__(self, *args, **kwargs):\n    def __init__(self, *args, **kwargs):\n    def __init__(self, *args, **kwargs):\n    def __init__(self, *", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Deployments deployments;\n    private final Jobs jobs;\n    private final Vms vms;\n    private final Tasks tasks;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n       ", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag))\n        return tag\n\n    def set_tag(self, index, name, value):\n        \"\"\"Set a metadata tag.\n\n        'Tags' are metadata stored within a sound", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "   def process_section(self, bufr_message, bit_writer, section):\n        \"\"\"\n        This function is called for each section in the BUFR message. It takes\n        the BufrMessage and the BitStringBitWriter as input and processes the\n        section.\n\n", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            report_id = form.cleaned_data['report_id']\n            decision = form.cleaned_data['decision']\n            comments = form.cleaned_data['comments", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   public void output(final AbstractPerfidixMethodException exec) {\n        final NiceTable table = new NiceTable(getColumnCount());\n        table.addHeader(\"Method\", '=', Alignment.Left);\n        table.addHeader(\"Time\", '=', Alignment.Left", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       // Initializing the application options\n        ApplicationOptions options = factory.getApplicationOptions();\n        options.setVersion(versionNumber);\n        options.setDate(versionDate);\n        options.setManualURL(URL_MANUAL);\n        options.setHomepageURL(URL", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(URL(\"http://example.com/record.mp3\"));\n\t\t\n\t\tresponse.setContentType(\"text/html\");\n\t\tresponse.getWriter().write(\"Thank you for recording. The recording is available at <a href='http://example", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "\t\t\t//Verificando se a resposta está correta ou não\n\t\t\t//Se correta, atualiza a resposta na lista\n\t\t\t//Se não correta, adiciona uma nova resposta na lista\n\t\t\t//com o valor da resposta corre", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int status, TrackListConnector connector) {\n\t\t\t\tif (status == 0) {\n\t\t\t\t\tProgramManager programManager = ProgramManager.getInstance();\n\t\t\t\t\tprogramManager.parseTrack(connector.get", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Inject\n    PlayerUIController playerUIController;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    VpaidClient vpaidClient;\n\n    @Mock\n    CuePointsRetriever cuePointsRetriever;", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\tappEvent.removeObserver(dataStoreFactory) ;\n\t\t\t\t\n\t\t\t\tif (client != null) {\n\t\t\t\t\tclient.disconnect() ;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\tsuper.stop", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String adapterName = adapterName(type.getQualifiedName());\n    String injectorName = adapterName + INJECT_ADAPTER_SUFFIX;\n\n    // Generate the adapter class.\n    JavaFile adapter = JavaFile.builder(processingEnv.getFiler(),", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n        public static void enableReceiveNotifyMsg(boolean enable, Handler handler) {\r\n            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable, handler);\r\n        }\r", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_encoder():\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      '--", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   if is_xml_codepoint(item):\n        return f'/{path}{suffix}'\n    elif is_comment_node(item):\n        return f'/{path}{suffix}'\n    else:\n        return None\n\ndef evaluate_xpath_expression(expression", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   def last_record(self):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self)\n\n    def dropnan(self):\n        \"\"\"\n        Drop the rows where the values are missing\n        \"\"\"\n        dropnan_table(self)", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               if (_isTyping)\n                {\n                    _isTyping = false;\n                    addMessage(new ChatMessage(ChatMessageSource.AUDIOLOGIST, new TypingMessage(m.getTyping())));\n                }\n            }\n        }\n", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\t\tTvalues_A = glm_typeI(dmy_rightvar,\n\t\t\t\t\t\tEXOG_A,\n\t\t\t\t\t\tdmy_covariates=dmy_covariates,\n\t\t\t\t\t\toutput_f", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       assertThat(main.getStack(), Matchers.notNullValue());\n        assertThat(main.getStack().size(), greaterThan(0));\n\n        // Wait for process to be ready\n        sut.waitForReady();\n    }\n\n    public static class Runner", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               // 隐藏时间选择控件\n                // 隐藏天气选择控件\n                // 隐藏内容编辑控件\n                // 隐藏确定按钮\n", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 5 || type == 0) {\n            LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private CheckBox chkAddFunc;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_home);\n\n        // init data\n        DataHook.init(getApplicationContext());", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.link.connect()\n        self.reporter.start()\n        self.fm.start()\n        self.cleaner.start()\n        self.init_logging()\n        self.set_up_logging()\n        self.set_up_ntp()\n       ", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "   def get_availability(self, *, emails=None, duration=None, interval=None, start_at=None, end_at=None, free_busy=None, open_hours=None):\n        ...\n\n    def get_availability_con", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       activityLightLevelManager = new ActivityLightLevelManager(this);\n        // End of ActivityLightLevelChanger\n\n        // Set up the search UI\n        cancelSearchButton = (ImageButton) findViewById(R.id.cancel_search_button);\n        cancelSearchButton.setOnClickListener(", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_error = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_ther", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('Identity', Pt=Identity(), Len=1+8)]) \\\r\n            if with_options else []))\n        self.set_ie(self.ie_list)\n        self.set_ie_len(self.ie_list, self.ie_len)", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       self.__class_parser.parse(\n            device, run_tc_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_tc_qdisc_class(self, device):\n        self", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "   result, index = apply_fast_eq(left.values, right.values,\n                                    left.index, right.index)\n    return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   def test_validation_error_decorator_transforms_SwaggerMappingError(\n        self):\n        fake_validator_map = mock.Mock(\n            spec=ValidatorMap,\n            response=mock.Mock(\n                spec=SwaggerHandler,\n                schema=mock", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
