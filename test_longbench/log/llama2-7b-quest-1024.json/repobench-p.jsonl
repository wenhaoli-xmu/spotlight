{"pred": "   private final transient KademliaRoutingTable routingTable;\n    private final transient JKademliaRoutingTable routingTableJ;\n\n    private final transient KademliaId nodeId;\n    private final transient InetAddress inetAddress;\n    private", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       // TODO: add a parameter control panel for the selected effect\n        mParameterListAdapter = new EffectParameterListAdapter(mActivity, mEffects);\n        mParameterListView.setAdapter(mParameterListAdapter);\n\n        // TODO: add a menu item to toggle the parameter control panel\n", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Encryption):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, x, rk):\n        x = RotateLeft(x", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n\n    private boolean mParameterListAdapterInitialized;\n\n    private boolean mParameterListAdapterInitialized;\n\n    private boolean mParameterListAdapterInitialized;\n\n    private boolean mParameterListAdapterInitialized;\n\n", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "       new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event) {\n        this.eventQueue.add(event);\n        if (this.eventCallbacks", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    * 本地流量限制服务\n     */\n    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务数据管理器\n     */\n    private TaskMetaInfoManager taskMetaInfoManager;\n\n    /**\n     * ", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tif (args.dryRun()) {\n\t\t\t\tintegrityCheck.dryRun(args.vaultLocation(), args.vaultName(), passphrase);\n\t\t\t} else {\n\t\t\tintegrityCheck.check(args.vaultLocation(),", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           //save deviceId to storage\n            DebugManager.getInstance().saveDeviceId(deviceId);\n\n            //notify the class to notify\n            if (classToNotify != null) {\n                classToNotify.onDeviceRegistered(deviceId);\n            }\n\n            return", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new SignRequest(SERVER_CHALLENGE_SIGN, APP_ID_SIGN, SESSION_ID), signRequest", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "           if self.acctA == None:\n                self.acctA = self.global_config['_radius_client'].do_auth(self.username, self.uaA.state.getData()[0], self.uaA.state.getData()[1], self", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def __init__(self, uri):\n        self.uri = uri\n\n\nclass FlagList(Signature):\nNext line of code:\n\n    def __init__(self, flags):\n        self.flags = flags\n\n\nclass ByteFlag(Signature):\nNext line of", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "           return\n\n        if cstr_node.binary:\n          if cstr_node.lhs is None:\n            cstr_node.lhs = convert_ast_constraint(ast_node.first_child)\n            process_children(cstr_node.lhs,", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setDataAndType(Uri.parse(url), \"video/x-flv\");\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n   ", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       String message = mLocationSwitch.isChecked() ? \"I'm here\" : \"I'm not here\";\n        String email = mEmailAddress.getText().toString();\n        String name = mName.getText().toString();\n        String avatarUrl = mAvatarUrl.", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       # pylint: disable=no-self-use\n        self.assertRaises(TypeError, InterLayerPipeline,\n                              [InputLayer(1, 1),\n                               ConvLayer(1, 1, 1, 1, 1, ", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   def __new__(cls, *args, **kwargs):\n        init_called = True\n        return super().__new__(cls)\n\n    class User(BaseModel):\n        id = Column(String, hash_key=True)\n        email = Column(String)\n        name", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "\n\n###\n# XPath 3.0 functions\n\nXPath30Parser.unregister('function')\nXPath30Parser.register('function', bases=(ValueToken,))\n\n\n@method('function')\ndef nud_function_token(self):\n   ", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "   private static final ButterKnife.Action<View> HIDE_ALL = (view, index) -> {\n        view.setVisibility(View.GONE);\n        view.setVisibility(View.GONE);\n    };\n\n    private static final ButterKnife", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               if (instance == null) {\n                    throw new InstanceAlreadyExistsException(\"Instance already exists\");\n                }\n\n                writeResponse(CREATE_MBEAN, correlationId);\n\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       wild.create_task_tuple(wild.monitor_status())\n\n        wild.monitor_task = wild.create_task_tuple(wild.monitor_status())\n\n        wild.create_task_tuple(wild.monitor_status())\n\n", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   if c['vocab_text']:\n        vocab_text = Vocabulary(c['vocab_text'])\n    else:\n        vocab_text = None\n\n    # Load data\n    if c['data']:\n        data = SNL", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.coeffs == (50. /", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n               ", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "       assert self.redlock.acquire()\n        assert self.redlock.locked()\n        assert self.redlock.acquire()\n        assert self.redlock.locked()\n        assert self.redlock.exists(self.redlock.key)\n        assert self.red", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "       s_ptr = c_void_p()\n        self._call_fmod(\"FMOD_Sound_Get3DConeSettings\", self._sptr, byref(s_ptr))\n        return ConeSettings(s_ptr, \"Sound\")\n\n    def get_", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "   def __init__(self, calg, data):\n        self._calg = calg\n        self.data = data\n\n    def __len__(self):\n        return len(self.data)\n\n    def __copy__(self):\n        return CompressedData(self._", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "       cellSize = findCellSize(imgshape, cellShapeThreshold = cellShapeThreshold, verbose = verbose, out = out, **parameter);\n        \n        #cell intensity\n        cellIntensity = findCellIntensity(imgshape, cellShapeThreshold = cellShapeThreshold", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           if (accuracy == Accuracy.PERFECT) {\n                Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 200f);\n            } else {\n                Assets.perfectSwipeSound.play(GlobalConfiguration.", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           while (transactionIterator.hasNext()) {\r\n\r\n                Transaction t = transactionIterator.next();\r\n\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n\r\n            }\r\n\r\n        }\r\n\r", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               if (query.queryType == RequestType.SELECT) {//classifyColumnsToDimAndMetrics\n                    Either<String, Tuple2<List<String>, List<String>>> dataSourceDescRes = coordinator.aboutDataSource(stmnt.dataSource, reqHeaders);", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                   EncryptionAlgorithmCoded.AES256,\n                    AlgorithmParameterName.PIN,\n                    AlgorithmParameterValue.random_bytes(32),\n                ),\n                key_name=KeyName.PIN,\n                compression_function=CompressionFunction.", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           if (env.combExpMaxRegNum == 1) {\n                                env.combExpMaxRegNum = 0;\n                            } else {\n                                env.combExpMaxRegNum--;\n                            }\n                        }\n                    }\n                }\n", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "   url(r'^pipeline-config$', login_required(ajax_toggle_pipeline_config),\n        name=\"ajax-toggle-pipeline-config\"),\n    url(r'^pipeline-config-config-details$', ajax_pipeline_config_details,", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData)\n\t\t{\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = tags;\n", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self._storage_type = storage_type\n        return self\n\n\n\n\n#\n# DB OPEN\n#\n# Opens a database in the OrientDB Server instance. It returns the id of the opened database.\n#\n# Request: (database-name:string) <--", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(String description,\n            $Argument2 argument) {\n        preparation.recordGivenStep(description, argument);\n        return new GivenTwoArgumentsWhenSteps<", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "   try {\n      return process.await(expectedExitCodes);\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(this, e);\n    }\n  }\n\n  /**\n   * Waits for a process to terminate and returns the result of", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (null == textColor) {\n\t\t\ttextColor = Themer.getColor(contextRef.get(), R.attr.colorPrimary);\n\t\t}\n\t}\n\t\n\tprivate void setFontStyle() {Next line of code:\n\n\t\tif (", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = Message.parse(xml);\n\t\tif (message.isTextMessage()) {\n\t\t\tString text = message.getContent();\n\t\t\tString userId = message.getFromUserName();\n\t\t\tString toUserName = message.getToUserName();\n", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   # 获取运行时特征\n    app_info = get_app_info(file_path)\n    # 获取运行时特征\n    # 获取运行时特征\n    # 获取运行时特", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @channel_checks.raid_report_enabled()\n    async def cmd_raidcity(self, ctx, *city_name):\n        \"\"\"\n        **!raid-city city-name** - creates a raid party channel.\n\n        **Organizer commands:**\n       ", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0, 0, tzinfo=timezone.utc))\n        self.assert", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file, work_dir)\n        config_actor.start()\n        gevent.sleep(1)\n\n        # startup session database\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           if (TextUtil.isNull(picture.getComment_author())) {\n                                holder.tv_author.setVisibility(View.GONE);\n                            } else {\n                                holder.tv_author.setVisibility(View.VISIBLE);\n                                holder.", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\tfor j in range(num_contrasts):\n\t\t\t\t\t\tcontrast_names.append((\"tstat_pFWER_con%d\" % (j+1)))\n\t\t\t\t\tfor k in range(num_contrasts):", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               OAuthActivity.class,\n                OAuthActivity.OAuthFragment.class,\n                OAuthActivity.OAuth.class,\n                OAuthActivity.OAuth.class,\n                OAuthActivity.OAuth.class,\n                OAuthActivity.OAuth.class,\n", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "       self.update_hlen()\n\n    def parse(self, packet):\n        super(SignatureV4, self).parse(packet)\n        self.sigtype = SignatureType(self.bytes_to_to_int(packet[:1]))\n        del packet[:", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "\n\n\n@method(nullary('+'))\ndef select_addition(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    if self[0].value == '()':\n        # Addition of empty sequence\n        if", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter,\n      'penalty': Counter,\n      'idle': Counter,\n    }\n\n  class _Heap(object):\n    \"\"\"\n    A heap of nodes in the pool.\n    \"\"\"\n    def __init__(self,", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc._send_message_with_protocol(protocol, protocol)\n        protocol.send_string.assert_called_once_with('11:hello world@'.encode('utf-8'))\n\n    def test_send_message_with_protocol_bad_length(self", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       // ...\n        // end::query[]\n    }\n\n    public void queryExecutionParameter() {\n        // tag::query[]\n        ProxyTestDataSource ds = new ProxyTestDataSource(actualDataSource);\n\n        // ... perform application logic with database ...\n\n        // each execution", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testQueryExecutionSuccess() {\n        QueryExecution qe = new QueryExecution();", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               log.info(\"ADR Request scheduled\")\n                yield device.update(adr_adrreq=True)\n                continue\n            \n            # Send the ADR request\n            log.info(\"ADR Request sent\")\n            yield device.update(adr_adrreq=False)\n           ", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                   ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n#\n# IEEE 802.15.4 PHY format\n#\n# These are from IEEE 8022.15.4 spec\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       if (chat == null) {\n            chat = DatabaseManager.INSTANCE.getChat(getActivity());\n        }\n        if (chat == null) {\n            Log.e(getClass().getSimpleName(), \"Chat not found\");\n            return;\n        }\n", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass HITANS8(H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "           time_str = self.img_handle.getTime()\n\n            time_str = time_str.replace(' ', '')\n\n            time_str = time_str.replace(':', '')\n\n            time_str = time_str.replace('-', '')\n\n           ", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       if (mPublicRoomsListList == null) {\n            mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n            mHomeServerNames = new ArrayList<String>();\n        }\n\n        if (mPublicRoomsListList.size() == 0", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "       self.bingo_data_generator = BingoDataGenerator(self.dbi)\n        self.bingo_card_writer = BingoCardWriter(self.dbi)\n        self.bingo_card_manager = BingoCardManager(self.dbi)\n       ", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(target_sequences,\n                                        recipe[\"genomes\"][recipe[\"target\"]],\n                                        recipe[\"genomes\"][recipe[\"target\"]])\n\n    #initializing scaffolder\n   ", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "               }\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HWPush\":\n                Log.e(MYTAG, \"使用HWPush推\");\n                break;\n        }\n    }\n", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<QueryExp>(QUERY_EXP));\n        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new Marsh", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   /**\n     * Creates new form PersonalVulnsWindow\n     */\n    public PersonalVulnsWindow() {\n        initComponents();\n        setTitle(\"Personal Vulnerabilities\");\n        setIconImage(new ImageIcon(getClass().getResource(\"/com/corner", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   private void createMetricChartPanel(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, false);\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.isAckRequested()) {\n            AckRequest ackRequest = new AckRequest(packet, client);\n            ackManager.registerAck(ackRequest.getSessionId(), ackRequest);\n        }\n\n        if (packet.", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "     lMS.addTrack(new VideoTrack(appRtcClient.videoConstraints(),\n          appRtcClient.videoConstraints().videoTracks().videoSource(),\n          appRtcClient.videoConstraints().videoTracks().videoSource()));\n      }\n      videoSource = new VideoSource", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_BACKOFF_MS, -1L);\n            contentValues.put(JobStorage.COLUMN_BACKOFF_POLICY, -1);\n\n            contentValues.put(JobStorage.COLUMN_FLEX", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   # create a new journal file\n    journal = DiskJournal(basedir, system_data_path)\n\n    # create a new publisher\n    publisher = Publisher(journal.subscribers)\n\n    # create a new snapshot timer\n    snapshot_timer = S", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "       return docker_config\n\n    def determine_executable(self, desktop_file):\n        if desktop_file:\n            if desktop_file.get('desktop', None) == '':\n                return 'click'\n\n            if desktop_file.get('desktop', None) ==", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   final String[] SectionNames = { \"社区管理\", \"国内院校\", \"休闲娱乐\", \"五湖四海\", \"游戏运动\", \"社会信息\", \"知性感性\", \"文", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       //bgTasksRunning.incrementAndGet();\n        //if (bgTasksRunning.get() == 1) {\n        //    Log.d(\"SearchFragment\", \"Searching for user\");\n        //    SearchUserTask.getInstance().execute(getActivity());\n        //}\n       ", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\t\tif (model.getTestDataFactory() != null) {\r\n\t\t\ttestDataFactories.add(model.getTestDataFactory());\r\n\t\t}\r\n\r\n\t\tif (model.getTestDataFactory() != null) {\r\n\t\t\ttestDataFactories", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       self.assertTrue(self.client.received_simulator_data_data_datagram(SimulatorDataMatcher()))\n\n        self.assertEqual(self.client.simulator_data_datagram.time, 100000000000", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           if (httpMessage.getRes().hasResponse()) {\n                if (showResponse) {\n                    textareaMessage.setText(httpMessage.getRes().getResponse());\n                    textareaMessage.setCaretPosition(0);\n                    textareaMessage.setSelectionStart(", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\n\n\ndef test_simple_status_with_gsi():\n    \"\"\"Status is busy because table isn't ACTIVE, GSI is busy\"\"\"\n    description = {\"TableStatus\": \"BUSY", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   def _read(self, config, data):\n        \"\"\"Read the ID3v2 header and subchunks from the file\"\"\"\n\n        self._fileobj = fileobj\n        self._header = ID3Header(fileobj)\n        self._padding = 0\n\n       ", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r\n\r\n      return null;\r\n    }\r\n\r\n    visitProxOp(new VisitOrd3(n), query);\r\n\r\n    return null;\r\n  }\r\n\r", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new InvertTransformation(),\n                    new MaskTransformation(0xffffff00),\n                    new MosaicTransformation(),\n                    new PixelateTransformation(),\n                   ", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "           self._decode_field( FIELD_STRING )\n\n            exception_class = self._decode_field( FIELD_STRING )\n            exception_message = self._decode_field( FIELD_STRING )\n\n            raise PyOrientCommandException(\n                exception_class + '", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n\n    if args.fromdate and args.fromtime:\n        api.get_data(**{'FromDate': args.fromdate,\n                         'FromTime': args.fromtime})\n    elif args", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\t// get the album\n\t\t\t\tCall<ImgurResponseWrapper<GalleryAlbum>> call =\n\t\t\t\t\t\t\t\tclient.getApi().getGalleryAlbum( proxy.getId() );\n\n\t\t\t\ttry {\n\t\t", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   assert dump_key(user, user_key) == user_key\n\n\ndef test_extract_key(engine):\n    user = User(id=\"foo\")\n    user_key = {\"id\": {\"S\": \"foo\"}}\nNext line of code:\n\n    assert", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new Percentage(100),\n        new Status(Status.Status.SUCCESS),\n        new Fraction(100, 100),\n        new StaticString(\"Hello World\"),\n        new Spinner(BAR_EQUALS),\n        new", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static A a(String href, String title, String alt, String rel, String type) {\n\t\treturn new A(href, title, alt, rel, type);\n\t}\nNext line of code:\n\n\tpublic static A a(String href, String title, String alt", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "           event = Event(e)\n            events.append(event)\n\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    def", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n    ", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           if (mWallpaper != null) {\r\n                WallpaperPropertiesLoaderTask.sIsLoading = true;\r\n                WallpaperPropertiesTask.sIsLoading = true;\r\n                WallpaperApplyTask.sIsLoading = true;\r\n                WallpaperApplyTask.sIsLoading =", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private final static Logger logger = Logger.getLogger(QsolToQueryVisitor.class.getPackage().getName());\r\n\r\n  private final static String[] OPERATORS = new String[] { \"AND\", \"OR\", \"NOT\", \"PROXIMITY\", \"ANDNOT\"", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif args.maf is None:\n\t\t\targs.maf=0.0\n\t\tif args.maf<0.0:\n\t\t\traise ValueError('MAF must be positive number')\n\n\t\tif args.maf>1.0:", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n        # If the beginning time is not found, try to compute it from the file size\n        if self.beginning_datetime is None:\n            self.beginning_datetime = self.vidinfo", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   p = exactpsf.FixedSSChebLinePSF(kfki=1.07, zslab=-29.3, alpha=1.17,\n            n2n1=0.98, sigkf=-0.33, zscale=", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tif (FOOD_MODIFIER_ENABLED)\n\t\t{\n\t\t\tFoodModifier.onGlobalFormulaChanged();\n\t\t\tFoodHistory.get(player).onHistoryTypeChanged();\n\t\t\tFoodGroupRegistry.clear();\n", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       if request.user.userprofile.comment_karma < 1:\n            messages.error(request, 'You do not have enough comment karma to comment on this post.')\n            return redirect(reverse('ploghubapp:home_page'))\n        else:\n           ", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tISelection selection = selectionLayer.getSelection();\n\t\t\t\t\t\tif (selection instanceof StructuredSelection) {\n\t\t\t\t\t\t\tStructuredSelection structuredSelection = (StructuredSelection) selection;\n\t\t\t\t\t\t\tif (", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = []\n\n    def __bytearray__(self):\n        _bytes = super(RevocationKey, self).__bytearray__()\n        _bytes +=", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "       if is_processing_instruction_node(item):\n            yield item\n\n\n@method(function('comment', nargs=(0, 1), label='kind test'))\ndef select_comment_kind_test(self, context=None):\n    if context is None:\n", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "def getAS2PuffleString(client, puffles):\r\n    puffles_as2_str = list()\r\n    for puffle in puffles:\r\n        p_id, p_type, p_sub_type, p_name, p_adopt", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   def __init__(self, image, pos, viewrad=None, cmap='Greys_r',\n                 part_col=None, **kwargs):\n        self.image = image\n        self.pos = pos\n        self.viewrad = viewrad\n        self.cmap", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "           with tqdm.tqdm(total=len(jobs)) as pbar:\n                for job in jobs:\n                    compile_info_function = compile_information_func(job.log_path)\n                    for done, errors in compile_info_function.run", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   # Recompute the rotation wrt horizon\n    platepar.rotation_wrt_horizon = rotationWrtHorizon(platepar.RA_d, platepar.dec_d, platepar.JD, \\\n        platepar.lat, platepar.lon)\n\n", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_EXACT, true);\n        contentValues.put(JobStorage.COLUMN_EXTRAS, new Persistable", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       if (chatRem == null) {\n            chatRem = getActivity().getLayoutInflater().inflate(R.layout.fragment_chat_settings_remove, null);\n        }\n\n        if (mDelAdapter == null) {\n            mDelAdapter = new UserAdapter(getActivity(),", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['indicator', 'target', 'area_code', 'area_name',\n                  'area_type', 'area_type_code', 'area_type_name']\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n   ", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           fab.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View v) {\n                    if (fab.getVisibility() == GONE) {\n                        fab.show();\n                        uiHandler.postDelayed(hideButton, 60", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "               return transport.connect(context, manager, true);\n            }\n        }).then(new OnComplete<Channel>() {\n            @Override\n            protected void onSuccess(final Channel channel) throws Exception {\n                LOGGER.debug(\"Reconnected to transport...\");\n\n                deferred.", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               new RegistrationParam(success, email, password, message));\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final AtomicInteger counter = new AtomicInteger(0);\n    private final Map<String, MatcherCandidate> candidates = new HashMap<>();\n    private final Map<String, MatcherTransition> transitions = new HashMap<>();\n    private final Map<String, MatcherSample", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private String[] urls;\n    private String[] urls2;\n    private String[] urls3;\n    private String[] urls4;\n    private String[] urls5;\n    private String[] urls6;\n    private String[] urls7;\n    private String[] urls8;\n   ", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " assert args.gps_sv[0].getMessage() == ConstMessage(0)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "       for i in range(len(fills)):\n            if len(self.style.fill_rule) == 0:\n                self.svg.n_lines += len(fills[i]) - 1\n                self.svg.n_tris += len(fills[", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"[\") && data.endsWith(\"]\")) {\n\t\t\t\t\tString[] parts = data.substring(1, data.length() - 1).split(\"\\\\s+\");\n\t\t\t\t\tif (parts.length ==", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt = self.beg_vect.alt\n        self.end_alt = self.end_vect.alt\n\n        # Compute the great circle\n        self.gc = greatCircle(self.beg_alt, self.end_alt)\n\n", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(ctx.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void enterEnumDef(@NotNull", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "   /**\n     * Called when the visitor reaches a node that is a {@link com.bazaarvoice.jless.ast.node.ArgumentsNode}.\n     * @return Determines whether the node's children will be visited.\n     */\n    boolean visitArguments(ArgumentsNode node", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "   private SpecificationGenerator specificationGenerator;\n    private CodeGenerator codeGenerator;\n\n    private final AtomicReference<Swagger> runtimeSwagger = new AtomicReference<>();\n\n    private final AtomicReference<IOptions> options = new AtomicReference<>();\n\n    private final AtomicReference", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class);\n        bind(GerritPushExtension.class);\n        bind(GerritToolWindow.class).asEagerSingleton();\n        bind(GerritActions", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (snapshots.get(i).getName().startsWith(zxid)) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            if (", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "       entries = [e for e in entries if txn_matches(e, query)]\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.has_unassigned_split]\n        elif filter_type is FilterType.", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   ]\n    def __init__(self, name, data, parent=None, **kwargs):\n        Layer.__init__(self, name, data, parent, **kwargs)\n        self.name = name\n        self.data = data\n        self.parent = parent\n        self.", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.just(null);\n\t\t\t\t\t\t}\n\t\t\t\t\treturn searchSuggestionsAdaper.getSuggestions(query);\n\t\t\t\t})\n\t\t\t\t.subscribe(suggestions -> {\n\t\t", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   # 2. coverslip\n    # 3. illumination\n    # 4. background\n    # 5. brightfield\n    # 6. brightfield illumination\n    # 7. brightfield illumination\n    # 8. brightfield illumination", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "       result, index = apply_fast_and(left.values, right.values,\n                                          left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request.getPackageName() == null) {\r\n                        mError = Extras.Error.ICON_REQUEST_PACKAGE_NULL;\r\n                        return false;\r\n                    }\r", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "       instance,\n        (int, float, Decimal, AbstractDateTime, Duration)\n        )\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        return issubclass(sub", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "           return SearchMenuPage()\n        if pageletId == 'RubricPage':\n            return RubricPage(params['rubricUrl'])\n        if pageletId == 'RubricsPage':\n            return RubricsPage()\n        if pageletId == 'ShowsAz", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "               if pattern.datafile is None:\n                    errmsg += \"    %s:  data file does not exist.\\n\"%pattern.name\n                    rvalue = False\n                    break\n\n            # 2.2 data file existence\n            elif mode == \"Calculate\":", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'type')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<Star>();\n\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n\n    private", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(basePathDDI2FO, preprocessors, postprocessors);\n\t\t\n\t\tFile inputFile = new File(basePathDDI2FO + \"/input-input.xml\");\n\t\tFile outputFile = new File(", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Send the email\n                        new UserLoginTask(activity, user, this.deviceProduct, this.getClass().getName())\n                                .execute(emailTmp);\n                    }\n                });\n\n        // \"Cancel\" button to cancel the operation\n        alert.set", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^$', RedirectView.as_view(permanent=True, url='/packages')),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()),\n        name=\"package-new\"),\n    url(", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, FourBandsBitEncoder)\n  assert encoder.bandIndexes[0] == NormalRateConfig.", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict[\"tierList\"][0][\"entries\"]\n\n\ndef run_read(fn):\n    \"\"\"\n    Mock read function and return the first tier's entry list\n\n    tg.save() mutates the textgrid's data, so the entry", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                   procs.append(KaldiProcessWorker(function, return_queue, stopped))\n                    procs[-1].start()\n                    pbar.update(1)\n                    if stopped.stopped():\n                        break\n                for proc in procs:\n                ", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "           dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NFS')\n        dataset =", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   void set(FixTag tag, Object value);\n    void set(FixTag tag, boolean value);\n    void set(FixTag tag, int value);\n    void set(FixTag tag, long value);\n    void set(FixTag tag, double value);", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "           yield chunk_idx, bounds\n\n    def iter_chunks_with_spikes(self, n_samples):\n        \"\"\"Iterate over chunks with spikes.\n\n        Parameters\n        ----------\n\n        n_samples : int\n            The number of samples to", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAndQueryNode.Operator operator, AlvisIRAndQueryNode andQueryNode, Void param) {\n\t\t\treturn new ExpansionResult();\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate Validator validator;\n\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate File pipelineFolder;\n\tprivate File pipelineFile;\n\tprivate File pipelineFolderTemp;\n\tprivate File pipelineFolderTemp2;\n\tprivate File pipelineFolderTemp3;\n\tprivate File pipelineFolder", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (ADD_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (ADD_NOTIFICATION_LISTENER ^ RESPONSE_", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       FileSaver fileSaver = new FileSaver(content, lp.getLanguage(), \"twitter\", url, tweet.getId().toString());\n                        fileSaver.save(logDb);\n                        map.put(tweet.getText(), true);\n                       ", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "       elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n            lines.extend(self._render_descriptor_helper(descriptor.value, indent + INDENT_CHARS))\n\n        elif isinstance", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "       help=\"network latency time [millisecond].\n        the minimum latency time is 10 ms.\n        valid units are either: {}.\n        e.g. tcset eth0 --latency 10ms\n        \"\"\".format(\n            \", \".join([", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_contact(self):\n        return Contact.objects.filter(phone_number=self.phone_number).first()\n\n    def get_group(self):\n        return Group.", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   PCollection<KV<GCPResource, KV<StateSource, GCPResourceState>>>> liveStates =\n        pipeline.apply(\n            \"Read live states\",\n            Read.from(new LiveProjectSource(org))\n                .withOutputTags(resourceStateSuccessTag", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.rule = ContentSimhashSampling()\n        self.engine = Engine(self.rule)\n        self.engine.mock.reset_mock()\n\n    def test_similar_path_generator_returns_similar_paths_for_same_url(self):\n        self", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(Condition(AndCondition(operations[0], operations[1])))\n    elif \"or\" in operations:\n        conditions.append(Condition(OrCondition(operations[0], operations[1])))\n    elif \"not\" in operations:\n        conditions.append", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       assert get_square_idx(1, 1) == 1\n        assert get_square_idx(1, 2) == 2\n        assert get_square_idx(1, 3) == 3\n        assert get_square_idx(1, 4)", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final ICompilationUnit testClass2;\n\n    private final IJavaProject testProject;\n\n    private final IJavaProject testProject2Project;\n\n    private final IJavaProject test3Project;\n\n    private final IJavaProject test4Project;\n\n    private final", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "   self.next_sink.AsyncProcessRequest(\n      sink_stack,\n      msg,\n      stream,\n      headers\n    )\n\n    self.next_sink.AsyncProcessResponse(\n      sink_stack,\n      context,\n      stream,\n      msg\n", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate boolean debugSpatial = false;\nNext line of code:\n\n\tprivate boolean debugSpatialOrdering = false;\nNext line of code:\n\n\tprivate boolean debugSpatialEntities = false;\nNext line of code:\n\n\tprivate boolean debugSpat", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "   var files = docerConf.files().orElseGet(\n        () -> {\n          var moduleDependencyPath = docerConf.moduleDependencyPath();\n          var moduleSourcePath = docerConf.moduleSourcePath();\n          var moduleMergedTestPath = docerConf.", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "       return RespostaSAT.analisar(retorno)\n\n    def consultar_numero_sessao(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_numero_s", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   if gopts.event_log:\n      git_trace2_event_log.Write(gopts.event_log)\n\n    if gopts.git_trace2_event_log:\n      git_trace2_event_log.Write(gopts.git_trace", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Provides @Singleton\n    SharedPreferences provideSharedPreferences() {\n        return PreferenceManager.getDefaultSharedPreferences(app);\n    }\n\n    @Provides @Singleton\n    SharedPreferences provideSharedPreferences(Application app) {\n        return PreferenceManager.get", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(4));\n    }\n\n    @Test\n    public void testTotalCountForOutOfIndex() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution()); ", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand();\n    }\n\n    /**\n     * {@", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       // create verifiers\n        VerifierProperty schemaVerifier = new ValidSchemaNameVerifierImpl();\n        VerifierProperty localFilesVerifier = new LocalFilesExistVerifierImpl();\n        VerifierProperty remoteFilesVerifier = new RemoteFilesExistVerifierImpl();\n\n       ", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n            Toast.makeText(getActivity(), R.string.error_invalid_login, Toast.LENGTH_SHORT).show();\n            getActivity().finish();\n        }\n    }\n\n    public void onPostLoginCancel() {\n        showProgress(", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    * @throws DrupalFetchException if there's an error during the request.\n     */\n    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (inv", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       self.chum.sendMessage(text)\n        self.chumopen = False\n        self.textInput.clear()\n        self.textArea.clear()\n        self.textInput.setFocus()\n        self.textArea.setFocus()\n        self.textInput", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/login', LogInHandler),\n            (r'/problem', ProblemHandler),\n            (r'/status', StatusHandler),\n            (r'/submit", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explan", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Unknown criterion: \" + criterion);\n        }\n\n        return informationCriterion.computeInformationCriterion();\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(ty1, ty2)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a simply typed argument into a Fst.\n    \n    Arguments:\n    - `expr`: an expression or int or float\n   ", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(BatteryStatusIndicator batteryStatusIndicator);\n\n    void inject(EventBus eventBus);\n\n    void inject(Resources resources);\n\n    void inject(AudioManager audioManager);\n\n    void inject(AudioBookManager audioBookManager);\n\n    void inject(Configuration", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   public ChartCategoryFragment() {\n        // Required empty public constructor\n    }\n\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View view = infl", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   with pytest.raises(ResponseValidationError) as excinfo:\n        response = PyramidSwaggerResponse(Mock(response=Mock(status_code=500)))\n        handle_response(response, response, None)\n\n    assert excinfo.value.status_", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t/**\n\t * \n\t * @param ctx\n\t * @throws IOException\n\t */\n\t@Override\n\tpublic void exitAddOrDeleteEdge(AddOrDeleteEdgeCommandContext ctx) throws IOException {\n\t\tif (ctx.cmd == null) {\n\t\t\tlog", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "           except TextGridParseError as e:\n                self.return_dict[\"decode_error_files\"].append(e)\n\n            except Exception as e:\n                self.return_dict[\"other_error_files\"].append(e)\n\n            self.finished_processing.stop", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "       PressureSensorResource,\n        \"/aircraft/sensors/pressure_sensor\",\n        resource_class_args=(sensors.pressure_sensor,)\n    )\n\n    api.add_resource(\n        PitotTubeResource,\n        \"/aircraft", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueKtsFPS())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n        self", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   '--ns, --namespace NAMESPACE Filter the result set by namespace',\n    '--ns, --namespace NAMESPACE Filter the result set by namespace',\n    '--ns, --namespace NAMESPACE Filter the result set by namespace',\n    '--ns, --namespace NAMESPACE", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t@RequestMapping(value = \"/manage/index\", method = RequestMethod.GET)\n\tpublic ModelAndView index(ModelAndView modelAndView) {\n\t\tmodelAndViewAndView.setViewName(\"manage/index\");\n\t\treturn modelAndViewAndView;", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           logError(title, t);\n                        }\n                        else if(exceptionClass.equals(InvalidOperationException.class)){Next line of code:\n\n                            logError(title, t);\n                        }\n                        else if(exceptionClass.equals(SdkClientException", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                      join_keyword=u'\\u0915\\u0940')\n\n    def test_full_e2e_english_signup_and_cancel_flow_with_pregnant_signup(self):\n        logging.info(\"running e", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected Location lastLocation;\n  protected Location lastLocationCheckin;\n  protected Location lastLocationCheckinQueued;\n  protected Location lastLocationQueued;\n  protected Location lastLocationQueuedCheckin;\n  protected Location lastLocationQueuedCheckinQueued;\n  protected Location last", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   print \"\\n[INFO] MobSF will perform Dynamic Analysis on Android AVD\"\n    avd_load_wait(adb)\n    print \"\\n[INFO] MobSF will perform Static Analysis on Android AVD\"\n    print \"\\n[INFO] MobSF will", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Bit):\n    constructorList = [\n        Int('RRC_version', Pt=0, Type='uint8', Repr='hex'),\n        Int('RRC_protocol_version', Pt=0, Type='uint8', Repr='hex'),", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\t# create adjacency set\n\t\t\tadjac = CreateAdjSet(data, v_lh, v_rh, faces_lh, faces_rh, opts.vertexdist[0], opts.vertextriangularmesh[0])\n\t\t\t", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "     result.append(\" = :\").append(baseVariableName);\n    } else {\n      result.append(\" \").append(exp.getOperator().getValue()).append(\n          \" \").append(\":\").append(baseVariableName);\n      acceptOrVisitValue(exp.get", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "     cacheService.storeCacheList(new CacheList(listName));\n      cacheService.storeCacheLists(new CacheLists(listName));\n      loadListsFromDBService.start();\n      loadFromDBService.start();\n      }\n    }\n  }\n\n", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   def __init__(self, CallName='', ReprName='', T=0, V=0, \\\r\n                 Trans=False, Dict=None):\r\n    def __init__(self, CallName='', ReprName='', T=0, V=0, \\", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       TimeEntryOvertimeAggregation.class)\n        );\n\n        timeEntriesTable.getColumn(\"overtime\").setCaption(messageBundle.getMessage(\n                \"timeentry.table.overtime.caption\",\n                messageBundle.getMessage(TimeEntry.class,", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "           (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "                            self._expansion_num, BoardInfo.BOARDTYPE)\n\n    @property\n    def supported_event_types(self):\n        event_types = []\n\n        for event_type in EventType:\n            try:\n                ul.disable_event(self._", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "       self.key_size = read_u16le(f)\n        self.objects = {}\n\n        for i in range(count):\n            key = read_u16le(f)\n            self.objects[key] = self.parent.dir.get(self", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "           user = create_inactive_user(email, full_name)\n\n            # Send invitation email\n            subject = _('Invitation to join Connect')\n            template = 'connect/accounts/emails/invitation.txt'\n            recipient = user\n            url =", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       draft = await self.fetch_draft_for_channel(ctx.guild.id, ctx.channel.id)\n        if draft:\n            print(draft.draft_content)\n            return await Utilities._send_embed(ctx.channel, \"\", f\"**", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           ex = Hitbtc('bccbtc')\n        elif name == \"%s_ETH_USD\" % constant.EX_HITBITC:\n            ex = Hitbtc('ethusd')\n        elif name == \"%s_ETH_BTC\" % constant", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is not None:\n                self.add_xsd_type(", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   DummySherpaServer server = new DummySherpaServer(10);\n    try {\n      Solutions solutions = helpExecuteQuery(server, 10);\n      Assert.assertEquals(10, solutions.size());\n      for (Map<String,RDF", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader, getFileAttribute(basedir, elt, AlvisIRConstants.XML_SEARCH_EXPANDER_INDEX_DIR));\n\t\t}\n\t\tresult.setIndex(index);", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   //deviceMiToken = MiPushClient.getInstance().getToken();\n                    //Log.e(MYTAG, \"使用MiPush推送\");\n                    break;\n                }\n                else {\n                    //Log.e(MYTAG, \"M", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n    private final KademliaRoutingTable routingTable;\n    private final KadStatistician statistician;\n\n    private final int udpPort;\n    private final JKademliaNode kadNode;\n\n    private final", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "           tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "       return words_api(wordnik_api, token)\n\n\n\ndef create_app(config):\n    app = Flask(__name__)\n    create_routes(app)\n    return app\n\n\n\nif __name__ == '__main__':\n    create_", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tpublic TaskListByJQLActivity(Context context) {\n\t\tsuper(context);\n\t\tctx = context;\n\t}\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertIsInstance(handle, HANDLE)\n\n    def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False)\n        self.assertIsInstance(handle, HANDLE)\n", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, this.tasks);\n        this.vms = new SpringVms(restTemplate, root);\n        this.jobs = new SpringJobs(restTemplate, root, this.tasks, this.deployments);", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return parserHolder.parse(currentAnnotatedElement.get());\n                })\n                .collect(Collectors.toList());\n        Collection<Element> annotatedElements = new HashSet<>();\n        annotatedElements.addAll(originatingElements);\n        annotatedElements.add", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   protected CrawlerRequest nextRequest;\n\n    protected CrawlerRequest currentRequest;\n\n    protected CrawlerRequest lastRequest;\n\n    protected CrawlerRequest lastRequestWithoutMoveToUrl;\n\n    protected CrawlerRequest lastRequestWithoutMoveToUrlWithout", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           ActionManager actionManager = ActionManager.getInstance();\n            DefaultActionGroup addKeyActionGroup = new DefaultActionGroup(\"AddKeyActionGroup\", true);\n            addKeyActionGroup.add(new AddKeyAction(actionManager, actionPopupGroup));\n            DefaultActionGroup addValueActionGroup", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiButton addChannel;\n    private GuiButton removeChannel;\n    private GuiButton editChannel;\n    private GuiButton removeAll;\n    private GuiButton addAll;\n    private GuiButton removeAll;\n    private GuiButton addAll;\n   ", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_BACK_CODE:\n                return new BtnBackLight();\n            case ConstantStr.FUNC_CLEAR_BACKGROUND_CODE:\n                return new BtnClearBackground", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       Section section = toolkit.createSection(form.getForm(), Section.TITLE_BAR);\r\n        section.setText(Messages.configurationEditorActionAddWebModule);\r\n        section.setExpanded(true);\r\n        section.setLayout(new GridLayout(1, false));", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       self.assertEqual(\"string\", Type.Types.string.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\nNext line of code:\n\n        self.assertEqual(\"string\", Type.Types.string.get_sample())", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "       new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStartTimeCommand.class, SetStartTimeEvent::fromCommand, this::queueEvent));\n        command", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datas", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'api_sig': settings.FLICKR_KEY[1],\n        'perms': 'write',\n        'frob': frob,\n    }\n\n   ", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\tfcpMessage = fcpClient.put(messageStream, insertKey);\n\t\t\t\t\tmessageInsert.log(this, 1, TimeUnit.HOURS, \"Time spent inserting message\");\n\t\t\t\t} catch(FCPException e) {", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       if bytecode[k][2] == OP_POP:\n          cond_stack_size -= 1\n          k -= 1\n          continue\n        elif bytecode[k][2] == OP_PUSH:\n          cond_stack_size += 1\n          k", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   //VIEWS\n    private ScrollView scrollView;\n    private TextView expenseTotalTextView;\n    private TextView expenseTotalTextView2;\n    private TextView expenseTotalTextView3;\n    private TextView expenseTotalTextView4;\n    private TextView expenseTotalTextView5;\n   ", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\n\nclass LanguageForm(forms.ModelForm):\n    \"\"\"\n    Language Form\n    \"\"\"\n    class Meta:\n", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   def parse(self, ping_message: Sequence[str]) -> PingStats:\n        \"\"\"\n        Parse ping command output.\n\n        Args:\n            ping_message (Sequence[str]):\n\n        Returns:\n            PingStats:\n\n        Examples:", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           //trying to get chat with chatId from server\r\n            try {\r\n                chat = MessageTask.getInstance().getChat(chatId);\r\n                // Assuming that the messages are sorted by id\r\n                latestMessageOnDisplay = new AtomicLong(0);\r\n            } catch (", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic static void main(String[] args) {\n\t\tif (args.length > 0) {\n\t\t\tString[] arg = args = args[0].split(\" \");\n\t\t\tif (arg.length > 0) {\n\t\t\t\tif (arg[", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_user(fb_user, person=person)\n    account.authinfo = ':'.join((access_token,))\n    account.save()\n\n    return HttpResponseRedirect(reverse('home'))\n\n\ndef signin_twitter(request", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n        assertThat(qe, is(isBatchStatement()));\n        assertThat(qe, is(isBatch()));\n        assertThat(qe, is(isStatement()));", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     if (serverRawResponse != null) {\n        log(\"server response received, cancelling the upload \" + getFileNames() + \" \" + serverRawResponse, null);\n        successful = true;\n        uploadFinished();\n      }\n    }\n  }\n\n  private", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points_by_ids = merge_greedily(assembly_points_by_sources=assembly_points_by_sources,\n                                                     acyclic=args.c_merging_cw_min > 0,\n                                                    ", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "       PitotTubeResource,\n        \"/aircraft/sensors/pitot_tube\",\n        resource_class_args=(sensors.pitot_tube,)\n    )\n\n    api.add_resource(\n        PressureSensorResource,\n        \"/aircraft", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "                       fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.isInstalled()) {\n\t\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\t\t\tgetString(R.string.delete_levels),\n\t\t\t\t\t\t\t\tgetString(R.string.delete_level", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   protected final WeeklyCaptionProvider<ITEM> weeklyCaptionProvider;\n\n    /**\n     * Calendar component's current locale.\n     */\n    protected Locale locale = Locale.getDefault();\n\n    /**\n     * Calendar component's current locale.\n    ", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n    }\n\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   (signerId, keyId) -> Lists.newArrayList(new RSAPrivateKeyVerifier(keyId, hmacLocator));\n\n    locators = new VerifierProviders(hmacLocator, rsaLocator);\n    locatorsFromRuby = new", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n\n    protected int mItemViewLayoutId;\n    protected int mItemViewType;\n    protected int mItemViewTypeCount", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "               } catch (FilesNotFoundException e) {\n                    assertTrue(true);\n                } catch (FilesException e) {\n                    e.printStackTrace();\n                    fail(e.getMessage());\n                }\n            }\n\t\t} catch (Exception e) {\n\t\t\t", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                   trackHistoryEntry = new TrackHistoryEntry(liveInfo.getTitle(), currentTime, dao);\n                    dao.insert(trackHistoryEntry);\n                }\n            });\n        }\n    }\n\n    @Override\n    public void foundRadioStation(final DataRadioStation", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "   @EFragment(R.id.fragment_container)\n    public static class MainActivityFragment extends Fragment {\n\n        @EFragment(R.id.fragment_container)\n        public static class MainActivityFragment extends Fragment {\n\n            @EFragment(R.id.fragment_container)\n", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       ((CandyBarMainActivity) mContext).selectPosition(3);\r\n                        break;\r\n                    case WALLPAPERS:\r\n                        ((CandyBarMainActivity) mContext).selectPosition(4);\r\n                        break;\r\n                    case OTHER_APPS", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = Default.ENCODING\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = None\n\n    convert_configs = load_convert_config(\n        logger, ctx.obj[Context.CONVERT_CONFIG], subcommand=\"url\"", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "   def _getPlaylistItemID(self, item):\n        \"\"\" Match an item to a playlist item and return the item playlistItemID. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item.", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(TypeError, _environment_to_string, None)\n\n    def test_type_check_for_environment_value(self):\n        self.assertRaises(TypeError, _environment_to_string, None, None)\n\n   ", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   if gopts.interactive:\n      cmd.interactive = True\n\n    if gopts.editor:\n      cmd.editor = gopts.editor\n\n    if gopts.pager:\n      cmd.pager = gopts.pager\n\n    if gopts.", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // 执行完成后，执行任务监听器\n                for (RunnerTaskListener runnerTaskListener : runnerListenerList) {\n                    runnerListenerTask.onTaskFinish(taskData);\n                }\n            } catch (Exception", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       self.assertIsNone(r.match(None, None))\n\n        self.assertIsNone(r.match(None, None, None))\n\n        self.assertIsNone(r.match(None, None, None, None))\n\n        self.assertIsNone(", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //用户的性别\n        stuSex = split[2].replace(\"男\", \"\");\n        //用户的年龄\n        stuAge = split[3].replace(\"年\", \"\");\n        //用户的班级", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "       self.__device = device\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__export_path = export_path\n        self.__is_parse_filter_id = is", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "           state[\"inventory\"] = inv\n        except AttributeError:\n            pass\n\n    def add_stats_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            stats = obj.stats\n            state[\"stats\"]", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": " public Query visit(BasicSearchType n, Query query) {\r\n    return visit(new BasicSearch(n.f0), query);\r\n  }\r\n\r\n  /**\r\n   * f0 -> (BasicSearchType() )+ f1 -> ( Ord4Search() )?\r\n", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t}\n\n\t/**\n\t * Generates the parameters file and the pipeline file.\n\t * @param surveyName : the name of the survey\n\t * @return the parameters file and the pipeline file\n\t * @throws", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       try {\r\n\r\n            if (dataDir == null) {\r\n\r\n                dataDir = DataDirHelper.getDataDir();\r\n\r\n            }\r\n\r\n            if (dataLogDir == null) {\r\n\r\n                dataLogDir = DataDirHelper.getDataLogDir", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "       except UncertainTimeError:\n            log.error(\"We couldn't get a good estimate of the accuracy of your clock.  Switzerland isn't going to work!\")\n            sys.exit(1)\n\n    def get_from_queue(self):\n        # Wait til there", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       cursorById.close();\n\n        // Test the basic content provider query\n        Cursor movieCursor = mContext.getContentResolver().query(\n                MovieColumns.CONTENT_URI,\n                null,\n                null,\n                null,\n                null\n        );\n\n        //", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertEqual(etree_iter_nodes(self.elem),\n                         etree_iter_strings(self.elem))\n        self.assertEqual(etree_iter_nodes(self.elem),\n                         etree_iter_strings(self.elem))\n", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\t\tsetContentView(R.layout.activity_mapview);\r\n\t\t\tmapView = (MapView) findViewById(R.id.map);\r\n\t\t\tmapView.setBuiltInZoomControls(true);\r\n\t\t\tmapView.setSatellite(false", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "           self.switch_configuration.get_vlan(1))\n\n        return ConfigCommandProcessor(self.switch_configuration)\n\n    def get_netconf_protocol(self):\n        return None\n\n    def get_default_ports(self):\n        return [\n            Port", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n\n  assert isinstance(config, NormalRateConfig", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def consultar_numero_sessao(self, numero_sessao):\n        \"\"\"Sobrepõe :meth:`~satcfe.", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   calculate_dict = get_prop_samples(desired_data, constituents)\n\n    calculate_dict = get_prop_samples(desired_data, constituents)\n\n    calculate_dict = get_prop_samples(desired_data, constituents)\n\n   ", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   api.add_resource(FlightControlsResource, \"/fdm/flight_controls\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(AccelerationsResource, \"/fdm/accelerations\",\n                    ", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   def get_word_frequency(self) -> Dict[str, float]:\n        \"\"\"\n        Calculate the relative word frequency across all the texts in the corpus\n\n        Returns\n        -------\n        dict[str, float]\n            Dictionary of words and their relative frequencies\n", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   private static final String EXTRA_CAMERA_FACING = \"cameraFacing\";\n    private static final String EXTRA_CAMERA_FACING_BACK = \"cameraFacingBack\";\n    private static final String EXTRA_CAMER", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final TimeUtil time = new TimeUtil();\n\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\n\tprivate Util() {\n\t}\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       return mongoManager.getServerConfigurations();\n    }\n\n    private MongoTree createTree() {\n        MongoTreeBuilder mongoTreeBuilder = new MongoTreeBuilder(mongoTree);\n        mongoTreeBuilder.setRoot(mongoTree);\n        return mongoTree;\n    }", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1\n\t\tH1(Css.H1, \"TodoMVC\").txt(\"TodoMVC\");\n\n\t\t// Input\n\t\tInput(Css.Input, \"input-next\").txt(\"Next\");\n\n\t\t// Footer\n\t", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               if(output != null) {\n                    if(SAVE_FILE_TO_STORAGE) {\n                        saveImage(output, output);\n                    }\n                    else {\n                        if(imageTaken != null) {\n                            if(imageT", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "   @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        mActivity = (MainActivity) getActivity();\n\n        mRecyclerView = (RecyclerView) getView().findViewById(R.id.song_list);\n", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   search = Search(\n        engine=engine, model=model, index=index, key=key, filter=None, projection=\"all\", consistent=True, forward=False)\n    search.mode = \"query\"\n    search.prepare()\n    search.iterate()\n\n   ", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String gcActivityName)", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "           '/properties':                 RestAppPropertys\n        }\n\n        # Setup the API\n        for r in self.resources:\n            self.api.add_resource(self.resources[r], r)\n\n        # Setup the API version\n        self.api.add", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "       self._tree_view = tree_view\n        self._settings_ini = settings_ini\n        self._tree_view = tree_view\n        self._settings_ini = settings_ini\n        self._tree_view = tree_view\n        self._settings_ini = settings_", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "       MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n        )\n    )\n    group.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n       ", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final static Map<Channel, GuiComponent> CHANNELS = Maps.newHashMap();\n\n    private static final int CHAT_WIDTH = 254;\n    private static final int CHAT_HEIGHT = 202;\n    private static final int CH", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "       void onDateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface DateCellClickListener {\n        /**\n         * Triggered when a date cell was clicked\n         *\n         * @param date\n", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_db_type(self, db_type):\n        self._db_type = db_type\n        return self\n\n    def set_db_type(self, db_type):\n        self", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onPing(client);\n            break;\n        }\n\n        case PONG: {\n            client.getBaseClient().schedulePingTimeout();\n            Namespace namespace = names", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private List<CommitItem> commitItemList = new", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostProcessor[] postProcessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\n\t\tLOGGER.info(\"Creating new pipeline : \" + pipeline.toString());\n\t\t\n\t\treturn new GenerationService(pipeline, preprocessors, postProcess", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<KV<GCPResource, GCPResourceState>>> liveStates =\n        pipeline.apply(\"Read live data\", Read.from(new LiveProjectSource(org)));\n    // Convert live states to GCPResourceState objects.\n    PCollection<KV<G", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "   return MyModel\n\n\n@pytest.fixture\ndef model_model():\n    \"\"\"Return a clean model so each test can mutate the model's Meta\"\"\"\n    class MyModel(BaseModel):\n        class Meta:\n            backups = {\"enabled\": True}\n", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "               self._def_reader = MeanPoolCombiner(def_num_num_input_words,\n                                                      emb_def_dim,\n                                                      dim,\n                                                      vocab,\n                                                      lookup,\n                                                      standalone_", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   // Guarded by _lockObject.\n    private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isTyping;\n    // Guarded by _lockObject.\n    private boolean _isTypingAudiologistInfo;\n    // Guard", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private static final int REQUEST_CODE_VIDEO_CAMERA = 201;\n    private static final int REQUEST_CODE_VIDEO_GALLERY = 202;\n    private static final int REQUEST_CODE_VIDEO_AL", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n\n    RotateOut(RotateOut.class),\n    Rotate", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "       if form.is_valid():\n            form.save()\n            messages.success(request, self.success_message)\n            return redirect(self.get_success_url())\n        else:\n            messages.error(request, self.error_message)\n        return render(", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "   public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setName(fog.name);\n        descriptor.setColor(fog.color.r, fog.color.g, fog.color.b,", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void close()\n\t{\n\t\tif(this.handle != null)\n\t\t{\n\t\t\tthis.handle.close();\n\t\t\tthis.handle = null;\n\t\t}\n\t}\n\t\n\tpublic void closeAllHandles()\n\t{", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorDetailsComponent plusActorDetailsComponent();\n    ActorMoviesComponent plusActorMoviesComponent();\n    ActorInfoComponent plusActorInfoComponent();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tfinal Map<BenchmarkMethod, Integer> vals = benchmark\n\t\t\t\t\t.getNumberOfMethodsAndRuns();\n\t\t\treturn view.initProgressView(vals);\n\t\t} catch (final SocketViewException e) {\n\t\t\tthrow new", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   def get_queryset(self):\n        \"\"\"\n        Get Queryset\n        :return: queryset\n        \"\"\"\n        if self.request.user.is_authenticated():\n            return self.get_queryset_for_user(self.request.user)\n        else", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\t\"Building a wrapper from the given city: \"\n\t\t\t\t\t\t\t\t+ city.getCityName()\n\t\t\t\t\t\t\t\t\t+ \", endpoint_type: \"\n\t", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue creada con éx", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self._cstr = root\n    else:\n      self._cstr = root.rhs\n\n    self._cstr.ast = self.tree\n\n  def __repr__(self):\n    return 'Constraint(%s)' % self.tree\n\n\n\n\n\n\n", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<MessageAction>        messageActionSupportHandler          = new ActionSupportHandler<MessageAction>(MessageAction.class", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [1023])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [123456", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('xs:double?', 'xs:string', 'xs:string?', 'xs:string')))\ndef evaluate_format_number_function(self,", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item is None:\n\t\t\t\treturn default_flags\n\t\t\telse:\n\t\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\tprint(str(e))\n", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       array.items = [object1, object2, object3]\n\n        response = Hydrator(version1, versions, []).hydrate_object(object_dto, object)\n        response = Hydrator(version2, versions, []).hydrate", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "       PipeBundle pipeBundle = new PipeBundle();\n        PipeReader pipeReader = new PipeReader(pipeBundle, clientConfig, catBytes);\n        Pipe pipe = pipeBundle.getPipe();\n        pipe.setLatency(1000);\n        pipe", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UN", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "       containsString(\"\\\"_source\\\":{\\\"csw_record_id\\\":{\\\"@type\\\":\\\"http://www.csw.org/ns/1.1/record/identifier#csw_record_id\\\",\\\"value\\\":\\\"csw-record-1\\\"}}\"));\n   ", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "           (True, PubKeyAlgorithm.FormerlyElGamalEncrypt): ElGPub,\n            (True, PubKeyAlgorithm.RSAEncrypt): RSAPub,\n            (True, PubKeyAlgorithm.RSAEncrypt): RSAPub,\n", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\n\t", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = Schema.get(\n                            new ExtMap().mput(\n                                Schema.InvokeKeys.ENTITY,\n                                context.get(Schema.InvokeKeys.ENTITY, ExtUUID.class)\n                            ).mput(\n                                Schema", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new-user'),\n    url(r'^users/edit/(?P<pk>[-\\w]+)/$', edit", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           if (stack.getNumberOfCards() > 100) {\n                                stack.shuffle();\n                            }\n                        }\n                    }\n                });\n                dialogFragment.show();\n            }\n        }\n    }\n\n    private void start", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_mentality_health);\n        initView();\n        initData();\n        initListener();\n    }\n\n    private void initView", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateBuffImg()\n        obj.updateBlockLabel()\n        obj.updateCommentLabel()\n        obj.updateSocketTags()\n        obj.updateSocketLabels()\n        obj.updateBlockShape()\n        obj.updateBlockWidget()\n        obj.updateCollapse", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "       f = Difference(XorDiff(d1, d2))\n        beta = Constant(0, DP_WIDTH)\n\n        i, j = self._find_preimage(f, beta)\n        assert i == d1.val\n        assert j == d2.", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transform(Node node);\n\t}\n\t\n\tprivate static class FlattenTransformer implements NodeTransformer {\n\t\tpublic Node transformConstant(ConstantNode node) {\n\t\t\treturn node.getTOr(new ConstantNode(node.getData()));", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\t// Add the listeners\n\t\tgetServer().getPluginManager().registerEvents(playerListener, this);\n\t\tgetServer().getPluginManager().registerEvents(blockListener, this);\n\t\t\n\t\t\t// Register the commands\n\t\tgetCommand(\"help\").setExecutor", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       String challenge = PacketParserUtils.parseChallenge(doc);\n        if (challenge == null) {\n            throw new IOException(\"Challenge element is null\");\n        }\n        connection.sendChallenge(challenge);\n    }\n\n    private void parseSuccess(Element doc", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\n\n\n\nclass TestCipher(unittest.TestCase):\n\n    def setUp(self):\n        self.cipher = None\n        self.cipher_key = None\n        self.cipher_key_schedule = None\n        self.cipher_enc", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private SongListAdapter mAdapter;\n\n    private Toolbar mToolbar;\n\n    private FastScroller mFastScroller;\n\n    private boolean mShowToolbar;\n\n    private boolean mShowFastScroller;\n\n    private boolean mShowPlaylistPicker;", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           if (mImmersiveSensorNavigation == null) {\n                mImmersiveSensorNavigation = new ImmersiveSensorNavigation(mActivity, mParameterListView);\n            }\n            if (mImmersiveTouchNavigation == null) {\n                mImmersiveTouchNavigation", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       Bit('ESM_Cause', ReprName='ESM Cause', Pt=4, BitLen=4,\n            Dict=ESMCause_dict, Repr='hum'),\n        Bit('ESM_Transaction_ID', ReprName='ESM Transaction ID", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           mArtist.setAlbumName(mArtist.getAlbumName().replaceAll(\"\\\\s+\", \" \"));\n            mArtist.setAlbumName(mArtist.getAlbumName().replaceAll(\"\\\\s+\", \" \"));\n            mArtist", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "       self.log_debug(f\"Finished walking through {self.corpus_directory}\")\n        self.log_debug(f\"Found {len(self.files)} files\")\n        self.log_debug(f\"Parsed {self.num_jobs} jobs in", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\t@Override\n\t\tpublic boolean addRemittUser(UserDTO user) {\n\t\t\treturn UserManagement.addUser(user);\n\t\t}\n\n\t@POST\n\t@Path(\"listusers\")\n\t@Produces(\"application/json\")\n\t@Override", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiInfo> apiInfo(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns information about the API plan belonging to the given API key.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-info\")", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   @Override public void visit(LogMessage message) {\n      if (message.isError()) {\n        logger.log(WARNING, message.getMessage());\n      } else {\n        logger.log(message.getLevel().getLevel(), message.getMessage());\n      }\n    }", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   \"\"\"\n    >>> from audiolazy import erb\n    >>> erb.glasberg_moore_slaney_example(freq, bandwidth)\n    \"\"\"\n    pass\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "   if is_undefined_length:\n        # If we hit the end of the file, we'll have to read the bytes\n        # and convert them to a Dataset\n        seq = read_sequence_item(fp, is_implicit_VR, is_little_end", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   try {\n      for (ICommentProcessor commentProcessor : this.commentProcessors) {\n        if (commentProcessor != null) {\n          CoordinatesWalker walker = new BaseCoordinatesWalker(document) {\n            @Override\n            protected void onParagraph(Par", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   @Override\n    protected void loadDataFromNetwork() throws Exception {\n        if (searchCriteriaList.isEmpty()) {\n            return;\n        }\n        final SearchPatternsRequest request = new SearchPatternsRequest(getActivity(), prefs, searchCriteriaList, page, pageSize", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   @flags.register(NotationDataFlags)\n    def flags_int(self, val):\n        self._flags = NotationDataFlags(val)\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags =", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "       self.chum.sendMessage(serverMsg)\n        self.chum.chumopen = self.chumopen\n        self.chum.chum = self.chum\n        self.chumopen = self.chumopen\n        self.chum = self.", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "def check_string(arg, type_, env):\n    arg = check(arg, env)\n    with env.errors.location(arg.location):\n        unify(arg.__type__, type_)\n    return arg\n\n\ndef check_int(arg, type_, env):", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   if features is None:\n        features = {}\n\n    # TODO: we should be able to use the same model for all phases, but we don't have the data for that yet\n    # TODO: we should also be able to use the same model for all phases, but we don'", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "   private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n        ExoPlayerLogger.i(Constants.FSMPLAYER_TESTING, \"pausePlayerAndS", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            TemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type ==", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds);\n\n    @GET(\"suggest\")Next line of code:\n\n    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds);\n", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       stream = Stream(model=model, engine=self)\n        stream.coordinator.move_to(position)\n        return stream\n\n    def validate(self, model_or_index, condition=None, update=False):\n        \"\"\"Validate a model or index.\n", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "       self.log.info(\"confusion matrix:\")\n        self.log.info(ConfusionMatrixFormatter(confusion_matrix))\n\n        self.log.info(\"accuracy: %2.2f%% (+/- %2.2f%%)\" % (100 *", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\t@Autowired\n\tprivate SubmissionServices submissionServices;\n\t@Autowired\n\tprivate ChallengeServices challengeServices;\n\t@Autowired\n\tprivate CategoryServices categoryServices;\n\t@Autowired\n\tprivate CountryServices countryServices;\n\t@Autowired\n\tprivate BannedIp", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def __init__(self, graph, **kwargs):\n        self.graph = graph\n        self.strict = kwargs.get('strict', True)\n        self.props_from_db = kwargs.get('props_from_db', lambda x: x)\n       ", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "   def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences as input, and is initialized with the final state of the\n        encoder RNN.\n\n       ", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nall_product_slugs = []\nNext line of code:\nfor product in Product.objects.all():\n    all_product_slugs.append(product", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorSegmentNode", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static Head head(Attribute... attributes) {\n\t\treturn new Head(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final AbstractTabularComponent.Alignment alignment = benchRes.getAlignment();\n        final AbstractTabularComponent.Alignment[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]\n               ", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     for node in self._graph.nodes():\n        if node.kind == ControlFlow.N_LOOP:\n          loop = node\n          while loop.kind == ControlFlow.N_LOOP:\n            loop = loop.data.parent\n          if loop.kind == ControlFlow.", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "   from .xpath30_helpers import UNICODE_DIGIT_PATTERN, DECIMAL_DIGIT_PATTERN, \\\n    MODIFIER_PATTERN, decimal_to_string, int_to_roman,", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   else if (Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type)) {\n                        Log.e(LOG_TAG, \"Updating room member.\");\n                        RoomState roomState = JsonUtils.toRoomState(event.content", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\t// PostProcessing\n\t\n\tprivate NoopPostprocessor noopPostprocessor = new NoopPostprocessor();\n\t\n", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationEtatsPresenceMensuel(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "           H += dot(crossmat(c - p), m * J_rot) + dot(crossmat(c - p), m * H_rot)\n\n            H += dot(crossmat(c - p), m * J_rot) + dot(crossmat(c - p),", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       if (queuedProjectResult == null) {\n            return;\n        }\n\n        if (queuedProjectResult.getQueuedProject() == null) {\n            return;\n        }\n\n        QueuedProject queuedProject = queuedProjectResult.getQueuedProject();", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "               new VirtualAddCommand(),\n                new VirtualRemoveCommand(),\n                new VirtualPayCommand(),\n                new VirtualSetCommand(),\n                new VirtualEconCommand(),\n                new VirtualBalanceCommand(),\n                new VirtualPayVirtualCommand(),\n                new VirtualRemoveCommand(),\n                new VirtualSetCommand", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "       if prior['name'] == 'zero':\n            _log.info('Initializing a zero prior for the parameters.')\n            prior = {'name': 'zero', 'prior': np.zeros(len(params))}\n        else:\n            _log.info('Initializing", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const(data=arg)\n    elif op == LOAD_REF:\n      return Ref(data=arg)\n  elif op == LOAD_EXPR:\n    return Expr(data=arg)\n  elif op == LOAD_ATTR:\n    return Ref(", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final SpriteBatch batch;\n\tprivate final Physics physics;\n\tprivate final FringeLayer fringeLayer;\n\tprivate final PingPongEq pingPongEq;\n\tprivate final Config config;\n\n\tprivate final ControllerPlayer player;\n\n\tprivate final EntityParser parser", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tview", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass, SQLQuery rootQuery) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t\tthis.rootQuery = rootQuery;\n\t}\nNext line of code:\n\n\tpublic SQLBatch(", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       # 获取 app_info 中的包名\n        packagename = app_info['packagename']\n        # 获取 app_info 中的主活动\n        mainactivity = app_info['mainactivity']\n        # 获取 app_info ", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "   Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return genotypes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genotypes\n    ", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n            ]),\n            Symbol.typed(bar_type, 'bar'),\n        ]),\n        {'inc': inc_type},\n    )\n\n\ndef test_get():\n    inc_type = Func[[", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, prepared());\n        assertThat(pe, batchPrepared());\n        assertThat(pe, prepared", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\t\tif type(selection[0]) is CalcSheetAnalysis:\n\t\t\t\tself._viewWidget.set_calc_sheet_sheet_analysis_view(selection[0])\n\t\t\t\tself._properties_dock.set_item(selection[0])\n", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return cause;\n            }\n        };\n        _config = config;\n        mAdapter = new RestAdapter.Builder()\n", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(Token.class, new DefaultTokenRenderer());\r\n\t\tregisterRenderer(String.class, new DefaultStringRenderer());\r\n\t\tregisterRenderer(Locale.class, new DefaultLocale", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSubQueryType getFacetSubQueryType(SearchConfig search, Element elt) throws SearchConfigException", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<ci_pipeline_uuid>[\\w\\-]+)/(?P<package_name>[\\w\\-\\+]+)$',\n        PipelineHistoryView.as_view(), name=\"pipeline-history\"),\n    url(r'^(?P", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       if (bitmap != null) {\r\n                            intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        }\r\n                        intent.putExtra(Extras.EXTRA_NAME, mWallpapers.get(position).getName());\r\n                       ", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   account = account_for_vimeo_id(access_token.token['user_id'], person=person)\n\n    if not request.user.is_anonymous():\n        person = request.user.person\n    account = account_for_vimeo_id(access", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                #   (use a test pixel sum)\n                #   (use a test pixel sum)\n                #   (use a test pixel sum)\n                #   (use a test pixel sum)\n               ", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   # Generate grid of values for parameters (force to be equal length)\n    grid = _gen_grid(options['param_free'], options['density'])\n\n    # Generate grid of values for parameters (force to be equal length)\n    grid = _gen_grid(options", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollDices();\n          }\n      }\n    });\n    addActor(rollBtn);\n\n    doubleBtn = new TextButton(\"Double\", ts);\n    doubleBtn.addListener(new ClickListener() {\n      @Override\n      public void clicked(", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "       for path, child in etree_iter_paths(root):\n            self.assertEqual(path, 'a/b1/c1')\n            self.assertEqual(child, 'c1')\n            self.assertEqual(child.text, 'a comment')\n            self", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "   def test_detect_soft404_with_tail_lookup(self):\n        self.rule.tail_lookup = True\n        self.rule.tail_pattern = \"\\\\d{3}\"\n        self.rule.tail_chars = \"01234", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n           ", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "   List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a profile.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a profile\n     */\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           this.client.sendRequest(req);\n            \n            // 5. Get the response\n            final EtsiResponse resp = this.client.getResponse(apTransId);\n            \n            // 6. Get the SignatureProfile\n            final ProfileQueryResponse profileQueryResponse = this", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate TeamLeaders teamLeaders;\n\tprivate TeamLeadersResponse teamLeadersResponse;\n\tprivate TeamScheduleResponse teamScheduleResponse;\n\tprivate TeamRosterResponse teamRosterResponse;\n\tprivate TeamSummaryResponse teamSummaryResponse;\n\tprivate Game game", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       if (userFeedback.isValid()) {\n            FeedbackUseCase.Companion.getInstance().sendFeedback(userFeedback,\n                    new Function0<Unit>() {\n                        @Override\n                        public Unit invoke() {\n                            onSuccess();\n                ", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           if key not in table_index:\n                table_index[key] = {}\n            if key not in table_index[table_name]:\n                table_index[table_name][key] = {}\n            if key not in table_index[table_name][table_name", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               art = draw_art(key['fingerprint'])\n                print('{0} {1} {2}'.format(fingerprint, description, art))\n            else:\n                print('{0} {1}'.format(fingerprint, description))\n\n    async", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "       return RespostaExtrairLogs.analisar(retorno)\n\n    def atualizar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.base.FuncoesSAT.atualizar_sat`.", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(ElementTree.XML(self.elem)),\n                         self.elem.getroot().attrib.get('xmlns'))\n        self.assertIsNone(node_document_uri(self.elem))\n        self.assertIsNone(", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:Next line of code:\n\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n               ", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   def _trainer_initialization(self) -> None:\n        \"\"\"\n        Initialize the trainer\n\n        Parameters\n        ----------\n        None\n        \"\"\"\n        self.logger.info(f\"Initializing training for {self.identifier}...\")\n        self.", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final OkHttpClient httpClient;\n\n    private final Builder builder;\n\n    private final SessionData sessionData;\n\n    private final List<OAuth2Guild> guilds;\n\n    private final List<OAuth2User> users;\n\n    private final", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n    private final Jobs jobs;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "   public void setAudiologistInfo(AudiologistInfo audiologistInfo)\n    {\n        synchronized (_lockObject)\n        {\n            if (_state.getConnectionState() != FittingConnectionState.NOT_CONNECTED)\n            {\n                throw new IllegalState", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand( getClientManager() );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand( getClientManager() );\n   ", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    public void onMouseClick(GuiMouseEvent event) {\n        if (event.getButton() == 0) {\n            if (event.getButtonTime() > 0) {\n                TabbyChat.getTabbyChat().getChatBox().", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       DATA[looptest][looppc], EPSILON, FiniteDifferenceSchemes.BACKWARD);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new black", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class,\n            AthenaGM.class\n    };\n\n\n    /**\n     * Load all modules, registering their event listeners\n     */\n    public static void load() {\n        for (Class moduleClass : moduleClasses) {\n            try {\n               ", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    */\n    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize thread pool size.\n     * @return {@link DownloadQueue}.\n", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " @Override\n  public void init(MutableConfig config) {\n    config.derive(ProConf.class, rawValues(Metadata::moduleName), rawValues(Metadata::version), rawValues(Metadata::mainClass));\n    config.derive(ProConf.class, rawValues(", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    * @throws JMingoParserException {@link JMingoParserException}\n     */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {\n        Validate.notNull(element, \"parseQuerySetConfigTag::element cannot be null", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "                       ExeSQL(sql)\n                        # print('update status done: ',S['status'])\n                        # print('update done: ',S['status'])\n                        # print('update done: ',S['status'])\n                        # print('update done: ',S['status", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "           left_foot_task = ContactTask(\n                self.robot, self.robot.left_foot, self.cur_stance.left_foot,\n                weight=contact_weight)\n\n        if self.cur_stance.right_foot is not None:\n", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\n\n\n\ndef test_bitvector_operation():\n    \"\"\"Test the operation module.\"\"\"\n    for op in simple_op:\n        for size in range(MIN_SIZE, MAX_SIZE):\n            for x in range(1, size):\n                for y in range(1", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP14Segment(aJPEG.mICCProfile).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew APP0Segment(aJPEG).encode(aOutput).log(aLog);\n\n\t", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           if (type == HibiscusExportType.SAMMEL) {\n                if (prenotIds.isEmpty()) {\n                    logger.log(Level.INFO, \"Keine Prenotifications erzeugt\");\n                } else if (prenotIds.size", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "\n\n\n\n\ndef generate_pronunciations_arguments(\n    log_path: str,\n    dictionaries: List[str],\n    text_int_paths: Dict[str, str],\n    word_boundary_paths: Dict[str, str],\n", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       ItemStack itemStack = new ItemStack(ItemLorePage.item);\n        ItemLorePage.setLore(itemStack, LoreKey.fromLore(LoreLoader.getLore(category, ident)));\n\n        entityPlayer.addItemStackToInventory(", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private final BudgetDAO budgetDAO;\n    private final CategoryDAO categoryDAO;\n    private final TransactionDAO transactionDAO;\n    private final RecurringDAO recurringDAO;\n    private final UserDAO userDAO;\n    private final", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\n\n\tprivate static final String[] EMPTY_STRING_ARRAY = new String[0];\n\n\tprivate static final String[] EMPTY_STRING_ARRAY_2 = new String[0];\n", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInY", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if issubclass(bvf_cipher, Cipher):\n        problem = SearchRkCh(ch, key_der_der_mode=der_mode, enc_der_mode=", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "       return H()\n\n    def test_hosts_container_init(self):\n        \"\"\"\n        Test that the HostsContainer can be instantiated with a list of\n        hosts.\n        \"\"\"\n        hc = HostsContainer(hosts=[LocalHost1, LocalHost2, Local", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           if command.startswith(\"{:s} {:s}\".format(get_tc_base_command(subcommand), \"change\")):\n                return True\n\n            return False\n\n        return [\n            command\n            for command in self.tc_command_output.command_list", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    * @return a List of Expenses\n     */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(30) == [0] * 30\n\n  def test_inf_input(self):\n    my_stream = white_noise", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               isinstance(t2, RecordMeta)\n            ):\n                t1.__instance__ = Record[field_refs(backref, t2.__items__)]\n                unify(t1, t2, backref)\n            else:\n                raise\n\n    elif isinstance(", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       host,\n        client_id,\n        account_id,\n        token,\n        region_id,\n        refresh_token,\n        refresh_token_expires,\n        refresh_token_expires_time,\n        refresh_token_expires_time,\n       ", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     self._log.error('Serialization error: %s' % ex)\n      self._SendDiscardMessage(msg.properties)\n      return\n\n    self._varz.message_bytes_sent()\n    self._SendMessage(buf, sink_stack, msg.properties)", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       ThreadDumpRuntime runtime = ThreadDumpFactory.parse(new ByteArrayInputStream(out.toString().getBytes(\"UTF-8\")));\n        assertThat(runtime.getThreads().size(), equalTo(1));\n        assertThat(runtime.getThreads().get(0).", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data, DrumOperation.APPEND_UPDATE);\n    }\n\n    @Test\n    void testAppendUpdate() throws Exception {\n        try (SimpleDataStore<PLDTestData> dataStore = new SimpleDataStoreImpl<>(this.test", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaPropertiesMockBuilder()\n                .withBusiness(new RoxanaBusinessMockBuilder()\n                        .withResponseStrategy(ResponseStrategy.RETURN_ERROR)\n                        .build())\n                .build();\n    }\n\n    private ResponseProcessorManager", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._SendMessage(self._ping_msg)\n\n  def _SendMessage(self, msg):\n    \"\"\"Constructs and sends a message.\"\"\"\n    self._log.debug('Sending message.')\n    self._SendMessage(msg)\n\n  def _Send", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert freq2lag(v) == lag2freq(v)\n\n\nclass TestCached(object):\n  @p(\"data\", [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  def", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "       self.spell_helper = SpellHelper(self.utilities)\n        self.guild_config_manager = GlobalConfigCache(self.bot)\n        self.guild_config_manager.load_guild_config()\n        self.guild_config_manager", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   if operands[0] == operands[1]:\n        return True\n    elif operands[0] != operands[1]:\n        return False\n    else:\n        return True\n\n\n@method('eq')\n@method('ne')\n@method('lt')\n", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(mCallbacks.getResources().getString(R.string.app_name));\n\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEvents.add(new Event(R.drawable.ic", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Create a new chat activity\n            InviteToChatFragment fragment = (InviteToChatFragment) getActivity().getFragmentManager().findFragmentById(R.id.inviteToChat_fragment);\n            if (null != fragment) {\n                fragment.updateChat", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n\n        Assert.assertNotNull(response);\n        Assert.assertNotNull(response.getAppId());\n        Assert.assertNotNull(response.getMchId());\n        Assert.assertNotNull", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       List<Parameter> parameters = creator.createParameters();\n\n        assertNotNull(parameters);\n        assertEquals(2, parameters.size());\n        assertEquals(STRING_PARAMETER_NAME_01, parameters.get(0).getName());\n        assertEquals(STRING_", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "   public int readSmallIntValue(int d1) throws IOException {\n\t\tint d2 = in.read1();\n\t\tint d3 = in.read1();\n\t\tint d4 = in.read1();\n\t\tint d5 = in.read1();", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "       self.quota = quota.Quotas(self)\n        self.mgmt_clusters = mgmt_clusters.MgmtClusters(self)\n        self.mgmt_flavors = mgmt_flavors.", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "           AlpineLinuxPingParser,\n            MacOsPingParser,\n            NullPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class(self.__timezone)\n                break\n           ", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "           if (Integer.parseInt(m.videoSetFrameRate.getText()) < 1)// set minimum\r\n            // to 1\r\n            {\r\n                JOptionPane.showMessageDialog(null, \"Frame rate must be greater than 1\");\r\n                return;\r\n            }\r\n", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self._probe = _probe_adjacency_list(probe)\n        else:\n            self._probe = None\n        self._probe_adjacency_list = None\n        self._probe_adjacency_list = None\n        self._pro", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "     self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self):\n    \"\"\"\n      Analyzes the bytecode and creates the CFG.\n    \"\"\"\n    self._decl = None\n    self._blocks = []\n", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       IntentIntegrator integrator = new IntentIntegrator(this.getActivity().getApplicationContext());\n        integrator.initiateScan();\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": " public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    if ((inExp.getValue() == null)\n        || (inExp.getValue() instanceof Nullable)\n        && ((Nullable) inExp.getValue()).", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile baseFile = new File(basePath);\n\t\t\tFile targetFile = new File(basePath + \"/target\");\n\t\t\tFile generatedFile = new File(basePath + \"/generated\");\n\n\t\t\tAssertions.assertTrue(generatedFile.exists());\n", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "           np.allclose(\n                DiscreteDistribution(\n                    np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]),", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptString(final StringTag tag, final CharSequence value) {\n\t\tif (tag == null) {\n\t\t\tthrow new InvalidValueException(\"tag is null\");\n\t\t}\n\t\tif (value == null) {\n\t\t\tthrow new InvalidValueException", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "   def test_determine_date_of_birth(self):\n        self.assertEqual(\"2016-09-14\", determine_date_of_birth(dob_string=\"2016-09-14\", language=\"English\"))\n", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expectLastCall().andReturn(GIVEN_STRING);\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "       if rem > 0:\n            self.append(Bit('%s' % self.rest_name, BitLen=rem))\n            self.append(Bit('%s' % self.rest_name, BitLen=rem))\n            self.append(Bit('%s'", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "       # noinspection PyProtectedMember\n        model.Meta.table_name = self._compute_table_name(model)\n        model.Meta.table_name = self._compute_table_name(model)\n        model.Meta.table_name = self._compute_", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "       return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def atualizar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.atualizar", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   with pytest.raises(TypeError):\n        engine.bind(User)\n\n\ndef test_bind_model_with_no_hash_key(engine):\n    \"\"\"Can't bind models that don't have a hash_key\"\"\"\nNext line of code:", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass_sun_kg\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"m**2/s**-2\")\n    assert u7.dimensions == energy\n", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "                ',\"root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"\"'],\n      'rc': 0,\n      'test': 'linesnows'},\n     ASSOC_MOCK_FILE, OK],\n\n    ['Verify instance command references", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load modules\n        List<Module> modules = new ArrayList<>();\n        modules.add(new SqlModule());\n        modules.add(new LoanModule());\n        modules.add(new CurrencyRegistryModule());\n        modules.add(new CurrencyService());\n        modules.add", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       ckresult(\n            getattr(_dll, self._get_func)(\n                self._sptr, index, name\n            )\n        )\n        return TAG(self._sptr, self._get_func, self._sptr, name)\n\n    def get_", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void startNewOrderActivity(Account account) {\n                        startActivity(EditActivity.newIntent(MainActivity.this, account.getId()));\n                    }\n\n                    @Override\n                    public void startSettingsActivity() {\n                        startActivity", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], ", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.age[3]\n    value = 3\n    expected_ref = \":v0[3]\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0[3]\": expected_action.value}", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           Alert alert = new Alert(AlertType.ERROR, \"Error requesting daemon:\\n\" + e.getDump().getStacktrace(), ButtonType.OK);\r\n            alert.showAndWait();\r\n            return false;\r\n        }\r\n        \r\n        if (result.getError", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "           if nodes.filter(user=request.user).count() == 0:\n                comments = nodes\n            else:\n                comments = nodes.filter(user=request.user)\n        else:\n            comments = nodes\n        comments = comments\n        comments = comments.order_by", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of gifs based on a query term\n     *\n     * @param serviceIds a {@link Map} of a collection of ids for", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::success);\n            of(mConnectionWpsListener).ifPresent(ConnectionWpsListener::isSuccessful);\n            of(mConnectionWpsListener).ifPresent(ConnectionWpsListener::isSuccessful);", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "       for (PlaySession playSession : stack.getPlaySessionList()) {\n            playSession.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card :", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "   def __init__(self, args: SegmentVadArguments):\n        self.vad_path = args.vad_path\n        self.segmentation_options = args.segmentation_options\n\n    def run(self):\n        \"\"\"Run the function\"\"\"\n\n       ", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Deployments deployments;\n    private final Vms vms;\n    private final Tasks tasks;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag), name)\n        return tag\n\n    def get_tag_list(self, index, name=None):\n        \"\"\"Retrieve a list of metadata tags.\n\n        '", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "               section.value,\n                section.nbits,\n                section.name,\n                section.type,\n                section.value,\n                section.decoded_values_all_subsets,\n                section.decoded_values_subsets,\n                section.decoded_values", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = ReportAbuseForm(request.POST)\n\n        if form.is_valid():\n            abuse_report = form.save(\n                logged_against=logged_against,\n                logged_by=logged_by,\n                moderator=", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   @Override\n    public void output(final AbstractResult paramResult) {\n        if (paramResult instanceof BenchmarkResult) {\n            final BenchmarkResult benchmarkResult = (BenchmarkResult) paramResult;\n            final AbstractMeter meter = benchmarkResult.getMeter();\n            final Method", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       // Checking PhyML binary\n        if (!PhyMLv3.checkBinary())\n        {\n        \tfinalize(1);\n        }\n\n        // Checking PhyML binary\n        if (!PhyMLv3.checkBinary())\n        {\n        \t", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(URL(\"http://www.example.com/record.mp3\"), true);\n\t\tNext line of code:\n\n\t\ttropo.record(URL(\"http://www.example.com/record.mp3\"), true, true);\n\t", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "       listaDeRespostas.getPropriedades().getEstado() == \n                EstadoDaListaDeRespostas.SALVA && listaDeRespostas.getPropriedades().getEstado() == \n                EstadoDaListaDeRespostas.SALVA", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onReceive(byte[] response) {\n\t\t\t\t\tString json = new String(response, \"UTF-8\");\n\t\t\t\tProgramManager.getInstance().parseTrack(json);\n\t\t\t\tmHandler.obtainMessage(200).send", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Mock\n    MediaModel adMedia2;\n\n    @Mock\n    MediaModel adMedia3;\n\n    @Mock\n    MediaModel adMedia4;\n\n    @Mock\n    MediaModel adMedia5;\n\n    @Mock\n    MediaModel adMedia6;\n", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tstage.close();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error occurred while initializing the drive\", e);\n\t\t\tPlatform.exit() ;\n\t\t}\n\t\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String className = adapterName(type.getSimpleName().toString());\n    String superclass = getApplicationSupertype(type);\n    String companionClassName = className + INJECT_ADAPTER_SUFFIX;\n\n    JavaFile javaFile = processingEnv.getFiler().createSource", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        /**\r\n         * 打开/关闭通知栏通知\r\n         * @param enable 打开/关闭\r\n         */\r", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), CNavMessage)\n\n\ndef test_parameters_msgtype3():\n  '''\n  Zero+One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n     ", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   if is_comment_node(elem):\n        return f'/comment()[{context.position}]'\n\n    if is_schema_node(elem):\n        return f'/schema-element()[{context.position}]'\n\n    if is_element_node(elem):", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\n    def dropnan(self):\n        \"\"\"\n        Drops the NaN values from the table\n        \"\"\"\n        drop", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n            else\n            {\n                Log.w(TAG, String.format(\"Unhandled message type: %s\", message.getType()));\n           ", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tif opts.surfaceinputfolder:\n\t\t\tsave_temporary_files('mediation', modality_type = surface,\n\t\t\t\tall_vertex = all_vertex,\n\t\t\t\tnum_vertex_lh = num_vertex", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n    }\n\n    @Test\n    public void busyWaiting_sut_thread() {\n        ThreadDumpThread main = sut.thread(\"main\");\n        assertThat(main.", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               // 2000~2050年之间的时间\n                Calendar calendar = Calendar.getInstance();\n                calendar.set(2000, 0, 1);\n                calendar.set(2050, 12, 31);\n", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n    private SetOtherFragment setOtherFragment;\n    private SetOtherFragment setOtherFragment;\n    private SetOtherFragment setOtherFragment;\n    private SetOtherFragment setOtherFragment;\n    private SetOtherFragment setOtherFragment;\n    private SetOther", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.sniffer = Sniffer.Sniffer(self)\n        self.sniffer.init_logging()\n        self.sniffer.set_sniffer_error_handler(self.sniffer_error_error_handler)\n        self.sniffer.set_sniffer", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       return RestfulModelCollection(Webhook, self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    @property\n    def outbox(self):\n        return Outbox(self)\n\n    @property\n    def api_account", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       // TODO(jontayler): figure out why we need to do this here.\n        //\n        // We need to do this here because we need to set the\n        // light level before we set the sky view.\n        //\n        // TODO(jontayler): figure out", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_ther", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('Identity', Pt=Identity(), Len=8),\r\n            ] if with_options else [])\r\n\r\n\r\n################\r\n# TS 24.008, section 9.2.13 #\r\n# Mobility Management    #\r", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       TcClassParser(self.__con).parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_device(self, device):\n        self.__device_parser.", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "       result, index = apply_fast_eq(left.values, right.values,\n                                        left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   def test_validaton_error_decorator_transforms_SwaggerMappingError():\n        fake_validator_map = mock.Mock(\n            spec=ValidatorMap,\n            query=build_mock_validator({'int': 'integer', 'float': 'float'}),", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
